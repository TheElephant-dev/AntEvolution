//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Ant Evolution Development Map
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "LibBB3FD6C6"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libBB3FD6C6_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_mapSize = 76;
const int gv_currentRankedVersion = 3;
const int gv_aIProfile_ProfileCount = 4;
const string gv_playerStats = "PlayerStats";
const string gv_controlGroupConfig = "ControlGroupConfig";
const int gv_x = 0;
const int gv_y = 1;
const int gv_iD = 2;
const int gv_activeDirt = 3;
const int gv_farmUpgraded = 4;
const int gv_nestRespawnCount = 6;
const int gv_subterraneanTrailUpgraded = 5;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
unit[11] gv_gateLock;
unit[11] gv_gate;
unit[7] gv_endgameVisionUnitofplayer;
bool[7] gv_playerChoseToWatchthegame;
bool[7] gv_playerDefeated;
int[7] gv_amountofVisionrequestsclickedbyplayerhaveleft;
bool[7][7] gv_playerSharedhisvisionwithPlayer;
playergroup gv_defeatedPlayersPlayerGruop;
int gv_loadingBarMax;
int gv_loadingBarProgression;
int gv_ingameLoadingBarDialog;
int gv_ingameLoadingBarDialogItem;
int gv_ingameLoadingBarDialogItemFrame;
bool gv_initializationDone;
text gv_initializationStage;
int gv_amountofplayersthegamestartedwith;
bool gv_filterOutDynamicMaps;
bool gv_gamehasAIinit;
bool[7] gv_thisPlayerIsAnAI;
bool gv_useMapPriority;
int[101] gv_chanceOfmapToGenerateonrandom;
int gv_MapGen;
region gv_nEMapCorner;
region gv_nWMapCorner;
region gv_sWMapCorner;
region gv_sEMapCorner;
region gv_nEMapCornerRespawn;
region gv_nWMapCornerRespawn;
region gv_sWMapCornerRespawn;
region gv_sEMapCornerRespawn;
fixed gv_groundTextureRed;
fixed gv_groundTextureGreen;
fixed gv_groundTextureBlue;
string gv_groundTextureActor;
int gv_clearCircleCount;
point[201] gv_clearCircles;
int[gv_mapSize + 1][gv_mapSize + 1] gv_dirtMap;
int[gv_mapSize + 1][gv_mapSize + 1] gv_clearMap;
bool gv_usingInvertedMapLayout;
region gv_foodSpawningRegion;
string gv_mapPool;
unitgroup gv_externalDirt;
bool gv_afilteredMapgenwasfound;
playergroup[7] gv_playerSpawnTeam;
point[7] gv_possibleSpawnPoint;
point gv_absoluteCenterpoint;
region gv_pond;
unitgroup[4] gv_gateUnitsToRemoveUponChamge;
string gv_gatesOrientation;
unit[4] gv_gateUnit;
unit[4][3] gv_gateStateSplatIndecator;
bool[4] gv_isThisgateOpen;
timer gv_gatesTimer;
int gv_gatesTimerWindow;
int gv_amountOfTimesGateTimerRan;
unitgroup gv_horizontalPillerLocks;
unitgroup gv_verticalPillerLocks;
int gv_amountOfTimesPilllersTimerRan;
unitgroup gv_horizontalPillerBuildingBlockers;
unitgroup gv_verticalPillerBuildingBlocker;
region gv_verticalLinesRegion;
region gv_horizontalLinesRegion;
timer gv_pillersGenTimer;
int gv_pillersGenTimerWindow;
bool gv_lastOnewasHorizontal;
unit[46] gv_clockHandUnit;
actor[46] gv_clockHandModel;
int gv_sidewaysStripes;
bool gv_hexVerMid;
bool[7] gv_deselectedPillarController;
unitgroup gv_octaPillarControllersUnitGroup;
actor[101] gv_innerOctaPillersActors;
unitgroup gv_octaPillersWest;
unitgroup gv_octaPillersNorth;
unitgroup gv_octaPillersEast;
unitgroup gv_octaPillersSouth;
region gv_dirtEdgesRegion;
unit gv_pongUnit;
point gv_nextPointOfPongtogotoscan;
region gv_nextPointOfPongtogotoscanRegion;
int gv_angleOfPong;
bool gv_pongStuck;
region gv_lastPositionOfPong;
int gv_angleOfWheel;
int gv_angleOfRubberWheel;
int gv_mapGenAngleOffsetForCheese;
int gv_angleOfRubberWheel2;
int gv_currentMaxMapGenValue;
bool[7] gv_firstNewQueenSpawned;
int gv_cTFLastOwnerOfFlagCustomValue;
bool[7] gv_alreadyHad1queenspawn;
unit[7] gv_cTFFlagUnitBeingCarriedBy;
int gv_cTFOldXPositionOfFlag;
int gv_cTFOldYPositionOfFlag;
int gv_cTFGiveAllyFlagDialog;
bool[7] gv_cTFGiveAllyFlagDialogToogleIsOpen;
int[7] gv_cTFGiveAllyButtonToAllyPlayer;
int gv_cTFGiveAllyButtonCloseRedX;
region gv_aEvoOriginalGrassMapRegion;
region gv_aEvoOriginalGrassMapRegion14;
region gv_aEvoOriginalDirtMapRegion;
int gv_amountOfDirtScatterMid;
int gv_amountOfDirtScatterSmall;
int gv_amountOfDirtScatterLarge;
int[7] gv_alliedQueenOfPlayer;
int[7] gv_enemyQueenOfPlayer;
string[52] gv_stringsRegionStrings;
region gv_stringsRegion;
int gv_mapGenAngle;
int gv_playerVisionRequestRequestVisionDialogButton;
int gv_playerVisionRequestRequestVisionButton;
int[7] gv_playerVisionRequestDialogForPlayer;
int[7] gv_playerVisionRequestYESButton;
int[7] gv_playerVisionRequestNOButton;
int gv_endGameVisionDefeatMenuLeave;
int gv_endGameVisionDefeatMenuWatch;
int[2] gv_playerDefeatedManuDialog;
int[7] gv_discordLinkDefeatScreen;
int[7] gv_discordLinkDefeatScreenEditBox;
int gv_uGUIBarBoardersDialogHealthBar;
int gv_uGUIBarBoardersDialogEnergybar;
int gv_uGUIBarFramesDialog;
int[7] gv_uGUIBarDialogItemImageHealthBar;
int[7] gv_uGUIBarDialogItemLabelHealthBar;
int[7] gv_uGUIBarDialogItemImageEnergybar;
int[7] gv_uGUIBarDialogItemLabelEnergybar;
int gv_uGUIBarDialogItemFrameHealthbar;
int gv_uGUIBarDialogItemFrameEnergybar;
int gv_uGUIBarWhenClickedMoveCamaratoselectedUnitButton;
int[7] gv_settingsMenuToggleButton;
int gv_settingsMenu;
int[7] gv_settingsMenuToggleButtonDialog;
int gv_settingsMenuredX;
bool[7] gv_settingsMenuOpen;
int[3] gv_settingsMenuHideRightSideButtons0Out1in;
bool[7] gv_settingsMenuHideRightSideButtonsHiddenForPlayer;
int[5] gv_customGUISC2GUI;
int[7] gv_winrateWinChanceToggleButton;
int[7] gv_winrateWinChanceToggleButtonDialog;
int[7] gv_winrateWinChanceDialog;
int[7] gv_winrateLabelNumberforplayer1;
int[7] gv_winrateLabelNumberforplayer2;
int[7] gv_winrateLabelNumberforplayer3;
int[7] gv_winrateLabelNumberforplayer4;
int[7] gv_winrateLabelNumberforplayer5;
int[7] gv_winrateLabelNumberforplayer6;
int[7] gv_winchanceLabelNumberforplayer1;
int[7] gv_winchanceLabelNumberforplayer2;
int[7] gv_winchanceLabelNumberforplayer3;
int[7] gv_winchanceLabelNumberforplayer4;
int[7] gv_winchanceLabelNumberforplayer5;
int[7] gv_winchanceLabelNumberforplayer6;
int[7] gv_amountOfGamesPlayedAsBlackant;
int[7] gv_amountOfGamesWonAsBlackant;
fixed[7] gv_blackWinrateOfPlayer;
int[7] gv_amountOfGamesPlayedAsFireAnt;
int[7] gv_amountOfGamesWonAsFireAnt;
fixed[7] gv_fireWinrateOfPlayer;
int[7] gv_amountOfGamesPlayedAsWoodAnt;
int[7] gv_amountOfGamesWonAsWoodAnt;
fixed[7] gv_woodWinrateOfPlayer;
int[7] gv_amountOfGamesPlayedAsLeafCutterAnt;
int[7] gv_amountOfGamesWonAsLeafCutterAnt;
fixed[7] gv_leafCutterWinrateOfPlayer;
int[7] gv_amountOfGamesPlayedAsPharaohAnt;
int[7] gv_amountOfGamesWonAsPharaohAnt;
fixed[7] gv_pharaohWinrateOfPlayer;
int[7] gv_amountOfGamesPlayedAsGhostAnt;
int[7] gv_amountOfGamesWonAsGhostAnt;
fixed[7] gv_ghostWinrateOfPlayer;
int[7] gv_amountOfGamesPlayedAsRandomAnt;
int[7] gv_amountOfGamesWonAsRandomAnt;
fixed[7] gv_randomWinrateOfPlayer;
int[7] gv_amountOfGamesPlayed;
int[7] gv_amountOfGamesWon;
fixed[7] gv_winrateOfPlayer;
fixed[7] gv_winchanceOfPlayer;
bool[7] gv_winrateWInChanceDialogOpen;
string[7] gv_playerCustomGUIString;
int gv_dialogSC2Everyting;
int gv_minimapAllIncluded;
int gv_minimapItself;
int gv_minimapPingButton;
int gv_minimapTerrainButton;
int gv_minimapColorButton;
int gv_manuBarHelpButton;
int gv_manuBarChatButton;
int gv_manuBarSocialButton;
int gv_manuBarMenuButton;
int gv_manuBarMain;
int gv_selectAllArmyUnitsButton;
int gv_selectAllWorkerUnitsButton;
int gv_gameTimeLabel;
int gv_controlGroupPanel;
int[11] gv_controlGroupNumber;
int gv_commandButtonsPanel;
int[17] gv_commandButtons;
int gv_commandDigTip;
int gv_allUnitsInSelectionPanel;
int[25] gv_unitInSelectionSlotOfPage0;
int[25] gv_unitInSelectionSlotOfPage1;
int[25] gv_unitInSelectionSlotOfPage2;
int[25] gv_unitInSelectionSlotOfPage3;
int[25] gv_unitInSelectionSlotOfPage4;
int[25] gv_unitInSelectionSlotOfPage5;
int[7] gv_unitsInSelectionPage;
int gv_selectedUnitHPImageandNumbers;
int gv_selectedUnitName;
int gv_selectedUnitKillsandRank;
int gv_selectedUnitEquipment;
int gv_selectedUnitAttributes;
int gv_selectedUnitQueueSlot;
int[3] gv_selectedUnitActiveQueueSlot;
int[3] gv_selectedUnitActiveQueueText;
int gv_resourcePanelMineralsNumber;
int gv_resourcePanelMineralsIcon;
int gv_resourcePanelSupplyNumber;
int gv_resourcePanelSupplyIcon;
int gv_resourcePanelMain;
int gv_resourcePanelResourceFrame;
int gv_infoPanel;
int gv_infoPaneUnit;
int gv_queuePanel;
int gv_behaviorBarItself;
int[6] gv_behaviorBarIcons;
int gv_infoPaneQueue;
int[5] gv_gUIFrame;
int gv_discordLinkCopyDialog;
int gv_discordLinkCopyToggleDialog;
int[7] gv_discordLinkCopyToggleButton;
int[7] gv_discordLinkCopyToggleButtonImage;
int[7] gv_discordLinkCopyEditBox;
bool[7] gv_discordLinkDialogOpen;
timer gv_foodVoteTimer;
int gv_foodVoteTimerWindow;
int gv_foodVoteDialog;
bool gv_calculatedFoodVotesOnceAlready;
int gv_foodVoteButton150;
int gv_foodVoteButton250;
int gv_foodVoteButton350;
string[7] gv_startingFoodAmountVoteOfPlayer;
bool[7] gv_hasPlayerVotedAlreadyForStartingFoodAmount;
int gv_startingFoodVotesAmountfor150;
int gv_startingFoodVotesAmountfor250;
int gv_startingFoodVotesAmountfor350;
int[4] gv_displayStartingFoodVotesAmountsForEachone;
int gv_startingFoodAmountChosen;
bool gv_foodVoteEnded;
bool[7] gv_playerHasVotedForStartingFood;
timer gv_gameModeTimer;
int gv_gameModeTimerWindow;
int gv_gameModeVoteDialog;
bool gv_calculatedGameModeVotesOnceAlready;
int gv_gameModeVoteButtonCTF;
int gv_gameModeVoteButtonNormal;
int gv_gameModeVoteButtonNYI;
string[7] gv_gameModeVoteOfPlayer;
bool[7] gv_hasPlayerVotedAlreadyForGameMode;
int gv_gameModeVotesAmountforCTF;
int gv_gameModeVotesAmountforNormal;
int gv_gameModeVotesAmountforNYI;
int[4] gv_displayGameModeVotesAmountsForEachone;
string gv_gameModeChosen;
bool gv_gameModeVoteEnded;
bool gv_gameModeVoteEndedwithTie;
bool[7] gv_playerHasVotedForGameMode;
int[101] gv_array;
int gv_mapGenvote;
int[2] gv_randomMapGenVoteItem;
int[2] gv_standardMapGenVoteItem;
int[2] gv_invertedMapGenVoteItem;
int[2] gv_islandsMapGenVoteItem;
int[2] gv_pondMapGenVoteItem;
int[2] gv_donutMapGenVoteItem;
int[2] gv_riverMapGenVoteItem;
int[2] gv_cavesMapGenVoteItem;
int[2] gv_crossMapGenVoteItem;
int[2] gv_streamsMapGenVoteItem;
int[2] gv_yinYangMapGenVoteItem;
int[2] gv_houseMapGenVoteItem;
int[2] gv_cloverleafMapGenVoteItem;
int[2] gv_gatesMapGenVoteItem;
int[2] gv_pillarsMapGenVoteItem;
int[2] gv_labyrinthMapGenVoteItem;
int[2] gv_clockMapGenVoteItem;
int[2] gv_pizzaMapGenVoteItem;
int[2] gv_radioactiveMapGenVoteItem;
int[2] gv_stripesMapGenVoteItem;
int[2] gv_hexMapGenVoteItem;
int[2] gv_octagonMapGenVoteItem;
int[2] gv_pongMapGenVoteItem;
int[2] gv_wheelMapGenVoteItem;
int[2] gv_rubberWheelMapGenVoteItem;
int[2] gv_chambersMapGenVoteItem;
int[2] gv_hourglassMapGenVoteItem;
int[2] gv_bunkerMapGenVoteItem;
int[2] gv_heartbeatMapGenVoteItem;
int[2] gv_cheeseMapGenVoteItem;
int[2] gv_chipMapGenVoteItem;
int[2] gv_antFarmMapGenVoteItem;
int[2] gv_duelCircleMapGenVoteItem;
int[2] gv_openWheelMapGenVoteItem;
int[2] gv_threatMapGenVoteItem;
int[2] gv_eyeMapGenVoteItem;
int[2] gv_compassMapGenVoteItem;
int[2] gv_chokeMapGenVoteItem;
int[2] gv_teardropMapGenVoteItem;
int[2] gv_ravineMapGenVoteItem;
int[2] gv_twirlMapGenVoteItem;
int[2] gv_invertedChokeMapGenVoteItem;
int gv_randomMapGenVoteVotes;
int gv_standardMapGenVoteVotes;
int gv_invertedMapGenVoteVotes;
int gv_islandsMapGenVoteVotes;
int gv_pondMapGenVoteVotes;
int gv_donutMapGenVoteVotes;
int gv_riverMapGenVoteVotes;
int gv_cavesMapGenVoteVotes;
int gv_crossMapGenVoteVotes;
int gv_streamsMapGenVoteVotes;
int gv_yinYangMapGenVoteVotes;
int gv_houseMapGenVoteVotes;
int gv_cloverleafMapGenVoteVotes;
int gv_gatesMapGenVoteVotes;
int gv_pillarsMapGenVoteVotes;
int gv_laybrinthMapGenVoteVotes;
int gv_clockMapGenVoteVotes;
int gv_pizzaMapGenVoteVotes;
int gv_radioactiveMapGenVoteVotes;
int gv_stripesMapGenVoteVotes;
int gv_hexMapGenVoteVotes;
int gv_octagonMapGenVoteVotes;
int gv_pongMapGenVoteVotes;
int gv_wheelMapGenVoteVotes;
int gv_rubberWheelMapGenVoteVotes;
int gv_chambersMapGenVoteVotes;
int gv_hourglassMapGenVoteVotes;
int gv_bunkerMapGenVoteVotes;
int gv_heartbeatMapGenVoteVotes;
int gv_cheeseMapGenVoteVotes;
int gv_chipMapGenVoteVotes;
int gv_antFarmMapGenVoteVotes;
int gv_duelCircleMapGenVoteVotes;
int gv_openWheelMapGenVoteVotes;
int gv_threatMapGenVoteVotes;
int gv_eyeMapGenVoteVotes;
int gv_compassMapGenVoteVotes;
int gv_chokeMapGenVoteVotes;
int gv_tearDropMapGenVoteVotes;
int gv_ravineMapGenVoteVotes;
int gv_twirlMapGenVoteVotes;
int gv_invertedChokeMapGenVoteVotes;
int gv_mapGenvoteTimerWindow;
timer gv_mapGenvoteTimer;
int gv_mapGenVoteButtonAmount;
string[7] gv_voteOfPlayerInMapGenVote;
int gv_xOffsetlocationofChoiceButtonMapGenVote;
int gv_yOffsetlocationofChoiceButtonMapGenVote;
int gv_amountofChoiceButtonMapGenVoteButtonsPlaced;
bool gv_mapLayoutVoteEnded;
bool[7] gv_playerHasVotedForMapLayout;
bool gv_generateRandomMap;
timer gv_mapPoolTimer;
int gv_mapPoolTimerWindow;
int gv_mapPoolDialog;
bool gv_calculatedMapPoolVotesOnceAlready;
int gv_mapPoolIncludeDynamic;
int gv_mapPoolDontIncludeDynamic;
string[7] gv_mapPoolVoteOfPlayer;
bool[7] gv_hasPlayerVotedAlreadyForMapPool;
int gv_mapPoolForIncludeDynamic;
int gv_mapPoolForDontIncludeDynamic;
int[4] gv_displayMapPoolAmountsForEachone;
bool gv_mapPoolVoteEnded;
bool[7] gv_playerHasVotedForMapPool;
bool gv_forceRandomQueen;
timer gv_randomQueenTimer;
int gv_randomQueenTimerWindow;
int gv_randomQueenDialog;
bool gv_calculatedRandomQueenVotesOnceAlready;
int gv_forcePlayerstopickRandomQueen;
int gv_dontForceplayerstopickRandomQueen;
string[7] gv_randomQueenVoteOfPlayer;
bool[7] gv_hasPlayerVotedAlreadyForRandomQueen;
int gv_forceRandomQueenVotes;
int gv_dontForceRandomQueenVotes;
int[4] gv_displayRandomQueenAmountsForEachone;
bool gv_randomQueenVoteEnded;
bool[7] gv_playerHasVotedForRandomQueen;
bool[7] gv_toggleUIManuforplayerisiropen;
int gv_toggleUIBarManu;
int gv_playerUIBarManuDialog;
int[8] gv_playerUIButtonManuDialogItem;
int[7] gv_playerUIImageDialog;
int gv_playerUIBarDialog;
string[7] gv_playerUIChoice;
int gv_skinsManuButtonX;
bool[7] gv_skinsDialogOpen;
int gv_skinsDialogToggleButton;
int[7] gv_skinsDialogToggleButtonModel;
int gv_skinsDialogTogglebuttonDialog;
int gv_skinsDialog;
int[7] gv_bulkBuildersBuiltbyplayer;
int[7] gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer;
bool gv_isthisgame1v1AIvsHard;
int[7] gv__1v1AIvsHardGamesWon;
bool gv_isthisgame2v4AIvsVeryHard;
int[7] gv__2v4AIvsVeryHardGamesWon;
int[7] gv_amountOfWorkerNestsBuiltThisgamebeforeminute15byplayer;
int[7] gv_amountOfSoldierNestsBuiltThisgamebeforeminute20byplayer;
int[7] gv_amountOfUpgradeChambersBuiltThisgamebeforeminute30byplayer;
bool[7] gv_workersSwapModelManuOpen;
int[7] gv_workerSwapModelManuButtonModel;
int[7] gv_workerSwapModelManuLargeModel;
int[7] gv_workerSwapModelManuButtonToggle;
bool[7] gv_workerSwapModelIsUnlockedDefault;
bool[7] gv_workerSwapModelIsUnlockedMacerator;
bool[7] gv_workerSwapModelIsUnlockedRemastered;
bool[7] gv_workerSwapModelIsUnlockedHologram;
bool[7] gv_workerSwapModelIsUnlockedGray;
bool[7] gv_workerSwapModelIsUnlockedSwarm;
bool[7] gv_workerSwapModelIsUnlockedMech;
int[7] gv_workerSwapModelUnlockingManuTextDefault;
int[7] gv_workerSwapModelUnlockingManuTextLongAntenas;
int[7] gv_workerSwapModelUnlockingManuTextThickhead;
int[7] gv_workerSwapModelUnlockingManuTextHologram;
int[7] gv_workerSwapModelUnlockingManuTextGray;
int[7] gv_workerSwapModelUnlockingManuTextSwarm;
int[7] gv_workerSwapModelUnlockingManuTextMech;
string[9] gv_workerSwapModelString;
int[9] gv_workerSwapModelQueenChoiceButton;
int gv_workerSwapModelManuDialog;
int[7] gv_workerSwapModelClickMeImage;
int[7] gv_workerSwapModelClickMeModel;
bool[7] gv_soldiersSwapModelManuOpen;
int[7] gv_soldierSwapModelManuButtonModel;
int[7] gv_soldierSwapModelManuLargeModel;
int[7] gv_soldierSwapModelManuButtonToggle;
bool[7] gv_soldierSwapModelIsUnlockedDefault;
bool[7] gv_soldierSwapModelIsUnlockedGray;
bool[7] gv_soldierSwapModelIsUnlockedSwarm;
bool[7] gv_soldierSwapModelIsUnlockedMech;
int[7] gv_soldierSwapModelUnlockingManuTextDefault;
int[7] gv_soldierSwapModelUnlockingManuTextGray;
int[7] gv_soldierSwapModelUnlockingManuTextSwarm;
int[7] gv_soldierSwapModelUnlockingManuTextMech;
string[9] gv_soldierSwapModelString;
int[9] gv_soldierSwapModelQueenChoiceButton;
int gv_soldierSwapModelManuDialog;
int[7] gv_soldierSwapModelClickMeImage;
int[7] gv_soldierSwapModelClickMeModel;
bool[7] gv_queensSwapModelManuOpen;
int[7] gv_queenSwapModelManuButtonModel;
int[7] gv_queenSwapModelManuLargeModel;
int[7] gv_queenSwapModelManuButtonToggle;
bool[7] gv_queenSwapModelIsUnlockedDefault;
bool[7] gv_queenSwapModelIsUnlockedLongAntenas;
bool[7] gv_queenSwapModelIsUnlockedThickHead;
bool[7] gv_queenSwapModelIsUnlockedSpikeyHead;
bool[7] gv_queenSwapModelIsUnlockedHologram;
bool[7] gv_queenSwapModelIsUnlockedGray;
bool[7] gv_queenSwapModelIsUnlockedSwarm;
bool[7] gv_queenSwapModelIsUnlockedMech;
int[7] gv_queenSwapModelUnlockingManuTextDefault;
int[7] gv_queenSwapModelUnlockingManuTextLongAntenas;
int[7] gv_queenSwapModelUnlockingManuTextThickhead;
int[7] gv_queenSwapModelUnlockingManuTextSpikeyHead;
int[7] gv_queenSwapModelUnlockingManuTextHologram;
int[7] gv_queenSwapModelUnlockingManuTextGray;
int[7] gv_queenSwapModelUnlockingManuTextSwarm;
int[7] gv_queenSwapModelUnlockingManuTextMech;
string[9] gv_queenSwapModelString;
int[9] gv_queenSwapModelQueenChoiceButton;
int gv_queenSwapModelManuDialog;
int[7] gv_queenSwapModelClickMeImage;
int[7] gv_queenSwapModelClickMeModel;
int gv_buildingsSkinsManu;
int[7] gv_buildingsSkinsManuToggle;
bool[7] gv_buildingsSkinsManuOpen;
bool[7] gv_workerNestsSwapModelManuOpen;
int[7] gv_workerNestSwapModelManuButtonModel;
int[7] gv_workerNestSwapModelManuLargeModelNormal;
int[7] gv_workerNestSwapModelManuLargeModelSubtrail;
int[7] gv_workerNestSwapModelManuLargeModelFarm;
int[7] gv_workerNestSwapModelManuButtonToggle;
bool[7] gv_workerNestSwapModelIsUnlockedDefault;
bool[7] gv_workerNestSwapModelIsUnlockedWebMod;
bool[7] gv_workerNestSwapModelIsUnlockedMech;
int[7] gv_workerNestSwapModelUnlockingManuTextDefault;
int[7] gv_workerNestSwapModelUnlockingManuTextWebMod;
int[7] gv_workerNestSwapModelUnlockingManuTextMech;
string[9] gv_workerNestSwapModelString;
int[9] gv_workerNestSwapModelQueenChoiceButton;
int gv_workerNestSwapModelManuDialog;
int[7] gv_workerNestSwapModelClickMeImage;
int[7] gv_workerNestSwapModelClickMeModel;
int[7] gv_workerNestSwapModelSwarmWinrate;
int[7] gv_workerNestSwapModelMechWinrate;
bool[7] gv_soldierNestSwapModelManuOpen;
int[7] gv_soldierNestSwapModelManuButtonModel;
int[7] gv_soldierNestSwapModelManuLargeModel;
int[7] gv_soldierNestSwapModelManuButtonToggle;
bool[7] gv_soldierNestSwapModelIsUnlockedDefault;
bool[7] gv_soldierNestSwapModelIsUnlockedWebMod;
bool[7] gv_soldierNestSwapModelIsUnlockedMech;
int[7] gv_soldierNestSwapModelUnlockingManuTextDefault;
int[7] gv_soldierNestSwapModelUnlockingManuTextWebMod;
int[7] gv_soldierNestSwapModelUnlockingManuTextMech;
string[9] gv_soldierNestSwapModelString;
int[9] gv_soldierNestSwapModelQueenChoiceButton;
int gv_soldierNestSwapModelManuDialog;
int[7] gv_soldierNestSwapModelClickMeImage;
int[7] gv_soldierNestSwapModelClickMeModel;
int[7] gv_soldierNestSwapModelSwarmWinrate;
int[7] gv_soldierNestSwapModelMechWinrate;
bool[7] gv_bulkBuilderSwapModelManuOpen;
int[7] gv_bulkBuilderSwapModelManuButtonModel;
int[7] gv_bulkBuilderSwapModelManuLargeModelBody;
int[7] gv_bulkBuilderSwapModelManuLargeModelTentecle;
int[7] gv_bulkBuilderSwapModelManuButtonToggle;
bool[7] gv_bulkBuilderSwapModelIsUnlockedDefault;
bool[7] gv_bulkBuilderSwapModelIsUnlockedWebMod;
bool[7] gv_bulkBuilderSwapModelIsUnlockedMech;
int[7] gv_bulkBuilderSwapModelUnlockingManuTextDefault;
int[7] gv_bulkBuilderSwapModelUnlockingManuTextWebMod;
int[7] gv_bulkBuilderSwapModelUnlockingManuTextMech;
string[9] gv_bulkBuilderSwapModelString;
int[9] gv_bulkBuilderSwapModelQueenChoiceButton;
int gv_bulkBuilderSwapModelManuDialog;
int[7] gv_bulkBuilderSwapModelClickMeImage;
int[7] gv_bulkBuilderSwapModelClickMeModel;
int[7] gv_bulkBuilderSwapModelSwarmWinrate;
int[7] gv_bulkBuilderSwapModelMechWinrate;
bool[7] gv_upgradeChamberSwapModelManuOpen;
int[7] gv_upgradeChamberSwapModelManuButtonModel;
int[7] gv_upgradeChamberSwapModelManuLargeModel;
int[7] gv_upgradeChamberSwapModelManuButtonToggle;
bool[7] gv_upgradeChamberSwapModelIsUnlockedDefault;
bool[7] gv_upgradeChamberSwapModelIsUnlockedSwarm;
bool[7] gv_upgradeChamberSwapModelIsUnlockedMech;
int[7] gv_upgradeChamberSwapModelUnlockingManuTextDefault;
int[7] gv_upgradeChamberSwapModelUnlockingManuTextSwarm;
int[7] gv_upgradeChamberSwapModelUnlockingManuTextMech;
string[9] gv_upgradeChamberSwapModelString;
int[9] gv_upgradeChamberSwapModelQueenChoiceButton;
int gv_upgradeChamberSwapModelManuDialog;
int[7] gv_upgradeChamberSwapModelClickMeImage;
int[7] gv_upgradeChamberSwapModelClickMeModel;
bool[7] gv_spikesNestsSwapModelManuOpen;
int[7] gv_spikesNestSwapModelManuButtonModel;
int[7] gv_spikesNestSwapModelManuLargeModel;
int[7] gv_spikesNestSwapModelManuButtonToggle;
bool[7] gv_spikesNestSwapModelIsUnlockedDefault;
bool[7] gv_spikesNestSwapModelIsUnlockedFAT;
bool[7] gv_spikesNestSwapModelIsUnlockedFATWebMod;
int[7] gv_spikesNestSwapModelUnlockingManuTextDefault;
int[7] gv_spikesNestSwapModelUnlockingManuTextFAT;
int[7] gv_spikesNestSwapModelUnlockingManuTextFATWebMod;
string[9] gv_spikesNestSwapModelString;
int[9] gv_spikesNestSwapModelQueenChoiceButton;
int gv_spikesNestSwapModelManuDialog;
int[7] gv_spikesNestSwapModelClickMeImage;
int[7] gv_spikesNestSwapModelClickMeModel;
int gv_specialtyUnitSkinsManu;
int[7] gv_specialtyUnitSkinsManuToggle;
bool[7] gv_specialtyUnitSkinsManuOpen;
bool[7] gv_majorsSwapModelManuOpen;
int[7] gv_majorSwapModelManuButtonModel;
int[7] gv_majorSwapModelManuLargeModel;
int[7] gv_majorSwapModelManuButtonToggle;
bool[7] gv_majorSwapModelIsUnlockedDefault;
bool[7] gv_majorSwapModelIsUnlockedGray;
bool[7] gv_majorSwapModelIsUnlockedSwarm;
bool[7] gv_majorSwapModelIsUnlockedMech;
int[7] gv_majorSwapModelUnlockingManuTextDefault;
int[7] gv_majorSwapModelUnlockingManuTextGray;
int[7] gv_majorSwapModelUnlockingManuTextSwarm;
int[7] gv_majorSwapModelUnlockingManuTextMech;
string[9] gv_majorSwapModelString;
int[9] gv_majorSwapModelQueenChoiceButton;
int gv_majorSwapModelManuDialog;
int[7] gv_majorSwapModelClickMeImage;
int[7] gv_majorSwapModelClickMeModel;
bool[7] gv_stingersSwapModelManuOpen;
int[7] gv_stingerSwapModelManuButtonModel;
int[7] gv_stingerSwapModelManuLargeModel;
int[7] gv_stingerSwapModelManuButtonToggle;
bool[7] gv_stingerSwapModelIsUnlockedDefault;
bool[7] gv_stingerSwapModelIsUnlockedGray;
bool[7] gv_stingerSwapModelIsUnlockedSwarm;
bool[7] gv_stingerSwapModelIsUnlockedMech;
int[7] gv_stingerSwapModelUnlockingManuTextDefault;
int[7] gv_stingerSwapModelUnlockingManuTextGray;
int[7] gv_stingerSwapModelUnlockingManuTextSwarm;
int[7] gv_stingerSwapModelUnlockingManuTextMech;
string[9] gv_stingerSwapModelString;
int[9] gv_stingerSwapModelQueenChoiceButton;
int gv_stingerSwapModelManuDialog;
int[7] gv_stingerSwapModelClickMeImage;
int[7] gv_stingerSwapModelClickMeModel;
bool[7] gv_acidSprayersSwapModelManuOpen;
int[7] gv_acidSprayerSwapModelManuButtonModel;
int[7] gv_acidSprayerSwapModelManuLargeModel;
int[7] gv_acidSprayerSwapModelManuButtonToggle;
bool[7] gv_acidSprayerSwapModelIsUnlockedDefault;
bool[7] gv_acidSprayerSwapModelIsUnlockedGray;
bool[7] gv_acidSprayerSwapModelIsUnlockedSwarm;
bool[7] gv_acidSprayerSwapModelIsUnlockedMech;
int[7] gv_acidSprayerSwapModelUnlockingManuTextDefault;
int[7] gv_acidSprayerSwapModelUnlockingManuTextGray;
int[7] gv_acidSprayerSwapModelUnlockingManuTextSwarm;
int[7] gv_acidSprayerSwapModelUnlockingManuTextMech;
string[9] gv_acidSprayerSwapModelString;
int[9] gv_acidSprayerSwapModelQueenChoiceButton;
int gv_acidSprayerSwapModelManuDialog;
int[7] gv_acidSprayerSwapModelClickMeImage;
int[7] gv_acidSprayerSwapModelClickMeModel;
bool[7] gv_tunnelTremblersSwapModelManuOpen;
int[7] gv_tunnelTremblerSwapModelManuButtonModel;
int[7] gv_tunnelTremblerSwapModelManuLargeModel;
int[7] gv_tunnelTremblerSwapModelManuButtonToggle;
bool[7] gv_tunnelTremblerSwapModelIsUnlockedDefault;
bool[7] gv_tunnelTremblerSwapModelIsUnlockedGray;
bool[7] gv_tunnelTremblerSwapModelIsUnlockedSwarm;
bool[7] gv_tunnelTremblerSwapModelIsUnlockedMech;
int[7] gv_tunnelTremblerSwapModelUnlockingManuTextDefault;
int[7] gv_tunnelTremblerSwapModelUnlockingManuTextGray;
int[7] gv_tunnelTremblerSwapModelUnlockingManuTextSwarm;
int[7] gv_tunnelTremblerSwapModelUnlockingManuTextMech;
string[9] gv_tunnelTremblerSwapModelString;
int[9] gv_tunnelTremblerSwapModelQueenChoiceButton;
int gv_tunnelTremblerSwapModelManuDialog;
int[7] gv_tunnelTremblerSwapModelClickMeImage;
int[7] gv_tunnelTremblerSwapModelClickMeModel;
bool[7] gv_kheprisSwapModelManuOpen;
int[7] gv_khepriSwapModelManuButtonModel;
int[7] gv_khepriSwapModelManuLargeModel;
int[7] gv_khepriSwapModelManuMid1Model;
int[7] gv_khepriSwapModelManuMid2Model;
int[7] gv_khepriSwapModelManuButtonToggle;
bool[7] gv_khepriSwapModelIsUnlockedDefault;
bool[7] gv_khepriSwapModelIsUnlockedGray;
bool[7] gv_khepriSwapModelIsUnlockedSwarm;
bool[7] gv_khepriSwapModelIsUnlockedMech;
int[7] gv_khepriSwapModelUnlockingManuTextDefault;
int[7] gv_khepriSwapModelUnlockingManuTextGray;
int[7] gv_khepriSwapModelUnlockingManuTextSwarm;
int[7] gv_khepriSwapModelUnlockingManuTextMech;
string[9] gv_khepriSwapModelString;
int[9] gv_khepriSwapModelQueenChoiceButton;
int gv_khepriSwapModelManuDialog;
int[7] gv_khepriSwapModelClickMeImage;
int[7] gv_khepriSwapModelClickMeModel;
playergroup gv_tutorialPlayers;
fixed[3] gv_teamAverageRating;
fixed[7] gv_storedRatingDelta;
bool gv_rankedResultsShown;
playergroup[3] gv_team;
int gv_rankedEndWinningTeam;
int gv_rankedResults;
int gv_rankedResultsLabel;
bool[7] gv_playerChosenRanomQueen;
unit[7] gv_queenOfPlayer;
bool[16] gv_aI_Active;
int[16] gv_aI_Profile;
point[16] gv_aI_ColonyStartPoint;
point[16] gv_aI_ColonyFirstCreepPoint;
point[16] gv_aI_CurrentDigPoint;
point[16] gv_aI_CurrentBuildPoint;
point[16] gv_aI_CurrentDamagePoint;
fixed[16] gv_aI_TunnelAngle;
fixed[16] gv_aI_LastAttackTime;
fixed[16] gv_aI_LastTargetTime;
region[16] gv_aI_SpecialNestReserveRegion;
fixed[16] gv_aI_LastOffensiveDigTime;
int[gv_aIProfile_ProfileCount + 1] gv_aIProfile_ForagerMax;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_ForagerToSoldierRatio;
int[gv_aIProfile_ProfileCount + 1] gv_aIProfile_BroodlingMax;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_BroodlingToSoldierRatio;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_ActionCooldown;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_AttackWavePeriod;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_SoliderTargetPeriod;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_OffensiveDigDuration;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_CheatFoodRate;
fixed[gv_aIProfile_ProfileCount + 1] gv_aIProfile_CheatEnergyRate;
int[7] gv_aIdifficultyFoodMultiplier;
bool[7] gv_canCollectPlantFood;
bool[7] gv_canCollectMeatFood;
fixed[16] gv_fireAntResourceScore;
int[7] gv_reviveDrones;
int[7] gv_reviveSoliders;
int[7] gv_reviveMajors;
int[7] gv_reviveAcidSprayers;
int[7] gv_reviveStringers;
int[7] gv_reviveTunnelTremblers;
int[7] gv_reviveKhepri;
int[7] gv_reviveGraveDigger;
region[7] gv_reviveingRegion;
unitgroup[7] gv_reviveingDeadUnitsGroup;
point[7] gv_revivePoint;
actor[7] gv_reviveAreaEffect;
int[7] gv_plantedAmount;
point[7] gv_queenWallBuildStartPosition;
fixed gv_wallEnergyCost;
int gv_hpOfMoveddirtunitabilityCustomvalue;
bool[7] gv_mutagenicBiteUnlocked;
int[7] gv_mutagenicBiteNumber;
bool[7] gv_passivePlantaplantUnlocked;
bool[7] gv_passiveSpiritsofthegraveyardUnlocked;
int[7] gv_spiritsofthegraveyardNumber;
int[7] gv_upgradeforagernesttofarmthisgamebyplayer;
region[15] gv_invertedCritterSpawnRegions;
bool gv_statRecordingEnabled;
bool gv_skipStatWarning;
string gv_meatFoodModelOption1;
string gv_meatFoodModelOption2;
string gv_meatFoodModelOption3;
string gv_meatFoodModelOption4;
int gv_meatFoodModelOptionAmount;
int[16] gv_previousAllyCount;
bool gv_announceAlliances;
bool[7] gv_playerWon;
playergroup[7] gv_previousalliesOfPlayer;
bank gv_originalAntColoBank;
bank gv_antEvolutionBank;
bool[7] gv_playerExitProcessed;
string[7] gv_playerBankTransferedToAntEvo;
int[7] gv_record_UnitsProduced;
int[7] gv_record_UnitsKilled;
int[7] gv_record_FoodSpent;
int[7] gv_record_DirtDestroyed;
int[7] gv_record_WallsBuilt;
int[7] gv_record_LongestMatch;
int[7] gv_currentMatch_UnitsProduced;
int[7] gv_currentMatch_UnitsKilled;
int[7] gv_currentMatch_FoodSpent;
int[7] gv_currentMatch_DirtDestroyed;
int[7] gv_currentMatch_WallsBuilt;
int[7] gv_openAlliances_Wins;
int[7] gv_openAlliances_Losses;
int[7] gv_openAlliances_DurationPlayed;
int[7] gv_freeForAll_Wins;
int[7] gv_freeForAll_Losses;
int[7] gv_freeForAll_DurationPlayed;
int[7] gv__2v2v2_Wins;
int[7] gv__2v2v2_Losses;
int[7] gv__2v2v2_DurationPlayed;
int[7] gv__3v3_Wins;
int[7] gv__3v3_Losses;
int[7] gv__3v3_DurationPlayed;
fixed[7] gv_playerRatingOriginal;
fixed[7] gv_playerRatingModified;
int[7] gv_ranked_Wins;
int[7] gv_ranked_Losses;
int[7] gv_ranked_DurationPlayed;
int[7] gv_ranked_Version;
int[7] gv_ability_Dig;
int[7] gv_ability_AcidicStrikes;
int[7] gv_ability_VenomSpray;
int[7] gv_ability_BuildWall;
int[7] gv_ability_UpgradeForagerNest;
int[7] gv_ability_UpgradeSubterraneanTrail;
int[7] gv_ability_UpgradeSoldierNest;
int[7] gv_ability_UpgradeBroodlingSpawner;
int[7] gv_ability_UpgradeUnitDamage;
int[7] gv_ability_UpgradeUnitArmor;
int[7] gv_ability_UpgradeSoldierSpeed;
int[7] gv_ability_UpgradeImprovedHealth;
int[7] gv_ability_UpgradeImprovedSpeed;
int[7] gv_produced_QueenBlack;
int[7] gv_produced_QueenFire;
int[7] gv_produced_QueenWood;
int[7] gv_produced_Forager;
int[7] gv_produced_Soldier;
int[7] gv_produced_Major;
int[7] gv_produced_Stinger;
int[7] gv_produced_AcidSprayer;
int[7] gv_produced_ForagerNest;
int[7] gv_produced_SoldierNest;
int[7] gv_produced_BroodlingSpawner;
int[7] gv_produced_MajorNest;
int[7] gv_produced_StingerNest;
int[7] gv_produced_AcidSprayerNest;
int[7] gv_produced_Wall;
int[7] gv_produced_Misaligned;
int[7] gv_kills_QueenBlack;
int[7] gv_kills_QueenFire;
int[7] gv_kills_QueenWood;
int[7] gv_kills_Forager;
int[7] gv_kills_Soldier;
int[7] gv_kills_Major;
int[7] gv_kills_Stinger;
int[7] gv_kills_AcidSprayer;
int[7] gv_kills_ForagerNest;
int[7] gv_kills_SoldierNest;
int[7] gv_kills_BroodlingSpawner;
int[7] gv_kills_MajorNest;
int[7] gv_kills_StingerNest;
int[7] gv_kills_AcidSprayerNest;
int[7] gv_kills_Dirt;
int[7] gv_kills_Wall;
int[7] gv_kills_Quillgor;
int gv_statsDialog;
int[6] gv_statsLabels;
int[6] gv_statsHeaders;
int gv_statsToggleDialog;
int gv_statsToggleButton;
int gv_statsCloseButton;
int[7] gv_ctrlGroup_Queen;
int[7] gv_ctrlGroup_Soldier;
int[7] gv_ctrlGroup_Forager;
int[7] gv_ctrlGroup_Major;
int[7] gv_ctrlGroup_Stinger;
int[7] gv_ctrlGroup_AcidSprayer;
int[7] gv_ctrlGroup_ForagerNest;
int[7] gv_ctrlGroup_SoldierNest;
int[7] gv_ctrlGroup_BroodlingSpawner;
int[7] gv_ctrlGroup_MajorNest;
int[7] gv_ctrlGroup_StingerNest;
int[7] gv_ctrlGroup_AcidSprayerNest;
int gv_ctrlGroup_Dialog;
int gv_ctrlGroup_CloseButton;
int[13] gv_ctrlGroup_PulldownLabels;
int[13] gv_ctrlGroup_Pulldowns;
int gv_ctrlGroup_ToggleDialog;
int gv_ctrlGroup_ToggleButton;
bool[7] gv_ctrlGroup_DisablePulldownEvents;
int gv_patchNotes_ToggleDialog;
int gv_patchNotes_ToggleButton;
int gv_patchNotes_Dialog;
int gv_patchNotes_Label;
int gv_patchNotes_PageLabel;
int gv_patchNotes_NextButton;
int gv_patchNotes_PreviousButton;
int gv_patchNotes_CloseButton;
int[7] gv_patchNotes_CurrentPage;
int gv_patchNotes_PageCount;
text[51] gv_patchNotes_PageText;
int[7] gv_leaderboardDialog;
int[7] gv_leaderboardLabel;
playergroup gv_deadPlayerGroup;
int gv_currentNestID;
bool gv_testerCheckingIs;
int[7] gv_debuggingRevealed;

void InitGlobals () {
    int init_i;
    int init_j;

    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerChoseToWatchthegame[init_i] = true;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountofVisionrequestsclickedbyplayerhaveleft[init_i] = 3;
    }
    gv_defeatedPlayersPlayerGruop = PlayerGroupEmpty();
    gv_loadingBarMax = 40;
    gv_ingameLoadingBarDialog = c_invalidDialogId;
    gv_ingameLoadingBarDialogItem = c_invalidDialogControlId;
    gv_ingameLoadingBarDialogItemFrame = c_invalidDialogControlId;
    gv_initializationStage = StringExternal("Param/Value/0AF12DDB");
    for (init_i = 0; init_i <= 100; init_i += 1) {
        gv_chanceOfmapToGenerateonrandom[init_i] = 10;
    }
    gv_nEMapCorner = RegionRect(76.0, 76.0, 150.0, 150.0);
    gv_nWMapCorner = RegionRect(2.0, 76.0, 76.0, 150.0);
    gv_sWMapCorner = RegionRect(2.0, 2.0, 76.0, 76.0);
    gv_sEMapCorner = RegionRect(76.0, 2.0, 150.0, 76.0);
    gv_nEMapCornerRespawn = RegionEmpty();
    gv_nWMapCornerRespawn = RegionEmpty();
    gv_sWMapCornerRespawn = RegionEmpty();
    gv_sEMapCornerRespawn = RegionEmpty();
    for (init_i = 0; init_i <= gv_mapSize; init_i += 1) {
        for (init_j = 0; init_j <= gv_mapSize; init_j += 1) {
            gv_dirtMap[init_i][init_j] = 1;
        }
    }
    gv_foodSpawningRegion = RegionEmpty();
    gv_mapPool = "Unknown MapPool";
    gv_externalDirt = UnitGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerSpawnTeam[init_i] = PlayerGroupEmpty();
    }
    gv_absoluteCenterpoint = RegionGetCenter(RegionFromId(1));
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_gateUnitsToRemoveUponChamge[init_i] = UnitGroupEmpty();
    }
    gv_gatesOrientation = "Unknown";
    gv_gatesTimer = TimerCreate();
    gv_gatesTimerWindow = c_timerWindowNone;
    gv_horizontalPillerLocks = UnitGroupEmpty();
    gv_verticalPillerLocks = UnitGroupEmpty();
    gv_horizontalPillerBuildingBlockers = UnitGroupEmpty();
    gv_verticalPillerBuildingBlocker = UnitGroupEmpty();
    gv_verticalLinesRegion = RegionEmpty();
    gv_horizontalLinesRegion = RegionEmpty();
    gv_pillersGenTimer = TimerCreate();
    gv_pillersGenTimerWindow = c_timerWindowNone;
    gv_sidewaysStripes = RandomInt(0, 1);
    gv_octaPillarControllersUnitGroup = UnitGroupEmpty();
    gv_octaPillersWest = UnitGroupEmpty();
    gv_octaPillersNorth = UnitGroupEmpty();
    gv_octaPillersEast = UnitGroupEmpty();
    gv_octaPillersSouth = UnitGroupEmpty();
    gv_dirtEdgesRegion = RegionEmpty();
    gv_nextPointOfPongtogotoscan = Point(76.0, 90.0);
    gv_nextPointOfPongtogotoscanRegion = RegionCircle(Point(76.0, 76.0), 1.0);
    gv_angleOfPong = RandomInt(1, 360);
    gv_currentMaxMapGenValue = 41;
    gv_cTFOldXPositionOfFlag = 33;
    gv_cTFOldYPositionOfFlag = 33;
    gv_cTFGiveAllyFlagDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_cTFGiveAllyButtonToAllyPlayer[init_i] = c_invalidDialogControlId;
    }
    gv_cTFGiveAllyButtonCloseRedX = c_invalidDialogControlId;
    gv_aEvoOriginalGrassMapRegion = RegionEmpty();
    gv_aEvoOriginalGrassMapRegion14 = RegionEmpty();
    gv_aEvoOriginalDirtMapRegion = RegionEmpty();
    gv_amountOfDirtScatterMid = 30;
    gv_amountOfDirtScatterSmall = (gv_amountOfDirtScatterMid / 3);
    gv_amountOfDirtScatterLarge = (gv_amountOfDirtScatterMid / 4);
    for (init_i = 0; init_i <= 51; init_i += 1) {
        gv_stringsRegionStrings[init_i] = " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
    }
    gv_playerVisionRequestRequestVisionDialogButton = c_invalidDialogId;
    gv_playerVisionRequestRequestVisionButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerVisionRequestDialogForPlayer[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerVisionRequestYESButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerVisionRequestNOButton[init_i] = c_invalidDialogControlId;
    }
    gv_endGameVisionDefeatMenuLeave = c_invalidDialogControlId;
    gv_endGameVisionDefeatMenuWatch = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_playerDefeatedManuDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_discordLinkDefeatScreen[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_discordLinkDefeatScreenEditBox[init_i] = c_invalidDialogControlId;
    }
    gv_uGUIBarBoardersDialogHealthBar = c_invalidDialogId;
    gv_uGUIBarBoardersDialogEnergybar = c_invalidDialogId;
    gv_uGUIBarFramesDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_uGUIBarDialogItemImageHealthBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_uGUIBarDialogItemLabelHealthBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_uGUIBarDialogItemImageEnergybar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_uGUIBarDialogItemLabelEnergybar[init_i] = c_invalidDialogControlId;
    }
    gv_uGUIBarDialogItemFrameHealthbar = c_invalidDialogControlId;
    gv_uGUIBarDialogItemFrameEnergybar = c_invalidDialogControlId;
    gv_uGUIBarWhenClickedMoveCamaratoselectedUnitButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_settingsMenuToggleButton[init_i] = c_invalidDialogControlId;
    }
    gv_settingsMenu = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_settingsMenuToggleButtonDialog[init_i] = c_invalidDialogId;
    }
    gv_settingsMenuredX = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_settingsMenuHideRightSideButtons0Out1in[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_customGUISC2GUI[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateWinChanceToggleButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateWinChanceToggleButtonDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateWinChanceDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateLabelNumberforplayer1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateLabelNumberforplayer2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateLabelNumberforplayer3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateLabelNumberforplayer4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateLabelNumberforplayer5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateLabelNumberforplayer6[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winchanceLabelNumberforplayer1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winchanceLabelNumberforplayer2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winchanceLabelNumberforplayer3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winchanceLabelNumberforplayer4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winchanceLabelNumberforplayer5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winchanceLabelNumberforplayer6[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsBlackant[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsFireAnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsWoodAnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsLeafCutterAnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsPharaohAnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsGhostAnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayedAsRandomAnt[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_amountOfGamesPlayed[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_winrateWInChanceDialogOpen[init_i] = true;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerCustomGUIString[init_i] = "Evolution";
    }
    gv_dialogSC2Everyting = c_invalidDialogControlId;
    gv_minimapAllIncluded = c_invalidDialogControlId;
    gv_minimapItself = c_invalidDialogControlId;
    gv_minimapPingButton = c_invalidDialogControlId;
    gv_minimapTerrainButton = c_invalidDialogControlId;
    gv_minimapColorButton = c_invalidDialogControlId;
    gv_manuBarHelpButton = c_invalidDialogControlId;
    gv_manuBarChatButton = c_invalidDialogControlId;
    gv_manuBarSocialButton = c_invalidDialogControlId;
    gv_manuBarMenuButton = c_invalidDialogControlId;
    gv_manuBarMain = c_invalidDialogControlId;
    gv_selectAllArmyUnitsButton = c_invalidDialogControlId;
    gv_selectAllWorkerUnitsButton = c_invalidDialogControlId;
    gv_gameTimeLabel = c_invalidDialogControlId;
    gv_controlGroupPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_controlGroupNumber[init_i] = c_invalidDialogControlId;
    }
    gv_commandButtonsPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        gv_commandButtons[init_i] = c_invalidDialogControlId;
    }
    gv_commandDigTip = c_invalidDialogControlId;
    gv_allUnitsInSelectionPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_unitInSelectionSlotOfPage0[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_unitInSelectionSlotOfPage1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_unitInSelectionSlotOfPage2[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_unitInSelectionSlotOfPage3[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_unitInSelectionSlotOfPage4[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 24; init_i += 1) {
        gv_unitInSelectionSlotOfPage5[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_unitsInSelectionPage[init_i] = c_invalidDialogControlId;
    }
    gv_selectedUnitHPImageandNumbers = c_invalidDialogControlId;
    gv_selectedUnitName = c_invalidDialogControlId;
    gv_selectedUnitKillsandRank = c_invalidDialogControlId;
    gv_selectedUnitEquipment = c_invalidDialogControlId;
    gv_selectedUnitAttributes = c_invalidDialogControlId;
    gv_selectedUnitQueueSlot = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_selectedUnitActiveQueueSlot[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_selectedUnitActiveQueueText[init_i] = c_invalidDialogControlId;
    }
    gv_resourcePanelMineralsNumber = c_invalidDialogControlId;
    gv_resourcePanelMineralsIcon = c_invalidDialogControlId;
    gv_resourcePanelSupplyNumber = c_invalidDialogControlId;
    gv_resourcePanelSupplyIcon = c_invalidDialogControlId;
    gv_resourcePanelMain = c_invalidDialogControlId;
    gv_resourcePanelResourceFrame = c_invalidDialogControlId;
    gv_infoPanel = c_invalidDialogControlId;
    gv_infoPaneUnit = c_invalidDialogControlId;
    gv_queuePanel = c_invalidDialogControlId;
    gv_behaviorBarItself = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_behaviorBarIcons[init_i] = c_invalidDialogControlId;
    }
    gv_infoPaneQueue = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_gUIFrame[init_i] = c_invalidDialogControlId;
    }
    gv_discordLinkCopyDialog = c_invalidDialogId;
    gv_discordLinkCopyToggleDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_discordLinkCopyToggleButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_discordLinkCopyToggleButtonImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_discordLinkCopyEditBox[init_i] = c_invalidDialogControlId;
    }
    gv_foodVoteTimer = TimerCreate();
    gv_foodVoteTimerWindow = c_timerWindowNone;
    gv_foodVoteDialog = c_invalidDialogId;
    gv_foodVoteButton150 = c_invalidDialogControlId;
    gv_foodVoteButton250 = c_invalidDialogControlId;
    gv_foodVoteButton350 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_displayStartingFoodVotesAmountsForEachone[init_i] = c_invalidDialogControlId;
    }
    gv_gameModeTimer = TimerCreate();
    gv_gameModeTimerWindow = c_timerWindowNone;
    gv_gameModeVoteDialog = c_invalidDialogId;
    gv_gameModeVoteButtonCTF = c_invalidDialogControlId;
    gv_gameModeVoteButtonNormal = c_invalidDialogControlId;
    gv_gameModeVoteButtonNYI = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_displayGameModeVotesAmountsForEachone[init_i] = c_invalidDialogControlId;
    }
    gv_gameModeChosen = "Normal";
    gv_mapGenvote = c_invalidDialogId;
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_randomMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_standardMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_invertedMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_islandsMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_pondMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_donutMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_riverMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_cavesMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_crossMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_streamsMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_yinYangMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_houseMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_cloverleafMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_gatesMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_pillarsMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_labyrinthMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_clockMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_pizzaMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_radioactiveMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_stripesMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_hexMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_octagonMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_pongMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_wheelMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_rubberWheelMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_chambersMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_hourglassMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_bunkerMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_heartbeatMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_cheeseMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_chipMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_antFarmMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_duelCircleMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_openWheelMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_threatMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_eyeMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_compassMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_chokeMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_teardropMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_ravineMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_twirlMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_invertedChokeMapGenVoteItem[init_i] = c_invalidDialogControlId;
    }
    gv_mapGenvoteTimerWindow = c_timerWindowNone;
    gv_mapGenvoteTimer = TimerCreate();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_voteOfPlayerInMapGenVote[init_i] = "Change this";
    }
    gv_xOffsetlocationofChoiceButtonMapGenVote = -675;
    gv_yOffsetlocationofChoiceButtonMapGenVote = -150;
    gv_amountofChoiceButtonMapGenVoteButtonsPlaced = 1;
    gv_mapPoolTimer = TimerCreate();
    gv_mapPoolTimerWindow = c_timerWindowNone;
    gv_mapPoolDialog = c_invalidDialogId;
    gv_mapPoolIncludeDynamic = c_invalidDialogControlId;
    gv_mapPoolDontIncludeDynamic = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_mapPoolVoteOfPlayer[init_i] = "DynDidntVote";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_displayMapPoolAmountsForEachone[init_i] = c_invalidDialogControlId;
    }
    gv_randomQueenTimer = TimerCreate();
    gv_randomQueenTimerWindow = c_timerWindowNone;
    gv_randomQueenDialog = c_invalidDialogId;
    gv_forcePlayerstopickRandomQueen = c_invalidDialogControlId;
    gv_dontForceplayerstopickRandomQueen = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_randomQueenVoteOfPlayer[init_i] = "DynDidntVote";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_displayRandomQueenAmountsForEachone[init_i] = c_invalidDialogControlId;
    }
    gv_toggleUIBarManu = c_invalidDialogControlId;
    gv_playerUIBarManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_playerUIButtonManuDialogItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerUIImageDialog[init_i] = c_invalidDialogControlId;
    }
    gv_playerUIBarDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerUIChoice[init_i] = "Default";
    }
    gv_skinsManuButtonX = c_invalidDialogControlId;
    gv_skinsDialogToggleButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_skinsDialogToggleButtonModel[init_i] = c_invalidDialogControlId;
    }
    gv_skinsDialogTogglebuttonDialog = c_invalidDialogId;
    gv_skinsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextLongAntenas[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextThickhead[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextHologram[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_workerSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_workerSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_workerSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_soldierSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_soldierSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_soldierSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextLongAntenas[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextThickhead[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextSpikeyHead[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextHologram[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_queenSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_queenSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_queenSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_queenSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    gv_buildingsSkinsManu = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_buildingsSkinsManuToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelManuLargeModelNormal[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelManuLargeModelSubtrail[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelManuLargeModelFarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelUnlockingManuTextWebMod[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_workerNestSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_workerNestSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_workerNestSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelSwarmWinrate[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_workerNestSwapModelMechWinrate[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelUnlockingManuTextWebMod[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_soldierNestSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_soldierNestSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_soldierNestSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelSwarmWinrate[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_soldierNestSwapModelMechWinrate[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelManuLargeModelBody[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelManuLargeModelTentecle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelUnlockingManuTextWebMod[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_bulkBuilderSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_bulkBuilderSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_bulkBuilderSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelSwarmWinrate[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_bulkBuilderSwapModelMechWinrate[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_upgradeChamberSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_upgradeChamberSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_upgradeChamberSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_upgradeChamberSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelUnlockingManuTextFAT[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelUnlockingManuTextFATWebMod[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_spikesNestSwapModelString[init_i] = "Not Chosen";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_spikesNestSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_spikesNestSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_spikesNestSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    gv_specialtyUnitSkinsManu = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_specialtyUnitSkinsManuToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_majorSwapModelString[init_i] = "Default";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_majorSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_majorSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_majorSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_stingerSwapModelString[init_i] = "Default";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_stingerSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_stingerSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_stingerSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_acidSprayerSwapModelString[init_i] = "Default";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_acidSprayerSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_acidSprayerSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_acidSprayerSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_tunnelTremblerSwapModelString[init_i] = "Default";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_tunnelTremblerSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_tunnelTremblerSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_tunnelTremblerSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelManuButtonModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelManuLargeModel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelManuMid1Model[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelManuMid2Model[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelManuButtonToggle[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelUnlockingManuTextDefault[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelUnlockingManuTextGray[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelUnlockingManuTextSwarm[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelUnlockingManuTextMech[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_khepriSwapModelString[init_i] = "Default";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_khepriSwapModelQueenChoiceButton[init_i] = c_invalidDialogControlId;
    }
    gv_khepriSwapModelManuDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelClickMeImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_khepriSwapModelClickMeModel[init_i] = c_invalidDialogControlId;
    }
    gv_tutorialPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_team[init_i] = PlayerGroupEmpty();
    }
    gv_rankedResults = c_invalidDialogId;
    gv_rankedResultsLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 15; init_i += 1) {
        gv_aI_CurrentDamagePoint[init_i] = Point(0.0, 0.0);
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_aIdifficultyFoodMultiplier[init_i] = 6;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_reviveingRegion[init_i] = RegionCircle(Point(0.0, 0.0), 0.0);
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_reviveingDeadUnitsGroup[init_i] = UnitGroupEmpty();
    }
    gv_wallEnergyCost = 30.0;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_previousalliesOfPlayer[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerBankTransferedToAntEvo[init_i] = "DidNotTrans";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_playerRatingOriginal[init_i] = 1500.0;
    }
    gv_statsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_statsLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_statsHeaders[init_i] = c_invalidDialogControlId;
    }
    gv_statsToggleDialog = c_invalidDialogId;
    gv_statsToggleButton = c_invalidDialogControlId;
    gv_statsCloseButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_Queen[init_i] = 2;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_Soldier[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_Major[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_Stinger[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_AcidSprayer[init_i] = 1;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_ForagerNest[init_i] = 3;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_SoldierNest[init_i] = 4;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_BroodlingSpawner[init_i] = 5;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_MajorNest[init_i] = 6;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_StingerNest[init_i] = 6;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_AcidSprayerNest[init_i] = 6;
    }
    gv_ctrlGroup_Dialog = c_invalidDialogId;
    gv_ctrlGroup_CloseButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_ctrlGroup_PulldownLabels[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_ctrlGroup_Pulldowns[init_i] = c_invalidDialogControlId;
    }
    gv_ctrlGroup_ToggleDialog = c_invalidDialogId;
    gv_ctrlGroup_ToggleButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_ctrlGroup_DisablePulldownEvents[init_i] = true;
    }
    gv_patchNotes_ToggleDialog = c_invalidDialogId;
    gv_patchNotes_ToggleButton = c_invalidDialogControlId;
    gv_patchNotes_Dialog = c_invalidDialogId;
    gv_patchNotes_Label = c_invalidDialogControlId;
    gv_patchNotes_PageLabel = c_invalidDialogControlId;
    gv_patchNotes_NextButton = c_invalidDialogControlId;
    gv_patchNotes_PreviousButton = c_invalidDialogControlId;
    gv_patchNotes_CloseButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_leaderboardDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_leaderboardLabel[init_i] = c_invalidDialogControlId;
    }
    gv_deadPlayerGroup = PlayerGroupEmpty();
    gv_testerCheckingIs = true;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_EndGameVisionCreateEndgamevision ();
void gf_EndGameVisionDefeatThePlayerandhisallies (int lp_paramPlayer);
void gf_EndGameVisionSedateAllUnitsofplayer (int lp_player);
void gf_EndGameVisionUpdateWinningCase ();
void gf_EndGameVisionCheckifplayerorhisallieshavequeens (int lp_checkPlayer);
void gf_DisplayLoadingMessage (text lp_message);
void gf_CreateIngameLoadingBar ();
bool gf_IsThisPlayerADeveloper (int lp_parametherPlayer);
bool gf_IsThisPlayerATester (int lp_parametherPlayer);
bool gf_DidThisPlayerJoinTheDiscord (int lp_parametherPlayer);
bool gf_IsThisPlayerInEditor (int lp_parametherPlayer);
bool gf_IsThisPlayerInAntCSP (int lp_parametherPlayer);
bool gf_IsThisPlayerInAntLOL (int lp_parametherPlayer);
bool gf_IsThisPlayerInAntNob (int lp_parametherPlayer);
bool gf_IsThisPlayerInAntOCS (int lp_parametherPlayer);
bool gf_IsThisPlayerInWarAnt (int lp_parametherPlayer);
bool gf_IsThisPlayerInAnt101 (int lp_parametherPlayer);
bool gf_NotYetImplemented (int lp_thisConditionDoesnothingdeletewhenaddingothers);
bool gf_DoesthematchcontrainonlyrealplayersNOAI ();
bool gf_IsThisAValidPointForADirtScatter (point lp_pointToValidateForScatter);
bool gf_IsthismapapartofDynamicMapspool (int lp_mapGenNumber);
bool gf_isthisLayoutbadforthisTeamcase (int lp_mapGenNumber);
bool gf_isthisLayoutBadforAIgames (int lp_mapGenNumber);
bool gf_IsThisMapAPriorityMapLayoutBiasStatistics (int lp_mapGenNumber);
void gf_SetMapPriorities ();
void gf_Overridedefaults ();
void gf_VerifyMatchonlyhastesters ();
void gf_PlayerPicksMapGen ();
void gf_FindmeafilteredMapgenWhenCalledwillcallitselfuntillmatchingmapwasfound ();
void gf_PickPlayerRegen2 ();
void gf_SetTheOverallTintBasedOnTheGroundTexture ();
void gf_SetOriginalDirtMapGrassMapRegions ();
void gf_GenerateMapGen ();
void gf_GenerateMapGen2 ();
void gf_SetAllPlayersinthematchintoowndedicatedteams ();
void gf_GenerateStandardTerrain ();
void gf_GenerateStandardPlayers ();
void gf_GenerateInvertedTerrain ();
void gf_GenerateInvertedPlayers ();
void gf_GenerateIslandsTerrain ();
void gf_GenerateIslandsPlayers ();
void gf_GeneratePondTerrain ();
void gf_GeneratePondPlayers ();
void gf_GenerateDonutTerrain ();
void gf_GenerateDountPlayers ();
void gf_GenerateRiverTerrain ();
void gf_GenerateRiverPlayers ();
void gf_GenerateCavesTerrain ();
void gf_GenerateCavesPlayers ();
void gf_GenerateRiverTerrain2 ();
void gf_GenerateCrossPlayers ();
void gf_GenerateRiverTerrain3 ();
void gf_GenerateStreamsPlayers ();
void gf_GenerateYinYangTerrain ();
void gf_GenerateYinYangPlayers ();
void gf_GenerateHouseTerrain ();
void gf_GenerateHousePlayers ();
void gf_GenerateCloverLeafTerrain ();
void gf_GenerateCloverLeafPlayers ();
void gf_CloseGate (int lp_gateNumber);
void gf_OpenGate (int lp_gateNumber);
void gf_GenerateGatesTerrain ();
void gf_GenerateGatesPlayers ();
void gf_GatesTimerRepeater ();
void gf_IfTheGateisOpencloseitifthegateisclosedopenit (int lp_gate);
void gf_LowerAllPillers (bool lp_horizontal);
void gf_RaiseAllPillers (bool lp_horizontal);
void gf_GenerateRiverTerrain4 ();
void gf_GeneratePillersPlayers ();
void gf_PillersCloseAndOpen ();
void gf_GenerateLabyrinthTerrain ();
void gf_GenerateLabyrinthPlayers ();
void gf_GenerateClockTerrain ();
void gf_GenerateClockPlayers ();
void gf_GenerateClockHandLine (int lp_angle);
void gf_GeneratePizzaTerrain ();
void gf_GeneratePizzaPlayers ();
void gf_GenerateRadioactiveTerrain ();
void gf_GenerateRadioactivePlayers ();
void gf_GenerateStripesTerrain ();
void gf_GenerateStripesPlayers ();
void gf_GenerateHexTerrain ();
void gf_GenerateHexPlayers ();
void gf_GenerateOctagonTerrain ();
void gf_GenerateOctagonPlayers ();
void gf_GeneratePongTerrain ();
void gf_GeneratePongPlayers ();
void gf_GenerateWheelTerrain ();
void gf_GenerateWheelPlayers ();
void gf_GenerateRubberWheelTerrain ();
void gf_GenerateRubberWheelPlayers ();
void gf_GenerateChambersTerrain ();
void gf_GenerateChambersPlayers ();
void gf_GenerateHourglassTerrain ();
void gf_GenerateHourglassPlayers ();
void gf_GenerateBunkerTerrain ();
void gf_GenerateBunkerPlayers ();
void gf_GenerateHeartBeatTerrain ();
void gf_GenerateHeartBeatPlayers ();
void gf_GenerateCheeseTerrain ();
void gf_GenerateCheesePlayers ();
void gf_GenerateChipTerrain ();
void gf_GenerateChipPlayers ();
void gf_GenerateAntFarmTerrain ();
void gf_GenerateAntFarmPlayers ();
void gf_GenerateDuelCircleTerrain ();
void gf_GenerateDuelCirclePlayers ();
void gf_GenerateOpenWheelTerrain ();
void gf_GenerateOpenWheelPlayers ();
void gf_GenerateThreatTerrain ();
void gf_GenerateThreatPlayers ();
void gf_GenerateEyeTerrain ();
void gf_GenerateEyePlayers ();
void gf_GenerateCompassTerrain ();
void gf_GenerateCompassPlayers ();
void gf_GenerateChokeTerrain ();
void gf_GenerateChokePlayers ();
void gf_GenerateTeardropTerrain ();
void gf_GenerateTeardropPlayers ();
void gf_GenerateRiverTerrain5 ();
void gf_GenerateRavinePlayers ();
void gf_GenerateTwirlTerrain ();
void gf_GenerateTwirlPlayers ();
void gf_GenerateInvertedChokeTerrain ();
void gf_GenerateInvertedChokePlayers ();
void gf_FixMapGenVision ();
void gf_DeleteInactivePlayers ();
void gf_Createstartingcritters ();
void gf_CreatestartingPlants ();
void gf_MovecamaraSetselectionandspawnunit (unit lp_queenUnit, int lp_player);
void gf_MakeChangesbasedongamemode ();
void gf_CTFCreateGiveAllyFlagDialog ();
void gf_ScatterDirt ();
point gf_CorrectDirtPoint (point lp_pointToBeCorrected);
unitgroup gf_AllQueensOfAllTypesOfPlayer (int lp_ownedbyPlayer, bool lp_alsoIncludeNewQueens, bool lp_alsoIncludeNullRemovedQueens);
void gf_DisplayErrorForPlayer (text lp_errortext, int lp_player);
void gf_MakesureplayersareenemiesonOpenalliance ();
void gf_DebuggingTextMessageFromString (int lp_messageArea, color lp_color, string lp_text);
string gf_ReturnNumberAs64x64Image (int lp_pick09Number);
void gf_ButtonCreateAEvo (int lp_dialogToPlaceButtonon, int lp_sizeHeight, int lp_sizeWeight, int lp_ancorLocation, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, bool lp_attachImageToCenterOfButton, string lp_imageToAttachToCenterOfButton);
void gf_EmptyButtonCreate (int lp_dialogToPlaceButtonon, int lp_sizeHeight, int lp_sizeWeight, int lp_ancorLocation, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, bool lp_attachImageToCenterOfButton, string lp_imageToAttachToCenterOfButton);
void gf_DialogCreateAEvo (int lp_sizeHeight, int lp_sizeWeight, int lp_ancorLocation, int lp_offsetX, int lp_offsetY, bool lp_showDialogToAllPlayers);
void gf_CountAlliedQueensOfPlayer (int lp_player);
void gf_CountEnemyQueensOfPlayer (int lp_player);
string gf_ReturnDebuggingModelFromNumber110 (int lp_number);
void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show);
region gf_Convertpointtosquareregion (point lp_point, fixed lp_size);
void gf_DebuggingRevealRegionEdges (bool lp_bigRegion, region lp_region, int lp_optionalControlOfAmountChosenAmountwillbex10thenumberyouInput, bool lp_skipwaitscancauselagoreveneditorcrashs);
void gf_RemoveDirtinRegion (region lp_region);
region gf_ScanRemovalStringsAndReturnThemAsARegion ();
void gf_PlayerPicksMapGen2 ();
void gf_PlayerPicksMapGen3 ();
void gf_Announcegamevariant ();
void gf_MakesurenoExternalDirthasCreepUnderit ();
void gf_CreatePlayerVisionRequestDialogs ();
void gf_CreatePlayerDefeatedManu ();
void gf_CreateUGUIBar ();
void gf_UpdateUGUIBar (int lp_updateForPlayer);
void gf_CreateSettingsDialog ();
void gf_ChangePlayerSC2UIbasedonlobbychoice ();
void gf_CreateWinchanceDialog ();
void gf_RecalculateMainWinchanceswinrates ();
fixed gf_CalculateBlackWinrateOfPlayer (int lp_player);
fixed gf_CalculateFireWinrateOfPlayer (int lp_player);
fixed gf_CalculateWoodWinrateOfPlayer (int lp_player);
fixed gf_CalculateLeafCutterWinrateOfPlayer (int lp_player);
fixed gf_CalculatePharaohWinrateOfPlayer (int lp_player);
fixed gf_CalculateGhostWinrateOfPlayer (int lp_player);
fixed gf_CalculateRandomWinrateOfPlayer (int lp_player);
fixed gf_CalculateWinrateOfPlayer (int lp_player);
void gf_CalculateWinchanceForEveryone ();
void gf_ShowOnScreenImages ();
void gf_CreateDialogItemsforSC2CustomAEvoGUI ();
void gf_MoveGUIItemstolocationsbasedontheplayerschoice (int lp_parametherPlayer);
void gf_CreateDiscordLinkDialog ();
void gf_StartVoteForStartingFoodAmount ();
void gf_EndVoteForStartingFoodAmount ();
void gf_CalculateVotesForStartingFoodAmount ();
void gf_CreateandStartVoteForGameMode ();
void gf_EndVoteForGameMode ();
void gf_CalculateVotesForGameMode ();
void gf_InitiateMapGenVote ();
void gf_EndVoteForMapLayout ();
void gf_CreateMapGenvotedialog ();
void gf_CreateMapGenvoteChoiceButton (int lp_xOffset, int lp_yOffset, string lp_mapGen);
int gf_ConvertMapLayoutnameintoMapGenInt (string lp_mapLayoutname);
string gf_ConvertMapMapGenInintoLayoutname (int lp_mapGenNumber);
int gf_MapGenvoteReturnamountofbuttonsexpectedtoappear ();
void gf_CalculateMapGenVoteVotes ();
void gf_StartVoteForMapPool ();
void gf_EndVoteForMapPool ();
void gf_CalculateVotesForMapPool ();
void gf_StartVoteForRandomQueen ();
void gf_EndVoteForRandomQueen ();
void gf_CalculateVotesForRandomQueen ();
void gf_CreateStartingUIBarImage ();
string gf_UIBarofPlayer (string lp_uIImageofPlayer);
void gf_CreateSkinsDialog ();
void gf_IfUnitSkinSelectionManuIsOpenCloseit ();
void gf_CheckAllAIsdifficultyandthegamevar ();
void gf_CreateWorkerSwapModelManu ();
void gf_UnlockWorkersIfConditionsaremet (int lp_forPlayer);
string gf_TurnWorkerSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnWorkerSwapModelStringIntoUnitEntry (string lp_queenSwapModelString);
void gf_CreateSoldierSwapModelManu ();
void gf_UnlockSoldiersIfConditionsaremet (int lp_forPlayer);
string gf_TurnSoldierSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnSoldierSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
void gf_CreateQueenSwapModelManu ();
void gf_UnlockQueensIfConditionsaremet (int lp_forPlayer);
string gf_TurnQueenSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnQueenSwapModelStringIntoUnitEntry (string lp_queenSwapModelString);
void gf_CreateBuildingsManu ();
void gf_IfBuildingsSkinSelectionManuIsOpenCloseit ();
void gf_CreateWorkerNestSwapModelManu ();
void gf_UnlockWorkerNestIfConditionsaremet (int lp_forPlayer);
string gf_TurnWorkerNestSwapModelStringIntoModelEntry (string lp_normalSubtrailFarm, string lp_workerNestSwapModelString);
string gf_TurnWorkerNestSwapModelStringIntoUnitEntry (string lp_normalSubtrailFarm, int lp_paramPlayer, string lp_workerNestSwapModelString);
void gf_CreateSoldierNestSwapModelManu ();
void gf_UnlockSoldierNestIfConditionsaremet (int lp_forPlayer);
string gf_TurnSoldierNestSwapModelStringIntoModelEntry (string lp_workerNestSwapModelString);
string gf_TurnSoldierNestSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_workerNestSwapModelString);
void gf_CreateBulkBuilderSwapModelManu ();
void gf_UnlockBulkBuilderIfConditionsaremet (int lp_forPlayer);
string gf_TurnBulkBuilderSwapModelStringIntoModelEntry (string lp_bulkBuilderSwapModelString, string lp_tentecleorBody);
string gf_TurnBulkBuilderSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_bulkBuilderSwapModelString, string lp_tentecleorBody);
void gf_CreateUpgradeChamberSwapModelManu ();
void gf_UnlockUpgradeChamberIfConditionsaremet (int lp_forPlayer);
string gf_TurnUpgradeChamberSwapModelStringIntoModelEntry (string lp_upgradeChamberSwapModelString);
string gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_upgradeChamberSwapModelString);
void gf_CreateSpikesNestSwapModelManu ();
void gf_UnlockSpikesNestIfConditionsaremet (int lp_forPlayer);
string gf_TurnSpikesNestSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnSpikesNestSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_spineNestSwapModelString);
void gf_CreateSpecialtyUnitManu ();
void gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit ();
void gf_CreateMajorSwapModelManu ();
void gf_UnlockMajorIfConditionsaremet (int lp_forPlayer);
string gf_TurnMajorSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnMajorSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
void gf_CreateStingerSwapModelManu ();
void gf_UnlockStingerIfConditionsaremet (int lp_forPlayer);
string gf_TurnStingerSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnStingerSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
void gf_CreateAcidSprayerSwapModelManu ();
void gf_UnlockAcidSprayerIfConditionsaremet (int lp_forPlayer);
string gf_TurnAcidSprayerSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnAcidSprayerSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
void gf_CreateTunnelTremblerSwapModelManu ();
void gf_UnlockTunnelTremblerIfConditionsaremet (int lp_forPlayer);
string gf_TurnTunnelTremblerSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
void gf_CreateKhepriSwapModelManu ();
void gf_UnlockKhepriIfConditionsaremet (int lp_forPlayer);
string gf_TurnKhepriSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnKhepriSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
string gf_TurnKhepriBettleSwapModelStringIntoModelEntry (string lp_queenSwapModelString);
string gf_TurnKhepriBettleSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString);
void gf_SetTutorialPlayers ();
void gf_SetVisualTheme ();
string gf_ReturnRandomGiftColorbasedonFoodType (bool lp_meat);
void gf_Rankedmatchresults (int lp_winningTeam);
void gf_Endmatchafterrankedresults (playergroup lp_winners, playergroup lp_losers);
void gf_Modifyratingofplayer (int lp_player, bool lp_won);
void gf_Calculateaverageteamratings ();
void gf_Endrankednostats ();
bool gf_MatchIsRanked ();
string gf_TeamID (playergroup lp_teamMembers);
int gf_TeamOfPlayer (int lp_player);
int gf_OtherTeam (int lp_currentTeam);
int gf_TeamQueenCount (int lp_player);
int gf_EnemyQueenCount (int lp_player);
void gf_Startqueenmorphforplayer (unit lp_queenUnit, string lp_queenToMorphTo);
void gf_Endqueenmorphforplayer (unit lp_queenUnit, string lp_queenToMorphTo);
void gf_StartAIplayers ();
void gf_StartAI (int lp_bOTID, unit lp_queenToAutomate, int lp_aIProfileToUse);
void gf_Choosecolonystartposition (unit lp_currentQueen);
void gf_Digstartingtunnel (unit lp_currentQueen);
void gf_Queenactions (unit lp_currentQueen);
void gf_Soldieractions (int lp_aIPlayer);
void gf_Structureactions (int lp_aIPlayer);
void gf_AIcheat (unit lp_currentQueen);
region gf_FindSpecialNestReserveRegion (unit lp_currentQueen, region lp_currentRegion);
bool gf_DigIsDiagonal (point lp_digPosition);
void gf_Soldiereggsetup (unit lp_egg, unit lp_nest, bool lp_fastHatch);
void gf_Assassineggsetup (unit lp_egg, unit lp_nest, bool lp_fastHatch);
void gf_Activatedirt (int lp_dirtX, int lp_dirtY);
void gf_Cloakforager (unit lp_forager);
void gf_Uncloakforager (unit lp_forager);
void gf_DetermineModelOptionsforMeatFoodbasedonmapgen ();
string gf_FoodModelForMapgen ();
text gf_ReturnTextColorIdecOfPlayersAlliesForPlayer (int lp_player);
void gf_LoadbankFromAntEvoForPlayer (int lp_player);
void gf_DONOTEDITLoadbankFromAntColoForPlayerDONOTEDIT (int lp_player);
void gf_Savebankforplayer (int lp_player);
void gf_Checkformisaligned2x2 (point lp_unitPosition, int lp_currentPlayer);
void gf_Checkformisaligned3x3 (point lp_unitPosition, int lp_currentPlayer);
int gf_PulldownIndexToCtrlGroup (int lp_pulldownIndex);
int gf_CtrlGroupToPulldownIndex (int lp_ctrlGroup);
void gf_AddUnitToCustomCtrlGroup (int lp_setItToplayerwillbeOwnerofUnitParamifleftunchanged, unit lp_unit, int lp_ctrlGroup);
void gf_Addpatchnotepage (text lp_patchNoteText);
void gf_Updatepatchnotelabels (int lp_currentPlayer);
text gf_GetCompDifficultyName (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose;
trigger gt_SendAlertifInitializationFailed;
trigger gt_Whenfoodiscreatedtintit;
trigger gt_GatesTimerExpires;
trigger gt_PillersGenTimerExpires;
trigger gt_GenerateClock;
trigger gt_ChangeOwnerOfOctaPillarController;
trigger gt_ChangeOwnerOfOctaPillarControllerBack;
trigger gt_LowerOrRisePillers;
trigger gt_MakePongBounce;
trigger gt_MakeSurePongDoesnotstop;
trigger gt_MovecamaraSetselectionandspawnunit;
trigger gt_CTFCreateAFlagoneachqueen;
trigger gt_CTFPickingUpAFlag;
trigger gt_CTFPickingUpAFlagPickupanim;
trigger gt_CTFDroppingFlagOnGroundAnywhere;
trigger gt_CTFClaimFlagOnOwnfriendlyflag;
trigger gt_CTFAllowDisaalowAllyToCarryFlag;
trigger gt_CTFQueenRespawn;
trigger gt_CTFKIlllastownerofflag;
trigger gt_CTFToggleGiveAllyFlagDialog;
trigger gt_CTFToggleGiveAllyFlagDialogRedX;
trigger gt_CTFToggleGiveAllyFlagDialogEsc;
trigger gt_CTFToggleGiveAllyFlagButtonClicked;
trigger gt_UnlockBlockAllyingButton;
trigger gt_Tellmealliesandenemiesofmyself;
trigger gt_TellPlayersToSuggestIdeas;
trigger gt_TellPlayersenvironmentalLayoutInformation;
trigger gt_AnnouncePlayerqueenchoice;
trigger gt_YESorNOresponsetorequestofvision;
trigger gt_PlayerClicksRequestVisionButton;
trigger gt_PlayerclicksDefeatManuButton;
trigger gt_UpdateUGUIBarTrigger;
trigger gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger;
trigger gt_SettingsMenuToggleButtonCloseSettingsMenu;
trigger gt_SettingsMenuToggleredXCloseSettingsMenu;
trigger gt_SettingsMenuToggleEscCloseSettingsMenu;
trigger gt_SettingsMenuHideRightSideToggleCloseSettingsMenu;
trigger gt_PlayerClickSettingsMenuGUIOptButtons;
trigger gt_ToggleWinrateWInChanceDialog;
trigger gt_Playerleavessoupdatethewinchancedialog;
trigger gt_DiscordLinkDialogToggle;
trigger gt_DiscordLinkDialogToggleByword;
trigger gt_MakePlayersVoteForStartingFoodAmount;
trigger gt_PLAYERCLICKPlayerVotedForFoodAmount;
trigger gt_MakePlayersVoteForGameMode;
trigger gt_PLAYERCLICKPlayerVotedForGameMode;
trigger gt_PlayerAClickedMapGenVoteButton;
trigger gt_MakePlayersVoteForMapPool;
trigger gt_PLAYERCLICKPlayerVotedForMapPool;
trigger gt_MakePlayersVoteForRandomQueen;
trigger gt_PLAYERCLICKPlayerVotedForRandomQueen;
trigger gt_ToggleUIBarManu;
trigger gt_SetUIBarbasedonplayerChoice;
trigger gt_ToggleSkinsmanu;
trigger gt_SkinsManuButtonX;
trigger gt_UnitSkinsButtonClose;
trigger gt_UnitSkinsButtonOpen;
trigger gt_PlayerClicksEscapesocloseSkinsManu;
trigger gt_BulkBuildersBuiltbyplayer;
trigger gt_UpgradeChaberSwarmAndMech;
trigger gt_TimeEnforceWHU;
trigger gt_WorkerHologramUnlock;
trigger gt_TimeEnforceSSU;
trigger gt_SoldierSwarmUnlock;
trigger gt_TimeEnforceQSHU;
trigger gt_QueenSpikeyHeadUnlock;
trigger gt_ToggleWorkerSkinsManu;
trigger gt_PlayerClicksWorkerButton;
trigger gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings;
trigger gt_ToggleSoldierSkinsManu;
trigger gt_PlayerClicksSoldierButton;
trigger gt_ToggleQueenSkinsManu;
trigger gt_PlayerClicksQueenButton;
trigger gt_ToggleBuildingsManu;
trigger gt_ModelSwapSubTrail;
trigger gt_ModelSwapFarmTrail;
trigger gt_MakesurenewerWorkerNestsusetherightmodel;
trigger gt_ToggleWorkerNestSkinsManu;
trigger gt_PlayerClicksWorkerNestButton;
trigger gt_MakesurenewerSoldierNestsusetherightmodel;
trigger gt_ToggleSoldierNestSkinsManu;
trigger gt_PlayerClicksSoldierNestButton;
trigger gt_MakesurenewerBulkBuilderusetherightmodelCreation;
trigger gt_MakesurenewerBulkBuilderusetherightmodelPrograssion;
trigger gt_ToggleBulkBuilderSkinsManu;
trigger gt_PlayerClicksBulkBuilderButton;
trigger gt_MakesurenewerUpgradeChamberusetherightmodel;
trigger gt_ToggleUpgradeChamberSkinsManu;
trigger gt_PlayerClicksUpgradeChamberButton;
trigger gt_MakesurenewerSpikenestsusetherightmodel;
trigger gt_ToggleSpikesNestSkinsManu;
trigger gt_PlayerClicksSpikesNestButton;
trigger gt_ToggleSpecialtyUnitManu;
trigger gt_MajorSpawnssochangeitsmodel;
trigger gt_ToggleMajorSkinsManu;
trigger gt_PlayerClicksMajorButton;
trigger gt_StingerSpawnssochangeitsmodel;
trigger gt_ToggleStingerSkinsManu;
trigger gt_PlayerClicksStingerButton;
trigger gt_AcidSprayerSpawnssochangeitsmodel;
trigger gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2;
trigger gt_ToggleAcidSprayerSkinsManu;
trigger gt_PlayerClicksAcidSprayerButton;
trigger gt_TunnelTremblerSpawnssochangeitsmodel;
trigger gt_ToggleTunnelTremblerSkinsManu;
trigger gt_PlayerClicksTunnelTremblerButton;
trigger gt_KhepriSpawnssochangeitsmodel;
trigger gt_KhepriBettleSpawnssochangeitsmodel;
trigger gt_ToggleKhepriSkinsManu;
trigger gt_PlayerClicksKhepriButton;
trigger gt_TutorialTIp1Digandpickqueen;
trigger gt_TutorialTip2Build5ForagerNests;
trigger gt_TutorialTip3BuildmoreSoldierNests;
trigger gt_TutorialTip4Getspeedupgrade;
trigger gt_TutorialTip5PickTier1Ability;
trigger gt_RunSnowdownthescreenofallplayers;
trigger gt_ReplacePingSoundWithChristmasPingSound;
trigger gt_ReplaceSoundtrackChristmasSoundtrack;
trigger gt_GiveCreatedUnitsChristmashats;
trigger gt_SetCarryFoodBasedOnFoodTypeChristmas;
trigger gt_ModelSwapFoodtoGift;
trigger gt_Queendeath;
trigger gt_Modifyallratings;
trigger gt_Initializerankedresultsdialog;
trigger gt_PlayerClickedQueenChoiceButton;
trigger gt_PlayersQueenMorphFinished;
trigger gt_CancelmorphRandom;
trigger gt_MorphEggsFixer;
trigger gt_InitializeAIprofiles;
trigger gt_AIdamagepoint;
trigger gt_Reinforcebasedefense;
trigger gt_AIdifficultyFoodMultiplier;
trigger gt_AllowPlantCollection;
trigger gt_AllowMeatCollection;
trigger gt_DenyPlantCollection;
trigger gt_DenyMeatCollection;
trigger gt_Makeidleforagerswork;
trigger gt_FoodTypeEnforcer;
trigger gt_SetCarryFoodBasedOnFoodType;
trigger gt_Makedeselectedforagerswork;
trigger gt_Makewaitingforagerswork;
trigger gt_Makeidlesoldierswork;
trigger gt_Makedeselectedsoldierswork;
trigger gt_Makelostsoldierswork;
trigger gt_BulkBuilderWasCreated;
trigger gt_ModelAttachUpgradeChamber;
trigger gt_ModelSpeedUpgradeChamberStarted;
trigger gt_ModelSpeedUpgradeChamberEnded;
trigger gt_ModelScaleUpgradeChamberonspawnResize;
trigger gt_ModelDeleteUpgradeChamberonrevert;
trigger gt_WhenAnimalDiesMakeittiny;
trigger gt_Createforagernest;
trigger gt_Createsoldiernest;
trigger gt_Createassassinnest;
trigger gt_Workereggspawn;
trigger gt_Workeregghatch;
trigger gt_Soldiereggspawnnormal;
trigger gt_Soldiereggspawnfast;
trigger gt_Soldieregghatch;
trigger gt_Assassineggspawnnormal;
trigger gt_Assassineggspawnfast;
trigger gt_Assassinegghatch;
trigger gt_Broodlingspawn;
trigger gt_Broodlingspawnerbuilt;
trigger gt_Addforagernesttocontrolgroup;
trigger gt_Addsoldiernesttocontrolgroup;
trigger gt_Addmajornesttocontrolgroup;
trigger gt_AddTunnelTremblernesttocontrolgroup;
trigger gt_Addstingernesttocontrolgroup;
trigger gt_AddKheprinesttocontrolgroup;
trigger gt_Addacidsprayernesttocontrolgroup;
trigger gt_AddGraveDiggernesttocontrolgroup;
trigger gt_Majorspawn;
trigger gt_TunnelTremblerspawn;
trigger gt_Stingerspawn;
trigger gt_Kheprispawn;
trigger gt_Acidsprayerspawn;
trigger gt_GraveDiggerspawn;
trigger gt_UnbreakableDirtCreated;
trigger gt_DirtCreated;
trigger gt_SpikeNestDeath;
trigger gt_antkills2cash;
trigger gt_Dirtdestroyed;
trigger gt_Dirtdamaged;
trigger gt_Createcorpse;
trigger gt_Foragerkilled;
trigger gt_Soldierkilled;
trigger gt_Assassinkilled;
trigger gt_Majordirtclear;
trigger gt_Upgradedforagernestdies;
trigger gt_Broodlingkillcredittransfer;
trigger gt_PlayerClickedBulkBuildButton1Typenest;
trigger gt_PlayerClickedBulkBuildButtonNestMix;
trigger gt_QueenUpgradeDebuffApplier;
trigger gt_QueenUpgradeDebuffRemover;
trigger gt_WorkerUpgradeDebuffApplier;
trigger gt_WorkerUpgradeDebuffRemover;
trigger gt_SoldierUpgradeDebuffApplier;
trigger gt_SoldierUpgradeDebuffRemover;
trigger gt_SpecialtyUnitUpgradeDebuffApplier;
trigger gt_SpecialtyUnitUpgradeDebuffRemover;
trigger gt_BuildingUpgradeDebuffApplier;
trigger gt_BuildingUpgradeDebuffRemover;
trigger gt_RockDropStart;
trigger gt_RockDropExc;
trigger gt_BastionDrumsExc;
trigger gt_BerserkerDrumsExc;
trigger gt_AcidVomitExc;
trigger gt_LandMineExc;
trigger gt_LifeSuction;
trigger gt_LifeShare;
trigger gt_WaterSpringExc;
trigger gt_EnergyRegenAura;
trigger gt_BuildingRegenAura;
trigger gt_HideBuilding;
trigger gt_MyWalkingBoots;
trigger gt_Insanity;
trigger gt_Web;
trigger gt_SickeningStrikes;
trigger gt_GravelPileDies;
trigger gt_ZombieFungus;
trigger gt_TightSight;
trigger gt_ClenchingClaws;
trigger gt_Disguise;
trigger gt_ShapeShift;
trigger gt_EnergyEfficiency;
trigger gt_ToughenedCharacter;
trigger gt_SwarmCall;
trigger gt_FearStare;
trigger gt_BeastCall;
trigger gt_BeastBeneath;
trigger gt_BeastBeneathEnabler;
trigger gt_BeastInside;
trigger gt_PiedPiper;
trigger gt_QueensReinforcements;
trigger gt_Vodoo;
trigger gt_Earthquake;
trigger gt_HealingEmbrace;
trigger gt_ShieldofThorns;
trigger gt_CheatDeath;
trigger gt_TimeOut;
trigger gt_Fogofwar;
trigger gt_Curse;
trigger gt_RiseTheDeadStarted;
trigger gt_UnitDiesInReviveRegion;
trigger gt_RiseTheDeadEnded;
trigger gt_BuildAPlant;
trigger gt_PreventbuildingPlantationtooclosetodirt;
trigger gt_PreventbuildingPlantationtooclosetoeachother;
trigger gt_PassivePlantationPlant;
trigger gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp;
trigger gt_CheckIfPlayerReaserchedTier3Ability;
trigger gt_CheckIfPlayerReaserchedTier2Ability;
trigger gt_CheckIfPlayerReaserchedTier1Ability;
trigger gt_Startorstopsendingoutspikes;
trigger gt_SpikeSurvival;
trigger gt_SpikeDisband;
trigger gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot;
trigger gt_QueenSprint;
trigger gt_Wallplacement;
trigger gt_DroneControlPharaohant;
trigger gt_MoveAbilityPickup;
trigger gt_MoveAbilityDropoff;
trigger gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit;
trigger gt_RapidMutationGhostAnt;
trigger gt_AttachAbilityIcon;
trigger gt_RepelAntsLeafCutter;
trigger gt_WallfinishCreep;
trigger gt_Cancelwall;
trigger gt_Dig;
trigger gt_Queenacidicstrikesstart;
trigger gt_Queenacidicstrikesend;
trigger gt_UnlockMutagenicBite;
trigger gt_UnlockPassivePlantaplant;
trigger gt_UnlockSpiritsofthegraveyard;
trigger gt_Spiritsofthegraveyard;
trigger gt_MutagenicBite;
trigger gt_SpeedCycle;
trigger gt_Killescapedqueens;
trigger gt_Upgradeforagernesttofarm;
trigger gt_Upgradeforagernesttosubterraneantrail;
trigger gt_DoubleCollectionFoodActivator;
trigger gt_DoubleCollectionFoodApplier;
trigger gt_SelectSoldiersWorkersOwnedByThisNest;
trigger gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation;
trigger gt_Enablestatrecording;
trigger gt_RespawnFood;
trigger gt_Fireantresourcescore;
trigger gt_PlayerleavesRecalculateMainWinchanceswinrates;
trigger gt_Playerleavesincreasegameswon;
trigger gt_Playerleavesincreasegamesplayed;
trigger gt_AlliancechangesChangeAllyCounter;
trigger gt_PlayerleavesSave;
trigger gt_PlayerleavesRemoveunits;
trigger gt_Abilitydig;
trigger gt_Abilityacidicstrikes;
trigger gt_Abilityvenomspray;
trigger gt_Abilitybuildwall;
trigger gt_AbilityupgradeforagernestFarm;
trigger gt_AbilityupgradeforagernestSTrail;
trigger gt_Abilityupgradesoldiernest;
trigger gt_Abilityupgradebroodlingspawner;
trigger gt_Abilityupgradeunitdamage1;
trigger gt_Abilityupgradeunitdamage2;
trigger gt_Abilityupgradeunitdamage3;
trigger gt_Abilityupgradeunitarmor1;
trigger gt_Abilityupgradeunitarmor2;
trigger gt_Abilityupgradeunitarmor3;
trigger gt_Abilityupgradesoldierspeed;
trigger gt_Producequeenblack;
trigger gt_Producequeenfire;
trigger gt_Producequeenwood;
trigger gt_Producewall;
trigger gt_Produceforager;
trigger gt_Producesoldier;
trigger gt_Produceacidsprayer;
trigger gt_Producemajor;
trigger gt_Producestinger;
trigger gt_Produceforagernest;
trigger gt_Producesoldiernest;
trigger gt_Producebroodlingspawner;
trigger gt_Producemajornest;
trigger gt_Producestingernest;
trigger gt_Produceacidsprayernest;
trigger gt_Unitkilled;
trigger gt_Initializestatsdialog;
trigger gt_Togglestats;
trigger gt_HidestatsButton;
trigger gt_HidestatsKey;
trigger gt_Initializecontrolgroupdialog;
trigger gt_Togglectrlgroupconfig;
trigger gt_HidectrlgroupconfigButton;
trigger gt_HidectrlgroupconfigKey;
trigger gt_Setcontrolgroups;
trigger gt_Initializepatchnotesdialog;
trigger gt_Togglepatchnotes;
trigger gt_HidepatchnotesButton;
trigger gt_HidepatchnotesKey;
trigger gt_Patchnotesnextbutton;
trigger gt_Patchnotesnextprevious;
trigger gt_Initializeleaderboard;
trigger gt_UpdateleaderboardUnranked;
trigger gt_UpdateleaderboardUnrankedOld;
trigger gt_UpdateleaderboardRanked;
trigger gt_UpdateleaderboardRankedOld;
trigger gt_UpgReset;
trigger gt_FeedCommand;
trigger gt_KnokKnokCommand;
trigger gt_TellPlayersAboutFeedCommand;
trigger gt_DisableTesterChecking;
trigger gt_dance;
trigger gt_Spawn1Fromeachunittype;
trigger gt_UnlockUpgrade;
trigger gt_RevealHideall;
trigger gt_KillAllDirt;
trigger gt_ShowMapCords;
trigger gt_SkinUnlocker;

//--------------------------------------------------------------------------------------------------
// Custom Script: Click me
//--------------------------------------------------------------------------------------------------
// 
// This is the Ant Colonies Development Map.
// 
// Use it to learn, create custom versions, or anything else.
// 
// If you publish a map based on this one, DO keep the reference
// to "http://stardepot.org/ants/dev" in the map description.
// 
// Join the Discord server at https://discord.gg/DBRJVTP
// 
//     Kenoli
//     March 2018
// 

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_EndGameVisionCreateEndgamevision () {
    // Variable Declarations
    int lv_indexPlayer;

    // Automatic Variable Declarations
    playergroup auto074B9758_g;
    int auto074B9758_var;

    // Variable Initialization

    // Implementation
    if (true) {
        auto074B9758_g = PlayerGroupActive();
        auto074B9758_var = -1;
        while (true) {
            auto074B9758_var = PlayerGroupNextPlayer(auto074B9758_g, auto074B9758_var);
            if (auto074B9758_var < 0) { break; }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "EndgameVisionLoseDenier", c_unitCreateIgnorePlacement, auto074B9758_var, Point(1.0, 1.0));
            gv_endgameVisionUnitofplayer[auto074B9758_var] = UnitLastCreated();
        }
    }

    gf_CreatePlayerDefeatedManu();
}

void gf_EndGameVisionDefeatThePlayerandhisallies (int lp_paramPlayer) {
    // Variable Declarations
    unitgroup lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing;
    playergroup lv_alliesOfParamPlayer;
    playergroup lv_nonDefeatedPlayers;
    int lv_nonDefeatedPlayersIndex;
    int lv_defeatedPlayersIndex;
    int lv_repeater;
    int lv_alphaOfDialog;

    // Automatic Variable Declarations
    playergroup autoFCD64DD4_g;
    int autoFCD64DD4_var;
    playergroup auto996C9D3F_g;
    int auto996C9D3F_var;
    playergroup autoE4B89049_g;
    int autoE4B89049_var;
    playergroup auto36CBEB99_g;
    int auto36CBEB99_var;
    playergroup autoDC2D333F_g;
    int autoDC2D333F_var;
    playergroup autoAA6D56AF_g;
    int autoAA6D56AF_var;
    playergroup auto9DF740DF_g;
    int auto9DF740DF_var;
    playergroup auto3BFF7E8A_g;
    playergroup auto00D1779B_g;
    int auto00D1779B_var;
    playergroup auto81F3318B_g;
    int auto81F3318B_var;
    playergroup autoF740505B_g;
    int autoF740505B_var;
    playergroup autoFB846CD3_g;
    int autoFB846CD3_var;
    playergroup autoAE6ED1D9_g;
    int autoAE6ED1D9_var;
    playergroup auto0534C25C_g;
    int auto0534C25C_var;
    const int autoB2197B8B_ae = 100;
    const int autoB2197B8B_ai = 1;
    playergroup auto8E367F44_g;
    int auto8E367F44_var;
    playergroup autoAD20FC1C_g;
    playergroup autoC2C9435F_g;
    int autoC2C9435F_var;

    // Variable Initialization
    lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing = UnitGroupEmpty();
    lv_alliesOfParamPlayer = libNtve_gf_UnionOfPlayerGroups(PlayerGroupAlliance(c_playerGroupAlly, lp_paramPlayer), PlayerGroupSingle(lp_paramPlayer));
    lv_nonDefeatedPlayers = PlayerGroupEmpty();
    lv_alphaOfDialog = 100;

    // Implementation
    autoFCD64DD4_g = lv_alliesOfParamPlayer;
    autoFCD64DD4_var = -1;
    while (true) {
        autoFCD64DD4_var = PlayerGroupNextPlayer(autoFCD64DD4_g, autoFCD64DD4_var);
        if (autoFCD64DD4_var < 0) { break; }
        lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewQueen", "LoseDenier", "", autoFCD64DD4_var, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CTFFlag", "", "", autoFCD64DD4_var, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", autoFCD64DD4_var, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", autoFCD64DD4_var, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitGroupCount(lv_unitsthatshouldpreventAllyOfParamPlayerfromlosing, c_unitCountAlive) != 0)) {
            PlayerGroupRemove(lv_alliesOfParamPlayer, autoFCD64DD4_var);
        }
        else {
            libNtve_gf_SetAllianceBetweenTwoPlayerGroups(PlayerGroupSingle(lp_paramPlayer), lv_alliesOfParamPlayer, libNtve_ge_AllianceSetting_Enemy);
        }
    }
    gf_DialogCreateAEvo(38, 38, c_anchorTopRight, 5, 5, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    auto996C9D3F_g = lv_alliesOfParamPlayer;
    auto996C9D3F_var = -1;
    while (true) {
        auto996C9D3F_var = PlayerGroupNextPlayer(auto996C9D3F_g, auto996C9D3F_var);
        if (auto996C9D3F_var < 0) { break; }
        gv_playerDefeated[auto996C9D3F_var] = true;
        PlayerGroupAdd(gv_defeatedPlayersPlayerGruop, auto996C9D3F_var);
        PlayerGroupAdd(gv_deadPlayerGroup, auto996C9D3F_var);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (TextWithColor(PlayerName(auto996C9D3F_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto996C9D3F_var, false))) + StringToText(" Has no queen and Lost the match.")));
    }
    gf_RecalculateMainWinchanceswinrates();
    autoE4B89049_g = lv_alliesOfParamPlayer;
    autoE4B89049_var = -1;
    while (true) {
        autoE4B89049_var = PlayerGroupNextPlayer(autoE4B89049_g, autoE4B89049_var);
        if (autoE4B89049_var < 0) { break; }
        gf_EndGameVisionSedateAllUnitsofplayer(autoE4B89049_var);
    }
    auto36CBEB99_g = lv_alliesOfParamPlayer;
    auto36CBEB99_var = -1;
    while (true) {
        auto36CBEB99_var = PlayerGroupNextPlayer(auto36CBEB99_g, auto36CBEB99_var);
        if (auto36CBEB99_var < 0) { break; }
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto36CBEB99_var), true);
        gf_EmptyButtonCreate(DialogLastCreated(), 40, 40, c_anchorCenter, 0, 0, StringExternal("Param/Value/2B2E18EC"), StringExternal("Param/Value/45444B56"), false, null);
    }
    autoDC2D333F_g = lv_alliesOfParamPlayer;
    autoDC2D333F_var = -1;
    while (true) {
        autoDC2D333F_var = PlayerGroupNextPlayer(autoDC2D333F_g, autoDC2D333F_var);
        if (autoDC2D333F_var < 0) { break; }
        CameraLockInput(autoDC2D333F_var, true);
        libNtve_gf_SwooshCamera(autoDC2D333F_var, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 220.0, gv_absoluteCenterpoint, 5.0);
    }
    autoAA6D56AF_g = lv_alliesOfParamPlayer;
    autoAA6D56AF_var = -1;
    while (true) {
        autoAA6D56AF_var = PlayerGroupNextPlayer(autoAA6D56AF_g, autoAA6D56AF_var);
        if (autoAA6D56AF_var < 0) { break; }
        PlayerSetAlliance(autoAA6D56AF_var, c_allianceIdVision, autoAA6D56AF_var, false);
    }
    auto9DF740DF_g = lv_alliesOfParamPlayer;
    auto9DF740DF_var = -1;
    while (true) {
        auto9DF740DF_var = PlayerGroupNextPlayer(auto9DF740DF_g, auto9DF740DF_var);
        if (auto9DF740DF_var < 0) { break; }
        auto3BFF7E8A_g = lv_alliesOfParamPlayer;
        lv_defeatedPlayersIndex = -1;
        while (true) {
            lv_defeatedPlayersIndex = PlayerGroupNextPlayer(auto3BFF7E8A_g, lv_defeatedPlayersIndex);
            if (lv_defeatedPlayersIndex < 0) { break; }
            PlayerSetAlliance(auto9DF740DF_var, c_allianceIdVision, lv_defeatedPlayersIndex, false);
        }
    }
    auto00D1779B_g = lv_alliesOfParamPlayer;
    auto00D1779B_var = -1;
    while (true) {
        auto00D1779B_var = PlayerGroupNextPlayer(auto00D1779B_g, auto00D1779B_var);
        if (auto00D1779B_var < 0) { break; }
        DialogControlSetVisible(gv_dialogSC2Everyting, PlayerGroupSingle(auto00D1779B_var), false);
        DialogControlSetVisible(gv_resourcePanelMain, PlayerGroupSingle(auto00D1779B_var), false);
        DialogControlSetVisible(gv_gUIFrame[0], PlayerGroupSingle(auto00D1779B_var), false);
        DialogControlSetVisible(gv_gUIFrame[1], PlayerGroupSingle(auto00D1779B_var), false);
    }
    auto81F3318B_g = lv_alliesOfParamPlayer;
    auto81F3318B_var = -1;
    while (true) {
        auto81F3318B_var = PlayerGroupNextPlayer(auto81F3318B_g, auto81F3318B_var);
        if (auto81F3318B_var < 0) { break; }
        DialogSetVisible(gv_uGUIBarBoardersDialogEnergybar, PlayerGroupSingle(auto81F3318B_var), false);
        DialogSetVisible(gv_uGUIBarBoardersDialogHealthBar, PlayerGroupSingle(auto81F3318B_var), false);
        DialogSetVisible(gv_uGUIBarFramesDialog, PlayerGroupSingle(auto81F3318B_var), false);
    }
    autoF740505B_g = lv_alliesOfParamPlayer;
    autoF740505B_var = -1;
    while (true) {
        autoF740505B_var = PlayerGroupNextPlayer(autoF740505B_g, autoF740505B_var);
        if (autoF740505B_var < 0) { break; }
        SoundPlayForPlayer(SoundLink("DiscordSound", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 200.0, 0.0);
        libNtve_gf_SetDialogItemEditorValue(gv_discordLinkCopyEditBox[autoF740505B_var], "https://discord.gg/SZ3ekuK", PlayerGroupSingle(autoF740505B_var));
        DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(autoF740505B_var), true);
        gv_discordLinkDialogOpen[autoF740505B_var] = true;
        DialogSetVisible(gv_discordLinkDefeatScreen[autoF740505B_var], PlayerGroupSingle(autoF740505B_var), true);
    }
    autoFB846CD3_g = lv_alliesOfParamPlayer;
    autoFB846CD3_var = -1;
    while (true) {
        autoFB846CD3_var = PlayerGroupNextPlayer(autoFB846CD3_g, autoFB846CD3_var);
        if (autoFB846CD3_var < 0) { break; }
        UnitGroupSelect(UnitGroupSelected(autoFB846CD3_var), autoFB846CD3_var, true);
    }
    autoAE6ED1D9_g = lv_alliesOfParamPlayer;
    autoAE6ED1D9_var = -1;
    while (true) {
        autoAE6ED1D9_var = PlayerGroupNextPlayer(autoAE6ED1D9_g, autoAE6ED1D9_var);
        if (autoAE6ED1D9_var < 0) { break; }
        DialogSetVisible(gv_playerDefeatedManuDialog[0], PlayerGroupSingle(autoAE6ED1D9_var), true);
    }
    Wait(5.0, c_timeGame);
    auto0534C25C_g = lv_alliesOfParamPlayer;
    auto0534C25C_var = -1;
    while (true) {
        auto0534C25C_var = PlayerGroupNextPlayer(auto0534C25C_g, auto0534C25C_var);
        if (auto0534C25C_var < 0) { break; }
        DialogSetVisible(gv_playerDefeatedManuDialog[1], PlayerGroupSingle(auto0534C25C_var), true);
    }
    DialogSetTransparency(gv_playerDefeatedManuDialog[1], lv_alphaOfDialog);
    lv_repeater = 1;
    for ( ; ( (autoB2197B8B_ai >= 0 && lv_repeater <= autoB2197B8B_ae) || (autoB2197B8B_ai < 0 && lv_repeater >= autoB2197B8B_ae) ) ; lv_repeater += autoB2197B8B_ai ) {
        Wait(0.03, c_timeGame);
        DialogSetTransparency(gv_playerDefeatedManuDialog[1], lv_alphaOfDialog);
        lv_alphaOfDialog = (lv_alphaOfDialog - 1);
    }
    auto8E367F44_g = lv_alliesOfParamPlayer;
    auto8E367F44_var = -1;
    while (true) {
        auto8E367F44_var = PlayerGroupNextPlayer(auto8E367F44_g, auto8E367F44_var);
        if (auto8E367F44_var < 0) { break; }
        autoAD20FC1C_g = lv_nonDefeatedPlayers;
        lv_nonDefeatedPlayersIndex = -1;
        while (true) {
            lv_nonDefeatedPlayersIndex = PlayerGroupNextPlayer(autoAD20FC1C_g, lv_nonDefeatedPlayersIndex);
            if (lv_nonDefeatedPlayersIndex < 0) { break; }
            DialogSetVisible(gv_playerVisionRequestDialogForPlayer[auto8E367F44_var], PlayerGroupSingle(lv_nonDefeatedPlayersIndex), true);
        }
    }
    autoC2C9435F_g = PlayerGroupActive();
    autoC2C9435F_var = -1;
    while (true) {
        autoC2C9435F_var = PlayerGroupNextPlayer(autoC2C9435F_g, autoC2C9435F_var);
        if (autoC2C9435F_var < 0) { break; }
        if ((gv_playerDefeated[autoC2C9435F_var] == false) && (PlayerType(autoC2C9435F_var) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_nonDefeatedPlayers, autoC2C9435F_var);
        }

    }
}

void gf_EndGameVisionSedateAllUnitsofplayer (int lp_player) {
    // Variable Declarations
    unit lv_indexUnit;

    // Automatic Variable Declarations
    unitgroup autoD3CC2E65_g;
    int autoD3CC2E65_u;
    unit autoD3CC2E65_var;
    unitgroup auto68810965_g;
    int auto68810965_u;
    unit auto68810965_var;
    unitgroup auto6A4B4221_g;
    int auto6A4B4221_u;
    unit auto6A4B4221_var;
    unitgroup auto7BC1F22B_g;
    int auto7BC1F22B_u;
    unit auto7BC1F22B_var;
    unitgroup auto5BB107D6_g;
    int auto5BB107D6_u;
    unit auto5BB107D6_var;
    unitgroup auto4125F0C4_g;
    int auto4125F0C4_u;
    unit auto4125F0C4_var;

    // Variable Initialization

    // Implementation
    autoD3CC2E65_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "Broodling", "SmallSpikeNest", lp_player, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD3CC2E65_u = UnitGroupCount(autoD3CC2E65_g, c_unitCountAll);
    for (;; autoD3CC2E65_u -= 1) {
        autoD3CC2E65_var = UnitGroupUnitFromEnd(autoD3CC2E65_g, autoD3CC2E65_u);
        if (autoD3CC2E65_var == null) { break; }
        UnitBehaviorAdd(autoD3CC2E65_var, "SedatedUnit", autoD3CC2E65_var, 1);
    }
    auto68810965_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Hydralisk", "Locust", "TunnelTrembler", lp_player, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto68810965_u = UnitGroupCount(auto68810965_g, c_unitCountAll);
    for (;; auto68810965_u -= 1) {
        auto68810965_var = UnitGroupUnitFromEnd(auto68810965_g, auto68810965_u);
        if (auto68810965_var == null) { break; }
        UnitBehaviorAdd(auto68810965_var, "SedatedUnit", auto68810965_var, 1);
    }
    auto6A4B4221_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Ultralisk", "LocustMP", "MediumSpikeNest", lp_player, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A4B4221_u = UnitGroupCount(auto6A4B4221_g, c_unitCountAll);
    for (;; auto6A4B4221_u -= 1) {
        auto6A4B4221_var = UnitGroupUnitFromEnd(auto6A4B4221_g, auto6A4B4221_u);
        if (auto6A4B4221_var == null) { break; }
        UnitBehaviorAdd(auto6A4B4221_var, "SedatedUnit", auto6A4B4221_var, 1);
    }
    auto7BC1F22B_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7BC1F22B_u = UnitGroupCount(auto7BC1F22B_g, c_unitCountAll);
    for (;; auto7BC1F22B_u -= 1) {
        auto7BC1F22B_var = UnitGroupUnitFromEnd(auto7BC1F22B_g, auto7BC1F22B_u);
        if (auto7BC1F22B_var == null) { break; }
        UnitBehaviorAdd(auto7BC1F22B_var, "SedatedUnit", auto7BC1F22B_var, 1);
    }
    auto5BB107D6_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("WorkerEgg", "SoldierEgg", "", c_playerAny, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5BB107D6_u = UnitGroupCount(auto5BB107D6_g, c_unitCountAll);
    for (;; auto5BB107D6_u -= 1) {
        auto5BB107D6_var = UnitGroupUnitFromEnd(auto5BB107D6_g, auto5BB107D6_u);
        if (auto5BB107D6_var == null) { break; }
        UnitRemove(auto5BB107D6_var);
    }
    auto4125F0C4_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "", "", c_playerAny, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4125F0C4_u = UnitGroupCount(auto4125F0C4_g, c_unitCountAll);
    for (;; auto4125F0C4_u -= 1) {
        auto4125F0C4_var = UnitGroupUnitFromEnd(auto4125F0C4_g, auto4125F0C4_u);
        if (auto4125F0C4_var == null) { break; }
        if ((UnitHasBehavior2(auto4125F0C4_var, "SubterraneanTrail2") == true)) {
            UnitBehaviorRemove(auto4125F0C4_var, "SubterraneanTrail2", 1);
        }

    }
}

void gf_EndGameVisionUpdateWinningCase () {
    // Variable Declarations
    int[7] lv_nonDefeatedEnemiesofIndexPlayer;
    int lv_indexPlayer;
    int lv_indexPlayer2;
    bool lv_someoneWon;

    // Automatic Variable Declarations
    playergroup auto48DD4092_g;
    playergroup autoDD6069A1_g;
    playergroup auto6D9DFB60_g;
    playergroup autoABDE7206_g;
    int autoABDE7206_var;

    // Variable Initialization

    // Implementation
    auto48DD4092_g = PlayerGroupActive();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto48DD4092_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        autoDD6069A1_g = PlayerGroupAlliance(c_playerGroupEnemy, lv_indexPlayer);
        lv_indexPlayer2 = -1;
        while (true) {
            lv_indexPlayer2 = PlayerGroupNextPlayer(autoDD6069A1_g, lv_indexPlayer2);
            if (lv_indexPlayer2 < 0) { break; }
            if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, lv_indexPlayer), lv_indexPlayer2) == true) && (PlayerGroupHasPlayer(PlayerGroupActive(), lv_indexPlayer2) == true) && (gv_playerDefeated[lv_indexPlayer2] == false)) {
                lv_nonDefeatedEnemiesofIndexPlayer[lv_indexPlayer] = (lv_nonDefeatedEnemiesofIndexPlayer[lv_indexPlayer] + 1);
            }

        }
    }
    auto6D9DFB60_g = PlayerGroupActive();
    lv_indexPlayer = -1;
    while (true) {
        lv_indexPlayer = PlayerGroupNextPlayer(auto6D9DFB60_g, lv_indexPlayer);
        if (lv_indexPlayer < 0) { break; }
        if ((lv_nonDefeatedEnemiesofIndexPlayer[lv_indexPlayer] == 0)) {
            lv_someoneWon = true;
        }

    }
    Wait(0.1, c_timeGame);
    if ((lv_someoneWon == true)) {
        autoABDE7206_g = gv_defeatedPlayersPlayerGruop;
        autoABDE7206_var = -1;
        while (true) {
            autoABDE7206_var = PlayerGroupNextPlayer(autoABDE7206_g, autoABDE7206_var);
            if (autoABDE7206_var < 0) { break; }
            UnitKill(gv_endgameVisionUnitofplayer[autoABDE7206_var]);
        }
    }

}

void gf_EndGameVisionCheckifplayerorhisallieshavequeens (int lp_checkPlayer) {
    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_unitsthatshouldpreventCheckPlayerfromlosing;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitsthatshouldpreventCheckPlayerfromlosing = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_unitsthatshouldpreventCheckPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewQueen", "LoseDenier", "", lp_checkPlayer, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsthatshouldpreventCheckPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("CTFFlag", "", "", lp_checkPlayer, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsthatshouldpreventCheckPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", lp_checkPlayer, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitsthatshouldpreventCheckPlayerfromlosing, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", lp_checkPlayer, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitGroupCount(lv_unitsthatshouldpreventCheckPlayerfromlosing, c_unitCountAlive) == 0)) {
        if ((gv_playerChoseToWatchthegame[lp_checkPlayer] == true)) {
            gf_EndGameVisionDefeatThePlayerandhisallies(lp_checkPlayer);
        }

    }

}

void gf_DisplayLoadingMessage (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    gv_initializationStage = lp_message;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/82B948E7") + gv_initializationStage));
    Wait(0.2, c_timeGame);
    DialogControlSetVisible(gv_ingameLoadingBarDialogItem, PlayerGroupAll(), false);
    gv_loadingBarProgression = (gv_loadingBarProgression + 1);
    libNtve_gf_CreateDialogItemImage(gv_ingameLoadingBarDialog, ((500 / gv_loadingBarMax) * gv_loadingBarProgression), 46, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\adjutantgradiantem.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ingameLoadingBarDialogItem = DialogControlLastCreated();
    DialogControlSetVisible(gv_ingameLoadingBarDialogItem, PlayerGroupAll(), true);
    DialogControlSetVisible(gv_ingameLoadingBarDialogItemFrame, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(gv_ingameLoadingBarDialog, 510, 60, c_anchorLeft, 0, 0, StringToText(""), "LoadingBarImage.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ingameLoadingBarDialogItemFrame = DialogControlLastCreated();
    DialogControlSetVisible(gv_ingameLoadingBarDialogItemFrame, PlayerGroupAll(), true);
}

void gf_CreateIngameLoadingBar () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(520, 80, c_anchorTop, 0, 100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_ingameLoadingBarDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(gv_ingameLoadingBarDialog, ((500 / gv_loadingBarMax) * gv_loadingBarProgression), 46, c_anchorLeft, 10, 0, StringToText(""), "Assets\\Textures\\adjutantgradiantem.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ingameLoadingBarDialogItem = DialogControlLastCreated();
    DialogControlSetVisible(gv_ingameLoadingBarDialogItem, PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 510, 60, c_anchorLeft, 0, 0, StringToText(""), "LoadingBarImage.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_ingameLoadingBarDialogItemFrame = DialogControlLastCreated();
}

bool gf_IsThisPlayerADeveloper (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerType(lp_parametherPlayer) != c_playerTypeComputer) && ((PlayerHandle(lp_parametherPlayer) == "1-S2-1-20288453") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-3201680") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-556887") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-20885759") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-7464252")))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerATester (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerType(lp_parametherPlayer) != c_playerTypeComputer) && ((PlayerHandle(lp_parametherPlayer) == "1-S2-1-20288453") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-3201680") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-556887") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-20885759") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-7464252") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8141542") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-6844033") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8047603") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-8295399") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-10071981") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-1600242") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-7968970") || (PlayerHandle(lp_parametherPlayer) == "2-S2-2-2320031") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-7415475") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-4106235") || (PlayerHandle(lp_parametherPlayer) == "3-S2-1-6009244") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-4653046") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-84956551") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-785528+") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8297650") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-8043800")))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_DidThisPlayerJoinTheDiscord (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerType(lp_parametherPlayer) != c_playerTypeComputer) && ((PlayerHandle(lp_parametherPlayer) == "1-S2-1-20288453") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-3201680") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-556887") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-20885759") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-7464252") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8141542") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-6844033") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8047603") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-8295399") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-10071981") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-1600242") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-7968970") || (PlayerHandle(lp_parametherPlayer) == "2-S2-2-2320031") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-7415475") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-4106235") || (PlayerHandle(lp_parametherPlayer) == "3-S2-1-6009244") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-4653046") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-84956551") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-785528+") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8297650") || (PlayerHandle(lp_parametherPlayer) == "2-S2-1-8043800") || (PlayerHandle(lp_parametherPlayer) == "1-S2-1-8478793")))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInEditor (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((PlayerHandle(lp_parametherPlayer) == "") && (PlayerType(lp_parametherPlayer) != c_playerTypeComputer))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInAntCSP (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBB3FD6C6_gv_thePlayersClanNameIs[lp_parametherPlayer] == "AntCSP"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInAntLOL (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBB3FD6C6_gv_thePlayersClanNameIs[lp_parametherPlayer] == "AntLOL"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInAntNob (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBB3FD6C6_gv_thePlayersClanNameIs[lp_parametherPlayer] == "AntNob"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInAntOCS (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBB3FD6C6_gv_thePlayersClanNameIs[lp_parametherPlayer] == "AntOCS"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInWarAnt (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBB3FD6C6_gv_thePlayersClanNameIs[lp_parametherPlayer] == "WarAnt"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_IsThisPlayerInAnt101 (int lp_parametherPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((libBB3FD6C6_gv_thePlayersClanNameIs[lp_parametherPlayer] == "Ant101"))) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_NotYetImplemented (int lp_thisConditionDoesnothingdeletewhenaddingothers) {
    // Automatic Variable Declarations
    // Implementation
    return false;
}

bool gf_DoesthematchcontrainonlyrealplayersNOAI () {
    // Variable Declarations
    bool lv_aIExistingState;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_gamehasAIinit != true)) {
        lv_aIExistingState = true;
    }

    return lv_aIExistingState;
}

bool gf_IsThisAValidPointForADirtScatter (point lp_pointToValidateForScatter) {
    // Variable Declarations
    bool lv_providedpointIsValid;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((RegionContainsPoint(gv_aEvoOriginalGrassMapRegion, lp_pointToValidateForScatter) == true) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, gf_Convertpointtosquareregion(lp_pointToValidateForScatter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("OctaPillerUp", "OctaPillerDown", "", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lp_pointToValidateForScatter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DirtUnbreakableandUntargetable", "UnbreakableDirtNoBlocker", "", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lp_pointToValidateForScatter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DirtUnbreakableandUntargetable", "UnbreakableDirtNoBlocker", "", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lp_pointToValidateForScatter, 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, 5.0), lp_pointToValidateForScatter) == false)) {
        lv_providedpointIsValid = true;
    }

    return lv_providedpointIsValid;
}

bool gf_IsthismapapartofDynamicMapspool (int lp_mapGenNumber) {
    // Variable Declarations
    bool lv_filter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_mapGenNumber == 13) || (lp_mapGenNumber == 14) || (lp_mapGenNumber == 16) || (lp_mapGenNumber == 22))) {
        lv_filter = true;
    }

    return lv_filter;
}

bool gf_isthisLayoutbadforthisTeamcase (int lp_mapGenNumber) {
    // Variable Declarations
    bool lv_filter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((gv_filterOutDynamicMaps == true) && ((lp_mapGenNumber == 13) || (lp_mapGenNumber == 16) || (lp_mapGenNumber == 22)))) {
        lv_filter = true;
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009")) {
        if (((lp_mapGenNumber == 66666))) {
            lv_filter = true;
        }

    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008")) {
        if (((lp_mapGenNumber == 66666))) {
            lv_filter = true;
        }

    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006")) {
        if (((lp_mapGenNumber == 22) || (lp_mapGenNumber == 23))) {
            lv_filter = true;
        }

    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003")) {
        if (((lp_mapGenNumber == 11) || (lp_mapGenNumber == 19) || (lp_mapGenNumber == 21))) {
            lv_filter = true;
        }

    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005")) {
        if (((lp_mapGenNumber == 8) || (lp_mapGenNumber == 11) || (lp_mapGenNumber == 15) || (lp_mapGenNumber == 19) || (lp_mapGenNumber == 21) || (lp_mapGenNumber == 22))) {
            lv_filter = true;
        }

    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004")) {
        if (((lp_mapGenNumber == 11) || (lp_mapGenNumber == 19) || (lp_mapGenNumber == 21))) {
            lv_filter = true;
        }

    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        if (((lp_mapGenNumber == 11) || (lp_mapGenNumber == 19) || (lp_mapGenNumber == 21))) {
            lv_filter = true;
        }

    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007")) {
        if (((lp_mapGenNumber == 13) || (lp_mapGenNumber == 11) || (lp_mapGenNumber == 21))) {
            lv_filter = true;
        }

    }
    return lv_filter;
}

bool gf_isthisLayoutBadforAIgames (int lp_mapGenNumber) {
    // Variable Declarations
    bool lv_filter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((!(((lp_mapGenNumber == 0) || (lp_mapGenNumber == 1) || (lp_mapGenNumber == 2))))) {
        lv_filter = true;
    }

    return lv_filter;
}

bool gf_IsThisMapAPriorityMapLayoutBiasStatistics (int lp_mapGenNumber) {
    // Variable Declarations
    bool lv_mapFound;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_chanceOfmapToGenerateonrandom[lp_mapGenNumber] == 10)) {
        lv_mapFound = true;
        gv_useMapPriority = false;
    }

    gv_chanceOfmapToGenerateonrandom[lp_mapGenNumber] = (gv_chanceOfmapToGenerateonrandom[lp_mapGenNumber] + 1);
    return lv_mapFound;
}

void gf_SetMapPriorities () {
    // Automatic Variable Declarations
    // Implementation
    gv_chanceOfmapToGenerateonrandom[14] = 1;
}

void gf_Overridedefaults () {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto25023AE8_g;

    // Variable Initialization

    // Implementation
    auto25023AE8_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto25023AE8_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        MeleeSetOption(lv_currentPlayer, c_meleeOptionReveal, false);
        MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, false);
        MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, false);
        MeleeSetOption(lv_currentPlayer, c_meleeOptionStalemate, false);
        MeleeSetOption(lv_currentPlayer, c_meleeOptionSplitResources, false);
        PlayerOptionOverride(lv_currentPlayer, "selectuncontrolable", "1");
        PlayerOptionOverride(lv_currentPlayer, "simplecommandcard", "0");
        PlayerOptionOverride(lv_currentPlayer, "displayunitstatus", "Damaged");
        PlayerOptionOverride(lv_currentPlayer, "buildgridhint", "1");
        PlayerOptionOverride(lv_currentPlayer, "teamcoloredlifestatus", "0");
        PlayerOptionOverride(lv_currentPlayer, "showalerts", "0");
    }
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, true);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeVespene, false);
    UISetResourceTradingMinorStep(c_resourceTypeMinerals, 100);
    UISetResourceTradingMajorStep(c_resourceTypeMinerals, 1000);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MissionTimePanel/TimeLabel");
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), false, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
}

void gf_VerifyMatchonlyhastesters () {
    // Automatic Variable Declarations
    playergroup auto12368C67_g;
    int auto12368C67_var;
    playergroup autoE3257985_g;
    int autoE3257985_var;

    // Implementation
    auto12368C67_g = PlayerGroupActive();
    auto12368C67_var = -1;
    while (true) {
        auto12368C67_var = PlayerGroupNextPlayer(auto12368C67_g, auto12368C67_var);
        if (auto12368C67_var < 0) { break; }
        if (((PlayerType(auto12368C67_var) == c_playerTypeComputer) || gf_IsThisPlayerATester(auto12368C67_var) || gf_IsThisPlayerADeveloper(auto12368C67_var) || gf_IsThisPlayerInAntNob(auto12368C67_var) || gf_IsThisPlayerInAntLOL(auto12368C67_var) || gf_IsThisPlayerInAntCSP(auto12368C67_var) || gf_IsThisPlayerInEditor(auto12368C67_var))) {
            if ((gv_testerCheckingIs == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(auto12368C67_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto12368C67_var, false))) + StringExternal("Param/Value/DC9B5794")));
            }

        }
        else {
            if ((gv_testerCheckingIs == true)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(auto12368C67_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto12368C67_var, false))) + StringExternal("Param/Value/C8F7307E")));
                Wait(6.0, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E0B5658A"));
            }

        }
    }
    autoE3257985_g = PlayerGroupActive();
    autoE3257985_var = -1;
    while (true) {
        autoE3257985_var = PlayerGroupNextPlayer(autoE3257985_g, autoE3257985_var);
        if (autoE3257985_var < 0) { break; }
        if (((PlayerType(autoE3257985_var) == c_playerTypeComputer) || gf_IsThisPlayerATester(autoE3257985_var) || gf_IsThisPlayerADeveloper(autoE3257985_var) || gf_IsThisPlayerInAntNob(autoE3257985_var) || gf_IsThisPlayerInAntLOL(autoE3257985_var) || gf_IsThisPlayerInAntCSP(autoE3257985_var) || gf_IsThisPlayerInEditor(autoE3257985_var))) {
        }
        else {
            if ((gv_testerCheckingIs == true)) {
                SoundPlayForPlayer(SoundLink("AbathurA_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/9A1DF9B0"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE3257985_var, false))));
                Wait(1.4, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/814FEE5A"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE3257985_var, false))));
                Wait(1.4, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/7D8E35E2"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE3257985_var, false))));
                Wait(1.4, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/61709042"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE3257985_var, false))));
                Wait(1.4, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/853F7074"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE3257985_var, false))));
                Wait(1.4, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
                KickFromGame(PlayerGroupActive());
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextWithColor(StringExternal("Param/Value/0ACBD98C"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE3257985_var, false))));
                Wait(1.4, c_timeGame);
                UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
            }
        }
    }
}

void gf_PlayerPicksMapGen () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0003")) {
        gv_generateRandomMap = true;
    }

    if ((gv_generateRandomMap == true)) {
        gf_FindmeafilteredMapgenWhenCalledwillcallitselfuntillmatchingmapwasfound();
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0001")) {
        gv_MapGen = 1;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0002")) {
        gv_MapGen = 2;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0006")) {
        gv_MapGen = 3;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0007")) {
        gv_MapGen = 4;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0008")) {
        gv_MapGen = 5;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0004")) {
        gv_MapGen = 6;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0005")) {
        gv_MapGen = 7;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0009")) {
        gv_MapGen = 8;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0010")) {
        gv_MapGen = 9;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0011")) {
        gv_MapGen = 10;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0012")) {
        gv_MapGen = 11;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0013")) {
        gv_MapGen = 12;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0014")) {
        gv_MapGen = 13;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0015")) {
        gv_MapGen = 14;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0016")) {
        gv_MapGen = 15;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0017")) {
        gv_MapGen = 16;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0018")) {
        gv_MapGen = 17;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0019")) {
        gv_MapGen = 18;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0020")) {
        gv_MapGen = 19;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0021")) {
        gv_MapGen = 20;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0022")) {
        gv_MapGen = 21;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0023")) {
        gv_MapGen = 22;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0024")) {
        gv_MapGen = 23;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0025")) {
        gv_MapGen = 24;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0027")) {
        gv_MapGen = 25;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0028")) {
        gv_MapGen = 26;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0029")) {
        gv_MapGen = 27;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0030")) {
        gv_MapGen = 28;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0031")) {
        gv_MapGen = 29;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0032")) {
        gv_MapGen = 30;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0033")) {
        gv_MapGen = 31;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0034")) {
        gv_MapGen = 32;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0035")) {
        gv_MapGen = 33;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0036")) {
        gv_MapGen = 34;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0037")) {
        gv_MapGen = 35;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0038")) {
        gv_MapGen = 36;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0039")) {
        gv_MapGen = 37;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0040")) {
        gv_MapGen = 38;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0041")) {
        gv_MapGen = 39;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0042")) {
        gv_MapGen = 40;
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0043")) {
        gv_MapGen = 41;
    }
}

void gf_FindmeafilteredMapgenWhenCalledwillcallitselfuntillmatchingmapwasfound () {
    // Variable Declarations
    int lv_localMapgen;
    bool lv_matchHasAIinit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_localMapgen = RandomInt(1, gv_currentMaxMapGenValue);
    if (gf_isthisLayoutbadforthisTeamcase(lv_localMapgen)) {
        gv_afilteredMapgenwasfound = false;
    }
    else {
        gv_afilteredMapgenwasfound = true;
    }
    if ((gv_afilteredMapgenwasfound == true)) {
        if ((gv_filterOutDynamicMaps == true)) {
            if (gf_IsthismapapartofDynamicMapspool(lv_localMapgen)) {
                gv_afilteredMapgenwasfound = false;
            }
            else {
                gv_afilteredMapgenwasfound = true;
            }
        }

    }

    if ((gv_afilteredMapgenwasfound == true)) {
        if ((gv_gamehasAIinit == true)) {
            if (gf_isthisLayoutBadforAIgames(lv_localMapgen)) {
                gv_afilteredMapgenwasfound = false;
            }
            else {
                gv_afilteredMapgenwasfound = true;
            }
        }

    }

    if ((gv_afilteredMapgenwasfound == true)) {
        if ((gv_useMapPriority == true)) {
            if (gf_IsThisMapAPriorityMapLayoutBiasStatistics(lv_localMapgen)) {
                gv_afilteredMapgenwasfound = true;
            }
            else {
                gv_afilteredMapgenwasfound = false;
            }
        }

    }

    if ((gv_afilteredMapgenwasfound == true)) {
        gv_MapGen = lv_localMapgen;
    }
    else {
        Wait(0.1, c_timeGame);
        gf_FindmeafilteredMapgenWhenCalledwillcallitselfuntillmatchingmapwasfound();
    }
}

void gf_PickPlayerRegen2 () {
    // Variable Declarations
    bool lv_mapGenisInside;
    bool lv_mapGenisOutside;
    int lv_currentPlayer;
    int lv_player;
    int lv_localMapGenVar;
    int lv_textureGroupOutside;
    int lv_textureGroupInside;
    int lv_textureGroupExtra;
    int lv_textureGroupUnnatural;
    int lv_originalOrCombinedtexturePool;
    point lv_centerPointTexture;
    point lv_northWestPointTexture2;
    point lv_northPointTexture3;
    point lv_northEastPointTexture4;
    point lv_eastPointTexture5;
    point lv_southEastPointTexture6;
    point lv_southPointTexture7;
    point lv_southWestPointTexture8;
    point lv_westPointTexture9;
    unitgroup lv_textureReps;
    int lv_textureRepsCount;
    string lv_mapTexture;
    string lv_textureTypeGroup;

    // Automatic Variable Declarations
    const int auto7043625D_n = 8;
    int auto7043625D_i;

    // Variable Initialization
    lv_originalOrCombinedtexturePool = RandomInt(0, 1);
    lv_centerPointTexture = Point(76.0, 76.0);
    lv_northWestPointTexture2 = Point(25.333, 126.666);
    lv_northPointTexture3 = Point(76.0, 126.666);
    lv_northEastPointTexture4 = Point(126.666, 126.666);
    lv_eastPointTexture5 = Point(126.666, 76.0);
    lv_southEastPointTexture6 = Point(126.666, 25.333);
    lv_southPointTexture7 = Point(76.0, 25.333);
    lv_southWestPointTexture8 = Point(25.333, 25.333);
    lv_westPointTexture9 = Point(25.333, 76.0);
    lv_textureReps = UnitGroupEmpty();
    lv_textureTypeGroup = "Unknown TextureType";

    // Implementation
    lv_localMapGenVar = gv_MapGen;
    lv_textureGroupOutside = RandomInt(1, 4);
    lv_textureGroupInside = RandomInt(1, 2);
    lv_textureGroupExtra = RandomInt(1, 4);
    lv_textureGroupUnnatural = RandomInt(1, 3);
    if (((lv_localMapGenVar == 21) || (lv_localMapGenVar == 25) || (lv_localMapGenVar == 26) || (lv_localMapGenVar == 30) || (lv_localMapGenVar == 31) || (lv_localMapGenVar == 32))) {
        lv_textureTypeGroup = "Outside";
        gv_mapPool = "Outside";
    }
    else if (((lv_localMapGenVar == 99) || (lv_localMapGenVar == 27) || (lv_localMapGenVar == 28) || (lv_localMapGenVar == 29) || (lv_localMapGenVar == 38) || (lv_localMapGenVar == 39) || (lv_localMapGenVar == 40))) {
        lv_textureTypeGroup = "Inside";
        gv_mapPool = "Inside";
    }
    else if (((lv_localMapGenVar == 2) || (lv_localMapGenVar == 3) || (lv_localMapGenVar == 4) || (lv_localMapGenVar == 5) || (lv_localMapGenVar == 19) || (lv_localMapGenVar == 20) || (lv_localMapGenVar == 21) || (lv_localMapGenVar == 22))) {
        if ((lv_originalOrCombinedtexturePool == 0)) {
            lv_textureTypeGroup = "Outside";
        }
        else {
            lv_textureTypeGroup = "Extra";
        }
        gv_mapPool = "Outside";
    }
    else if (((lv_localMapGenVar == 1) || (lv_localMapGenVar == 6) || (lv_localMapGenVar == 7) || (lv_localMapGenVar == 9) || (lv_localMapGenVar == 12) || (lv_localMapGenVar == 23) || (lv_localMapGenVar == 24) || (lv_localMapGenVar == 33))) {
        if ((lv_originalOrCombinedtexturePool == 0)) {
            lv_textureTypeGroup = "Inside";
        }
        else {
            lv_textureTypeGroup = "Extra";
        }
        gv_mapPool = "Inside";
    }
    else if (((lv_localMapGenVar == 8) || (lv_localMapGenVar == 10) || (lv_localMapGenVar == 11) || (lv_localMapGenVar == 13) || (lv_localMapGenVar == 14) || (lv_localMapGenVar == 15) || (lv_localMapGenVar == 16) || (lv_localMapGenVar == 17) || (lv_localMapGenVar == 18) || (lv_localMapGenVar == 34) || (lv_localMapGenVar == 35) || (lv_localMapGenVar == 36) || (lv_localMapGenVar == 37) || (lv_localMapGenVar == 41))) {
        lv_textureTypeGroup = "Unnatural";
        gv_mapPool = "Unnatural";
    }
    if ((lv_textureTypeGroup == "Outside")) {
        if ((lv_textureGroupOutside == 1)) {
            lv_mapTexture = "GroundTexture5";
        }
        else if ((lv_textureGroupOutside == 2)) {
            lv_mapTexture = "GroundTexture6";
        }
        else if ((lv_textureGroupOutside == 3)) {
            lv_mapTexture = "GroundTexture7";
        }
        else if ((lv_textureGroupOutside == 4)) {
            lv_mapTexture = "GroundTexture12";
        }
    }
    else if ((lv_textureTypeGroup == "Inside")) {
        if ((lv_textureGroupInside == 1)) {
            lv_mapTexture = "GroundTexture3";
        }
        else if ((lv_textureGroupInside == 2)) {
            lv_mapTexture = "GroundTexture10";
        }
    }
    else if ((lv_textureTypeGroup == "Extra")) {
        if ((lv_textureGroupExtra == 1)) {
            lv_mapTexture = "GroundTexture13";
        }
        else if ((lv_textureGroupExtra == 2)) {
            lv_mapTexture = "GroundTexture8";
        }
        else if ((lv_textureGroupExtra == 3)) {
            lv_mapTexture = "GroundTexture1";
        }
        else if ((lv_textureGroupExtra == 4)) {
            lv_mapTexture = "GroundTexture11";
        }
    }
    else if ((lv_textureTypeGroup == "Unnatural")) {
        if ((lv_textureGroupUnnatural == 1)) {
            lv_mapTexture = "GroundTexture2";
        }
        else if ((lv_textureGroupUnnatural == 2)) {
            lv_mapTexture = "GroundTexture4";
        }
        else if ((lv_textureGroupUnnatural == 3)) {
            lv_mapTexture = "GroundTexture9";
        }
    }
    gv_groundTextureActor = lv_mapTexture;
    Wait(0.5, c_timeGame);
    for (auto7043625D_i = 1; auto7043625D_i <= auto7043625D_n; auto7043625D_i += 1) {
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_westPointTexture9);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_southWestPointTexture8);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_southPointTexture7);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_southEastPointTexture6);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_eastPointTexture5);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_northEastPointTexture4);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_northPointTexture3);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_northWestPointTexture2);
        libNtve_gf_CreateActorAtPoint(lv_mapTexture, lv_centerPointTexture);
        Wait(0.1, c_timeGame);
    }
}

void gf_SetTheOverallTintBasedOnTheGroundTexture () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_groundTextureActor == "GroundTexture2")) {
        gv_groundTextureRed = 41.0;
        gv_groundTextureGreen = 45.0;
        gv_groundTextureBlue = 41;
    }
    else if ((gv_groundTextureActor == "GroundTexture3")) {
        gv_groundTextureRed = 87.0;
        gv_groundTextureGreen = 77.0;
        gv_groundTextureBlue = 54.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture4")) {
        gv_groundTextureRed = 81.0;
        gv_groundTextureGreen = 53.0;
        gv_groundTextureBlue = 24.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture5")) {
        gv_groundTextureRed = 108.0;
        gv_groundTextureGreen = 141.0;
        gv_groundTextureBlue = 155.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture6")) {
        gv_groundTextureRed = 68.0;
        gv_groundTextureGreen = 84.0;
        gv_groundTextureBlue = 42.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture7")) {
        gv_groundTextureRed = 124.0;
        gv_groundTextureGreen = 115.0;
        gv_groundTextureBlue = 51.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture8")) {
        gv_groundTextureRed = 45.0;
        gv_groundTextureGreen = 94.0;
        gv_groundTextureBlue = 99.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture9")) {
        gv_groundTextureRed = 40.0;
        gv_groundTextureGreen = 60.0;
        gv_groundTextureBlue = 60.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture1")) {
        gv_groundTextureRed = 53.0;
        gv_groundTextureGreen = 92.0;
        gv_groundTextureBlue = 102.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture10")) {
        gv_groundTextureRed = 57.0;
        gv_groundTextureGreen = 67.0;
        gv_groundTextureBlue = 41.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture11")) {
        gv_groundTextureRed = 65.0;
        gv_groundTextureGreen = 55.0;
        gv_groundTextureBlue = 45.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture12")) {
        gv_groundTextureRed = 47.0;
        gv_groundTextureGreen = 38.0;
        gv_groundTextureBlue = 30.0;
    }
    else if ((gv_groundTextureActor == "GroundTexture13")) {
        gv_groundTextureRed = 49.0;
        gv_groundTextureGreen = 93.0;
        gv_groundTextureBlue = 82.0;
    }
}

void gf_SetOriginalDirtMapGrassMapRegions () {
    // Variable Declarations
    point lv_tryHerePoint;
    int lv_startX;
    int lv_startY;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoEBADA8A2_ae = 76;
    const int autoEBADA8A2_ai = 1;
    const int auto808577B2_ae = 76;
    const int auto808577B2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_startX = FixedToInt(PointGetX(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(1), 1))));
    lv_startX /= 2;
    lv_startY = FixedToInt(PointGetY(UnitGetPosition(UnitGroupUnit(UnitGroupSelected(1), 1))));
    lv_startY /= 2;
    lv_x = 0;
    for ( ; ( (autoEBADA8A2_ai >= 0 && lv_x <= autoEBADA8A2_ae) || (autoEBADA8A2_ai < 0 && lv_x >= autoEBADA8A2_ae) ) ; lv_x += autoEBADA8A2_ai ) {
        lv_y = 0;
        for ( ; ( (auto808577B2_ai >= 0 && lv_y <= auto808577B2_ae) || (auto808577B2_ai < 0 && lv_y >= auto808577B2_ae) ) ; lv_y += auto808577B2_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 1)) {
                RegionAddRegion(gv_aEvoOriginalDirtMapRegion, gf_Convertpointtosquareregion(Point((lv_x * 2), (lv_y * 2)), 1.0));
            }
            else {
                if ((UnitGroupCount(UnitGroup("Dirt", c_playerAny, gf_Convertpointtosquareregion(Point((lv_x * 2), (lv_y * 2)), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    RegionAddRegion(gv_aEvoOriginalGrassMapRegion, gf_Convertpointtosquareregion(Point((lv_x * 2), (lv_y * 2)), 1.0));
                    RegionAddRegion(gv_aEvoOriginalGrassMapRegion14, gf_Convertpointtosquareregion(Point((lv_x * 2), (lv_y * 2)), 1.4));
                }
                else {
                    RegionAddRegion(gv_aEvoOriginalDirtMapRegion, gf_Convertpointtosquareregion(Point((lv_x * 2), (lv_y * 2)), 1.0));
                }
            }
        }
    }
}

void gf_GenerateMapGen () {
    // Automatic Variable Declarations
    playergroup autoAB64BF83_g;
    int autoAB64BF83_var;

    // Implementation
    if ((gv_MapGen == 0)) {
        gf_FindmeafilteredMapgenWhenCalledwillcallitselfuntillmatchingmapwasfound();
    }
    else if ((gv_MapGen == 1)) {
        gf_GenerateStandardTerrain();
    }
    else if ((gv_MapGen == 2)) {
        gf_GenerateInvertedTerrain();
    }
    else if ((gv_MapGen == 3)) {
        gf_GenerateIslandsTerrain();
    }
    else if ((gv_MapGen == 4)) {
        gf_GeneratePondTerrain();
    }
    else if ((gv_MapGen == 5)) {
        gf_GenerateDonutTerrain();
    }
    else if ((gv_MapGen == 6)) {
        gf_GenerateRiverTerrain();
    }
    else if ((gv_MapGen == 7)) {
        gf_GenerateCavesTerrain();
    }
    else if ((gv_MapGen == 8)) {
        gf_GenerateRiverTerrain2();
    }
    else if ((gv_MapGen == 9)) {
        gf_GenerateRiverTerrain3();
    }
    else if ((gv_MapGen == 10)) {
        gf_GenerateYinYangTerrain();
    }
    else if ((gv_MapGen == 11)) {
        gf_GenerateHouseTerrain();
    }
    else if ((gv_MapGen == 12)) {
        gf_GenerateCloverLeafTerrain();
    }
    else if ((gv_MapGen == 13)) {
        gf_GenerateGatesTerrain();
    }
    else if ((gv_MapGen == 14)) {
        gf_GenerateRiverTerrain4();
    }
    else if ((gv_MapGen == 15)) {
        gf_GenerateLabyrinthTerrain();
    }
    else if ((gv_MapGen == 16)) {
        gf_GenerateClockTerrain();
    }
    else if ((gv_MapGen == 17)) {
        gf_GeneratePizzaTerrain();
    }
    else if ((gv_MapGen == 18)) {
        gf_GenerateRadioactiveTerrain();
    }
    else if ((gv_MapGen == 19)) {
        gf_GenerateStripesTerrain();
    }
    else if ((gv_MapGen == 20)) {
        gf_GenerateHexTerrain();
    }
    else if ((gv_MapGen == 21)) {
        gf_GenerateOctagonTerrain();
    }
    else if ((gv_MapGen == 22)) {
        gf_GeneratePongTerrain();
    }
    else if ((gv_MapGen == 23)) {
        gf_GenerateWheelTerrain();
    }
    else if ((gv_MapGen == 24)) {
        gf_GenerateRubberWheelTerrain();
    }
    else if ((gv_MapGen == 25)) {
        gf_GenerateChambersTerrain();
    }
    else if ((gv_MapGen == 26)) {
        gf_GenerateHourglassTerrain();
    }
    else if ((gv_MapGen == 27)) {
        gf_GenerateBunkerTerrain();
    }
    else if ((gv_MapGen == 28)) {
        gf_GenerateHeartBeatTerrain();
    }
    else if ((gv_MapGen == 29)) {
        gf_GenerateCheeseTerrain();
    }
    else if ((gv_MapGen == 30)) {
        gf_GenerateChipTerrain();
    }
    else if ((gv_MapGen == 31)) {
        gf_GenerateAntFarmTerrain();
    }
    else if ((gv_MapGen == 32)) {
        gf_GenerateDuelCircleTerrain();
    }
    else if ((gv_MapGen == 33)) {
        gf_GenerateOpenWheelTerrain();
    }
    else if ((gv_MapGen == 34)) {
        gf_GenerateThreatTerrain();
    }
    else if ((gv_MapGen == 35)) {
        gf_GenerateEyeTerrain();
    }
    else if ((gv_MapGen == 36)) {
        gf_GenerateCompassTerrain();
    }
    else if ((gv_MapGen == 37)) {
        gf_GenerateChokeTerrain();
    }
    else if ((gv_MapGen == 38)) {
        gf_GenerateTeardropTerrain();
    }
    else if ((gv_MapGen == 39)) {
        gf_GenerateRiverTerrain5();
    }
    else if ((gv_MapGen == 40)) {
        gf_GenerateTwirlTerrain();
    }
    else if ((gv_MapGen == 41)) {
        gf_GenerateInvertedChokeTerrain();
    }
    else if (true) {
        autoAB64BF83_g = PlayerGroupActive();
        autoAB64BF83_var = -1;
        while (true) {
            autoAB64BF83_var = PlayerGroupNextPlayer(autoAB64BF83_g, autoAB64BF83_var);
            if (autoAB64BF83_var < 0) { break; }
            gf_DisplayErrorForPlayer(StringToText(("No Terrain Generation Action found for Layout " + gf_ConvertMapMapGenInintoLayoutname(gv_MapGen) + " (" + IntToString(gv_MapGen) + ")")), autoAB64BF83_var);
        }
    }
}

void gf_GenerateMapGen2 () {
    // Automatic Variable Declarations
    playergroup auto3005FBA5_g;
    int auto3005FBA5_var;

    // Implementation
    if ((gv_MapGen == 1)) {
        gf_GenerateStandardPlayers();
    }
    else if ((gv_MapGen == 2)) {
        gf_GenerateInvertedPlayers();
    }
    else if ((gv_MapGen == 3)) {
        gf_GenerateIslandsPlayers();
    }
    else if ((gv_MapGen == 4)) {
        gf_GeneratePondPlayers();
    }
    else if ((gv_MapGen == 5)) {
        gf_GenerateDountPlayers();
    }
    else if ((gv_MapGen == 6)) {
        gf_GenerateRiverPlayers();
    }
    else if ((gv_MapGen == 7)) {
        gf_GenerateCavesPlayers();
    }
    else if ((gv_MapGen == 8)) {
        gf_GenerateCrossPlayers();
    }
    else if ((gv_MapGen == 9)) {
        gf_GenerateStreamsPlayers();
    }
    else if ((gv_MapGen == 10)) {
        gf_GenerateYinYangPlayers();
    }
    else if ((gv_MapGen == 11)) {
        gf_GenerateHousePlayers();
    }
    else if ((gv_MapGen == 12)) {
        gf_GenerateCloverLeafPlayers();
    }
    else if ((gv_MapGen == 13)) {
        gf_GenerateGatesPlayers();
    }
    else if ((gv_MapGen == 14)) {
        gf_GeneratePillersPlayers();
    }
    else if ((gv_MapGen == 15)) {
        gf_GenerateLabyrinthPlayers();
    }
    else if ((gv_MapGen == 16)) {
        gf_GenerateClockPlayers();
    }
    else if ((gv_MapGen == 17)) {
        gf_GeneratePizzaPlayers();
    }
    else if ((gv_MapGen == 18)) {
        gf_GenerateRadioactivePlayers();
    }
    else if ((gv_MapGen == 19)) {
        gf_GenerateStripesPlayers();
    }
    else if ((gv_MapGen == 20)) {
        gf_GenerateHexPlayers();
    }
    else if ((gv_MapGen == 21)) {
        gf_GenerateOctagonPlayers();
    }
    else if ((gv_MapGen == 22)) {
        gf_GeneratePongPlayers();
    }
    else if ((gv_MapGen == 23)) {
        gf_GenerateWheelPlayers();
    }
    else if ((gv_MapGen == 24)) {
        gf_GenerateRubberWheelPlayers();
    }
    else if ((gv_MapGen == 25)) {
        gf_GenerateChambersPlayers();
    }
    else if ((gv_MapGen == 26)) {
        gf_GenerateHourglassPlayers();
    }
    else if ((gv_MapGen == 27)) {
        gf_GenerateBunkerPlayers();
    }
    else if ((gv_MapGen == 28)) {
        gf_GenerateHeartBeatPlayers();
    }
    else if ((gv_MapGen == 29)) {
        gf_GenerateCheesePlayers();
    }
    else if ((gv_MapGen == 30)) {
        gf_GenerateChipPlayers();
    }
    else if ((gv_MapGen == 31)) {
        gf_GenerateAntFarmPlayers();
    }
    else if ((gv_MapGen == 32)) {
        gf_GenerateDuelCirclePlayers();
    }
    else if ((gv_MapGen == 33)) {
        gf_GenerateOpenWheelPlayers();
    }
    else if ((gv_MapGen == 34)) {
        gf_GenerateThreatPlayers();
    }
    else if ((gv_MapGen == 35)) {
        gf_GenerateEyePlayers();
    }
    else if ((gv_MapGen == 36)) {
        gf_GenerateCompassPlayers();
    }
    else if ((gv_MapGen == 37)) {
        gf_GenerateChokePlayers();
    }
    else if ((gv_MapGen == 38)) {
        gf_GenerateTeardropPlayers();
    }
    else if ((gv_MapGen == 39)) {
        gf_GenerateRavinePlayers();
    }
    else if ((gv_MapGen == 40)) {
        gf_GenerateTwirlPlayers();
    }
    else if ((gv_MapGen == 41)) {
        gf_GenerateInvertedChokePlayers();
    }
    else if (true) {
        auto3005FBA5_g = PlayerGroupActive();
        auto3005FBA5_var = -1;
        while (true) {
            auto3005FBA5_var = PlayerGroupNextPlayer(auto3005FBA5_g, auto3005FBA5_var);
            if (auto3005FBA5_var < 0) { break; }
            gf_DisplayErrorForPlayer(StringToText(("No Player Generation Action found for Layout " + gf_ConvertMapMapGenInintoLayoutname(gv_MapGen) + " (" + IntToString(gv_MapGen) + ")")), auto3005FBA5_var);
        }
    }
}

void gf_SetAllPlayersinthematchintoowndedicatedteams () {
    int init_i;

    // Variable Declarations
    int lv_repeater;
    playergroup[7] lv_team;
    playergroup lv_playerswhoarenotassigned;
    int lv_initialRandomPlayer;

    // Automatic Variable Declarations
    const int auto4967C289_n = 6;
    int auto4967C289_i;
    playergroup auto9004E3DF_g;
    int auto9004E3DF_var;
    const int auto9797CEB1_n = 6;
    int auto9797CEB1_i;

    // Variable Initialization
    lv_repeater = 1;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_team[init_i] = PlayerGroupEmpty();
    }
    lv_playerswhoarenotassigned = PlayerGroupActive();

    // Implementation
    for (auto4967C289_i = 1; auto4967C289_i <= auto4967C289_n; auto4967C289_i += 1) {
        if ((PlayerGroupCount(lv_playerswhoarenotassigned) != 0)) {
            lv_initialRandomPlayer = PlayerGroupPlayer(lv_playerswhoarenotassigned, 1);
            auto9004E3DF_g = lv_playerswhoarenotassigned;
            auto9004E3DF_var = -1;
            while (true) {
                auto9004E3DF_var = PlayerGroupNextPlayer(auto9004E3DF_g, auto9004E3DF_var);
                if (auto9004E3DF_var < 0) { break; }
                if ((PlayerGroupHasPlayer(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, lv_initialRandomPlayer), auto9004E3DF_var) == true)) {
                    PlayerGroupAdd(lv_team[lv_repeater], auto9004E3DF_var);
                    PlayerGroupRemove(lv_playerswhoarenotassigned, auto9004E3DF_var);
                }

            }
            PlayerGroupAdd(lv_team[lv_repeater], lv_initialRandomPlayer);
            PlayerGroupRemove(lv_playerswhoarenotassigned, lv_initialRandomPlayer);
        }

        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 1;
    for (auto9797CEB1_i = 1; auto9797CEB1_i <= auto9797CEB1_n; auto9797CEB1_i += 1) {
        gv_playerSpawnTeam[lv_repeater] = lv_team[lv_repeater];
        lv_repeater = (lv_repeater + 1);
    }
}

void gf_GenerateStandardTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto57B4D005_ae = 15;
    const int auto57B4D005_ai = 1;
    const int auto9C15B5A6_ae = 20;
    const int auto9C15B5A6_ai = 1;
    int auto730B3817_ae;
    const int auto730B3817_ai = 1;
    const int autoA2A128B7_ae = gv_mapSize;
    const int autoA2A128B7_ai = 1;
    const int autoFAEB8F50_ae = gv_mapSize;
    const int autoFAEB8F50_ai = 1;
    int autoF285CC44_ae;
    const int autoF285CC44_ai = 1;
    const int auto487E239B_ae = 5;
    const int auto487E239B_ai = 1;
    int auto8A82BAD2_ae;
    const int auto8A82BAD2_ai = 1;
    int auto50BA86BA_ae;
    const int auto50BA86BA_ai = 1;
    int auto484275CD_ae;
    const int auto484275CD_ai = 1;
    int autoBB486280_ae;
    const int autoBB486280_ai = 1;
    int autoE8ADB75F_ae;
    const int autoE8ADB75F_ai = 1;
    int autoA2BC23D2_ae;
    const int autoA2BC23D2_ai = 1;
    unitgroup auto9FB297B0_g;
    int auto9FB297B0_u;
    int auto00759648_ae;
    const int auto00759648_ai = 1;
    int autoCB1E509B_ae;
    const int autoCB1E509B_ai = 1;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 26;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 14.0);
    lv_i = 1;
    for ( ; ( (auto57B4D005_ai >= 0 && lv_i <= auto57B4D005_ae) || (auto57B4D005_ai < 0 && lv_i >= auto57B4D005_ae) ) ; lv_i += auto57B4D005_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(16.0, 20.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.4), (lv_circleSizeMax * 0.5)));
    }
    lv_i = 16;
    for ( ; ( (auto9C15B5A6_ai >= 0 && lv_i <= auto9C15B5A6_ae) || (auto9C15B5A6_ai < 0 && lv_i >= auto9C15B5A6_ae) ) ; lv_i += auto9C15B5A6_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, (lv_maxCenterPointOffset * 0.8)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
    }
    auto730B3817_ae = gv_clearCircleCount;
    lv_i = 21;
    for ( ; ( (auto730B3817_ai >= 0 && lv_i <= auto730B3817_ae) || (auto730B3817_ai < 0 && lv_i >= auto730B3817_ae) ) ; lv_i += auto730B3817_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(20.0, (lv_maxCenterPointOffset * 1.0)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.2)));
    }
    lv_x = 0;
    for ( ; ( (autoA2A128B7_ai >= 0 && lv_x <= autoA2A128B7_ae) || (autoA2A128B7_ai < 0 && lv_x >= autoA2A128B7_ae) ) ; lv_x += autoA2A128B7_ai ) {
        lv_y = 0;
        for ( ; ( (autoFAEB8F50_ai >= 0 && lv_y <= autoFAEB8F50_ae) || (autoFAEB8F50_ai < 0 && lv_y >= autoFAEB8F50_ae) ) ; lv_y += autoFAEB8F50_ai ) {
            autoF285CC44_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoF285CC44_ai >= 0 && lv_i <= autoF285CC44_ae) || (autoF285CC44_ai < 0 && lv_i >= autoF285CC44_ae) ) ; lv_i += autoF285CC44_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto487E239B_ai >= 0 && lv_i <= auto487E239B_ae) || (auto487E239B_ai < 0 && lv_i >= auto487E239B_ae) ) ; lv_i += auto487E239B_ai ) {
        Wait(0.0, c_timeGame);
        auto8A82BAD2_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto8A82BAD2_ai >= 0 && lv_x <= auto8A82BAD2_ae) || (auto8A82BAD2_ai < 0 && lv_x >= auto8A82BAD2_ae) ) ; lv_x += auto8A82BAD2_ai ) {
            auto50BA86BA_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto50BA86BA_ai >= 0 && lv_y <= auto50BA86BA_ae) || (auto50BA86BA_ai < 0 && lv_y >= auto50BA86BA_ae) ) ; lv_y += auto50BA86BA_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto484275CD_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto484275CD_ai >= 0 && lv_x <= auto484275CD_ae) || (auto484275CD_ai < 0 && lv_x >= auto484275CD_ae) ) ; lv_x += auto484275CD_ai ) {
            autoBB486280_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoBB486280_ai >= 0 && lv_y <= autoBB486280_ae) || (autoBB486280_ai < 0 && lv_y >= autoBB486280_ae) ) ; lv_y += autoBB486280_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoE8ADB75F_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoE8ADB75F_ai >= 0 && lv_x <= autoE8ADB75F_ae) || (autoE8ADB75F_ai < 0 && lv_x >= autoE8ADB75F_ae) ) ; lv_x += autoE8ADB75F_ai ) {
        autoA2BC23D2_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoA2BC23D2_ai >= 0 && lv_y <= autoA2BC23D2_ae) || (autoA2BC23D2_ai < 0 && lv_y >= autoA2BC23D2_ae) ) ; lv_y += autoA2BC23D2_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto9FB297B0_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9FB297B0_u = UnitGroupCount(auto9FB297B0_g, c_unitCountAll);
    for (;; auto9FB297B0_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto9FB297B0_g, auto9FB297B0_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto00759648_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto00759648_ai >= 0 && lv_x <= auto00759648_ae) || (auto00759648_ai < 0 && lv_x >= auto00759648_ae) ) ; lv_x += auto00759648_ai ) {
        autoCB1E509B_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoCB1E509B_ai >= 0 && lv_y <= autoCB1E509B_ae) || (autoCB1E509B_ai < 0 && lv_y >= autoCB1E509B_ae) ) ; lv_y += autoCB1E509B_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateStandardPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoFB71F8EB_ae = gv_mapSize;
    const int autoFB71F8EB_ai = 4;
    const int auto3ED18103_ae = gv_mapSize;
    const int auto3ED18103_ai = 4;
    playergroup auto1FEAB92D_g;
    playergroup autoAF956DF7_g;
    int autoB6C48430_ae;
    const int autoB6C48430_ai = 1;
    playergroup autoE4E4450A_g;
    playergroup auto101A8AC3_g;

    // Variable Initialization
    lv_spawnDistance = 7;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoFB71F8EB_ai >= 0 && lv_x <= autoFB71F8EB_ae) || (autoFB71F8EB_ai < 0 && lv_x >= autoFB71F8EB_ae) ) ; lv_x += autoFB71F8EB_ai ) {
            lv_y = 0;
            for ( ; ( (auto3ED18103_ai >= 0 && lv_y <= auto3ED18103_ae) || (auto3ED18103_ai < 0 && lv_y >= auto3ED18103_ae) ) ; lv_y += auto3ED18103_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto1FEAB92D_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto1FEAB92D_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoAF956DF7_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoAF956DF7_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoB6C48430_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoB6C48430_ai >= 0 && lv_i <= autoB6C48430_ae) || (autoB6C48430_ai < 0 && lv_i >= autoB6C48430_ae) ) ; lv_i += autoB6C48430_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoE4E4450A_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoE4E4450A_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto101A8AC3_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto101A8AC3_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateInvertedTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto9AD28C15_ae = 15;
    const int auto9AD28C15_ai = 1;
    const int auto630D6641_ae = 20;
    const int auto630D6641_ai = 1;
    int auto4B328D44_ae;
    const int auto4B328D44_ai = 1;
    const int auto52BBE0FD_ae = gv_mapSize;
    const int auto52BBE0FD_ai = 1;
    const int auto98C4DCEA_ae = gv_mapSize;
    const int auto98C4DCEA_ai = 1;
    int auto52239A37_ae;
    const int auto52239A37_ai = 1;
    const int autoFA03818D_ae = 6;
    const int autoFA03818D_ai = 1;
    int autoB5FD6D91_ae;
    const int autoB5FD6D91_ai = 1;
    int auto392B4025_ae;
    const int auto392B4025_ai = 1;
    int autoD26DBA35_ae;
    const int autoD26DBA35_ai = 1;
    int autoA317B18D_ae;
    const int autoA317B18D_ai = 1;
    const int autoEBFD6A83_ae = gv_mapSize;
    const int autoEBFD6A83_ai = 1;
    const int auto6501182B_ae = gv_mapSize;
    const int auto6501182B_ai = 1;
    int auto8476906E_ae;
    const int auto8476906E_ai = 1;
    int auto86FB0597_ae;
    const int auto86FB0597_ai = 1;
    unitgroup autoA628E778_g;
    int autoA628E778_u;
    int autoE0AC3435_ae;
    const int autoE0AC3435_ai = 1;
    int auto29744FE2_ae;
    const int auto29744FE2_ai = 1;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 26;
    gv_usingInvertedMapLayout = true;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircleCount = 36;
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 14.0);
    lv_i = 1;
    for ( ; ( (auto9AD28C15_ai >= 0 && lv_i <= auto9AD28C15_ae) || (auto9AD28C15_ai < 0 && lv_i >= auto9AD28C15_ae) ) ; lv_i += auto9AD28C15_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(16.0, 20.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.4), (lv_circleSizeMax * 0.5)));
    }
    lv_i = 16;
    for ( ; ( (auto630D6641_ai >= 0 && lv_i <= auto630D6641_ae) || (auto630D6641_ai < 0 && lv_i >= auto630D6641_ae) ) ; lv_i += auto630D6641_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, (lv_maxCenterPointOffset * 0.8)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
    }
    auto4B328D44_ae = gv_clearCircleCount;
    lv_i = 21;
    for ( ; ( (auto4B328D44_ai >= 0 && lv_i <= auto4B328D44_ae) || (auto4B328D44_ai < 0 && lv_i >= auto4B328D44_ae) ) ; lv_i += auto4B328D44_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(20.0, (lv_maxCenterPointOffset * 1.0)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.2)));
    }
    lv_x = 0;
    for ( ; ( (auto52BBE0FD_ai >= 0 && lv_x <= auto52BBE0FD_ae) || (auto52BBE0FD_ai < 0 && lv_x >= auto52BBE0FD_ae) ) ; lv_x += auto52BBE0FD_ai ) {
        lv_y = 0;
        for ( ; ( (auto98C4DCEA_ai >= 0 && lv_y <= auto98C4DCEA_ae) || (auto98C4DCEA_ai < 0 && lv_y >= auto98C4DCEA_ae) ) ; lv_y += auto98C4DCEA_ai ) {
            auto52239A37_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto52239A37_ai >= 0 && lv_i <= auto52239A37_ae) || (auto52239A37_ai < 0 && lv_i >= auto52239A37_ae) ) ; lv_i += auto52239A37_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoFA03818D_ai >= 0 && lv_i <= autoFA03818D_ae) || (autoFA03818D_ai < 0 && lv_i >= autoFA03818D_ae) ) ; lv_i += autoFA03818D_ai ) {
        Wait(0.0, c_timeGame);
        autoB5FD6D91_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoB5FD6D91_ai >= 0 && lv_x <= autoB5FD6D91_ae) || (autoB5FD6D91_ai < 0 && lv_x >= autoB5FD6D91_ae) ) ; lv_x += autoB5FD6D91_ai ) {
            auto392B4025_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto392B4025_ai >= 0 && lv_y <= auto392B4025_ae) || (auto392B4025_ai < 0 && lv_y >= auto392B4025_ae) ) ; lv_y += auto392B4025_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoD26DBA35_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoD26DBA35_ai >= 0 && lv_x <= autoD26DBA35_ae) || (autoD26DBA35_ai < 0 && lv_x >= autoD26DBA35_ae) ) ; lv_x += autoD26DBA35_ai ) {
            autoA317B18D_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoA317B18D_ai >= 0 && lv_y <= autoA317B18D_ae) || (autoA317B18D_ai < 0 && lv_y >= autoA317B18D_ae) ) ; lv_y += autoA317B18D_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_x = 0;
    for ( ; ( (autoEBFD6A83_ai >= 0 && lv_x <= autoEBFD6A83_ae) || (autoEBFD6A83_ai < 0 && lv_x >= autoEBFD6A83_ae) ) ; lv_x += autoEBFD6A83_ai ) {
        lv_y = 0;
        for ( ; ( (auto6501182B_ai >= 0 && lv_y <= auto6501182B_ae) || (auto6501182B_ai < 0 && lv_y >= auto6501182B_ae) ) ; lv_y += auto6501182B_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                gv_dirtMap[lv_x][lv_y] = 1;
            }
            else {
                gv_dirtMap[lv_x][lv_y] = 0;
            }
        }
    }
    auto8476906E_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto8476906E_ai >= 0 && lv_x <= auto8476906E_ae) || (auto8476906E_ai < 0 && lv_x >= auto8476906E_ae) ) ; lv_x += auto8476906E_ai ) {
        auto86FB0597_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto86FB0597_ai >= 0 && lv_y <= auto86FB0597_ae) || (auto86FB0597_ai < 0 && lv_y >= auto86FB0597_ae) ) ; lv_y += auto86FB0597_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoA628E778_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA628E778_u = UnitGroupCount(autoA628E778_g, c_unitCountAll);
    for (;; autoA628E778_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoA628E778_g, autoA628E778_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoE0AC3435_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoE0AC3435_ai >= 0 && lv_x <= autoE0AC3435_ae) || (autoE0AC3435_ai < 0 && lv_x >= autoE0AC3435_ae) ) ; lv_x += autoE0AC3435_ai ) {
        auto29744FE2_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto29744FE2_ai >= 0 && lv_y <= auto29744FE2_ae) || (auto29744FE2_ai < 0 && lv_y >= auto29744FE2_ae) ) ; lv_y += auto29744FE2_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateInvertedPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto28FA4C1E_ae = gv_mapSize;
    const int auto28FA4C1E_ai = 4;
    const int autoE13B1160_ae = gv_mapSize;
    const int autoE13B1160_ai = 4;
    playergroup autoA7914FD9_g;
    playergroup autoFBF979AF_g;
    int autoD9391D1B_ae;
    const int autoD9391D1B_ai = 1;
    playergroup auto7678F59B_g;
    playergroup autoA8E2F681_g;

    // Variable Initialization
    lv_spawnDistance = 65;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto28FA4C1E_ai >= 0 && lv_x <= auto28FA4C1E_ae) || (auto28FA4C1E_ai < 0 && lv_x >= auto28FA4C1E_ae) ) ; lv_x += auto28FA4C1E_ai ) {
            lv_y = 0;
            for ( ; ( (autoE13B1160_ai >= 0 && lv_y <= autoE13B1160_ae) || (autoE13B1160_ai < 0 && lv_y >= autoE13B1160_ae) ) ; lv_y += autoE13B1160_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoA7914FD9_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoA7914FD9_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoFBF979AF_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoFBF979AF_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoD9391D1B_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoD9391D1B_ai >= 0 && lv_i <= autoD9391D1B_ae) || (autoD9391D1B_ai < 0 && lv_i >= autoD9391D1B_ae) ) ; lv_i += autoD9391D1B_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto7678F59B_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto7678F59B_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoA8E2F681_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA8E2F681_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateIslandsTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto101213DB_ae = 15;
    const int auto101213DB_ai = 1;
    const int autoBB53921D_ae = 35;
    const int autoBB53921D_ai = 1;
    const int autoC1947EDD_ae = 39;
    const int autoC1947EDD_ai = 1;
    const int auto77A7E0B4_ae = gv_mapSize;
    const int auto77A7E0B4_ai = 1;
    const int auto06244452_ae = gv_mapSize;
    const int auto06244452_ai = 1;
    int auto68D92703_ae;
    const int auto68D92703_ai = 1;
    const int auto8267DEEC_ae = 6;
    const int auto8267DEEC_ai = 1;
    int autoB178DFF3_ae;
    const int autoB178DFF3_ai = 1;
    int auto25322F1D_ae;
    const int auto25322F1D_ai = 1;
    int auto86FB7F21_ae;
    const int auto86FB7F21_ai = 1;
    int auto87D5638C_ae;
    const int auto87D5638C_ai = 1;
    const int auto83ECDCA6_ae = gv_mapSize;
    const int auto83ECDCA6_ai = 1;
    const int auto88B82566_ae = gv_mapSize;
    const int auto88B82566_ai = 1;
    int autoE4B25639_ae;
    const int autoE4B25639_ai = 1;
    int autoFFC1456F_ae;
    const int autoFFC1456F_ai = 1;
    unitgroup auto71708C30_g;
    int auto71708C30_u;
    int autoB6D11A09_ae;
    const int autoB6D11A09_ai = 1;
    int auto861F8C74_ae;
    const int auto861F8C74_ai = 1;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 26;
    gv_usingInvertedMapLayout = true;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircleCount = 36;
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], RandomInt(0, 5));
    lv_i = 1;
    for ( ; ( (auto101213DB_ai >= 0 && lv_i <= auto101213DB_ae) || (auto101213DB_ai < 0 && lv_i >= auto101213DB_ae) ) ; lv_i += auto101213DB_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(16.0, 45.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.6), (lv_circleSizeMax * 1.2)));
    }
    lv_i = 16;
    for ( ; ( (autoBB53921D_ai >= 0 && lv_i <= autoBB53921D_ae) || (autoBB53921D_ai < 0 && lv_i >= autoBB53921D_ae) ) ; lv_i += autoBB53921D_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(15.0, 45.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.4), (lv_circleSizeMax * 0.6)));
    }
    lv_i = 36;
    for ( ; ( (autoC1947EDD_ai >= 0 && lv_i <= autoC1947EDD_ae) || (autoC1947EDD_ai < 0 && lv_i >= autoC1947EDD_ae) ) ; lv_i += autoC1947EDD_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(15.0, 45.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.2), (lv_circleSizeMax * 1.5)));
    }
    lv_x = 0;
    for ( ; ( (auto77A7E0B4_ai >= 0 && lv_x <= auto77A7E0B4_ae) || (auto77A7E0B4_ai < 0 && lv_x >= auto77A7E0B4_ae) ) ; lv_x += auto77A7E0B4_ai ) {
        lv_y = 0;
        for ( ; ( (auto06244452_ai >= 0 && lv_y <= auto06244452_ae) || (auto06244452_ai < 0 && lv_y >= auto06244452_ae) ) ; lv_y += auto06244452_ai ) {
            auto68D92703_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto68D92703_ai >= 0 && lv_i <= auto68D92703_ae) || (auto68D92703_ai < 0 && lv_i >= auto68D92703_ae) ) ; lv_i += auto68D92703_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto8267DEEC_ai >= 0 && lv_i <= auto8267DEEC_ae) || (auto8267DEEC_ai < 0 && lv_i >= auto8267DEEC_ae) ) ; lv_i += auto8267DEEC_ai ) {
        Wait(0.0, c_timeGame);
        autoB178DFF3_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoB178DFF3_ai >= 0 && lv_x <= autoB178DFF3_ae) || (autoB178DFF3_ai < 0 && lv_x >= autoB178DFF3_ae) ) ; lv_x += autoB178DFF3_ai ) {
            auto25322F1D_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto25322F1D_ai >= 0 && lv_y <= auto25322F1D_ae) || (auto25322F1D_ai < 0 && lv_y >= auto25322F1D_ae) ) ; lv_y += auto25322F1D_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto86FB7F21_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto86FB7F21_ai >= 0 && lv_x <= auto86FB7F21_ae) || (auto86FB7F21_ai < 0 && lv_x >= auto86FB7F21_ae) ) ; lv_x += auto86FB7F21_ai ) {
            auto87D5638C_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto87D5638C_ai >= 0 && lv_y <= auto87D5638C_ae) || (auto87D5638C_ai < 0 && lv_y >= auto87D5638C_ae) ) ; lv_y += auto87D5638C_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_x = 0;
    for ( ; ( (auto83ECDCA6_ai >= 0 && lv_x <= auto83ECDCA6_ae) || (auto83ECDCA6_ai < 0 && lv_x >= auto83ECDCA6_ae) ) ; lv_x += auto83ECDCA6_ai ) {
        lv_y = 0;
        for ( ; ( (auto88B82566_ai >= 0 && lv_y <= auto88B82566_ae) || (auto88B82566_ai < 0 && lv_y >= auto88B82566_ae) ) ; lv_y += auto88B82566_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                gv_dirtMap[lv_x][lv_y] = 1;
            }
            else {
                gv_dirtMap[lv_x][lv_y] = 0;
            }
        }
    }
    autoE4B25639_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoE4B25639_ai >= 0 && lv_x <= autoE4B25639_ae) || (autoE4B25639_ai < 0 && lv_x >= autoE4B25639_ae) ) ; lv_x += autoE4B25639_ai ) {
        autoFFC1456F_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoFFC1456F_ai >= 0 && lv_y <= autoFFC1456F_ae) || (autoFFC1456F_ai < 0 && lv_y >= autoFFC1456F_ae) ) ; lv_y += autoFFC1456F_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto71708C30_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto71708C30_u = UnitGroupCount(auto71708C30_g, c_unitCountAll);
    for (;; auto71708C30_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto71708C30_g, auto71708C30_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoB6D11A09_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoB6D11A09_ai >= 0 && lv_x <= autoB6D11A09_ae) || (autoB6D11A09_ai < 0 && lv_x >= autoB6D11A09_ae) ) ; lv_x += autoB6D11A09_ai ) {
        auto861F8C74_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto861F8C74_ai >= 0 && lv_y <= auto861F8C74_ae) || (auto861F8C74_ai < 0 && lv_y >= auto861F8C74_ae) ) ; lv_y += auto861F8C74_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateIslandsPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoF65C3F08_ae = gv_mapSize;
    const int autoF65C3F08_ai = 4;
    const int auto7E7A1D82_ae = gv_mapSize;
    const int auto7E7A1D82_ai = 4;
    playergroup autoAF7F48FC_g;
    playergroup auto1ABF5E9A_g;
    int autoA7662BC4_ae;
    const int autoA7662BC4_ai = 1;
    playergroup auto765CABCB_g;
    playergroup auto1C5037CE_g;

    // Variable Initialization
    lv_spawnDistance = 10;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoF65C3F08_ai >= 0 && lv_x <= autoF65C3F08_ae) || (autoF65C3F08_ai < 0 && lv_x >= autoF65C3F08_ae) ) ; lv_x += autoF65C3F08_ai ) {
            lv_y = 0;
            for ( ; ( (auto7E7A1D82_ai >= 0 && lv_y <= auto7E7A1D82_ae) || (auto7E7A1D82_ai < 0 && lv_y >= auto7E7A1D82_ae) ) ; lv_y += auto7E7A1D82_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoAF7F48FC_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoAF7F48FC_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto1ABF5E9A_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto1ABF5E9A_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoA7662BC4_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoA7662BC4_ai >= 0 && lv_i <= autoA7662BC4_ae) || (autoA7662BC4_ai < 0 && lv_i >= autoA7662BC4_ae) ) ; lv_i += autoA7662BC4_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionFromId(1)), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto765CABCB_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto765CABCB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto1C5037CE_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto1C5037CE_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GeneratePondTerrain () {
    // Variable Declarations
    int lv_bLOCKERX;
    int lv_bLOCKERY;
    region lv_blockedPathingRegion;
    int lv_pondSplatAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto32352811_ae = 15;
    const int auto32352811_ai = 1;
    const int auto8FB71073_ae = 20;
    const int auto8FB71073_ai = 1;
    int autoAB42F9B1_ae;
    const int autoAB42F9B1_ai = 1;
    const int auto673AE51C_ae = gv_mapSize;
    const int auto673AE51C_ai = 1;
    const int auto71020C29_ae = gv_mapSize;
    const int auto71020C29_ai = 1;
    int autoF2703A7E_ae;
    const int autoF2703A7E_ai = 1;
    const int autoE834FEDA_ae = 5;
    const int autoE834FEDA_ai = 1;
    int auto4A7C4965_ae;
    const int auto4A7C4965_ai = 1;
    int autoC7C8C484_ae;
    const int autoC7C8C484_ai = 1;
    int auto9B75E2AF_ae;
    const int auto9B75E2AF_ai = 1;
    int autoD750182A_ae;
    const int autoD750182A_ai = 1;
    int auto5649A947_ae;
    const int auto5649A947_ai = 1;
    int autoE9FC92A4_ae;
    const int autoE9FC92A4_ai = 1;
    unitgroup autoA78689A8_g;
    int autoA78689A8_u;
    int autoC225DCC9_ae;
    const int autoC225DCC9_ai = 1;
    int auto50782E2A_ae;
    const int auto50782E2A_ai = 1;
    const int autoABFB383D_ae = 104;
    const int autoABFB383D_ai = 3;
    const int auto6DF7A963_ae = 104;
    const int auto6DF7A963_ai = 3;

    // Variable Initialization
    lv_blockedPathingRegion = RegionCircle(lv_dirtMapCenterPoint, 0.0);
    lv_pondSplatAngle = RandomInt(0, 360);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 26;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 14.0);
    lv_i = 1;
    for ( ; ( (auto32352811_ai >= 0 && lv_i <= auto32352811_ae) || (auto32352811_ai < 0 && lv_i >= auto32352811_ae) ) ; lv_i += auto32352811_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(16.0, 20.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.4), (lv_circleSizeMax * 0.5)));
    }
    lv_i = 16;
    for ( ; ( (auto8FB71073_ai >= 0 && lv_i <= auto8FB71073_ae) || (auto8FB71073_ai < 0 && lv_i >= auto8FB71073_ae) ) ; lv_i += auto8FB71073_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, (lv_maxCenterPointOffset * 0.8)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
    }
    autoAB42F9B1_ae = gv_clearCircleCount;
    lv_i = 21;
    for ( ; ( (autoAB42F9B1_ai >= 0 && lv_i <= autoAB42F9B1_ae) || (autoAB42F9B1_ai < 0 && lv_i >= autoAB42F9B1_ae) ) ; lv_i += autoAB42F9B1_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(20.0, (lv_maxCenterPointOffset * 1.0)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.2)));
    }
    lv_x = 0;
    for ( ; ( (auto673AE51C_ai >= 0 && lv_x <= auto673AE51C_ae) || (auto673AE51C_ai < 0 && lv_x >= auto673AE51C_ae) ) ; lv_x += auto673AE51C_ai ) {
        lv_y = 0;
        for ( ; ( (auto71020C29_ai >= 0 && lv_y <= auto71020C29_ae) || (auto71020C29_ai < 0 && lv_y >= auto71020C29_ae) ) ; lv_y += auto71020C29_ai ) {
            autoF2703A7E_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoF2703A7E_ai >= 0 && lv_i <= autoF2703A7E_ae) || (autoF2703A7E_ai < 0 && lv_i >= autoF2703A7E_ae) ) ; lv_i += autoF2703A7E_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoE834FEDA_ai >= 0 && lv_i <= autoE834FEDA_ae) || (autoE834FEDA_ai < 0 && lv_i >= autoE834FEDA_ae) ) ; lv_i += autoE834FEDA_ai ) {
        Wait(0.0, c_timeGame);
        auto4A7C4965_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto4A7C4965_ai >= 0 && lv_x <= auto4A7C4965_ae) || (auto4A7C4965_ai < 0 && lv_x >= auto4A7C4965_ae) ) ; lv_x += auto4A7C4965_ai ) {
            autoC7C8C484_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoC7C8C484_ai >= 0 && lv_y <= autoC7C8C484_ae) || (autoC7C8C484_ai < 0 && lv_y >= autoC7C8C484_ae) ) ; lv_y += autoC7C8C484_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto9B75E2AF_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto9B75E2AF_ai >= 0 && lv_x <= auto9B75E2AF_ae) || (auto9B75E2AF_ai < 0 && lv_x >= auto9B75E2AF_ae) ) ; lv_x += auto9B75E2AF_ai ) {
            autoD750182A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoD750182A_ai >= 0 && lv_y <= autoD750182A_ae) || (autoD750182A_ai < 0 && lv_y >= autoD750182A_ae) ) ; lv_y += autoD750182A_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto5649A947_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto5649A947_ai >= 0 && lv_x <= auto5649A947_ae) || (auto5649A947_ai < 0 && lv_x >= auto5649A947_ae) ) ; lv_x += auto5649A947_ai ) {
        autoE9FC92A4_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoE9FC92A4_ai >= 0 && lv_y <= autoE9FC92A4_ae) || (autoE9FC92A4_ai < 0 && lv_y >= autoE9FC92A4_ae) ) ; lv_y += autoE9FC92A4_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoA78689A8_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA78689A8_u = UnitGroupCount(autoA78689A8_g, c_unitCountAll);
    for (;; autoA78689A8_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoA78689A8_g, autoA78689A8_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoC225DCC9_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoC225DCC9_ai >= 0 && lv_x <= autoC225DCC9_ae) || (autoC225DCC9_ai < 0 && lv_x >= autoC225DCC9_ae) ) ; lv_x += autoC225DCC9_ai ) {
        auto50782E2A_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto50782E2A_ai >= 0 && lv_y <= auto50782E2A_ae) || (auto50782E2A_ai < 0 && lv_y >= auto50782E2A_ae) ) ; lv_y += auto50782E2A_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    libNtve_gf_CreateModelAtPoint("PondSplat", RegionGetCenter(RegionEntireMap()));
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(lv_pondSplatAngle));
    lv_blockedPathingRegion = RegionCircle(PointWithOffsetPolar(RegionGetCenter(RegionEntireMap()), 1.0, 0.0), 5.0);
    RegionAddCircle(lv_blockedPathingRegion, true, PointWithOffsetPolar(RegionGetCenter(RegionEntireMap()), 12.0, (lv_pondSplatAngle + 220)), 7.0);
    RegionAddCircle(lv_blockedPathingRegion, true, PointWithOffsetPolar(RegionGetCenter(RegionEntireMap()), 4.0, (lv_pondSplatAngle + 130)), 11.0);
    RegionAddCircle(lv_blockedPathingRegion, true, PointWithOffsetPolar(RegionGetCenter(RegionEntireMap()), 10.0, (lv_pondSplatAngle + 30)), 8.0);
    gv_pond = lv_blockedPathingRegion;
    lv_bLOCKERX = 48;
    for ( ; ( (autoABFB383D_ai >= 0 && lv_bLOCKERX <= autoABFB383D_ae) || (autoABFB383D_ai < 0 && lv_bLOCKERX >= autoABFB383D_ae) ) ; lv_bLOCKERX += autoABFB383D_ai ) {
        lv_bLOCKERY = 48;
        for ( ; ( (auto6DF7A963_ai >= 0 && lv_bLOCKERY <= auto6DF7A963_ae) || (auto6DF7A963_ai < 0 && lv_bLOCKERY >= auto6DF7A963_ae) ) ; lv_bLOCKERY += auto6DF7A963_ai ) {
            if ((RegionContainsPoint(lv_blockedPathingRegion, Point(lv_bLOCKERX, lv_bLOCKERY)) == true)) {
                libNtve_gf_UnitCreateFacingPoint(1, "DynamicPathingBlocker3x3", c_unitCreateIgnorePlacement, 0, Point(lv_bLOCKERX, lv_bLOCKERY), RegionRandomPoint(lv_blockedPathingRegion));
            }

        }
    }
}

void gf_GeneratePondPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoAF73F0E5_ae = gv_mapSize;
    const int autoAF73F0E5_ai = 4;
    const int auto160066A2_ae = gv_mapSize;
    const int auto160066A2_ai = 4;
    playergroup autoF6D94C0C_g;
    playergroup auto65B10647_g;
    int auto00E983E5_ae;
    const int auto00E983E5_ai = 1;
    playergroup autoD0AFACD0_g;
    playergroup autoA13F2132_g;

    // Variable Initialization
    lv_spawnDistance = 16;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoAF73F0E5_ai >= 0 && lv_x <= autoAF73F0E5_ae) || (autoAF73F0E5_ai < 0 && lv_x >= autoAF73F0E5_ae) ) ; lv_x += autoAF73F0E5_ai ) {
            lv_y = 0;
            for ( ; ( (auto160066A2_ai >= 0 && lv_y <= auto160066A2_ae) || (auto160066A2_ai < 0 && lv_y >= auto160066A2_ae) ) ; lv_y += auto160066A2_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoF6D94C0C_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoF6D94C0C_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto65B10647_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto65B10647_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto00E983E5_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto00E983E5_ai >= 0 && lv_i <= auto00E983E5_ae) || (auto00E983E5_ai < 0 && lv_i >= auto00E983E5_ae) ) ; lv_i += auto00E983E5_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoD0AFACD0_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoD0AFACD0_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoA13F2132_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA13F2132_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateDonutTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoE92ED146_ae = 15;
    const int autoE92ED146_ai = 1;
    const int auto303FBD64_ae = 20;
    const int auto303FBD64_ai = 1;
    int auto3D344806_ae;
    const int auto3D344806_ai = 1;
    const int auto08CD6229_ae = gv_mapSize;
    const int auto08CD6229_ai = 1;
    const int autoBC481A8A_ae = gv_mapSize;
    const int autoBC481A8A_ai = 1;
    int auto4D707EE9_ae;
    const int auto4D707EE9_ai = 1;
    const int auto090555E4_ae = 6;
    const int auto090555E4_ai = 1;
    int auto8D2EF2A4_ae;
    const int auto8D2EF2A4_ai = 1;
    int auto2CE619F3_ae;
    const int auto2CE619F3_ai = 1;
    int auto30F97888_ae;
    const int auto30F97888_ai = 1;
    int auto9737722E_ae;
    const int auto9737722E_ai = 1;
    const int auto3288698C_ae = gv_mapSize;
    const int auto3288698C_ai = 1;
    const int auto03C20080_ae = gv_mapSize;
    const int auto03C20080_ai = 1;
    int auto4F1B1A2C_ae;
    const int auto4F1B1A2C_ai = 1;
    int autoEA2883CD_ae;
    const int autoEA2883CD_ai = 1;
    unitgroup autoDED17D20_g;
    int autoDED17D20_u;
    int autoFF3D24DC_ae;
    const int autoFF3D24DC_ai = 1;
    int auto91F6BE5A_ae;
    const int auto91F6BE5A_ai = 1;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 50;
    gv_usingInvertedMapLayout = true;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    lv_i = 0;
    for ( ; ( (autoE92ED146_ai >= 0 && lv_i <= autoE92ED146_ae) || (autoE92ED146_ai < 0 && lv_i >= autoE92ED146_ae) ) ; lv_i += autoE92ED146_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(16.0, 20.0), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.4), (lv_circleSizeMax * 0.5)));
    }
    lv_i = 16;
    for ( ; ( (auto303FBD64_ai >= 0 && lv_i <= auto303FBD64_ae) || (auto303FBD64_ai < 0 && lv_i >= auto303FBD64_ae) ) ; lv_i += auto303FBD64_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, (lv_maxCenterPointOffset * 0.8)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
    }
    auto3D344806_ae = gv_clearCircleCount;
    lv_i = 21;
    for ( ; ( (auto3D344806_ai >= 0 && lv_i <= auto3D344806_ae) || (auto3D344806_ai < 0 && lv_i >= auto3D344806_ae) ) ; lv_i += auto3D344806_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, (lv_maxCenterPointOffset * 1.0)), libNtve_gf_RandomAngle());
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.2)));
    }
    lv_x = 0;
    for ( ; ( (auto08CD6229_ai >= 0 && lv_x <= auto08CD6229_ae) || (auto08CD6229_ai < 0 && lv_x >= auto08CD6229_ae) ) ; lv_x += auto08CD6229_ai ) {
        lv_y = 0;
        for ( ; ( (autoBC481A8A_ai >= 0 && lv_y <= autoBC481A8A_ae) || (autoBC481A8A_ai < 0 && lv_y >= autoBC481A8A_ae) ) ; lv_y += autoBC481A8A_ai ) {
            auto4D707EE9_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto4D707EE9_ai >= 0 && lv_i <= auto4D707EE9_ae) || (auto4D707EE9_ai < 0 && lv_i >= auto4D707EE9_ae) ) ; lv_i += auto4D707EE9_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto090555E4_ai >= 0 && lv_i <= auto090555E4_ae) || (auto090555E4_ai < 0 && lv_i >= auto090555E4_ae) ) ; lv_i += auto090555E4_ai ) {
        Wait(0.0, c_timeGame);
        auto8D2EF2A4_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto8D2EF2A4_ai >= 0 && lv_x <= auto8D2EF2A4_ae) || (auto8D2EF2A4_ai < 0 && lv_x >= auto8D2EF2A4_ae) ) ; lv_x += auto8D2EF2A4_ai ) {
            auto2CE619F3_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto2CE619F3_ai >= 0 && lv_y <= auto2CE619F3_ae) || (auto2CE619F3_ai < 0 && lv_y >= auto2CE619F3_ae) ) ; lv_y += auto2CE619F3_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto30F97888_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto30F97888_ai >= 0 && lv_x <= auto30F97888_ae) || (auto30F97888_ai < 0 && lv_x >= auto30F97888_ae) ) ; lv_x += auto30F97888_ai ) {
            auto9737722E_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto9737722E_ai >= 0 && lv_y <= auto9737722E_ae) || (auto9737722E_ai < 0 && lv_y >= auto9737722E_ae) ) ; lv_y += auto9737722E_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_x = 0;
    for ( ; ( (auto3288698C_ai >= 0 && lv_x <= auto3288698C_ae) || (auto3288698C_ai < 0 && lv_x >= auto3288698C_ae) ) ; lv_x += auto3288698C_ai ) {
        lv_y = 0;
        for ( ; ( (auto03C20080_ai >= 0 && lv_y <= auto03C20080_ae) || (auto03C20080_ai < 0 && lv_y >= auto03C20080_ae) ) ; lv_y += auto03C20080_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                gv_dirtMap[lv_x][lv_y] = 1;
            }
            else {
                gv_dirtMap[lv_x][lv_y] = 0;
            }
        }
    }
    auto4F1B1A2C_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto4F1B1A2C_ai >= 0 && lv_x <= auto4F1B1A2C_ae) || (auto4F1B1A2C_ai < 0 && lv_x >= auto4F1B1A2C_ae) ) ; lv_x += auto4F1B1A2C_ai ) {
        autoEA2883CD_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoEA2883CD_ai >= 0 && lv_y <= autoEA2883CD_ae) || (autoEA2883CD_ai < 0 && lv_y >= autoEA2883CD_ae) ) ; lv_y += autoEA2883CD_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoDED17D20_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDED17D20_u = UnitGroupCount(autoDED17D20_g, c_unitCountAll);
    for (;; autoDED17D20_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoDED17D20_g, autoDED17D20_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoFF3D24DC_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoFF3D24DC_ai >= 0 && lv_x <= autoFF3D24DC_ae) || (autoFF3D24DC_ai < 0 && lv_x >= autoFF3D24DC_ae) ) ; lv_x += autoFF3D24DC_ai ) {
        auto91F6BE5A_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto91F6BE5A_ai >= 0 && lv_y <= auto91F6BE5A_ae) || (auto91F6BE5A_ai < 0 && lv_y >= auto91F6BE5A_ae) ) ; lv_y += auto91F6BE5A_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateDountPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto4FA95E17_ae = gv_mapSize;
    const int auto4FA95E17_ai = 4;
    const int auto96CA0C2C_ae = gv_mapSize;
    const int auto96CA0C2C_ai = 4;
    playergroup autoA4ED402A_g;
    playergroup autoCCBA84DA_g;
    int auto711835D3_ae;
    const int auto711835D3_ai = 1;
    playergroup auto75CF95B3_g;
    playergroup auto8B3B03DB_g;

    // Variable Initialization
    lv_spawnDistance = 65;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto4FA95E17_ai >= 0 && lv_x <= auto4FA95E17_ae) || (auto4FA95E17_ai < 0 && lv_x >= auto4FA95E17_ae) ) ; lv_x += auto4FA95E17_ai ) {
            lv_y = 0;
            for ( ; ( (auto96CA0C2C_ai >= 0 && lv_y <= auto96CA0C2C_ae) || (auto96CA0C2C_ai < 0 && lv_y >= auto96CA0C2C_ae) ) ; lv_y += auto96CA0C2C_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoA4ED402A_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoA4ED402A_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoCCBA84DA_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoCCBA84DA_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto711835D3_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto711835D3_ai >= 0 && lv_i <= auto711835D3_ae) || (auto711835D3_ai < 0 && lv_i >= auto711835D3_ae) ) ; lv_i += auto711835D3_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto75CF95B3_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto75CF95B3_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto8B3B03DB_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto8B3B03DB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateRiverTerrain () {
    // Variable Declarations
    int lv_RiverAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto2AC848FA_ae = 15;
    const int auto2AC848FA_ai = 1;
    const int autoD4C9E642_ae = 20;
    const int autoD4C9E642_ai = 1;
    int autoA8A65709_ae;
    const int autoA8A65709_ai = 1;
    const int autoDA757328_ae = gv_mapSize;
    const int autoDA757328_ai = 1;
    const int autoF0EFD521_ae = gv_mapSize;
    const int autoF0EFD521_ai = 1;
    int autoA1E777D2_ae;
    const int autoA1E777D2_ai = 1;
    const int autoA5833099_ae = 5;
    const int autoA5833099_ai = 1;
    int auto851427B8_ae;
    const int auto851427B8_ai = 1;
    int auto96B5991F_ae;
    const int auto96B5991F_ai = 1;
    int autoB6885832_ae;
    const int autoB6885832_ai = 1;
    int auto0BA181C9_ae;
    const int auto0BA181C9_ai = 1;
    int auto89F2E686_ae;
    const int auto89F2E686_ai = 1;
    int auto7C1676C7_ae;
    const int auto7C1676C7_ai = 1;
    unitgroup auto2EEF0F63_g;
    int auto2EEF0F63_u;
    int auto95CC3882_ae;
    const int auto95CC3882_ai = 1;
    int auto5D616120_ae;
    const int auto5D616120_ai = 1;

    // Variable Initialization
    lv_RiverAngle = RandomInt(0, 360);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 11.0;

    // Implementation
    gv_mapGenAngle = lv_RiverAngle;
    gv_clearCircleCount = 30;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 7.0);
    lv_i = 1;
    for ( ; ( (auto2AC848FA_ai >= 0 && lv_i <= auto2AC848FA_ae) || (auto2AC848FA_ai < 0 && lv_i >= auto2AC848FA_ae) ) ; lv_i += auto2AC848FA_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.6), (lv_circleSizeMax * 0.9)));
    }
    lv_i = 16;
    for ( ; ( (autoD4C9E642_ai >= 0 && lv_i <= autoD4C9E642_ae) || (autoD4C9E642_ai < 0 && lv_i >= autoD4C9E642_ae) ) ; lv_i += autoD4C9E642_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.9), (lv_circleSizeMax * 1.1)));
    }
    autoA8A65709_ae = gv_clearCircleCount;
    lv_i = 21;
    for ( ; ( (autoA8A65709_ai >= 0 && lv_i <= autoA8A65709_ae) || (autoA8A65709_ai < 0 && lv_i >= autoA8A65709_ae) ) ; lv_i += autoA8A65709_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.2)));
    }
    lv_x = 0;
    for ( ; ( (autoDA757328_ai >= 0 && lv_x <= autoDA757328_ae) || (autoDA757328_ai < 0 && lv_x >= autoDA757328_ae) ) ; lv_x += autoDA757328_ai ) {
        lv_y = 0;
        for ( ; ( (autoF0EFD521_ai >= 0 && lv_y <= autoF0EFD521_ae) || (autoF0EFD521_ai < 0 && lv_y >= autoF0EFD521_ae) ) ; lv_y += autoF0EFD521_ai ) {
            autoA1E777D2_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoA1E777D2_ai >= 0 && lv_i <= autoA1E777D2_ae) || (autoA1E777D2_ai < 0 && lv_i >= autoA1E777D2_ae) ) ; lv_i += autoA1E777D2_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoA5833099_ai >= 0 && lv_i <= autoA5833099_ae) || (autoA5833099_ai < 0 && lv_i >= autoA5833099_ae) ) ; lv_i += autoA5833099_ai ) {
        Wait(0.0, c_timeGame);
        auto851427B8_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto851427B8_ai >= 0 && lv_x <= auto851427B8_ae) || (auto851427B8_ai < 0 && lv_x >= auto851427B8_ae) ) ; lv_x += auto851427B8_ai ) {
            auto96B5991F_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto96B5991F_ai >= 0 && lv_y <= auto96B5991F_ae) || (auto96B5991F_ai < 0 && lv_y >= auto96B5991F_ae) ) ; lv_y += auto96B5991F_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoB6885832_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoB6885832_ai >= 0 && lv_x <= autoB6885832_ae) || (autoB6885832_ai < 0 && lv_x >= autoB6885832_ae) ) ; lv_x += autoB6885832_ai ) {
            auto0BA181C9_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto0BA181C9_ai >= 0 && lv_y <= auto0BA181C9_ae) || (auto0BA181C9_ai < 0 && lv_y >= auto0BA181C9_ae) ) ; lv_y += auto0BA181C9_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto89F2E686_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto89F2E686_ai >= 0 && lv_x <= auto89F2E686_ae) || (auto89F2E686_ai < 0 && lv_x >= auto89F2E686_ae) ) ; lv_x += auto89F2E686_ai ) {
        auto7C1676C7_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto7C1676C7_ai >= 0 && lv_y <= auto7C1676C7_ae) || (auto7C1676C7_ai < 0 && lv_y >= auto7C1676C7_ae) ) ; lv_y += auto7C1676C7_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto2EEF0F63_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2EEF0F63_u = UnitGroupCount(auto2EEF0F63_g, c_unitCountAll);
    for (;; auto2EEF0F63_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto2EEF0F63_g, auto2EEF0F63_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto95CC3882_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto95CC3882_ai >= 0 && lv_x <= auto95CC3882_ae) || (auto95CC3882_ai < 0 && lv_x >= auto95CC3882_ae) ) ; lv_x += auto95CC3882_ai ) {
        auto5D616120_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto5D616120_ai >= 0 && lv_y <= auto5D616120_ae) || (auto5D616120_ai < 0 && lv_y >= auto5D616120_ae) ) ; lv_y += auto5D616120_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateRiverPlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto98557FF5_ae = gv_mapSize;
    const int auto98557FF5_ai = 4;
    const int auto4150462E_ae = gv_mapSize;
    const int auto4150462E_ai = 4;
    playergroup autoFFF45859_g;
    playergroup autoF06E72B5_g;
    int auto06812F1F_ae;
    const int auto06812F1F_ai = 1;
    playergroup auto70C09F3D_g;
    playergroup auto1F24593A_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto98557FF5_ai >= 0 && lv_x <= auto98557FF5_ae) || (auto98557FF5_ai < 0 && lv_x >= auto98557FF5_ae) ) ; lv_x += auto98557FF5_ai ) {
            lv_y = 0;
            for ( ; ( (auto4150462E_ai >= 0 && lv_y <= auto4150462E_ae) || (auto4150462E_ai < 0 && lv_y >= auto4150462E_ae) ) ; lv_y += auto4150462E_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoFFF45859_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoFFF45859_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoF06E72B5_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoF06E72B5_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto06812F1F_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto06812F1F_ai >= 0 && lv_i <= auto06812F1F_ae) || (auto06812F1F_ai < 0 && lv_i >= auto06812F1F_ae) ) ; lv_i += auto06812F1F_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, (gv_mapGenAngle - 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, gv_mapGenAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, (gv_mapGenAngle - 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, gv_mapGenAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = (lv_spawnDistance + 5);
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = (lv_spawnDistance + 5);
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto70C09F3D_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto70C09F3D_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto1F24593A_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto1F24593A_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateCavesTerrain () {
    // Variable Declarations
    int lv_currentCircle;
    int lv_cavesRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoDBF17C74_n = 6;
    int autoDBF17C74_i;
    int auto75986176_ae;
    const int auto75986176_ai = 1;
    const int auto6EE94F07_ae = gv_mapSize;
    const int auto6EE94F07_ai = 1;
    const int autoDABB6661_ae = gv_mapSize;
    const int autoDABB6661_ai = 1;
    int auto1EE2CA7F_ae;
    const int auto1EE2CA7F_ai = 1;
    const int autoF1439394_ae = 5;
    const int autoF1439394_ai = 1;
    int auto1C1F4F4B_ae;
    const int auto1C1F4F4B_ai = 1;
    int auto72EBE6E0_ae;
    const int auto72EBE6E0_ai = 1;
    int auto52EA5B3E_ae;
    const int auto52EA5B3E_ai = 1;
    int auto130AB9CD_ae;
    const int auto130AB9CD_ai = 1;
    int autoAE52E402_ae;
    const int autoAE52E402_ai = 1;
    int autoFBDAC8AC_ae;
    const int autoFBDAC8AC_ai = 1;
    unitgroup auto4F91F7CF_g;
    int auto4F91F7CF_u;
    int auto9C73E7F7_ae;
    const int auto9C73E7F7_ai = 1;
    int auto1C5285F2_ae;
    const int auto1C5285F2_ai = 1;

    // Variable Initialization
    lv_currentCircle = 1;
    lv_cavesRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 6;
    lv_cavesRandomAngle = RandomInt(0, 360);
    gv_mapGenAngle = lv_cavesRandomAngle;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 11.0);
    for (autoDBF17C74_i = 1; autoDBF17C74_i <= autoDBF17C74_n; autoDBF17C74_i += 1) {
        auto75986176_ae = lv_currentCircle;
        lv_i = lv_currentCircle;
        for ( ; ( (auto75986176_ai >= 0 && lv_i <= auto75986176_ae) || (auto75986176_ai < 0 && lv_i >= auto75986176_ae) ) ; lv_i += auto75986176_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(28.0, 28.0), lv_cavesRandomAngle);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.2), (lv_circleSizeMax * 1.2)));
        }
        lv_currentCircle = (lv_currentCircle + 1);
        lv_cavesRandomAngle = (lv_cavesRandomAngle + 60);
    }
    lv_x = 0;
    for ( ; ( (auto6EE94F07_ai >= 0 && lv_x <= auto6EE94F07_ae) || (auto6EE94F07_ai < 0 && lv_x >= auto6EE94F07_ae) ) ; lv_x += auto6EE94F07_ai ) {
        lv_y = 0;
        for ( ; ( (autoDABB6661_ai >= 0 && lv_y <= autoDABB6661_ae) || (autoDABB6661_ai < 0 && lv_y >= autoDABB6661_ae) ) ; lv_y += autoDABB6661_ai ) {
            auto1EE2CA7F_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto1EE2CA7F_ai >= 0 && lv_i <= auto1EE2CA7F_ae) || (auto1EE2CA7F_ai < 0 && lv_i >= auto1EE2CA7F_ae) ) ; lv_i += auto1EE2CA7F_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoF1439394_ai >= 0 && lv_i <= autoF1439394_ae) || (autoF1439394_ai < 0 && lv_i >= autoF1439394_ae) ) ; lv_i += autoF1439394_ai ) {
        Wait(0.0, c_timeGame);
        auto1C1F4F4B_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto1C1F4F4B_ai >= 0 && lv_x <= auto1C1F4F4B_ae) || (auto1C1F4F4B_ai < 0 && lv_x >= auto1C1F4F4B_ae) ) ; lv_x += auto1C1F4F4B_ai ) {
            auto72EBE6E0_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto72EBE6E0_ai >= 0 && lv_y <= auto72EBE6E0_ae) || (auto72EBE6E0_ai < 0 && lv_y >= auto72EBE6E0_ae) ) ; lv_y += auto72EBE6E0_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto52EA5B3E_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto52EA5B3E_ai >= 0 && lv_x <= auto52EA5B3E_ae) || (auto52EA5B3E_ai < 0 && lv_x >= auto52EA5B3E_ae) ) ; lv_x += auto52EA5B3E_ai ) {
            auto130AB9CD_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto130AB9CD_ai >= 0 && lv_y <= auto130AB9CD_ae) || (auto130AB9CD_ai < 0 && lv_y >= auto130AB9CD_ae) ) ; lv_y += auto130AB9CD_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoAE52E402_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoAE52E402_ai >= 0 && lv_x <= autoAE52E402_ae) || (autoAE52E402_ai < 0 && lv_x >= autoAE52E402_ae) ) ; lv_x += autoAE52E402_ai ) {
        autoFBDAC8AC_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoFBDAC8AC_ai >= 0 && lv_y <= autoFBDAC8AC_ae) || (autoFBDAC8AC_ai < 0 && lv_y >= autoFBDAC8AC_ae) ) ; lv_y += autoFBDAC8AC_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto4F91F7CF_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F91F7CF_u = UnitGroupCount(auto4F91F7CF_g, c_unitCountAll);
    for (;; auto4F91F7CF_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto4F91F7CF_g, auto4F91F7CF_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto9C73E7F7_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto9C73E7F7_ai >= 0 && lv_x <= auto9C73E7F7_ae) || (auto9C73E7F7_ai < 0 && lv_x >= auto9C73E7F7_ae) ) ; lv_x += auto9C73E7F7_ai ) {
        auto1C5285F2_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto1C5285F2_ai >= 0 && lv_y <= auto1C5285F2_ae) || (auto1C5285F2_ai < 0 && lv_y >= auto1C5285F2_ae) ) ; lv_y += auto1C5285F2_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateCavesPlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto6B647061_ae = gv_mapSize;
    const int auto6B647061_ai = 4;
    const int auto28184936_ae = gv_mapSize;
    const int auto28184936_ai = 4;
    playergroup auto674998C4_g;
    playergroup auto617AD431_g;
    int auto44F626A6_ae;
    const int auto44F626A6_ai = 1;
    playergroup autoA7AE7923_g;
    playergroup autoC17E05E4_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);
    lv_spawnDistance = 57;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto6B647061_ai >= 0 && lv_x <= auto6B647061_ae) || (auto6B647061_ai < 0 && lv_x >= auto6B647061_ae) ) ; lv_x += auto6B647061_ai ) {
            lv_y = 0;
            for ( ; ( (auto28184936_ai >= 0 && lv_y <= auto28184936_ae) || (auto28184936_ai < 0 && lv_y >= auto28184936_ae) ) ; lv_y += auto28184936_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto674998C4_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto674998C4_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto617AD431_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto617AD431_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto44F626A6_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto44F626A6_ai >= 0 && lv_i <= auto44F626A6_ae) || (auto44F626A6_ai < 0 && lv_i >= auto44F626A6_ae) ) ; lv_i += auto44F626A6_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = gv_mapGenAngle;
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        if ((lv_closeOrFar == 1)) {
            lv_spawnDistance = 10;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        if ((lv_closeOrFar == 1)) {
            lv_spawnDistance = 10;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoA7AE7923_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA7AE7923_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoC17E05E4_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoC17E05E4_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateRiverTerrain2 () {
    // Variable Declarations
    int lv_RiverAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto64979F82_ae = 25;
    const int auto64979F82_ai = 1;
    const int auto8C679C98_ae = 50;
    const int auto8C679C98_ai = 1;
    const int auto1952E18F_ae = gv_mapSize;
    const int auto1952E18F_ai = 1;
    const int autoAF8CEB03_ae = gv_mapSize;
    const int autoAF8CEB03_ai = 1;
    int auto25DEBB9D_ae;
    const int auto25DEBB9D_ai = 1;
    const int auto351E2ED3_ae = 5;
    const int auto351E2ED3_ai = 1;
    int auto2C2BEAAA_ae;
    const int auto2C2BEAAA_ai = 1;
    int auto702CA060_ae;
    const int auto702CA060_ai = 1;
    int auto17F30300_ae;
    const int auto17F30300_ai = 1;
    int autoE3D50B50_ae;
    const int autoE3D50B50_ai = 1;
    int auto0A516722_ae;
    const int auto0A516722_ai = 1;
    int auto8116C430_ae;
    const int auto8116C430_ai = 1;
    unitgroup auto914145B7_g;
    int auto914145B7_u;
    int autoB15C2EBB_ae;
    const int autoB15C2EBB_ai = 1;
    int autoDA542501_ae;
    const int autoDA542501_ai = 1;

    // Variable Initialization
    lv_RiverAngle = RandomInt(0, 360);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 11.0;

    // Implementation
    gv_mapGenAngle = lv_RiverAngle;
    gv_clearCircleCount = 50;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 7.0);
    lv_i = 1;
    for ( ; ( (auto64979F82_ai >= 0 && lv_i <= auto64979F82_ae) || (auto64979F82_ai < 0 && lv_i >= auto64979F82_ae) ) ; lv_i += auto64979F82_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.95), (lv_circleSizeMax * 1.0)));
    }
    lv_i = 26;
    for ( ; ( (auto8C679C98_ai >= 0 && lv_i <= auto8C679C98_ae) || (auto8C679C98_ai < 0 && lv_i >= auto8C679C98_ae) ) ; lv_i += auto8C679C98_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), (lv_RiverAngle + 90));
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.95), (lv_circleSizeMax * 1.0)));
    }
    lv_x = 0;
    for ( ; ( (auto1952E18F_ai >= 0 && lv_x <= auto1952E18F_ae) || (auto1952E18F_ai < 0 && lv_x >= auto1952E18F_ae) ) ; lv_x += auto1952E18F_ai ) {
        lv_y = 0;
        for ( ; ( (autoAF8CEB03_ai >= 0 && lv_y <= autoAF8CEB03_ae) || (autoAF8CEB03_ai < 0 && lv_y >= autoAF8CEB03_ae) ) ; lv_y += autoAF8CEB03_ai ) {
            auto25DEBB9D_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto25DEBB9D_ai >= 0 && lv_i <= auto25DEBB9D_ae) || (auto25DEBB9D_ai < 0 && lv_i >= auto25DEBB9D_ae) ) ; lv_i += auto25DEBB9D_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto351E2ED3_ai >= 0 && lv_i <= auto351E2ED3_ae) || (auto351E2ED3_ai < 0 && lv_i >= auto351E2ED3_ae) ) ; lv_i += auto351E2ED3_ai ) {
        Wait(0.0, c_timeGame);
        auto2C2BEAAA_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto2C2BEAAA_ai >= 0 && lv_x <= auto2C2BEAAA_ae) || (auto2C2BEAAA_ai < 0 && lv_x >= auto2C2BEAAA_ae) ) ; lv_x += auto2C2BEAAA_ai ) {
            auto702CA060_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto702CA060_ai >= 0 && lv_y <= auto702CA060_ae) || (auto702CA060_ai < 0 && lv_y >= auto702CA060_ae) ) ; lv_y += auto702CA060_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto17F30300_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto17F30300_ai >= 0 && lv_x <= auto17F30300_ae) || (auto17F30300_ai < 0 && lv_x >= auto17F30300_ae) ) ; lv_x += auto17F30300_ai ) {
            autoE3D50B50_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoE3D50B50_ai >= 0 && lv_y <= autoE3D50B50_ae) || (autoE3D50B50_ai < 0 && lv_y >= autoE3D50B50_ae) ) ; lv_y += autoE3D50B50_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto0A516722_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto0A516722_ai >= 0 && lv_x <= auto0A516722_ae) || (auto0A516722_ai < 0 && lv_x >= auto0A516722_ae) ) ; lv_x += auto0A516722_ai ) {
        auto8116C430_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto8116C430_ai >= 0 && lv_y <= auto8116C430_ae) || (auto8116C430_ai < 0 && lv_y >= auto8116C430_ae) ) ; lv_y += auto8116C430_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto914145B7_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto914145B7_u = UnitGroupCount(auto914145B7_g, c_unitCountAll);
    for (;; auto914145B7_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto914145B7_g, auto914145B7_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoB15C2EBB_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoB15C2EBB_ai >= 0 && lv_x <= autoB15C2EBB_ae) || (autoB15C2EBB_ai < 0 && lv_x >= autoB15C2EBB_ae) ) ; lv_x += autoB15C2EBB_ai ) {
        autoDA542501_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoDA542501_ai >= 0 && lv_y <= autoDA542501_ae) || (autoDA542501_ai < 0 && lv_y >= autoDA542501_ae) ) ; lv_y += autoDA542501_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateCrossPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoBED465E6_ae = gv_mapSize;
    const int autoBED465E6_ai = 4;
    const int autoD44B8BE7_ae = gv_mapSize;
    const int autoD44B8BE7_ai = 4;
    playergroup autoF3B776AB_g;
    playergroup auto22D7DB3F_g;
    int auto487C3A81_ae;
    const int auto487C3A81_ai = 1;
    playergroup auto7233426F_g;
    playergroup auto465DFB83_g;

    // Variable Initialization
    lv_spawnDistance = 25;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoBED465E6_ai >= 0 && lv_x <= autoBED465E6_ae) || (autoBED465E6_ai < 0 && lv_x >= autoBED465E6_ae) ) ; lv_x += autoBED465E6_ai ) {
            lv_y = 0;
            for ( ; ( (autoD44B8BE7_ai >= 0 && lv_y <= autoD44B8BE7_ae) || (autoD44B8BE7_ai < 0 && lv_y >= autoD44B8BE7_ae) ) ; lv_y += autoD44B8BE7_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoF3B776AB_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoF3B776AB_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto22D7DB3F_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto22D7DB3F_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto487C3A81_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto487C3A81_ai >= 0 && lv_i <= auto487C3A81_ae) || (auto487C3A81_ai < 0 && lv_i >= auto487C3A81_ae) ) ; lv_i += auto487C3A81_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = (gv_mapGenAngle + RandomInt(0, 30));
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto7233426F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto7233426F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto465DFB83_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto465DFB83_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateRiverTerrain3 () {
    // Variable Declarations
    int lv_RiverAngle;
    int lv_RiverAngle2;
    point lv_point1River;
    point lv_point2River;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto155348CC_ae = 30;
    const int auto155348CC_ai = 1;
    const int auto223F648D_ae = 60;
    const int auto223F648D_ai = 1;
    const int autoCBA51FC0_ae = gv_mapSize;
    const int autoCBA51FC0_ai = 1;
    const int autoFE9FB20D_ae = gv_mapSize;
    const int autoFE9FB20D_ai = 1;
    int auto88B28168_ae;
    const int auto88B28168_ai = 1;
    const int auto4F4FBB47_ae = 5;
    const int auto4F4FBB47_ai = 1;
    int auto07AB4846_ae;
    const int auto07AB4846_ai = 1;
    int autoB78E7E8F_ae;
    const int autoB78E7E8F_ai = 1;
    int auto18E4BC47_ae;
    const int auto18E4BC47_ai = 1;
    int auto16BDFFC1_ae;
    const int auto16BDFFC1_ai = 1;
    int autoECC89223_ae;
    const int autoECC89223_ai = 1;
    int auto6AF40931_ae;
    const int auto6AF40931_ai = 1;
    unitgroup autoA4A858D6_g;
    int autoA4A858D6_u;
    int autoA3A8B136_ae;
    const int autoA3A8B136_ai = 1;
    int autoE82459B4_ae;
    const int autoE82459B4_ai = 1;

    // Variable Initialization
    lv_RiverAngle = RandomInt(0, 180);
    lv_RiverAngle2 = RandomInt(0, 360);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 11.0;

    // Implementation
    gv_mapGenAngle = lv_RiverAngle;
    gv_clearCircleCount = 60;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    lv_point1River = PointWithOffsetPolar(lv_dirtMapCenterPoint, 15.0, (lv_RiverAngle + 90));
    lv_point2River = PointWithOffsetPolar(lv_dirtMapCenterPoint, 15.0, (lv_RiverAngle + -90));
    lv_i = 0;
    for ( ; ( (auto155348CC_ai >= 0 && lv_i <= auto155348CC_ae) || (auto155348CC_ai < 0 && lv_i >= auto155348CC_ae) ) ; lv_i += auto155348CC_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_point1River, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 0.9)));
    }
    lv_i = 31;
    for ( ; ( (auto223F648D_ai >= 0 && lv_i <= auto223F648D_ae) || (auto223F648D_ai < 0 && lv_i >= auto223F648D_ae) ) ; lv_i += auto223F648D_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_point2River, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 0.9)));
    }
    lv_x = 0;
    for ( ; ( (autoCBA51FC0_ai >= 0 && lv_x <= autoCBA51FC0_ae) || (autoCBA51FC0_ai < 0 && lv_x >= autoCBA51FC0_ae) ) ; lv_x += autoCBA51FC0_ai ) {
        lv_y = 0;
        for ( ; ( (autoFE9FB20D_ai >= 0 && lv_y <= autoFE9FB20D_ae) || (autoFE9FB20D_ai < 0 && lv_y >= autoFE9FB20D_ae) ) ; lv_y += autoFE9FB20D_ai ) {
            auto88B28168_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto88B28168_ai >= 0 && lv_i <= auto88B28168_ae) || (auto88B28168_ai < 0 && lv_i >= auto88B28168_ae) ) ; lv_i += auto88B28168_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto4F4FBB47_ai >= 0 && lv_i <= auto4F4FBB47_ae) || (auto4F4FBB47_ai < 0 && lv_i >= auto4F4FBB47_ae) ) ; lv_i += auto4F4FBB47_ai ) {
        Wait(0.0, c_timeGame);
        auto07AB4846_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto07AB4846_ai >= 0 && lv_x <= auto07AB4846_ae) || (auto07AB4846_ai < 0 && lv_x >= auto07AB4846_ae) ) ; lv_x += auto07AB4846_ai ) {
            autoB78E7E8F_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB78E7E8F_ai >= 0 && lv_y <= autoB78E7E8F_ae) || (autoB78E7E8F_ai < 0 && lv_y >= autoB78E7E8F_ae) ) ; lv_y += autoB78E7E8F_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto18E4BC47_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto18E4BC47_ai >= 0 && lv_x <= auto18E4BC47_ae) || (auto18E4BC47_ai < 0 && lv_x >= auto18E4BC47_ae) ) ; lv_x += auto18E4BC47_ai ) {
            auto16BDFFC1_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto16BDFFC1_ai >= 0 && lv_y <= auto16BDFFC1_ae) || (auto16BDFFC1_ai < 0 && lv_y >= auto16BDFFC1_ae) ) ; lv_y += auto16BDFFC1_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoECC89223_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoECC89223_ai >= 0 && lv_x <= autoECC89223_ae) || (autoECC89223_ai < 0 && lv_x >= autoECC89223_ae) ) ; lv_x += autoECC89223_ai ) {
        auto6AF40931_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto6AF40931_ai >= 0 && lv_y <= auto6AF40931_ae) || (auto6AF40931_ai < 0 && lv_y >= auto6AF40931_ae) ) ; lv_y += auto6AF40931_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoA4A858D6_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA4A858D6_u = UnitGroupCount(autoA4A858D6_g, c_unitCountAll);
    for (;; autoA4A858D6_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoA4A858D6_g, autoA4A858D6_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoA3A8B136_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoA3A8B136_ai >= 0 && lv_x <= autoA3A8B136_ae) || (autoA3A8B136_ai < 0 && lv_x >= autoA3A8B136_ae) ) ; lv_x += autoA3A8B136_ai ) {
        autoE82459B4_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoE82459B4_ai >= 0 && lv_y <= autoE82459B4_ae) || (autoE82459B4_ai < 0 && lv_y >= autoE82459B4_ae) ) ; lv_y += autoE82459B4_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateStreamsPlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto4CA11A9F_ae = gv_mapSize;
    const int auto4CA11A9F_ai = 4;
    const int autoF3F71A8F_ae = gv_mapSize;
    const int autoF3F71A8F_ai = 4;
    playergroup auto4DAD3F35_g;
    playergroup auto5C1F7967_g;
    int auto1A40CEEC_ae;
    const int auto1A40CEEC_ai = 1;
    playergroup auto6FF135BD_g;
    playergroup autoF38AAA67_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto4CA11A9F_ai >= 0 && lv_x <= auto4CA11A9F_ae) || (auto4CA11A9F_ai < 0 && lv_x >= auto4CA11A9F_ae) ) ; lv_x += auto4CA11A9F_ai ) {
            lv_y = 0;
            for ( ; ( (autoF3F71A8F_ai >= 0 && lv_y <= autoF3F71A8F_ae) || (autoF3F71A8F_ai < 0 && lv_y >= autoF3F71A8F_ae) ) ; lv_y += autoF3F71A8F_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto4DAD3F35_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto4DAD3F35_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto5C1F7967_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto5C1F7967_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto1A40CEEC_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto1A40CEEC_ai >= 0 && lv_i <= auto1A40CEEC_ae) || (auto1A40CEEC_ai < 0 && lv_i >= auto1A40CEEC_ae) ) ; lv_i += auto1A40CEEC_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        lv_spawnDistance = (lv_spawnDistance + 30);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 50.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 50.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 50.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 50.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = (lv_spawnDistance + 30);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 50.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 50.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 50.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 50.0, (gv_mapGenAngle + 180)));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto6FF135BD_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto6FF135BD_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoF38AAA67_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoF38AAA67_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateYinYangTerrain () {
    // Variable Declarations
    int lv_secondSideAddition;
    int lv_circleNumber;
    int lv_yinYangGeneralRandomOffsetAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;
    region lv_yinYangMapEdgeRegion;

    // Automatic Variable Declarations
    const int autoEE671770_n = 2;
    int autoEE671770_i;
    int autoD0C3E669_ae;
    const int autoD0C3E669_ai = 1;
    int auto750A4C23_ae;
    const int auto750A4C23_ai = 1;
    int auto31824934_ae;
    const int auto31824934_ai = 1;
    int auto9FD709CC_ae;
    const int auto9FD709CC_ai = 1;
    int autoFA961EA2_ae;
    const int autoFA961EA2_ai = 1;
    int auto3B591C18_ae;
    const int auto3B591C18_ai = 1;
    int auto89D205C5_ae;
    const int auto89D205C5_ai = 1;
    int auto2B53FA52_ae;
    const int auto2B53FA52_ai = 1;
    int auto012D50E6_ae;
    const int auto012D50E6_ai = 1;
    int auto8E887ED7_ae;
    const int auto8E887ED7_ai = 1;
    int auto673B5D6E_ae;
    const int auto673B5D6E_ai = 1;
    int autoCE9E2460_ae;
    const int autoCE9E2460_ai = 1;
    int autoA82FDBF1_ae;
    const int autoA82FDBF1_ai = 1;
    int auto18E4A6B1_ae;
    const int auto18E4A6B1_ai = 1;
    int auto30EC7B5E_ae;
    const int auto30EC7B5E_ai = 1;
    const int auto02AE774A_ae = gv_mapSize;
    const int auto02AE774A_ai = 1;
    const int auto87B8C6AE_ae = gv_mapSize;
    const int auto87B8C6AE_ai = 1;
    int auto9D130412_ae;
    const int auto9D130412_ai = 1;
    const int auto1BEF8C18_ae = 5;
    const int auto1BEF8C18_ai = 1;
    int auto477BE12E_ae;
    const int auto477BE12E_ai = 1;
    int auto5125D732_ae;
    const int auto5125D732_ai = 1;
    int auto37159F77_ae;
    const int auto37159F77_ai = 1;
    int auto4C96B4CC_ae;
    const int auto4C96B4CC_ai = 1;
    int auto7067896D_ae;
    const int auto7067896D_ai = 1;
    int auto5EE37311_ae;
    const int auto5EE37311_ai = 1;
    unitgroup auto53E546C7_g;
    int auto53E546C7_u;
    int auto6B83B06C_ae;
    const int auto6B83B06C_ai = 1;
    int autoD307742C_ae;
    const int autoD307742C_ai = 1;

    // Variable Initialization
    lv_yinYangGeneralRandomOffsetAngle = RandomInt(0, 360);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 6.0;
    lv_yinYangMapEdgeRegion = RegionEntireMap();

    // Implementation
    gv_mapGenAngle = lv_yinYangGeneralRandomOffsetAngle;
    gv_clearCircleCount = 30;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 6.0);
    for (autoEE671770_i = 1; autoEE671770_i <= autoEE671770_n; autoEE671770_i += 1) {
        lv_circleNumber = (lv_circleNumber + 1);
        autoD0C3E669_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (autoD0C3E669_ai >= 0 && lv_i <= autoD0C3E669_ae) || (autoD0C3E669_ai < 0 && lv_i >= autoD0C3E669_ae) ) ; lv_i += autoD0C3E669_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(3.0, 3.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 55));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto750A4C23_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto750A4C23_ai >= 0 && lv_i <= auto750A4C23_ae) || (auto750A4C23_ai < 0 && lv_i >= auto750A4C23_ae) ) ; lv_i += auto750A4C23_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(6.0, 6.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 50));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto31824934_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto31824934_ai >= 0 && lv_i <= auto31824934_ae) || (auto31824934_ai < 0 && lv_i >= auto31824934_ae) ) ; lv_i += auto31824934_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(9.0, 9.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 55));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto9FD709CC_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto9FD709CC_ai >= 0 && lv_i <= auto9FD709CC_ae) || (auto9FD709CC_ai < 0 && lv_i >= auto9FD709CC_ae) ) ; lv_i += auto9FD709CC_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(12.0, 12.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 62));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        autoFA961EA2_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (autoFA961EA2_ai >= 0 && lv_i <= autoFA961EA2_ae) || (autoFA961EA2_ai < 0 && lv_i >= autoFA961EA2_ae) ) ; lv_i += autoFA961EA2_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(15.0, 15.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 70));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto3B591C18_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto3B591C18_ai >= 0 && lv_i <= auto3B591C18_ae) || (auto3B591C18_ai < 0 && lv_i >= auto3B591C18_ae) ) ; lv_i += auto3B591C18_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, 18.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 80));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto89D205C5_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto89D205C5_ai >= 0 && lv_i <= auto89D205C5_ae) || (auto89D205C5_ai < 0 && lv_i >= auto89D205C5_ae) ) ; lv_i += auto89D205C5_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(21.0, 21.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 85));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto2B53FA52_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto2B53FA52_ai >= 0 && lv_i <= auto2B53FA52_ae) || (auto2B53FA52_ai < 0 && lv_i >= auto2B53FA52_ae) ) ; lv_i += auto2B53FA52_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(24.0, 24.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 93));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto012D50E6_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto012D50E6_ai >= 0 && lv_i <= auto012D50E6_ae) || (auto012D50E6_ai < 0 && lv_i >= auto012D50E6_ae) ) ; lv_i += auto012D50E6_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(26.0, 26.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 96));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto8E887ED7_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto8E887ED7_ai >= 0 && lv_i <= auto8E887ED7_ae) || (auto8E887ED7_ai < 0 && lv_i >= auto8E887ED7_ae) ) ; lv_i += auto8E887ED7_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(27.0, 27.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 100));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto673B5D6E_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto673B5D6E_ai >= 0 && lv_i <= auto673B5D6E_ae) || (auto673B5D6E_ai < 0 && lv_i >= auto673B5D6E_ae) ) ; lv_i += auto673B5D6E_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(30.0, 30.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 105));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        autoCE9E2460_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (autoCE9E2460_ai >= 0 && lv_i <= autoCE9E2460_ae) || (autoCE9E2460_ai < 0 && lv_i >= autoCE9E2460_ae) ) ; lv_i += autoCE9E2460_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(30.0, 30.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 110));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        autoA82FDBF1_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (autoA82FDBF1_ai >= 0 && lv_i <= autoA82FDBF1_ae) || (autoA82FDBF1_ai < 0 && lv_i >= autoA82FDBF1_ae) ) ; lv_i += autoA82FDBF1_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(33.0, 33.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 115));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto18E4A6B1_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto18E4A6B1_ai >= 0 && lv_i <= auto18E4A6B1_ae) || (auto18E4A6B1_ai < 0 && lv_i >= auto18E4A6B1_ae) ) ; lv_i += auto18E4A6B1_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(33.0, 33.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 120));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.0)));
        }
        lv_circleNumber = (lv_circleNumber + 1);
        auto30EC7B5E_ae = lv_circleNumber;
        lv_i = lv_circleNumber;
        for ( ; ( (auto30EC7B5E_ai >= 0 && lv_i <= auto30EC7B5E_ae) || (auto30EC7B5E_ai < 0 && lv_i >= auto30EC7B5E_ae) ) ; lv_i += auto30EC7B5E_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(18.0, 18.0), ((lv_yinYangGeneralRandomOffsetAngle - lv_secondSideAddition) - 150));
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.5), (lv_circleSizeMax * 0.5)));
        }
        lv_secondSideAddition = 180;
    }
    lv_x = 0;
    for ( ; ( (auto02AE774A_ai >= 0 && lv_x <= auto02AE774A_ae) || (auto02AE774A_ai < 0 && lv_x >= auto02AE774A_ae) ) ; lv_x += auto02AE774A_ai ) {
        lv_y = 0;
        for ( ; ( (auto87B8C6AE_ai >= 0 && lv_y <= auto87B8C6AE_ae) || (auto87B8C6AE_ai < 0 && lv_y >= auto87B8C6AE_ae) ) ; lv_y += auto87B8C6AE_ai ) {
            auto9D130412_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto9D130412_ai >= 0 && lv_i <= auto9D130412_ae) || (auto9D130412_ai < 0 && lv_i >= auto9D130412_ae) ) ; lv_i += auto9D130412_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto1BEF8C18_ai >= 0 && lv_i <= auto1BEF8C18_ae) || (auto1BEF8C18_ai < 0 && lv_i >= auto1BEF8C18_ae) ) ; lv_i += auto1BEF8C18_ai ) {
        Wait(0.0, c_timeGame);
        auto477BE12E_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto477BE12E_ai >= 0 && lv_x <= auto477BE12E_ae) || (auto477BE12E_ai < 0 && lv_x >= auto477BE12E_ae) ) ; lv_x += auto477BE12E_ai ) {
            auto5125D732_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto5125D732_ai >= 0 && lv_y <= auto5125D732_ae) || (auto5125D732_ai < 0 && lv_y >= auto5125D732_ae) ) ; lv_y += auto5125D732_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto37159F77_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto37159F77_ai >= 0 && lv_x <= auto37159F77_ae) || (auto37159F77_ai < 0 && lv_x >= auto37159F77_ae) ) ; lv_x += auto37159F77_ai ) {
            auto4C96B4CC_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto4C96B4CC_ai >= 0 && lv_y <= auto4C96B4CC_ae) || (auto4C96B4CC_ai < 0 && lv_y >= auto4C96B4CC_ae) ) ; lv_y += auto4C96B4CC_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto7067896D_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto7067896D_ai >= 0 && lv_x <= auto7067896D_ae) || (auto7067896D_ai < 0 && lv_x >= auto7067896D_ae) ) ; lv_x += auto7067896D_ai ) {
        auto5EE37311_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto5EE37311_ai >= 0 && lv_y <= auto5EE37311_ae) || (auto5EE37311_ai < 0 && lv_y >= auto5EE37311_ae) ) ; lv_y += auto5EE37311_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto53E546C7_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto53E546C7_u = UnitGroupCount(auto53E546C7_g, c_unitCountAll);
    for (;; auto53E546C7_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto53E546C7_g, auto53E546C7_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto6B83B06C_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto6B83B06C_ai >= 0 && lv_x <= auto6B83B06C_ae) || (auto6B83B06C_ai < 0 && lv_x >= auto6B83B06C_ae) ) ; lv_x += auto6B83B06C_ai ) {
        autoD307742C_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoD307742C_ai >= 0 && lv_y <= autoD307742C_ae) || (autoD307742C_ai < 0 && lv_y >= autoD307742C_ae) ) ; lv_y += autoD307742C_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    RegionAddCircle(lv_yinYangMapEdgeRegion, false, RegionGetCenter(lv_yinYangMapEdgeRegion), 60.0);
    gf_RemoveDirtinRegion(lv_yinYangMapEdgeRegion);
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateYinYangPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoBBD59C6D_ae = gv_mapSize;
    const int autoBBD59C6D_ai = 4;
    const int auto297FBC9A_ae = gv_mapSize;
    const int auto297FBC9A_ai = 4;
    playergroup autoED5A42F2_g;
    playergroup autoA36954BE_g;
    int auto703C3C7C_ae;
    const int auto703C3C7C_ai = 1;
    playergroup autoFAA5F8D2_g;
    playergroup auto5828C2F1_g;

    // Variable Initialization
    lv_spawnDistance = 65;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoBBD59C6D_ai >= 0 && lv_x <= autoBBD59C6D_ae) || (autoBBD59C6D_ai < 0 && lv_x >= autoBBD59C6D_ae) ) ; lv_x += autoBBD59C6D_ai ) {
            lv_y = 0;
            for ( ; ( (auto297FBC9A_ai >= 0 && lv_y <= auto297FBC9A_ae) || (auto297FBC9A_ai < 0 && lv_y >= auto297FBC9A_ae) ) ; lv_y += auto297FBC9A_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoED5A42F2_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoED5A42F2_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoA36954BE_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoA36954BE_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto703C3C7C_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto703C3C7C_ai >= 0 && lv_i <= auto703C3C7C_ae) || (auto703C3C7C_ai < 0 && lv_i >= auto703C3C7C_ae) ) ; lv_i += auto703C3C7C_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoFAA5F8D2_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoFAA5F8D2_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto5828C2F1_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto5828C2F1_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateHouseTerrain () {
    // Variable Declarations
    point lv_pointofCement;
    region lv_clearMapOfHouse;
    int lv_directionOfHouseGrass;
    int lv_directionOfHouseCement;
    int lv_setDirectionOfHouseGrass;
    int lv_setDirectionOfHouseCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_cementX;
    int lv_y;
    int lv_cementY;
    int lv_neighborCount;
    int lv_i;
    point lv_northWestPointTexture2;
    point lv_northPointTexture3;
    point lv_northEastPointTexture4;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoA13715B7_n = 1;
    int autoA13715B7_i;
    const int auto03DA57E1_ae = gv_mapSize;
    const int auto03DA57E1_ai = 1;
    const int auto5719B76B_ae = gv_mapSize;
    const int auto5719B76B_ai = 1;
    int auto5A4CF23C_ae;
    const int auto5A4CF23C_ai = 1;
    const int autoE40721F1_ae = 5;
    const int autoE40721F1_ai = 1;
    int autoF5E80932_ae;
    const int autoF5E80932_ai = 1;
    int autoA23D3A98_ae;
    const int autoA23D3A98_ai = 1;
    int auto7F8817A3_ae;
    const int auto7F8817A3_ai = 1;
    int auto4D2853AB_ae;
    const int auto4D2853AB_ai = 1;
    int auto67F8B8BA_ae;
    const int auto67F8B8BA_ai = 1;
    int auto38606D62_ae;
    const int auto38606D62_ai = 1;
    unitgroup auto8544044E_g;
    int auto8544044E_u;
    int autoF3258CC5_ae;
    const int autoF3258CC5_ai = 1;
    int auto913DABE0_ae;
    const int auto913DABE0_ai = 1;
    playergroup auto1EDB81D4_g;
    int auto1EDB81D4_var;
    const int auto66A1AF3C_n = 1;
    int auto66A1AF3C_i;
    const int auto61AF0B71_n = 52;
    int auto61AF0B71_i;
    const int autoFA719847_n = 1;
    int autoFA719847_i;
    const int auto426E24E5_n = 25;
    int auto426E24E5_i;
    const int auto223D4041_n = 4;
    int auto223D4041_i;
    const int autoE4FC3699_n = 4;
    int autoE4FC3699_i;
    const int auto333818C7_n = 1;
    int auto333818C7_i;
    const int autoCB67D5A9_n = 25;
    int autoCB67D5A9_i;
    const int auto35A9740B_n = 4;
    int auto35A9740B_i;
    const int auto2C5815D8_n = 4;
    int auto2C5815D8_i;
    const int autoC217A401_n = 1;
    int autoC217A401_i;
    const int autoBADD84CB_n = 25;
    int autoBADD84CB_i;
    const int autoAA2D5B86_n = 4;
    int autoAA2D5B86_i;
    const int auto2B9292E3_n = 4;
    int auto2B9292E3_i;
    const int auto165D1F66_n = 1;
    int auto165D1F66_i;
    const int autoFACF352F_n = 25;
    int autoFACF352F_i;
    const int auto6EC8C350_n = 4;
    int auto6EC8C350_i;
    const int auto6166AEF1_n = 4;
    int auto6166AEF1_i;
    playergroup autoAE95D669_g;
    int autoAE95D669_var;

    // Variable Initialization
    lv_clearMapOfHouse = RegionEmpty();
    lv_setDirectionOfHouseGrass = RandomInt(1, 4);
    lv_setDirectionOfHouseCement = RandomInt(1, 4);
    lv_northWestPointTexture2 = Point(25.333, 126.666);
    lv_northPointTexture3 = Point(76.0, 126.666);
    lv_northEastPointTexture4 = Point(126.666, 126.666);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    for (autoA13715B7_i = 1; autoA13715B7_i <= autoA13715B7_n; autoA13715B7_i += 1) {
        if ((lv_setDirectionOfHouseGrass == 1)) {
            lv_directionOfHouseGrass = 0;
        }
        else if ((lv_setDirectionOfHouseGrass == 2)) {
            lv_directionOfHouseGrass = 90;
        }
        else if ((lv_setDirectionOfHouseGrass == 3)) {
            lv_directionOfHouseGrass = 180;
        }
        else if ((lv_setDirectionOfHouseGrass == 4)) {
            lv_directionOfHouseGrass = 270;
        }
        lv_directionOfHouseGrass = 0;
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        gv_clearCircles[0] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 20.0, (lv_directionOfHouseGrass + 90));
        PointSetHeight(gv_clearCircles[0], 0.0);
        lv_x = 0;
        for ( ; ( (auto03DA57E1_ai >= 0 && lv_x <= auto03DA57E1_ae) || (auto03DA57E1_ai < 0 && lv_x >= auto03DA57E1_ae) ) ; lv_x += auto03DA57E1_ai ) {
            lv_y = 0;
            for ( ; ( (auto5719B76B_ai >= 0 && lv_y <= auto5719B76B_ae) || (auto5719B76B_ai < 0 && lv_y >= auto5719B76B_ae) ) ; lv_y += auto5719B76B_ai ) {
                auto5A4CF23C_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (auto5A4CF23C_ai >= 0 && lv_i <= auto5A4CF23C_ae) || (auto5A4CF23C_ai < 0 && lv_i >= auto5A4CF23C_ae) ) ; lv_i += auto5A4CF23C_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (autoE40721F1_ai >= 0 && lv_i <= autoE40721F1_ae) || (autoE40721F1_ai < 0 && lv_i >= autoE40721F1_ae) ) ; lv_i += autoE40721F1_ai ) {
            Wait(0.0, c_timeGame);
            autoF5E80932_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoF5E80932_ai >= 0 && lv_x <= autoF5E80932_ae) || (autoF5E80932_ai < 0 && lv_x >= autoF5E80932_ae) ) ; lv_x += autoF5E80932_ai ) {
                autoA23D3A98_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoA23D3A98_ai >= 0 && lv_y <= autoA23D3A98_ae) || (autoA23D3A98_ai < 0 && lv_y >= autoA23D3A98_ae) ) ; lv_y += autoA23D3A98_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            auto7F8817A3_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto7F8817A3_ai >= 0 && lv_x <= auto7F8817A3_ae) || (auto7F8817A3_ai < 0 && lv_x >= auto7F8817A3_ae) ) ; lv_x += auto7F8817A3_ai ) {
                auto4D2853AB_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto4D2853AB_ai >= 0 && lv_y <= auto4D2853AB_ae) || (auto4D2853AB_ai < 0 && lv_y >= auto4D2853AB_ae) ) ; lv_y += auto4D2853AB_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        auto67F8B8BA_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto67F8B8BA_ai >= 0 && lv_x <= auto67F8B8BA_ae) || (auto67F8B8BA_ai < 0 && lv_x >= auto67F8B8BA_ae) ) ; lv_x += auto67F8B8BA_ai ) {
            auto38606D62_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto38606D62_ai >= 0 && lv_y <= auto38606D62_ae) || (auto38606D62_ai < 0 && lv_y >= auto38606D62_ae) ) ; lv_y += auto38606D62_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        auto8544044E_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8544044E_u = UnitGroupCount(auto8544044E_g, c_unitCountAll);
        for (;; auto8544044E_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto8544044E_g, auto8544044E_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        autoF3258CC5_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoF3258CC5_ai >= 0 && lv_x <= autoF3258CC5_ae) || (autoF3258CC5_ai < 0 && lv_x >= autoF3258CC5_ae) ) ; lv_x += autoF3258CC5_ai ) {
            auto913DABE0_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto913DABE0_ai >= 0 && lv_y <= auto913DABE0_ae) || (auto913DABE0_ai < 0 && lv_y >= auto913DABE0_ae) ) ; lv_y += auto913DABE0_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    RegionAddRect(lv_clearMapOfHouse, true, 0.0, 80.0, 153.0, 153.0);
    RegionAddRect(lv_clearMapOfHouse, true, 0.0, 0.0, 4.0, 153.0);
    RegionAddRect(lv_clearMapOfHouse, true, 37.0, 0.0, 41.0, 153.0);
    RegionAddRect(lv_clearMapOfHouse, true, 73.0, 0.0, 77.0, 153.0);
    RegionAddRect(lv_clearMapOfHouse, true, 109.0, 0.0, 113.0, 153.0);
    RegionAddRect(lv_clearMapOfHouse, true, 145.0, 0.0, 149.0, 153.0);
    RegionAddRect(lv_clearMapOfHouse, true, 0.0, 40.0, 153.0, 60.0);
    auto1EDB81D4_g = PlayerGroupActive();
    auto1EDB81D4_var = -1;
    while (true) {
        auto1EDB81D4_var = PlayerGroupNextPlayer(auto1EDB81D4_g, auto1EDB81D4_var);
        if (auto1EDB81D4_var < 0) { break; }
        VisRevealArea(auto1EDB81D4_var, lv_clearMapOfHouse, 7.0, false);
    }
    gf_RemoveDirtinRegion(lv_clearMapOfHouse);
    for (auto66A1AF3C_i = 1; auto66A1AF3C_i <= auto66A1AF3C_n; auto66A1AF3C_i += 1) {
        lv_cementX = 4;
        lv_cementY = 4;
        for (auto61AF0B71_i = 1; auto61AF0B71_i <= auto61AF0B71_n; auto61AF0B71_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement2", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementY = (lv_cementY + 2);
        }
        Wait(0.2, c_timeGame);
        Wait(0.2, c_timeGame);
        lv_cementX = (lv_cementX - 4);
        Wait(0.2, c_timeGame);
    }
    for (autoFA719847_i = 1; autoFA719847_i <= autoFA719847_n; autoFA719847_i += 1) {
        lv_cementX = 39;
        lv_cementY = 5;
        for (auto426E24E5_i = 1; auto426E24E5_i <= auto426E24E5_n; auto426E24E5_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            else if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementY = (lv_cementY + 4);
        }
        Wait(0.2, c_timeGame);
        for (auto223D4041_i = 1; auto223D4041_i <= auto223D4041_n; auto223D4041_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
        lv_cementX = (lv_cementX - 4);
        for (autoE4FC3699_i = 1; autoE4FC3699_i <= autoE4FC3699_n; autoE4FC3699_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
    }
    for (auto333818C7_i = 1; auto333818C7_i <= auto333818C7_n; auto333818C7_i += 1) {
        lv_cementX = 75;
        lv_cementY = 5;
        for (autoCB67D5A9_i = 1; autoCB67D5A9_i <= autoCB67D5A9_n; autoCB67D5A9_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementY = (lv_cementY + 4);
        }
        Wait(0.2, c_timeGame);
        for (auto35A9740B_i = 1; auto35A9740B_i <= auto35A9740B_n; auto35A9740B_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
        lv_cementX = (lv_cementX - 4);
        for (auto2C5815D8_i = 1; auto2C5815D8_i <= auto2C5815D8_n; auto2C5815D8_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
    }
    for (autoC217A401_i = 1; autoC217A401_i <= autoC217A401_n; autoC217A401_i += 1) {
        lv_cementX = 111;
        lv_cementY = 5;
        for (autoBADD84CB_i = 1; autoBADD84CB_i <= autoBADD84CB_n; autoBADD84CB_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementY = (lv_cementY + 4);
        }
        Wait(0.2, c_timeGame);
        for (autoAA2D5B86_i = 1; autoAA2D5B86_i <= autoAA2D5B86_n; autoAA2D5B86_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
        lv_cementX = (lv_cementX - 4);
        for (auto2B9292E3_i = 1; auto2B9292E3_i <= auto2B9292E3_n; auto2B9292E3_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
    }
    for (auto165D1F66_i = 1; auto165D1F66_i <= auto165D1F66_n; auto165D1F66_i += 1) {
        lv_cementX = 147;
        lv_cementY = 5;
        for (autoFACF352F_i = 1; autoFACF352F_i <= autoFACF352F_n; autoFACF352F_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementY = (lv_cementY + 4);
        }
        Wait(0.2, c_timeGame);
        for (auto6EC8C350_i = 1; auto6EC8C350_i <= auto6EC8C350_n; auto6EC8C350_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
        lv_cementX = (lv_cementX - 4);
        for (auto6166AEF1_i = 1; auto6166AEF1_i <= auto6166AEF1_n; auto6166AEF1_i += 1) {
            lv_setDirectionOfHouseCement = RandomInt(1, 4);
            if ((lv_setDirectionOfHouseGrass == 1)) {
                lv_directionOfHouseCement = 0;
            }
            else if ((lv_setDirectionOfHouseGrass == 2)) {
                lv_directionOfHouseCement = 90;
            }
            else if ((lv_setDirectionOfHouseGrass == 3)) {
                lv_directionOfHouseCement = 180;
            }
            else if ((lv_setDirectionOfHouseGrass == 4)) {
                lv_directionOfHouseCement = 270;
            }
            UnitCreate(1, "Cement", 0, 0, Point(lv_cementX, lv_cementY), lv_directionOfHouseCement);
            lv_cementX = (lv_cementX - 4);
        }
        Wait(0.2, c_timeGame);
    }
    autoAE95D669_g = PlayerGroupActive();
    autoAE95D669_var = -1;
    while (true) {
        autoAE95D669_var = PlayerGroupNextPlayer(autoAE95D669_g, autoAE95D669_var);
        if (autoAE95D669_var < 0) { break; }
        VisRevealArea(autoAE95D669_var, lv_clearMapOfHouse, 0.1, false);
    }
    libNtve_gf_CreateActorAtPoint("GroundTexture6", lv_northEastPointTexture4);
    libNtve_gf_CreateActorAtPoint("GroundTexture6", lv_northPointTexture3);
    libNtve_gf_CreateActorAtPoint("GroundTexture6", lv_northWestPointTexture2);
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateHousePlayers () {
    // Variable Declarations
    region lv_oAandFFAspawnregion;
    int lv_spawnVariation;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoCB4FEBD7_ae = gv_mapSize;
    const int autoCB4FEBD7_ai = 4;
    const int auto513A5DCB_ae = gv_mapSize;
    const int auto513A5DCB_ai = 4;
    playergroup autoF60DA728_g;
    playergroup auto5D9A9C8E_g;
    int autoBB9B24DC_ae;
    const int autoBB9B24DC_ai = 1;
    playergroup autoC766010F_g;
    playergroup auto07E99349_g;

    // Variable Initialization
    lv_oAandFFAspawnregion = RegionEmpty();
    lv_spawnVariation = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoCB4FEBD7_ai >= 0 && lv_x <= autoCB4FEBD7_ae) || (autoCB4FEBD7_ai < 0 && lv_x >= autoCB4FEBD7_ae) ) ; lv_x += autoCB4FEBD7_ai ) {
            lv_y = 0;
            for ( ; ( (auto513A5DCB_ai >= 0 && lv_y <= auto513A5DCB_ae) || (auto513A5DCB_ai < 0 && lv_y >= auto513A5DCB_ae) ) ; lv_y += auto513A5DCB_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoF60DA728_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoF60DA728_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto5D9A9C8E_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto5D9A9C8E_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoBB9B24DC_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoBB9B24DC_ai >= 0 && lv_i <= autoBB9B24DC_ae) || (autoBB9B24DC_ai < 0 && lv_i >= autoBB9B24DC_ae) ) ; lv_i += autoBB9B24DC_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = 0.0;
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_spawnVariation == 1)) {
            lv_spawnVariation = RandomInt(0, 1);
            if ((lv_spawnVariation == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
            }
        }
        else {
            lv_spawnVariation = RandomInt(0, 1);
            if ((lv_spawnVariation == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
            }
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_spawnVariation == 1)) {
            lv_spawnVariation = RandomInt(0, 1);
            if ((lv_spawnVariation == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
            }
        }
        else {
            lv_spawnVariation = RandomInt(0, 1);
            if ((lv_spawnVariation == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
            }
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_spawnVariation == 1)) {
            lv_spawnVariation = RandomInt(0, 1);
            if ((lv_spawnVariation == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
            }
        }
        else {
            lv_spawnVariation = RandomInt(0, 1);
            if ((lv_spawnVariation == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 0)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 56.0, (gv_mapGenAngle + 180)));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance - 50), (gv_mapGenAngle + 90)), 20.0, (gv_mapGenAngle + 180)));
            }
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 40), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 40), (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 40), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_spawnDistance = (lv_spawnDistance + 20);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        lv_spawnVariation = 1;
        if ((lv_spawnVariation == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 40), (gv_mapGenAngle + 90)), 35.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 35.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 20), (gv_mapGenAngle + 90)), 35.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 40), (gv_mapGenAngle + 90)), 35.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 30), (gv_mapGenAngle + 90)), 35.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 20), (gv_mapGenAngle + 90)), 35.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        RegionAddRect(lv_oAandFFAspawnregion, true, 10.0, 135.0, 140.0, 145.0);
        lv_spawnDistance = (lv_spawnDistance + 30);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), RegionRandomPoint(lv_oAandFFAspawnregion));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        RegionAddRect(lv_oAandFFAspawnregion, true, 10.0, 135.0, 140.0, 145.0);
        lv_spawnDistance = (lv_spawnDistance + 30);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), RegionRandomPoint(lv_oAandFFAspawnregion));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoC766010F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoC766010F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto07E99349_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto07E99349_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateCloverLeafTerrain () {
    // Variable Declarations
    int lv_currentCircleNumber;
    int lv_circleDirection;
    int lv_directionOfLeafStem;
    int lv_setDirectionOLeafStem;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoC72BB4DF_n = 4;
    int autoC72BB4DF_i;
    int auto88B3340B_ae;
    const int auto88B3340B_ai = 1;
    int auto77D805A6_ae;
    const int auto77D805A6_ai = 1;
    int autoCF3ADCF0_ae;
    const int autoCF3ADCF0_ai = 1;
    int auto2F3069C5_ae;
    const int auto2F3069C5_ai = 1;
    int auto587206AB_ae;
    const int auto587206AB_ai = 1;
    const int auto02FB8398_n = 60;
    int auto02FB8398_i;
    int auto45D46DD9_ae;
    const int auto45D46DD9_ai = 1;
    const int auto6AFFB391_ae = gv_mapSize;
    const int auto6AFFB391_ai = 1;
    const int auto573FE185_ae = gv_mapSize;
    const int auto573FE185_ai = 1;
    int auto7A609798_ae;
    const int auto7A609798_ai = 1;
    const int autoCAF525C7_ae = 5;
    const int autoCAF525C7_ai = 1;
    int auto1A2CA607_ae;
    const int auto1A2CA607_ai = 1;
    int autoFD9D0AE8_ae;
    const int autoFD9D0AE8_ai = 1;
    int auto23997088_ae;
    const int auto23997088_ai = 1;
    int auto15D781CA_ae;
    const int auto15D781CA_ai = 1;
    int autoB0FA7BDB_ae;
    const int autoB0FA7BDB_ai = 1;
    int autoEB2A54DB_ae;
    const int autoEB2A54DB_ai = 1;
    unitgroup auto38EC455A_g;
    int auto38EC455A_u;
    int auto04DF30EE_ae;
    const int auto04DF30EE_ai = 1;
    int autoEEDAF4BA_ae;
    const int autoEEDAF4BA_ai = 1;

    // Variable Initialization
    lv_setDirectionOLeafStem = RandomInt(1, 4);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    if ((lv_setDirectionOLeafStem == 1)) {
        lv_directionOfLeafStem = 0;
    }
    else if ((lv_setDirectionOLeafStem == 2)) {
        lv_directionOfLeafStem = 90;
    }
    else if ((lv_setDirectionOLeafStem == 3)) {
        lv_directionOfLeafStem = 180;
    }
    else if ((lv_setDirectionOLeafStem == 4)) {
        lv_directionOfLeafStem = 270;
    }
    gv_usingInvertedMapLayout = false;
    gv_clearCircleCount = 80;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 8.0);
    for (autoC72BB4DF_i = 1; autoC72BB4DF_i <= autoC72BB4DF_n; autoC72BB4DF_i += 1) {
        lv_currentCircleNumber = (lv_currentCircleNumber + 1);
        auto88B3340B_ae = lv_currentCircleNumber;
        lv_i = lv_currentCircleNumber;
        for ( ; ( (auto88B3340B_ai >= 0 && lv_i <= auto88B3340B_ae) || (auto88B3340B_ai < 0 && lv_i >= auto88B3340B_ae) ) ; lv_i += auto88B3340B_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 26.0, (lv_circleDirection + 14));
            PointSetHeight(gv_clearCircles[lv_i], 8.4);
        }
        lv_currentCircleNumber = (lv_currentCircleNumber + 1);
        auto77D805A6_ae = lv_currentCircleNumber;
        lv_i = lv_currentCircleNumber;
        for ( ; ( (auto77D805A6_ai >= 0 && lv_i <= auto77D805A6_ae) || (auto77D805A6_ai < 0 && lv_i >= auto77D805A6_ae) ) ; lv_i += auto77D805A6_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 26.0, (lv_circleDirection - 14));
            PointSetHeight(gv_clearCircles[lv_i], 8.4);
        }
        lv_currentCircleNumber = (lv_currentCircleNumber + 1);
        autoCF3ADCF0_ae = lv_currentCircleNumber;
        lv_i = lv_currentCircleNumber;
        for ( ; ( (autoCF3ADCF0_ai >= 0 && lv_i <= autoCF3ADCF0_ae) || (autoCF3ADCF0_ai < 0 && lv_i >= autoCF3ADCF0_ae) ) ; lv_i += autoCF3ADCF0_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 13.0, (lv_circleDirection + 14));
            PointSetHeight(gv_clearCircles[lv_i], 4.2);
        }
        lv_currentCircleNumber = (lv_currentCircleNumber + 1);
        auto2F3069C5_ae = lv_currentCircleNumber;
        lv_i = lv_currentCircleNumber;
        for ( ; ( (auto2F3069C5_ai >= 0 && lv_i <= auto2F3069C5_ae) || (auto2F3069C5_ai < 0 && lv_i >= auto2F3069C5_ae) ) ; lv_i += auto2F3069C5_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 13.0, (lv_circleDirection - 14));
            PointSetHeight(gv_clearCircles[lv_i], 4.2);
        }
        lv_currentCircleNumber = (lv_currentCircleNumber + 1);
        auto587206AB_ae = lv_currentCircleNumber;
        lv_i = lv_currentCircleNumber;
        for ( ; ( (auto587206AB_ai >= 0 && lv_i <= auto587206AB_ae) || (auto587206AB_ai < 0 && lv_i >= auto587206AB_ae) ) ; lv_i += auto587206AB_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 20.0, lv_circleDirection);
            PointSetHeight(gv_clearCircles[lv_i], 10.0);
        }
        lv_circleDirection = (lv_circleDirection + 90);
    }
    for (auto02FB8398_i = 1; auto02FB8398_i <= auto02FB8398_n; auto02FB8398_i += 1) {
        lv_currentCircleNumber = (lv_currentCircleNumber + 1);
        auto45D46DD9_ae = lv_currentCircleNumber;
        lv_i = lv_currentCircleNumber;
        for ( ; ( (auto45D46DD9_ai >= 0 && lv_i <= auto45D46DD9_ae) || (auto45D46DD9_ai < 0 && lv_i >= auto45D46DD9_ae) ) ; lv_i += auto45D46DD9_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(5.0, 45.0), (lv_directionOfLeafStem + 45));
            PointSetHeight(gv_clearCircles[lv_i], 2.0);
        }
    }
    lv_x = 0;
    for ( ; ( (auto6AFFB391_ai >= 0 && lv_x <= auto6AFFB391_ae) || (auto6AFFB391_ai < 0 && lv_x >= auto6AFFB391_ae) ) ; lv_x += auto6AFFB391_ai ) {
        lv_y = 0;
        for ( ; ( (auto573FE185_ai >= 0 && lv_y <= auto573FE185_ae) || (auto573FE185_ai < 0 && lv_y >= auto573FE185_ae) ) ; lv_y += auto573FE185_ai ) {
            auto7A609798_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto7A609798_ai >= 0 && lv_i <= auto7A609798_ae) || (auto7A609798_ai < 0 && lv_i >= auto7A609798_ae) ) ; lv_i += auto7A609798_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoCAF525C7_ai >= 0 && lv_i <= autoCAF525C7_ae) || (autoCAF525C7_ai < 0 && lv_i >= autoCAF525C7_ae) ) ; lv_i += autoCAF525C7_ai ) {
        Wait(0.0, c_timeGame);
        auto1A2CA607_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto1A2CA607_ai >= 0 && lv_x <= auto1A2CA607_ae) || (auto1A2CA607_ai < 0 && lv_x >= auto1A2CA607_ae) ) ; lv_x += auto1A2CA607_ai ) {
            autoFD9D0AE8_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoFD9D0AE8_ai >= 0 && lv_y <= autoFD9D0AE8_ae) || (autoFD9D0AE8_ai < 0 && lv_y >= autoFD9D0AE8_ae) ) ; lv_y += autoFD9D0AE8_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto23997088_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto23997088_ai >= 0 && lv_x <= auto23997088_ae) || (auto23997088_ai < 0 && lv_x >= auto23997088_ae) ) ; lv_x += auto23997088_ai ) {
            auto15D781CA_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto15D781CA_ai >= 0 && lv_y <= auto15D781CA_ae) || (auto15D781CA_ai < 0 && lv_y >= auto15D781CA_ae) ) ; lv_y += auto15D781CA_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoB0FA7BDB_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoB0FA7BDB_ai >= 0 && lv_x <= autoB0FA7BDB_ae) || (autoB0FA7BDB_ai < 0 && lv_x >= autoB0FA7BDB_ae) ) ; lv_x += autoB0FA7BDB_ai ) {
        autoEB2A54DB_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoEB2A54DB_ai >= 0 && lv_y <= autoEB2A54DB_ae) || (autoEB2A54DB_ai < 0 && lv_y >= autoEB2A54DB_ae) ) ; lv_y += autoEB2A54DB_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto38EC455A_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto38EC455A_u = UnitGroupCount(auto38EC455A_g, c_unitCountAll);
    for (;; auto38EC455A_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto38EC455A_g, auto38EC455A_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto04DF30EE_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto04DF30EE_ai >= 0 && lv_x <= auto04DF30EE_ae) || (auto04DF30EE_ai < 0 && lv_x >= auto04DF30EE_ae) ) ; lv_x += auto04DF30EE_ai ) {
        autoEEDAF4BA_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoEEDAF4BA_ai >= 0 && lv_y <= autoEEDAF4BA_ae) || (autoEEDAF4BA_ai < 0 && lv_y >= autoEEDAF4BA_ae) ) ; lv_y += autoEEDAF4BA_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateCloverLeafPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto3C605C86_ae = gv_mapSize;
    const int auto3C605C86_ai = 4;
    const int auto02575133_ae = gv_mapSize;
    const int auto02575133_ai = 4;
    playergroup auto439D4DA4_g;
    playergroup auto27AFBBFD_g;
    int auto12B2D880_ae;
    const int auto12B2D880_ai = 1;
    playergroup auto96D9C89B_g;
    playergroup autoEDB1656D_g;

    // Variable Initialization
    lv_spawnDistance = 10;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto3C605C86_ai >= 0 && lv_x <= auto3C605C86_ae) || (auto3C605C86_ai < 0 && lv_x >= auto3C605C86_ae) ) ; lv_x += auto3C605C86_ai ) {
            lv_y = 0;
            for ( ; ( (auto02575133_ai >= 0 && lv_y <= auto02575133_ae) || (auto02575133_ai < 0 && lv_y >= auto02575133_ae) ) ; lv_y += auto02575133_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto439D4DA4_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto439D4DA4_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto27AFBBFD_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto27AFBBFD_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto12B2D880_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto12B2D880_ai >= 0 && lv_i <= auto12B2D880_ae) || (auto12B2D880_ai < 0 && lv_i >= auto12B2D880_ae) ) ; lv_i += auto12B2D880_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto96D9C89B_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto96D9C89B_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoEDB1656D_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoEDB1656D_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_CloseGate (int lp_gateNumber) {
    // Variable Declarations
    int lv_gatePart;
    point[3] lv_positionofPart;

    // Automatic Variable Declarations
    unitgroup auto0C255BC1_g;
    int auto0C255BC1_u;
    unit auto0C255BC1_var;
    unitgroup auto595BBBD6_g;
    int auto595BBBD6_u;
    unit auto595BBBD6_var;
    const int auto68FEB10B_n = 2;
    int auto68FEB10B_i;

    // Variable Initialization
    lv_gatePart = 1;

    // Implementation
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_SecurityGateDiagonalClose", -1), c_maxPlayers, PlayerGroupAll(), gv_gateUnit[lp_gateNumber], 0.0, 100.0, 0.0);
    MinimapPing(PlayerGroupActive(), UnitGetPosition(gv_gateUnit[lp_gateNumber]), 1.0, Color(67.45, 0.00, 0.00));
    ActorSend(libNtve_gf_MainActorofUnit(gv_gateStateSplatIndecator[lp_gateNumber][1]), libNtve_gf_ModelSwap("AOEStretchLineStart", 1));
    ActorSend(libNtve_gf_MainActorofUnit(gv_gateStateSplatIndecator[lp_gateNumber][2]), libNtve_gf_ModelSwap("AOEStretchLineStart", 1));
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimSetPausedAll 0");
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimPlay TheElephantAnimations Turn,Right");
    Wait(1.9, c_timeGame);
    auto0C255BC1_g = gv_gateUnitsToRemoveUponChamge[lp_gateNumber];
    auto0C255BC1_u = UnitGroupCount(auto0C255BC1_g, c_unitCountAll);
    for (;; auto0C255BC1_u -= 1) {
        auto0C255BC1_var = UnitGroupUnitFromEnd(auto0C255BC1_g, auto0C255BC1_u);
        if (auto0C255BC1_var == null) { break; }
        lv_positionofPart[lv_gatePart] = UnitGetGoalPosition(auto0C255BC1_var);
        lv_gatePart = (lv_gatePart + 1);
    }
    lv_gatePart = 1;
    auto595BBBD6_g = gv_gateUnitsToRemoveUponChamge[lp_gateNumber];
    auto595BBBD6_u = UnitGroupCount(auto595BBBD6_g, c_unitCountAll);
    for (;; auto595BBBD6_u -= 1) {
        auto595BBBD6_var = UnitGroupUnitFromEnd(auto595BBBD6_g, auto595BBBD6_u);
        if (auto595BBBD6_var == null) { break; }
        UnitRemove(auto595BBBD6_var);
    }
    SoundStop(SoundLastPlayed(), false);
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_SecurityGateDiagonalImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_gateUnit[lp_gateNumber], 0.0, 100.0, 0.0);
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimPlay TheElephantAnimations Stand");
    Wait(0.9, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimSetPausedAll");
    for (auto68FEB10B_i = 1; auto68FEB10B_i <= auto68FEB10B_n; auto68FEB10B_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, lv_positionofPart[lv_gatePart]);
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[lp_gateNumber], UnitLastCreated());
        lv_gatePart = (lv_gatePart + 1);
    }
    gv_isThisgateOpen[lp_gateNumber] = false;
}

void gf_OpenGate (int lp_gateNumber) {
    // Variable Declarations
    int lv_gatePart;
    point[3] lv_positionofPart;

    // Automatic Variable Declarations
    unitgroup autoA4BF17C0_g;
    int autoA4BF17C0_u;
    unit autoA4BF17C0_var;
    unitgroup auto37210C66_g;
    int auto37210C66_u;
    unit auto37210C66_var;
    const int auto9DD7A241_n = 2;
    int auto9DD7A241_i;

    // Variable Initialization
    lv_gatePart = 1;

    // Implementation
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_SecurityGateDiagonalOpen", -1), c_maxPlayers, PlayerGroupAll(), gv_gateUnit[lp_gateNumber], 0.0, 100.0, 0.0);
    MinimapPing(PlayerGroupActive(), UnitGetPosition(gv_gateUnit[lp_gateNumber]), 1.0, Color(0.00, 35.69, 54.90));
    ActorSend(libNtve_gf_MainActorofUnit(gv_gateStateSplatIndecator[lp_gateNumber][1]), libNtve_gf_ModelSwap("ProtossAOEStretchLineBlueStart", 1));
    ActorSend(libNtve_gf_MainActorofUnit(gv_gateStateSplatIndecator[lp_gateNumber][2]), libNtve_gf_ModelSwap("ProtossAOEStretchLineBlueStart", 1));
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimSetPausedAll 0");
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimPlay TheElephantAnimations Turn,Left");
    Wait(1.9, c_timeGame);
    autoA4BF17C0_g = gv_gateUnitsToRemoveUponChamge[lp_gateNumber];
    autoA4BF17C0_u = UnitGroupCount(autoA4BF17C0_g, c_unitCountAll);
    for (;; autoA4BF17C0_u -= 1) {
        autoA4BF17C0_var = UnitGroupUnitFromEnd(autoA4BF17C0_g, autoA4BF17C0_u);
        if (autoA4BF17C0_var == null) { break; }
        lv_positionofPart[lv_gatePart] = UnitGetGoalPosition(autoA4BF17C0_var);
        lv_gatePart = (lv_gatePart + 1);
    }
    lv_gatePart = 1;
    auto37210C66_g = gv_gateUnitsToRemoveUponChamge[lp_gateNumber];
    auto37210C66_u = UnitGroupCount(auto37210C66_g, c_unitCountAll);
    for (;; auto37210C66_u -= 1) {
        auto37210C66_var = UnitGroupUnitFromEnd(auto37210C66_g, auto37210C66_u);
        if (auto37210C66_var == null) { break; }
        UnitRemove(auto37210C66_var);
    }
    SoundStop(SoundLastPlayed(), false);
    SoundPlayOnUnitForPlayer(SoundLink("Doodad_SecurityGateDiagonalImpact", -1), c_maxPlayers, PlayerGroupAll(), gv_gateUnit[lp_gateNumber], 0.0, 100.0, 0.0);
    for (auto9DD7A241_i = 1; auto9DD7A241_i <= auto9DD7A241_n; auto9DD7A241_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockadeAllowPathing", c_unitCreateIgnorePlacement, 0, lv_positionofPart[lv_gatePart]);
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[lp_gateNumber], UnitLastCreated());
        lv_gatePart = (lv_gatePart + 1);
    }
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimPlay TheElephantAnimations Cover");
    Wait(0.9, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(gv_gateUnit[lp_gateNumber], "AnimSetPausedAll");
    gv_isThisgateOpen[lp_gateNumber] = true;
}

void gf_GenerateGatesTerrain () {
    // Variable Declarations
    region lv_revealWallsRegion;
    int lv_offsetOfWall;
    int lv_randomNumber;
    region lv_removeWallRegion;
    unitgroup lv_removeWallUnitGroup;
    int lv_wallLocationY;
    int lv_wallLocationX;
    int lv_gateLocationY;
    int lv_gateLocationX;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoADA107F3_ae = 29;
    const int autoADA107F3_ai = 1;
    const int autoDD4DB3E6_ae = 60;
    const int autoDD4DB3E6_ai = 1;
    const int autoDE505903_ae = 29;
    const int autoDE505903_ai = 1;
    const int auto992FF096_ae = 60;
    const int auto992FF096_ai = 1;
    const int autoEBA960CA_ae = gv_mapSize;
    const int autoEBA960CA_ai = 1;
    const int auto4B5AB12F_ae = gv_mapSize;
    const int auto4B5AB12F_ai = 1;
    int autoA62FF388_ae;
    const int autoA62FF388_ai = 1;
    const int autoBFD59425_ae = 6;
    const int autoBFD59425_ai = 1;
    int auto5CE529CB_ae;
    const int auto5CE529CB_ai = 1;
    int autoB840ECC1_ae;
    const int autoB840ECC1_ai = 1;
    int auto11D22631_ae;
    const int auto11D22631_ai = 1;
    int autoD36326FC_ae;
    const int autoD36326FC_ai = 1;
    const int autoAABB691D_ae = gv_mapSize;
    const int autoAABB691D_ai = 1;
    const int autoD12A0726_ae = gv_mapSize;
    const int autoD12A0726_ai = 1;
    int auto8D5A3D3C_ae;
    const int auto8D5A3D3C_ai = 1;
    int autoCB67F70B_ae;
    const int autoCB67F70B_ai = 1;
    unitgroup auto0259CD8D_g;
    int auto0259CD8D_u;
    int auto1C671DF4_ae;
    const int auto1C671DF4_ai = 1;
    int auto2DAAD869_ae;
    const int auto2DAAD869_ai = 1;
    const int auto63D5E0BC_n = 5;
    int auto63D5E0BC_i;
    const int auto5DEDDB90_n = 29;
    int auto5DEDDB90_i;
    const int autoBD2527B2_n = 29;
    int autoBD2527B2_i;
    const int auto15C5BF38_n = 6;
    int auto15C5BF38_i;
    const int auto4E1BB37C_n = 2;
    int auto4E1BB37C_i;
    const int auto5F5D8D18_n = 14;
    int auto5F5D8D18_i;
    const int autoED371499_n = 14;
    int autoED371499_i;
    const int auto10057922_n = 2;
    int auto10057922_i;
    const int auto25994279_n = 5;
    int auto25994279_i;
    const int autoB6EE3B18_n = 29;
    int autoB6EE3B18_i;
    const int auto3B122A7A_n = 29;
    int auto3B122A7A_i;
    const int auto4FE2CF0B_n = 6;
    int auto4FE2CF0B_i;
    const int auto04DE793C_n = 2;
    int auto04DE793C_i;
    const int autoE974C0D2_n = 14;
    int autoE974C0D2_i;
    const int auto6723E906_n = 14;
    int auto6723E906_i;
    const int autoAD1673BA_n = 2;
    int autoAD1673BA_i;
    playergroup autoB1226A3B_g;
    int autoB1226A3B_var;

    // Variable Initialization
    lv_revealWallsRegion = RegionEmpty();
    lv_randomNumber = RandomInt(0, 1);
    lv_removeWallRegion = RegionEmpty();
    lv_removeWallUnitGroup = UnitGroupEmpty();
    lv_wallLocationY = 5;
    lv_wallLocationX = 5;
    lv_gateLocationY = 30;
    lv_gateLocationX = 30;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 9.0;

    // Implementation
    lv_randomNumber = RandomInt(0, 1);
    if ((lv_randomNumber == 1)) {
        gv_gatesOrientation = "Vertical";
    }
    else {
        gv_gatesOrientation = "Horizontal";
    }
    gv_clearCircleCount = 60;
    gv_usingInvertedMapLayout = true;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    if ((gv_gatesOrientation == "Vertical")) {
        lv_i = 0;
        for ( ; ( (autoDE505903_ai >= 0 && lv_i <= autoDE505903_ae) || (autoDE505903_ai < 0 && lv_i >= autoDE505903_ae) ) ; lv_i += autoDE505903_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(PointWithOffsetPolar(lv_dirtMapCenterPoint, 15.0, 0.0), RandomFixed(-40.0, 40.0), 90.0);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
        }
        lv_i = 30;
        for ( ; ( (auto992FF096_ai >= 0 && lv_i <= auto992FF096_ae) || (auto992FF096_ai < 0 && lv_i >= auto992FF096_ae) ) ; lv_i += auto992FF096_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(PointWithOffsetPolar(lv_dirtMapCenterPoint, -15.0, 0.0), RandomFixed(-40.0, 40.0), 90.0);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
        }
    }
    else {
        lv_i = 0;
        for ( ; ( (autoADA107F3_ai >= 0 && lv_i <= autoADA107F3_ae) || (autoADA107F3_ai < 0 && lv_i >= autoADA107F3_ae) ) ; lv_i += autoADA107F3_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(PointWithOffsetPolar(lv_dirtMapCenterPoint, 15.0, 90.0), RandomFixed(-40.0, 40.0), 0.0);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
        }
        lv_i = 30;
        for ( ; ( (autoDD4DB3E6_ai >= 0 && lv_i <= autoDD4DB3E6_ae) || (autoDD4DB3E6_ai < 0 && lv_i >= autoDD4DB3E6_ae) ) ; lv_i += autoDD4DB3E6_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(PointWithOffsetPolar(lv_dirtMapCenterPoint, -15.0, 90.0), RandomFixed(-40.0, 40.0), 0.0);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
        }
    }
    lv_x = 0;
    for ( ; ( (autoEBA960CA_ai >= 0 && lv_x <= autoEBA960CA_ae) || (autoEBA960CA_ai < 0 && lv_x >= autoEBA960CA_ae) ) ; lv_x += autoEBA960CA_ai ) {
        lv_y = 0;
        for ( ; ( (auto4B5AB12F_ai >= 0 && lv_y <= auto4B5AB12F_ae) || (auto4B5AB12F_ai < 0 && lv_y >= auto4B5AB12F_ae) ) ; lv_y += auto4B5AB12F_ai ) {
            autoA62FF388_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoA62FF388_ai >= 0 && lv_i <= autoA62FF388_ae) || (autoA62FF388_ai < 0 && lv_i >= autoA62FF388_ae) ) ; lv_i += autoA62FF388_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoBFD59425_ai >= 0 && lv_i <= autoBFD59425_ae) || (autoBFD59425_ai < 0 && lv_i >= autoBFD59425_ae) ) ; lv_i += autoBFD59425_ai ) {
        Wait(0.0, c_timeGame);
        auto5CE529CB_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto5CE529CB_ai >= 0 && lv_x <= auto5CE529CB_ae) || (auto5CE529CB_ai < 0 && lv_x >= auto5CE529CB_ae) ) ; lv_x += auto5CE529CB_ai ) {
            autoB840ECC1_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB840ECC1_ai >= 0 && lv_y <= autoB840ECC1_ae) || (autoB840ECC1_ai < 0 && lv_y >= autoB840ECC1_ae) ) ; lv_y += autoB840ECC1_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto11D22631_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto11D22631_ai >= 0 && lv_x <= auto11D22631_ae) || (auto11D22631_ai < 0 && lv_x >= auto11D22631_ae) ) ; lv_x += auto11D22631_ai ) {
            autoD36326FC_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoD36326FC_ai >= 0 && lv_y <= autoD36326FC_ae) || (autoD36326FC_ai < 0 && lv_y >= autoD36326FC_ae) ) ; lv_y += autoD36326FC_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_x = 0;
    for ( ; ( (autoAABB691D_ai >= 0 && lv_x <= autoAABB691D_ae) || (autoAABB691D_ai < 0 && lv_x >= autoAABB691D_ae) ) ; lv_x += autoAABB691D_ai ) {
        lv_y = 0;
        for ( ; ( (autoD12A0726_ai >= 0 && lv_y <= autoD12A0726_ae) || (autoD12A0726_ai < 0 && lv_y >= autoD12A0726_ae) ) ; lv_y += autoD12A0726_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                gv_dirtMap[lv_x][lv_y] = 1;
            }
            else {
                gv_dirtMap[lv_x][lv_y] = 0;
            }
        }
    }
    auto8D5A3D3C_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto8D5A3D3C_ai >= 0 && lv_x <= auto8D5A3D3C_ae) || (auto8D5A3D3C_ai < 0 && lv_x >= auto8D5A3D3C_ae) ) ; lv_x += auto8D5A3D3C_ai ) {
        autoCB67F70B_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoCB67F70B_ai >= 0 && lv_y <= autoCB67F70B_ae) || (autoCB67F70B_ai < 0 && lv_y >= autoCB67F70B_ae) ) ; lv_y += autoCB67F70B_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto0259CD8D_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0259CD8D_u = UnitGroupCount(auto0259CD8D_g, c_unitCountAll);
    for (;; auto0259CD8D_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto0259CD8D_g, auto0259CD8D_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto1C671DF4_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto1C671DF4_ai >= 0 && lv_x <= auto1C671DF4_ae) || (auto1C671DF4_ai < 0 && lv_x >= auto1C671DF4_ae) ) ; lv_x += auto1C671DF4_ai ) {
        auto2DAAD869_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto2DAAD869_ai >= 0 && lv_y <= auto2DAAD869_ae) || (auto2DAAD869_ai < 0 && lv_y >= auto2DAAD869_ae) ) ; lv_y += auto2DAAD869_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    if ((gv_gatesOrientation == "Vertical")) {
        lv_offsetOfWall = 1;
        for (auto25994279_i = 1; auto25994279_i <= auto25994279_n; auto25994279_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[1], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GateUnit", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetPaused(true));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStop());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.9, 0));
        gv_gateUnit[1] = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(78.0, lv_offsetOfWall));
        gv_gateStateSplatIndecator[1][1] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(-90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(74.0, lv_offsetOfWall));
        gv_gateStateSplatIndecator[1][2] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[1], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 2);
        for (autoB6EE3B18_i = 1; autoB6EE3B18_i <= autoB6EE3B18_n; autoB6EE3B18_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[2], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GateUnit", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetPaused(true));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStop());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.9, 0));
        gv_gateUnit[2] = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(78.0, lv_offsetOfWall));
        gv_gateStateSplatIndecator[2][1] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(-90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(74.0, lv_offsetOfWall));
        gv_gateStateSplatIndecator[2][2] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[2], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 2);
        for (auto3B122A7A_i = 1; auto3B122A7A_i <= auto3B122A7A_n; auto3B122A7A_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[3], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GateUnit", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStop());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.9, 0));
        gv_gateUnit[3] = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(78.0, lv_offsetOfWall));
        gv_gateStateSplatIndecator[3][1] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(-90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(74.0, lv_offsetOfWall));
        gv_gateStateSplatIndecator[3][2] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[3], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 2);
        for (auto4FE2CF0B_i = 1; auto4FE2CF0B_i <= auto4FE2CF0B_n; auto4FE2CF0B_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(76.0, lv_offsetOfWall));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        lv_offsetOfWall = 3;
        for (auto04DE793C_i = 1; auto04DE793C_i <= auto04DE793C_n; auto04DE793C_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(76.0, lv_offsetOfWall));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
        lv_offsetOfWall = (lv_offsetOfWall + 6);
        for (autoE974C0D2_i = 1; autoE974C0D2_i <= autoE974C0D2_n; autoE974C0D2_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(76.0, lv_offsetOfWall));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
        lv_offsetOfWall = (lv_offsetOfWall + 6);
        for (auto6723E906_i = 1; auto6723E906_i <= auto6723E906_n; auto6723E906_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(76.0, lv_offsetOfWall));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
        lv_offsetOfWall = (lv_offsetOfWall + 6);
        for (autoAD1673BA_i = 1; autoAD1673BA_i <= autoAD1673BA_n; autoAD1673BA_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(76.0, lv_offsetOfWall));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(90.0, -1.0, 0, 0, 0, 1.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
    }
    else {
        lv_offsetOfWall = 1;
        for (auto63D5E0BC_i = 1; auto63D5E0BC_i <= auto63D5E0BC_n; auto63D5E0BC_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[1], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GateUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetPaused(true));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStop());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.9, 0));
        gv_gateUnit[1] = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 78.0));
        gv_gateStateSplatIndecator[1][1] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 74.0));
        gv_gateStateSplatIndecator[1][2] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(-1.0, 90.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[1], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 2);
        for (auto5DEDDB90_i = 1; auto5DEDDB90_i <= auto5DEDDB90_n; auto5DEDDB90_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[2], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GateUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetPaused(true));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStop());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.9, 0));
        gv_gateUnit[2] = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 78.0));
        gv_gateStateSplatIndecator[2][1] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 74.0));
        gv_gateStateSplatIndecator[2][2] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(-1.0, 90.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[2], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 2);
        for (autoBD2527B2_i = 1; autoBD2527B2_i <= autoBD2527B2_n; autoBD2527B2_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[3], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GateUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimBaselineStop());
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.9, 0));
        gv_gateUnit[3] = UnitLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 78.0));
        gv_gateStateSplatIndecator[3][1] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(0.0, -1.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "GatestateindicationUnit", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 74.0));
        gv_gateStateSplatIndecator[3][2] = UnitLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetRotation(-1.0, 90.0, 0, 0, 0, 1.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(2.0, 2.0, 1.0, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.1, 0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_AnimSetTimeScaleGlobal(0.1));
        lv_offsetOfWall = (lv_offsetOfWall + 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
        UnitGroupAdd(gv_gateUnitsToRemoveUponChamge[3], UnitLastCreated());
        lv_offsetOfWall = (lv_offsetOfWall + 2);
        for (auto15C5BF38_i = 1; auto15C5BF38_i <= auto15C5BF38_n; auto15C5BF38_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", c_unitCreateIgnorePlacement, 0, Point(lv_offsetOfWall, 76.0));
            RegionAddRegion(lv_revealWallsRegion, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 0.5));
            lv_offsetOfWall = (lv_offsetOfWall + 2);
        }
        lv_offsetOfWall = 3;
        for (auto4E1BB37C_i = 1; auto4E1BB37C_i <= auto4E1BB37C_n; auto4E1BB37C_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(lv_offsetOfWall, 76.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
        lv_offsetOfWall = (lv_offsetOfWall + 6);
        for (auto5F5D8D18_i = 1; auto5F5D8D18_i <= auto5F5D8D18_n; auto5F5D8D18_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(lv_offsetOfWall, 76.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
        lv_offsetOfWall = (lv_offsetOfWall + 6);
        for (autoED371499_i = 1; autoED371499_i <= autoED371499_n; autoED371499_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(lv_offsetOfWall, 76.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
        lv_offsetOfWall = (lv_offsetOfWall + 6);
        for (auto10057922_i = 1; auto10057922_i <= auto10057922_n; auto10057922_i += 1) {
            libNtve_gf_CreateModelAtPoint("StoneWall", Point(lv_offsetOfWall, 76.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.9, 0));
            lv_offsetOfWall = (lv_offsetOfWall + 4);
        }
    }
    autoB1226A3B_g = PlayerGroupActive();
    autoB1226A3B_var = -1;
    while (true) {
        autoB1226A3B_var = PlayerGroupNextPlayer(autoB1226A3B_g, autoB1226A3B_var);
        if (autoB1226A3B_var < 0) { break; }
        VisRevealArea(autoB1226A3B_var, lv_revealWallsRegion, 0.0, false);
    }
    gf_GatesTimerRepeater();
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateGatesPlayers () {
    // Variable Declarations
    int lv_playerSpawnVariety;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoF98847F3_ae = gv_mapSize;
    const int autoF98847F3_ai = 4;
    const int autoE80D0A89_ae = gv_mapSize;
    const int autoE80D0A89_ai = 4;
    playergroup auto574FDC20_g;
    playergroup auto922A47E6_g;
    int auto863FCF0A_ae;
    const int auto863FCF0A_ai = 1;
    playergroup auto300491A9_g;
    playergroup auto064B8731_g;

    // Variable Initialization
    lv_playerSpawnVariety = RandomInt(0, 1);
    lv_spawnDistance = 70;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoF98847F3_ai >= 0 && lv_x <= autoF98847F3_ae) || (autoF98847F3_ai < 0 && lv_x >= autoF98847F3_ae) ) ; lv_x += autoF98847F3_ai ) {
            lv_y = 0;
            for ( ; ( (autoE80D0A89_ai >= 0 && lv_y <= autoE80D0A89_ae) || (autoE80D0A89_ai < 0 && lv_y >= autoE80D0A89_ae) ) ; lv_y += autoE80D0A89_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto574FDC20_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto574FDC20_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto922A47E6_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto922A47E6_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto863FCF0A_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto863FCF0A_ai >= 0 && lv_i <= auto863FCF0A_ae) || (auto863FCF0A_ai < 0 && lv_i >= auto863FCF0A_ae) ) ; lv_i += auto863FCF0A_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    if (true) {
        lv_spawnAngle = 90.0;
    }
    else {
        lv_spawnAngle = 0.0;
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        if ((lv_playerSpawnVariety == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
        else {
            lv_spawnDistance = 5;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        if ((lv_playerSpawnVariety == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
        else {
            lv_spawnDistance = 5;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        if ((lv_playerSpawnVariety == 1)) {
            lv_spawnDistance = 60;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 10.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -10.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 10.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -10.0, (lv_spawnAngle + 90.0)));
        }
        else {
            lv_spawnDistance = 5;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        if ((lv_playerSpawnVariety == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_playerSpawnVariety = RandomInt(1, 4);
        if ((lv_playerSpawnVariety == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
        }
        else if ((lv_playerSpawnVariety == 2)) {
            lv_spawnDistance = 5;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
        }
        else if ((lv_playerSpawnVariety == 3)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60.0, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60.0, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60.0, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60.0, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
        }
        else if ((lv_playerSpawnVariety == 4)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -50.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 50.0, (lv_spawnAngle + 90.0)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        if ((lv_playerSpawnVariety == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        if ((lv_playerSpawnVariety == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), 2.0, (lv_spawnAngle + 90.0)));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, lv_spawnAngle), -2.0, (lv_spawnAngle + 90.0)));
        }
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto300491A9_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto300491A9_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto064B8731_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto064B8731_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GatesTimerRepeater () {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowShow(gv_gatesTimerWindow, PlayerGroupAll(), false);
    TimerWindowShowProgressBar(gv_gatesTimerWindow, false);
    if ((gv_amountOfTimesGateTimerRan == 21)) {
        gf_OpenGate(1);
        gf_OpenGate(2);
        gf_OpenGate(3);
        TimerWindowShow(gv_gatesTimerWindow, PlayerGroupAll(), false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/AE528A72"));
        Wait(3.0, c_timeGame);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    }
    else {
        if ((gv_amountOfTimesGateTimerRan == 0)) {
            TimerStart(gv_gatesTimer, 300.0, false, c_timeReal);
            gv_amountOfTimesGateTimerRan = (gv_amountOfTimesGateTimerRan + 1);
        }
        else if (((gv_amountOfTimesGateTimerRan == 1) || (gv_amountOfTimesGateTimerRan == 2) || (gv_amountOfTimesGateTimerRan == 3) || (gv_amountOfTimesGateTimerRan == 4) || (gv_amountOfTimesGateTimerRan == 5) || (gv_amountOfTimesGateTimerRan == 6) || (gv_amountOfTimesGateTimerRan == 7) || (gv_amountOfTimesGateTimerRan == 8) || (gv_amountOfTimesGateTimerRan == 9))) {
            TimerStart(gv_gatesTimer, RandomInt(60, 90), false, c_timeReal);
            gv_amountOfTimesGateTimerRan = (gv_amountOfTimesGateTimerRan + 1);
        }
        else if ((gv_amountOfTimesGateTimerRan == 10)) {
            TimerStart(gv_gatesTimer, RandomInt(30, 60), false, c_timeReal);
            gv_amountOfTimesGateTimerRan = (gv_amountOfTimesGateTimerRan + 1);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/198E1601"));
            Wait(3.0, c_timeGame);
            UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
        }
        else if (((gv_amountOfTimesGateTimerRan == 11) || (gv_amountOfTimesGateTimerRan == 12) || (gv_amountOfTimesGateTimerRan == 13) || (gv_amountOfTimesGateTimerRan == 14) || (gv_amountOfTimesGateTimerRan == 15) || (gv_amountOfTimesGateTimerRan == 16) || (gv_amountOfTimesGateTimerRan == 17) || (gv_amountOfTimesGateTimerRan == 18) || (gv_amountOfTimesGateTimerRan == 19) || (gv_amountOfTimesGateTimerRan == 20))) {
            TimerStart(gv_gatesTimer, RandomInt(30, 60), false, c_timeReal);
            gv_amountOfTimesGateTimerRan = (gv_amountOfTimesGateTimerRan + 1);
        }
        TimerWindowCreate(gv_gatesTimer, StringExternal("Param/Value/396B0AF8"), true, false);
        gv_gatesTimerWindow = TimerWindowLastCreated();
        TimerWindowSetColor(gv_gatesTimerWindow, c_timerWindowColorTime, Color(100.00, 50.20, 0.00), 10.0);
        TimerWindowSetStyle(gv_gatesTimerWindow, c_timerWindowStyleVerticalTitleTime, false);
        TimerWindowShowProgressBar(gv_gatesTimerWindow, true);
        TimerWindowSetFormat(gv_gatesTimerWindow, StringToText("<mintotal/>:<sec2/>"));
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(50.20, 25.10, 0.00), 1);
        TimerWindowSetPosition(gv_gatesTimerWindow, 1550, 80);
    }
}

void gf_IfTheGateisOpencloseitifthegateisclosedopenit (int lp_gate) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_isThisgateOpen[lp_gate] == true)) {
        gf_CloseGate(lp_gate);
    }
    else {
        gf_OpenGate(lp_gate);
    }
}

void gf_LowerAllPillers (bool lp_horizontal) {
    // Variable Declarations
    unitgroup lv_activePillers;
    unitgroup lv_locks;
    unitgroup lv_buildingBlockers;
    string lv_horizontalOrVerticalPillersLocks;
    string lv_horizontalOrVerticalPillersBuildingBlockers;

    // Automatic Variable Declarations
    playergroup auto0E182C68_g;
    int auto0E182C68_var;
    playergroup auto0241E2F8_g;
    int auto0241E2F8_var;
    unitgroup auto5A3F26CA_g;
    int auto5A3F26CA_u;
    unit auto5A3F26CA_var;
    unitgroup auto0E37E94F_g;
    int auto0E37E94F_u;
    unit auto0E37E94F_var;
    unitgroup auto86950AFA_g;
    int auto86950AFA_u;
    unit auto86950AFA_var;
    unitgroup auto2E9C66D8_g;
    int auto2E9C66D8_u;
    unit auto2E9C66D8_var;
    unitgroup auto855ACD2F_g;
    int auto855ACD2F_u;
    unit auto855ACD2F_var;
    unitgroup auto95ADB97C_g;
    int auto95ADB97C_u;
    unit auto95ADB97C_var;

    // Variable Initialization
    lv_activePillers = UnitGroupEmpty();
    lv_locks = UnitGroupEmpty();
    lv_buildingBlockers = UnitGroupEmpty();

    // Implementation
    if ((lp_horizontal == true)) {
        lv_horizontalOrVerticalPillersLocks = "PillersHorizontalLock";
        lv_horizontalOrVerticalPillersBuildingBlockers = "PillersHorizontalBuildingBlocker";
        lv_activePillers = UnitGroup("PillersHorizontal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        lv_horizontalOrVerticalPillersLocks = "PillersVerticalLock";
        lv_horizontalOrVerticalPillersBuildingBlockers = "PillersVerticalBuildingBlocker";
        lv_activePillers = UnitGroup("PillersVertical", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    if ((lp_horizontal == true)) {
        lv_locks = gv_horizontalPillerLocks;
        lv_buildingBlockers = gv_horizontalPillerBuildingBlockers;
        auto0241E2F8_g = PlayerGroupActive();
        auto0241E2F8_var = -1;
        while (true) {
            auto0241E2F8_var = PlayerGroupNextPlayer(auto0241E2F8_g, auto0241E2F8_var);
            if (auto0241E2F8_var < 0) { break; }
            VisRevealArea(auto0241E2F8_var, gv_horizontalLinesRegion, 0.6, false);
        }
    }
    else {
        lv_locks = gv_verticalPillerLocks;
        lv_buildingBlockers = gv_verticalPillerBuildingBlocker;
        auto0E182C68_g = PlayerGroupActive();
        auto0E182C68_var = -1;
        while (true) {
            auto0E182C68_var = PlayerGroupNextPlayer(auto0E182C68_g, auto0E182C68_var);
            if (auto0E182C68_var < 0) { break; }
            VisRevealArea(auto0E182C68_var, gv_verticalLinesRegion, 0.6, false);
        }
    }
    auto5A3F26CA_g = lv_activePillers;
    auto5A3F26CA_u = UnitGroupCount(auto5A3F26CA_g, c_unitCountAll);
    for (;; auto5A3F26CA_u -= 1) {
        auto5A3F26CA_var = UnitGroupUnitFromEnd(auto5A3F26CA_g, auto5A3F26CA_u);
        if (auto5A3F26CA_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto5A3F26CA_var, "AnimSetPausedAll 0");
    }
    auto0E37E94F_g = lv_activePillers;
    auto0E37E94F_u = UnitGroupCount(auto0E37E94F_g, c_unitCountAll);
    for (;; auto0E37E94F_u -= 1) {
        auto0E37E94F_var = UnitGroupUnitFromEnd(auto0E37E94F_g, auto0E37E94F_u);
        if (auto0E37E94F_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto0E37E94F_var, "AnimPlay TheElephantAnimations Turn,Left");
    }
    Wait(0.2, c_timeGame);
    auto86950AFA_g = lv_locks;
    auto86950AFA_u = UnitGroupCount(auto86950AFA_g, c_unitCountAll);
    for (;; auto86950AFA_u -= 1) {
        auto86950AFA_var = UnitGroupUnitFromEnd(auto86950AFA_g, auto86950AFA_u);
        if (auto86950AFA_var == null) { break; }
        UnitRemove(auto86950AFA_var);
    }
    Wait(0.1, c_timeGame);
    auto2E9C66D8_g = lv_activePillers;
    auto2E9C66D8_u = UnitGroupCount(auto2E9C66D8_g, c_unitCountAll);
    for (;; auto2E9C66D8_u -= 1) {
        auto2E9C66D8_var = UnitGroupUnitFromEnd(auto2E9C66D8_g, auto2E9C66D8_u);
        if (auto2E9C66D8_var == null) { break; }
        if ((lp_horizontal == true)) {
            UnitCreate(1, "PillersHorizontalBuildingBlocker", 0, 0, UnitGetPosition(auto2E9C66D8_var), UnitGetFacing(auto2E9C66D8_var));
            UnitGroupAdd(gv_horizontalPillerBuildingBlockers, UnitLastCreated());
        }
        else {
            UnitCreate(1, "PillersVerticalBuildingBlocker", 0, 0, UnitGetPosition(auto2E9C66D8_var), UnitGetFacing(auto2E9C66D8_var));
            UnitGroupAdd(gv_verticalPillerBuildingBlocker, UnitLastCreated());
        }
    }
    Wait(0.2, c_timeGame);
    auto855ACD2F_g = lv_activePillers;
    auto855ACD2F_u = UnitGroupCount(auto855ACD2F_g, c_unitCountAll);
    for (;; auto855ACD2F_u -= 1) {
        auto855ACD2F_var = UnitGroupUnitFromEnd(auto855ACD2F_g, auto855ACD2F_u);
        if (auto855ACD2F_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto855ACD2F_var, "AnimPlay TheElephantAnimations Cover");
    }
    Wait(0.3, c_timeGame);
    auto95ADB97C_g = lv_activePillers;
    auto95ADB97C_u = UnitGroupCount(auto95ADB97C_g, c_unitCountAll);
    for (;; auto95ADB97C_u -= 1) {
        auto95ADB97C_var = UnitGroupUnitFromEnd(auto95ADB97C_g, auto95ADB97C_u);
        if (auto95ADB97C_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto95ADB97C_var, "AnimSetPausedAll");
    }
}

void gf_RaiseAllPillers (bool lp_horizontal) {
    // Variable Declarations
    unitgroup lv_activePillers;
    unitgroup lv_locks;
    unitgroup lv_buildingBlockers;
    string lv_horizontalOrVerticalPillersLocks;
    string lv_horizontalOrVerticalPillersBuildingBlockers;

    // Automatic Variable Declarations
    playergroup autoF4D53630_g;
    int autoF4D53630_var;
    playergroup auto32E26908_g;
    int auto32E26908_var;
    unitgroup auto738ADA07_g;
    int auto738ADA07_u;
    unit auto738ADA07_var;
    unitgroup auto583650B9_g;
    int auto583650B9_u;
    unit auto583650B9_var;
    unitgroup auto5EEC126D_g;
    int auto5EEC126D_u;
    unit auto5EEC126D_var;
    unitgroup auto6803B9E0_g;
    int auto6803B9E0_u;
    unit auto6803B9E0_var;
    unitgroup autoC72490D2_g;
    int autoC72490D2_u;
    unit autoC72490D2_var;
    unitgroup auto659DB8A2_g;
    int auto659DB8A2_u;
    unit auto659DB8A2_var;

    // Variable Initialization
    lv_activePillers = UnitGroupEmpty();
    lv_locks = UnitGroupEmpty();
    lv_buildingBlockers = UnitGroupEmpty();

    // Implementation
    if ((lp_horizontal == true)) {
        lv_horizontalOrVerticalPillersLocks = "PillersHorizontalLock";
        lv_horizontalOrVerticalPillersBuildingBlockers = "PillersHorizontalBuildingBlocker";
        lv_activePillers = UnitGroup("PillersHorizontal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        lv_horizontalOrVerticalPillersLocks = "PillersVerticalLock";
        lv_horizontalOrVerticalPillersBuildingBlockers = "PillersVerticalBuildingBlocker";
        lv_activePillers = UnitGroup("PillersVertical", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    if ((lp_horizontal == true)) {
        lv_locks = gv_horizontalPillerLocks;
        lv_buildingBlockers = gv_horizontalPillerBuildingBlockers;
        auto32E26908_g = PlayerGroupActive();
        auto32E26908_var = -1;
        while (true) {
            auto32E26908_var = PlayerGroupNextPlayer(auto32E26908_g, auto32E26908_var);
            if (auto32E26908_var < 0) { break; }
            VisRevealArea(auto32E26908_var, gv_horizontalLinesRegion, 0.6, false);
        }
    }
    else {
        lv_locks = gv_verticalPillerLocks;
        lv_buildingBlockers = gv_verticalPillerBuildingBlocker;
        autoF4D53630_g = PlayerGroupActive();
        autoF4D53630_var = -1;
        while (true) {
            autoF4D53630_var = PlayerGroupNextPlayer(autoF4D53630_g, autoF4D53630_var);
            if (autoF4D53630_var < 0) { break; }
            VisRevealArea(autoF4D53630_var, gv_verticalLinesRegion, 0.6, false);
        }
    }
    auto738ADA07_g = lv_activePillers;
    auto738ADA07_u = UnitGroupCount(auto738ADA07_g, c_unitCountAll);
    for (;; auto738ADA07_u -= 1) {
        auto738ADA07_var = UnitGroupUnitFromEnd(auto738ADA07_g, auto738ADA07_u);
        if (auto738ADA07_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto738ADA07_var, "AnimSetPausedAll 0");
    }
    auto583650B9_g = lv_activePillers;
    auto583650B9_u = UnitGroupCount(auto583650B9_g, c_unitCountAll);
    for (;; auto583650B9_u -= 1) {
        auto583650B9_var = UnitGroupUnitFromEnd(auto583650B9_g, auto583650B9_u);
        if (auto583650B9_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto583650B9_var, "AnimPlay TheElephantAnimations Turn,Right");
    }
    Wait(0.2, c_timeGame);
    auto5EEC126D_g = lv_buildingBlockers;
    auto5EEC126D_u = UnitGroupCount(auto5EEC126D_g, c_unitCountAll);
    for (;; auto5EEC126D_u -= 1) {
        auto5EEC126D_var = UnitGroupUnitFromEnd(auto5EEC126D_g, auto5EEC126D_u);
        if (auto5EEC126D_var == null) { break; }
        UnitRemove(auto5EEC126D_var);
    }
    Wait(0.1, c_timeGame);
    auto6803B9E0_g = lv_activePillers;
    auto6803B9E0_u = UnitGroupCount(auto6803B9E0_g, c_unitCountAll);
    for (;; auto6803B9E0_u -= 1) {
        auto6803B9E0_var = UnitGroupUnitFromEnd(auto6803B9E0_g, auto6803B9E0_u);
        if (auto6803B9E0_var == null) { break; }
        if ((lp_horizontal == true)) {
            UnitCreate(1, "PillersHorizontalLock", 0, 0, UnitGetPosition(auto6803B9E0_var), UnitGetFacing(auto6803B9E0_var));
            UnitGroupAdd(gv_horizontalPillerLocks, UnitLastCreated());
        }
        else {
            UnitCreate(1, "PillersVerticalLock", 0, 0, UnitGetPosition(auto6803B9E0_var), UnitGetFacing(auto6803B9E0_var));
            UnitGroupAdd(gv_verticalPillerLocks, UnitLastCreated());
        }
    }
    Wait(0.2, c_timeGame);
    autoC72490D2_g = lv_activePillers;
    autoC72490D2_u = UnitGroupCount(autoC72490D2_g, c_unitCountAll);
    for (;; autoC72490D2_u -= 1) {
        autoC72490D2_var = UnitGroupUnitFromEnd(autoC72490D2_g, autoC72490D2_u);
        if (autoC72490D2_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoC72490D2_var, "AnimPlay TheElephantAnimations Stand");
    }
    Wait(0.3, c_timeGame);
    auto659DB8A2_g = lv_activePillers;
    auto659DB8A2_u = UnitGroupCount(auto659DB8A2_g, c_unitCountAll);
    for (;; auto659DB8A2_u -= 1) {
        auto659DB8A2_var = UnitGroupUnitFromEnd(auto659DB8A2_g, auto659DB8A2_u);
        if (auto659DB8A2_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto659DB8A2_var, "AnimSetPausedAll");
    }
}

void gf_GenerateRiverTerrain4 () {
    // Variable Declarations
    int lv_pillersXVertical;
    int lv_pillersYVertical;
    region lv_removeVerticalLinesRegion;
    region lv_removeHorizontalLinesRegion;
    region lv_combinedRemovalRegion;
    int lv_RiverAngle;
    point lv_point1Pillers;
    point lv_point2Pillers;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoE76D1562_ae = 30;
    const int autoE76D1562_ai = 1;
    const int auto69D30236_ae = 60;
    const int auto69D30236_ai = 1;
    const int auto702F1748_ae = gv_mapSize;
    const int auto702F1748_ai = 1;
    const int auto9C179F33_ae = gv_mapSize;
    const int auto9C179F33_ai = 1;
    int autoF811897A_ae;
    const int autoF811897A_ai = 1;
    const int auto3DBCA8DC_ae = 5;
    const int auto3DBCA8DC_ai = 1;
    int auto99E9789E_ae;
    const int auto99E9789E_ai = 1;
    int auto21F2282A_ae;
    const int auto21F2282A_ai = 1;
    int auto258E0487_ae;
    const int auto258E0487_ai = 1;
    int auto8DE8B7B5_ae;
    const int auto8DE8B7B5_ai = 1;
    const int auto2BF0EDB6_ae = gv_mapSize;
    const int auto2BF0EDB6_ai = 1;
    const int auto219329EC_ae = gv_mapSize;
    const int auto219329EC_ai = 1;
    int autoEC498BF3_ae;
    const int autoEC498BF3_ai = 1;
    int auto4DF7DA19_ae;
    const int auto4DF7DA19_ai = 1;
    unitgroup autoCB45B53E_g;
    int autoCB45B53E_u;
    int auto2705A9DE_ae;
    const int auto2705A9DE_ai = 1;
    int autoA8E5752D_ae;
    const int autoA8E5752D_ai = 1;
    const int auto3995631B_n = 1;
    int auto3995631B_i;
    const int auto265F0426_n = 29;
    int auto265F0426_i;
    const int autoA691982C_n = 29;
    int autoA691982C_i;
    const int auto2FD1AB84_n = 29;
    int auto2FD1AB84_i;
    const int autoD8310F1B_n = 29;
    int autoD8310F1B_i;
    const int auto16E4A6B1_n = 1;
    int auto16E4A6B1_i;
    const int auto48E942BB_n = 29;
    int auto48E942BB_i;
    const int auto1D623737_n = 29;
    int auto1D623737_i;
    const int autoC9BC9F8A_n = 29;
    int autoC9BC9F8A_i;
    const int auto94C3A39A_n = 29;
    int auto94C3A39A_i;

    // Variable Initialization
    lv_removeVerticalLinesRegion = RegionEmpty();
    lv_removeHorizontalLinesRegion = RegionEmpty();
    lv_combinedRemovalRegion = RegionEmpty();
    lv_RiverAngle = 90;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 9.0;

    // Implementation
    gv_mapGenAngle = lv_RiverAngle;
    gv_clearCircleCount = 60;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    lv_point1Pillers = PointWithOffsetPolar(lv_dirtMapCenterPoint, 17.0, (lv_RiverAngle + 90));
    lv_point2Pillers = PointWithOffsetPolar(lv_dirtMapCenterPoint, 15.0, (lv_RiverAngle + -90));
    lv_i = 0;
    for ( ; ( (autoE76D1562_ai >= 0 && lv_i <= autoE76D1562_ae) || (autoE76D1562_ai < 0 && lv_i >= autoE76D1562_ae) ) ; lv_i += autoE76D1562_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_point1Pillers, RandomFixed(-50.0, 50.0), 90.0);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 0.9)));
    }
    lv_i = 31;
    for ( ; ( (auto69D30236_ai >= 0 && lv_i <= auto69D30236_ae) || (auto69D30236_ai < 0 && lv_i >= auto69D30236_ae) ) ; lv_i += auto69D30236_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_point2Pillers, RandomFixed(-50.0, 50.0), 90.0);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 0.9)));
    }
    lv_x = 0;
    for ( ; ( (auto702F1748_ai >= 0 && lv_x <= auto702F1748_ae) || (auto702F1748_ai < 0 && lv_x >= auto702F1748_ae) ) ; lv_x += auto702F1748_ai ) {
        lv_y = 0;
        for ( ; ( (auto9C179F33_ai >= 0 && lv_y <= auto9C179F33_ae) || (auto9C179F33_ai < 0 && lv_y >= auto9C179F33_ae) ) ; lv_y += auto9C179F33_ai ) {
            autoF811897A_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoF811897A_ai >= 0 && lv_i <= autoF811897A_ae) || (autoF811897A_ai < 0 && lv_i >= autoF811897A_ae) ) ; lv_i += autoF811897A_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto3DBCA8DC_ai >= 0 && lv_i <= auto3DBCA8DC_ae) || (auto3DBCA8DC_ai < 0 && lv_i >= auto3DBCA8DC_ae) ) ; lv_i += auto3DBCA8DC_ai ) {
        Wait(0.0, c_timeGame);
        auto99E9789E_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto99E9789E_ai >= 0 && lv_x <= auto99E9789E_ae) || (auto99E9789E_ai < 0 && lv_x >= auto99E9789E_ae) ) ; lv_x += auto99E9789E_ai ) {
            auto21F2282A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto21F2282A_ai >= 0 && lv_y <= auto21F2282A_ae) || (auto21F2282A_ai < 0 && lv_y >= auto21F2282A_ae) ) ; lv_y += auto21F2282A_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto258E0487_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto258E0487_ai >= 0 && lv_x <= auto258E0487_ae) || (auto258E0487_ai < 0 && lv_x >= auto258E0487_ae) ) ; lv_x += auto258E0487_ai ) {
            auto8DE8B7B5_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto8DE8B7B5_ai >= 0 && lv_y <= auto8DE8B7B5_ae) || (auto8DE8B7B5_ai < 0 && lv_y >= auto8DE8B7B5_ae) ) ; lv_y += auto8DE8B7B5_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_x = 0;
    for ( ; ( (auto2BF0EDB6_ai >= 0 && lv_x <= auto2BF0EDB6_ae) || (auto2BF0EDB6_ai < 0 && lv_x >= auto2BF0EDB6_ae) ) ; lv_x += auto2BF0EDB6_ai ) {
        lv_y = 0;
        for ( ; ( (auto219329EC_ai >= 0 && lv_y <= auto219329EC_ae) || (auto219329EC_ai < 0 && lv_y >= auto219329EC_ae) ) ; lv_y += auto219329EC_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                gv_dirtMap[lv_x][lv_y] = 1;
            }
            else {
                gv_dirtMap[lv_x][lv_y] = 0;
            }
        }
    }
    autoEC498BF3_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoEC498BF3_ai >= 0 && lv_x <= autoEC498BF3_ae) || (autoEC498BF3_ai < 0 && lv_x >= autoEC498BF3_ae) ) ; lv_x += autoEC498BF3_ai ) {
        auto4DF7DA19_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto4DF7DA19_ai >= 0 && lv_y <= auto4DF7DA19_ae) || (auto4DF7DA19_ai < 0 && lv_y >= auto4DF7DA19_ae) ) ; lv_y += auto4DF7DA19_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoCB45B53E_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCB45B53E_u = UnitGroupCount(autoCB45B53E_g, c_unitCountAll);
    for (;; autoCB45B53E_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoCB45B53E_g, autoCB45B53E_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto2705A9DE_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto2705A9DE_ai >= 0 && lv_x <= auto2705A9DE_ae) || (auto2705A9DE_ai < 0 && lv_x >= auto2705A9DE_ae) ) ; lv_x += auto2705A9DE_ai ) {
        autoA8E5752D_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoA8E5752D_ai >= 0 && lv_y <= autoA8E5752D_ae) || (autoA8E5752D_ai < 0 && lv_y >= autoA8E5752D_ae) ) ; lv_y += autoA8E5752D_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    RegionAddRect(lv_removeVerticalLinesRegion, true, 35.0, 0.0, 37.0, 152.0);
    RegionAddRect(lv_removeVerticalLinesRegion, true, 51.0, 0.0, 53.0, 152.0);
    RegionAddRect(lv_removeVerticalLinesRegion, true, 99.0, 0.0, 101.0, 152.0);
    RegionAddRect(lv_removeVerticalLinesRegion, true, 115.0, 0.0, 117.0, 152.0);
    RegionAddRect(lv_removeHorizontalLinesRegion, true, 0.0, 127.0, 152.0, 129.0);
    RegionAddRect(lv_removeHorizontalLinesRegion, true, 0.0, 91.0, 152.0, 93.0);
    RegionAddRect(lv_removeHorizontalLinesRegion, true, 0.0, 59.0, 129.0, 61.0);
    RegionAddRect(lv_removeHorizontalLinesRegion, true, 0.0, 23.0, 129.0, 25.0);
    RegionAddRegion(lv_combinedRemovalRegion, lv_removeVerticalLinesRegion);
    RegionAddRegion(gv_verticalLinesRegion, lv_removeVerticalLinesRegion);
    RegionAddRegion(lv_combinedRemovalRegion, lv_removeHorizontalLinesRegion);
    RegionAddRegion(gv_horizontalLinesRegion, lv_removeHorizontalLinesRegion);
    VisRevealArea(1, lv_combinedRemovalRegion, 0.1, false);
    gf_RemoveDirtinRegion(lv_combinedRemovalRegion);
    UnitCreate(1, "PillersVertical", 0, 0, Point(76.0, 82.0), 0.0);
    UnitCreate(1, "PillersVertical", 0, 0, Point(76.0, 70.0), 0.0);
    UnitCreate(1, "PillersHorizontal", 0, 0, Point(82.0, 76.0), 90.0);
    UnitCreate(1, "PillersHorizontal", 0, 0, Point(70.0, 76.0), 90.0);
    for (auto3995631B_i = 1; auto3995631B_i <= auto3995631B_n; auto3995631B_i += 1) {
        lv_pillersXVertical = 36;
        lv_pillersYVertical = 5;
        for (auto265F0426_i = 1; auto265F0426_i <= auto265F0426_n; auto265F0426_i += 1) {
            UnitCreate(1, "PillersVertical", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
            lv_pillersYVertical = (lv_pillersYVertical + 5);
        }
        lv_pillersYVertical = (lv_pillersYVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
        lv_pillersXVertical = 52;
        lv_pillersYVertical = 5;
        for (autoA691982C_i = 1; autoA691982C_i <= autoA691982C_n; autoA691982C_i += 1) {
            UnitCreate(1, "PillersVertical", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
            lv_pillersYVertical = (lv_pillersYVertical + 5);
        }
        lv_pillersYVertical = (lv_pillersYVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
        lv_pillersXVertical = 100;
        lv_pillersYVertical = 5;
        for (auto2FD1AB84_i = 1; auto2FD1AB84_i <= auto2FD1AB84_n; auto2FD1AB84_i += 1) {
            UnitCreate(1, "PillersVertical", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
            lv_pillersYVertical = (lv_pillersYVertical + 5);
        }
        lv_pillersYVertical = (lv_pillersYVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
        lv_pillersXVertical = 116;
        lv_pillersYVertical = 5;
        for (autoD8310F1B_i = 1; autoD8310F1B_i <= autoD8310F1B_n; autoD8310F1B_i += 1) {
            UnitCreate(1, "PillersVertical", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
            lv_pillersYVertical = (lv_pillersYVertical + 5);
        }
        lv_pillersYVertical = (lv_pillersYVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
    }
    for (auto16E4A6B1_i = 1; auto16E4A6B1_i <= auto16E4A6B1_n; auto16E4A6B1_i += 1) {
        lv_pillersXVertical = 5;
        lv_pillersYVertical = 24;
        for (auto48E942BB_i = 1; auto48E942BB_i <= auto48E942BB_n; auto48E942BB_i += 1) {
            UnitCreate(1, "PillersHorizontal", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 90.0);
            lv_pillersXVertical = (lv_pillersXVertical + 5);
        }
        lv_pillersXVertical = (lv_pillersXVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
        lv_pillersXVertical = 5;
        lv_pillersYVertical = 60;
        for (auto1D623737_i = 1; auto1D623737_i <= auto1D623737_n; auto1D623737_i += 1) {
            UnitCreate(1, "PillersHorizontal", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 90.0);
            lv_pillersXVertical = (lv_pillersXVertical + 5);
        }
        lv_pillersXVertical = (lv_pillersXVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
        lv_pillersXVertical = 5;
        lv_pillersYVertical = 92;
        for (autoC9BC9F8A_i = 1; autoC9BC9F8A_i <= autoC9BC9F8A_n; autoC9BC9F8A_i += 1) {
            UnitCreate(1, "PillersHorizontal", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 90.0);
            lv_pillersXVertical = (lv_pillersXVertical + 5);
        }
        lv_pillersXVertical = (lv_pillersXVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
        lv_pillersXVertical = 5;
        lv_pillersYVertical = 128;
        for (auto94C3A39A_i = 1; auto94C3A39A_i <= auto94C3A39A_n; auto94C3A39A_i += 1) {
            UnitCreate(1, "PillersHorizontal", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 90.0);
            lv_pillersXVertical = (lv_pillersXVertical + 5);
        }
        lv_pillersXVertical = (lv_pillersXVertical - 2);
        UnitCreate(1, "PillerCorrection", 0, 0, Point(lv_pillersXVertical, lv_pillersYVertical), 0.0);
    }
    gf_RaiseAllPillers(false);
    gf_RaiseAllPillers(true);
    gf_LowerAllPillers(true);
    gf_PillersCloseAndOpen();
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GeneratePillersPlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoC858B16D_ae = gv_mapSize;
    const int autoC858B16D_ai = 4;
    const int auto9C8A63F7_ae = gv_mapSize;
    const int auto9C8A63F7_ai = 4;
    playergroup auto56CF6117_g;
    playergroup auto21DFBF45_g;
    int auto715F6839_ae;
    const int auto715F6839_ai = 1;
    playergroup autoF55B46B3_g;
    playergroup auto365B51FC_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoC858B16D_ai >= 0 && lv_x <= autoC858B16D_ae) || (autoC858B16D_ai < 0 && lv_x >= autoC858B16D_ae) ) ; lv_x += autoC858B16D_ai ) {
            lv_y = 0;
            for ( ; ( (auto9C8A63F7_ai >= 0 && lv_y <= auto9C8A63F7_ae) || (auto9C8A63F7_ai < 0 && lv_y >= auto9C8A63F7_ae) ) ; lv_y += auto9C8A63F7_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto56CF6117_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto56CF6117_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto21DFBF45_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto21DFBF45_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto715F6839_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto715F6839_ai >= 0 && lv_i <= auto715F6839_ae) || (auto715F6839_ai < 0 && lv_i >= auto715F6839_ae) ) ; lv_i += auto715F6839_ai ) {
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        lv_spawnDistance = (lv_spawnDistance + 3);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = (lv_spawnDistance + 3);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = (lv_spawnDistance + 60);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle + 90)), 45.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle + 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle + 90)), 45.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle - 90)), 45.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle - 90)), 45.0, (gv_mapGenAngle + 180)));
        }
        else {
            lv_spawnDistance = (lv_spawnDistance + 50);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle + 90)), 5.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle + 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle + 90)), 5.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle - 90)), 5.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle - 90)), 5.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = (lv_spawnDistance + 60);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle + 90)), 45.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle + 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle + 90)), 45.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle - 90)), 45.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 60, (gv_mapGenAngle - 90)), 45.0, (gv_mapGenAngle + 180)));
        }
        else {
            lv_spawnDistance = (lv_spawnDistance + 50);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle + 90)), 5.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle + 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle + 90)), 5.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle - 90)), 5.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 7.0, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 5.0, (gv_mapGenAngle - 90)), 5.0, (gv_mapGenAngle + 180)));
        }
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoF55B46B3_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoF55B46B3_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto365B51FC_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto365B51FC_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_PillersCloseAndOpen () {
    // Variable Declarations
    int lv_timesRan;

    // Automatic Variable Declarations
    unitgroup autoD96D8B4F_g;
    int autoD96D8B4F_u;
    unit autoD96D8B4F_var;

    // Variable Initialization

    // Implementation
    if ((gv_amountOfTimesPilllersTimerRan == 21)) {
        Wait(3.0, c_timeGame);
    }
    else {
        if ((gv_amountOfTimesPilllersTimerRan == 0)) {
            TimerStart(TimerCreate(), 10.0, false, c_timeReal);
            gv_amountOfTimesPilllersTimerRan = (gv_amountOfTimesPilllersTimerRan + 1);
        }
        else if (((gv_amountOfTimesPilllersTimerRan == 1) || (gv_amountOfTimesPilllersTimerRan == 2) || (gv_amountOfTimesPilllersTimerRan == 3) || (gv_amountOfTimesPilllersTimerRan == 4) || (gv_amountOfTimesPilllersTimerRan == 5) || (gv_amountOfTimesPilllersTimerRan == 6) || (gv_amountOfTimesPilllersTimerRan == 7) || (gv_amountOfTimesPilllersTimerRan == 8) || (gv_amountOfTimesPilllersTimerRan == 9))) {
            TimerStart(TimerCreate(), RandomInt(60, 90), false, c_timeReal);
            gv_amountOfTimesPilllersTimerRan = (lv_timesRan + 1);
        }
        else if ((gv_amountOfTimesPilllersTimerRan == 10)) {
            TimerStart(TimerCreate(), RandomInt(30, 60), false, c_timeReal);
            gv_amountOfTimesPilllersTimerRan = (lv_timesRan + 1);
            Wait(3.0, c_timeGame);
        }
        else if (((gv_amountOfTimesPilllersTimerRan == 11) || (gv_amountOfTimesPilllersTimerRan == 12) || (gv_amountOfTimesPilllersTimerRan == 13) || (gv_amountOfTimesPilllersTimerRan == 14) || (gv_amountOfTimesPilllersTimerRan == 15) || (gv_amountOfTimesPilllersTimerRan == 16) || (gv_amountOfTimesPilllersTimerRan == 17) || (gv_amountOfTimesPilllersTimerRan == 18) || (gv_amountOfTimesPilllersTimerRan == 19) || (gv_amountOfTimesPilllersTimerRan == 20))) {
            TimerStart(TimerCreate(), RandomInt(30, 60), false, c_timeReal);
            gv_amountOfTimesPilllersTimerRan = (lv_timesRan + 1);
        }
        gv_pillersGenTimer = TimerLastStarted();
        TimerWindowCreate(gv_pillersGenTimer, StringExternal("Param/Value/1C285DEF"), true, false);
        gv_pillersGenTimerWindow = TimerWindowLastCreated();
        TimerWindowSetColor(gv_pillersGenTimerWindow, c_timerWindowColorTime, Color(100.00, 50.20, 0.00), 10.0);
        TimerWindowSetStyle(gv_pillersGenTimerWindow, c_timerWindowStyleVerticalTitleTime, false);
    }
    autoD96D8B4F_g = UnitGroup("Drone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD96D8B4F_u = UnitGroupCount(autoD96D8B4F_g, c_unitCountAll);
    for (;; autoD96D8B4F_u -= 1) {
        autoD96D8B4F_var = UnitGroupUnitFromEnd(autoD96D8B4F_g, autoD96D8B4F_u);
        if (autoD96D8B4F_var == null) { break; }
        UnitIssueOrder(autoD96D8B4F_var, Order(AbilityCommand("stop", 0)), c_orderQueueAddToEnd);
    }
}

void gf_GenerateLabyrinthTerrain () {
    // Variable Declarations
    int lv_randomCircleAngle;
    point lv_circleTunnelPoint;
    point lv_lastTunnlePoint;
    int lv_currentCircle;
    int lv_labyRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto90957A62_ae = gv_mapSize;
    const int auto90957A62_ai = 1;
    const int autoD7E37334_ae = gv_mapSize;
    const int autoD7E37334_ai = 1;
    int auto0789299C_ae;
    const int auto0789299C_ai = 1;
    const int autoED2EFF44_ae = 5;
    const int autoED2EFF44_ai = 1;
    int auto1AA93FD4_ae;
    const int auto1AA93FD4_ai = 1;
    int auto537A3A52_ae;
    const int auto537A3A52_ai = 1;
    int autoC039577F_ae;
    const int autoC039577F_ai = 1;
    int autoEC028FB4_ae;
    const int autoEC028FB4_ai = 1;
    int auto4FCFA4A0_ae;
    const int auto4FCFA4A0_ai = 1;
    int auto2C0807E3_ae;
    const int auto2C0807E3_ai = 1;
    unitgroup autoA2DB0444_g;
    int autoA2DB0444_u;
    int auto0D857BD6_ae;
    const int auto0D857BD6_ai = 1;
    int autoD64B4904_ae;
    const int autoD64B4904_ai = 1;
    const int auto1888BC25_n = 10;
    int auto1888BC25_i;
    playergroup auto35B46690_g;
    int auto35B46690_var;
    const int auto09E18EB3_n = 30;
    int auto09E18EB3_i;
    playergroup auto7CFA4087_g;
    int auto7CFA4087_var;

    // Variable Initialization
    lv_currentCircle = 1;
    lv_labyRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 0;
    lv_labyRandomAngle = RandomInt(0, 360);
    gv_mapGenAngle = lv_labyRandomAngle;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 6.0);
    lv_x = 0;
    for ( ; ( (auto90957A62_ai >= 0 && lv_x <= auto90957A62_ae) || (auto90957A62_ai < 0 && lv_x >= auto90957A62_ae) ) ; lv_x += auto90957A62_ai ) {
        lv_y = 0;
        for ( ; ( (autoD7E37334_ai >= 0 && lv_y <= autoD7E37334_ae) || (autoD7E37334_ai < 0 && lv_y >= autoD7E37334_ae) ) ; lv_y += autoD7E37334_ai ) {
            auto0789299C_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto0789299C_ai >= 0 && lv_i <= auto0789299C_ae) || (auto0789299C_ai < 0 && lv_i >= auto0789299C_ae) ) ; lv_i += auto0789299C_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoED2EFF44_ai >= 0 && lv_i <= autoED2EFF44_ae) || (autoED2EFF44_ai < 0 && lv_i >= autoED2EFF44_ae) ) ; lv_i += autoED2EFF44_ai ) {
        Wait(0.0, c_timeGame);
        auto1AA93FD4_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto1AA93FD4_ai >= 0 && lv_x <= auto1AA93FD4_ae) || (auto1AA93FD4_ai < 0 && lv_x >= auto1AA93FD4_ae) ) ; lv_x += auto1AA93FD4_ai ) {
            auto537A3A52_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto537A3A52_ai >= 0 && lv_y <= auto537A3A52_ae) || (auto537A3A52_ai < 0 && lv_y >= auto537A3A52_ae) ) ; lv_y += auto537A3A52_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoC039577F_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoC039577F_ai >= 0 && lv_x <= autoC039577F_ae) || (autoC039577F_ai < 0 && lv_x >= autoC039577F_ae) ) ; lv_x += autoC039577F_ai ) {
            autoEC028FB4_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoEC028FB4_ai >= 0 && lv_y <= autoEC028FB4_ae) || (autoEC028FB4_ai < 0 && lv_y >= autoEC028FB4_ae) ) ; lv_y += autoEC028FB4_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto4FCFA4A0_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto4FCFA4A0_ai >= 0 && lv_x <= auto4FCFA4A0_ae) || (auto4FCFA4A0_ai < 0 && lv_x >= auto4FCFA4A0_ae) ) ; lv_x += auto4FCFA4A0_ai ) {
        auto2C0807E3_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto2C0807E3_ai >= 0 && lv_y <= auto2C0807E3_ae) || (auto2C0807E3_ai < 0 && lv_y >= auto2C0807E3_ae) ) ; lv_y += auto2C0807E3_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoA2DB0444_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA2DB0444_u = UnitGroupCount(autoA2DB0444_g, c_unitCountAll);
    for (;; autoA2DB0444_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoA2DB0444_g, autoA2DB0444_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto0D857BD6_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto0D857BD6_ai >= 0 && lv_x <= auto0D857BD6_ae) || (auto0D857BD6_ai < 0 && lv_x >= auto0D857BD6_ae) ) ; lv_x += auto0D857BD6_ai ) {
        autoD64B4904_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoD64B4904_ai >= 0 && lv_y <= autoD64B4904_ae) || (autoD64B4904_ai < 0 && lv_y >= autoD64B4904_ae) ) ; lv_y += autoD64B4904_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    for (auto1888BC25_i = 1; auto1888BC25_i <= auto1888BC25_n; auto1888BC25_i += 1) {
        lv_randomCircleAngle = RandomInt(0, 360);
        lv_circleTunnelPoint = RegionRandomPoint(RegionEntireMap());
        lv_lastTunnlePoint = lv_circleTunnelPoint;
        gf_RemoveDirtinRegion(RegionCircle(lv_circleTunnelPoint, 16.0));
        auto35B46690_g = PlayerGroupActive();
        auto35B46690_var = -1;
        while (true) {
            auto35B46690_var = PlayerGroupNextPlayer(auto35B46690_g, auto35B46690_var);
            if (auto35B46690_var < 0) { break; }
            VisRevealArea(auto35B46690_var, RegionCircle(lv_circleTunnelPoint, 17.0), 0.1, false);
        }
        lv_circleTunnelPoint = PointWithOffsetPolar(lv_circleTunnelPoint, 4.0, AngleBetweenPoints(lv_circleTunnelPoint, PointWithOffsetPolar(lv_circleTunnelPoint, 4.0, (RandomInt(-60, 60) + lv_randomCircleAngle))));
        lv_lastTunnlePoint = PointWithOffsetPolar(lv_circleTunnelPoint, 4.0, AngleBetweenPoints(lv_circleTunnelPoint, lv_lastTunnlePoint));
        for (auto09E18EB3_i = 1; auto09E18EB3_i <= auto09E18EB3_n; auto09E18EB3_i += 1) {
            lv_circleTunnelPoint = PointWithOffsetPolar(lv_circleTunnelPoint, 4.0, AngleBetweenPoints(lv_circleTunnelPoint, PointWithOffsetPolar(lv_circleTunnelPoint, 4.0, (RandomInt(-60, 60) + lv_randomCircleAngle))));
            gf_RemoveDirtinRegion(RegionCircle(lv_circleTunnelPoint, 3.4));
            auto7CFA4087_g = PlayerGroupActive();
            auto7CFA4087_var = -1;
            while (true) {
                auto7CFA4087_var = PlayerGroupNextPlayer(auto7CFA4087_g, auto7CFA4087_var);
                if (auto7CFA4087_var < 0) { break; }
                VisRevealArea(auto7CFA4087_var, RegionCircle(lv_circleTunnelPoint, 4.5), 0.1, false);
            }
            lv_lastTunnlePoint = lv_circleTunnelPoint;
        }
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateLabyrinthPlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto69A009E6_ae = gv_mapSize;
    const int auto69A009E6_ai = 4;
    const int auto93ED2489_ae = gv_mapSize;
    const int auto93ED2489_ai = 4;
    playergroup auto0A04F12B_g;
    playergroup auto63C27029_g;
    int autoD8AE121B_ae;
    const int autoD8AE121B_ai = 1;
    playergroup auto035C192F_g;
    playergroup auto3230B16C_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);
    lv_spawnDistance = 57;

    // Implementation
    lv_spawnDistance = 6;
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto69A009E6_ai >= 0 && lv_x <= auto69A009E6_ae) || (auto69A009E6_ai < 0 && lv_x >= auto69A009E6_ae) ) ; lv_x += auto69A009E6_ai ) {
            lv_y = 0;
            for ( ; ( (auto93ED2489_ai >= 0 && lv_y <= auto93ED2489_ae) || (auto93ED2489_ai < 0 && lv_y >= auto93ED2489_ae) ) ; lv_y += auto93ED2489_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto0A04F12B_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto0A04F12B_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto63C27029_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto63C27029_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoD8AE121B_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoD8AE121B_ai >= 0 && lv_i <= autoD8AE121B_ae) || (autoD8AE121B_ai < 0 && lv_i >= autoD8AE121B_ae) ) ; lv_i += autoD8AE121B_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = gv_mapGenAngle;
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto035C192F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto035C192F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto3230B16C_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3230B16C_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateClockTerrain () {
    // Variable Declarations
    point lv_pointofCement;
    region lv_clearMapOfHouse;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto30C297C3_n = 1;
    int auto30C297C3_i;
    const int autoBDFF991C_ae = gv_mapSize;
    const int autoBDFF991C_ai = 1;
    const int auto30AC136D_ae = gv_mapSize;
    const int auto30AC136D_ai = 1;
    int autoEA33B738_ae;
    const int autoEA33B738_ai = 1;
    const int autoA47109BD_ae = 5;
    const int autoA47109BD_ai = 1;
    int auto6EA0D5B0_ae;
    const int auto6EA0D5B0_ai = 1;
    int auto42886D51_ae;
    const int auto42886D51_ai = 1;
    int auto0838B12A_ae;
    const int auto0838B12A_ai = 1;
    int auto637C18EC_ae;
    const int auto637C18EC_ai = 1;
    int autoD83C22D4_ae;
    const int autoD83C22D4_ai = 1;
    int auto6ECACF88_ae;
    const int auto6ECACF88_ai = 1;
    unitgroup auto81C75592_g;
    int auto81C75592_u;
    int auto2C9045F6_ae;
    const int auto2C9045F6_ai = 1;
    int auto02608B1F_ae;
    const int auto02608B1F_ai = 1;

    // Variable Initialization
    lv_clearMapOfHouse = RegionEmpty();

    // Implementation
    for (auto30C297C3_i = 1; auto30C297C3_i <= auto30C297C3_n; auto30C297C3_i += 1) {
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        PointSetHeight(gv_clearCircles[0], 0.0);
        lv_x = 0;
        for ( ; ( (autoBDFF991C_ai >= 0 && lv_x <= autoBDFF991C_ae) || (autoBDFF991C_ai < 0 && lv_x >= autoBDFF991C_ae) ) ; lv_x += autoBDFF991C_ai ) {
            lv_y = 0;
            for ( ; ( (auto30AC136D_ai >= 0 && lv_y <= auto30AC136D_ae) || (auto30AC136D_ai < 0 && lv_y >= auto30AC136D_ae) ) ; lv_y += auto30AC136D_ai ) {
                autoEA33B738_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (autoEA33B738_ai >= 0 && lv_i <= autoEA33B738_ae) || (autoEA33B738_ai < 0 && lv_i >= autoEA33B738_ae) ) ; lv_i += autoEA33B738_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (autoA47109BD_ai >= 0 && lv_i <= autoA47109BD_ae) || (autoA47109BD_ai < 0 && lv_i >= autoA47109BD_ae) ) ; lv_i += autoA47109BD_ai ) {
            Wait(0.0, c_timeGame);
            auto6EA0D5B0_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto6EA0D5B0_ai >= 0 && lv_x <= auto6EA0D5B0_ae) || (auto6EA0D5B0_ai < 0 && lv_x >= auto6EA0D5B0_ae) ) ; lv_x += auto6EA0D5B0_ai ) {
                auto42886D51_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto42886D51_ai >= 0 && lv_y <= auto42886D51_ae) || (auto42886D51_ai < 0 && lv_y >= auto42886D51_ae) ) ; lv_y += auto42886D51_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            auto0838B12A_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto0838B12A_ai >= 0 && lv_x <= auto0838B12A_ae) || (auto0838B12A_ai < 0 && lv_x >= auto0838B12A_ae) ) ; lv_x += auto0838B12A_ai ) {
                auto637C18EC_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto637C18EC_ai >= 0 && lv_y <= auto637C18EC_ae) || (auto637C18EC_ai < 0 && lv_y >= auto637C18EC_ae) ) ; lv_y += auto637C18EC_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        autoD83C22D4_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoD83C22D4_ai >= 0 && lv_x <= autoD83C22D4_ae) || (autoD83C22D4_ai < 0 && lv_x >= autoD83C22D4_ae) ) ; lv_x += autoD83C22D4_ai ) {
            auto6ECACF88_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto6ECACF88_ai >= 0 && lv_y <= auto6ECACF88_ae) || (auto6ECACF88_ai < 0 && lv_y >= auto6ECACF88_ae) ) ; lv_y += auto6ECACF88_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        auto81C75592_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto81C75592_u = UnitGroupCount(auto81C75592_g, c_unitCountAll);
        for (;; auto81C75592_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto81C75592_g, auto81C75592_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto2C9045F6_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto2C9045F6_ai >= 0 && lv_x <= auto2C9045F6_ae) || (auto2C9045F6_ai < 0 && lv_x >= auto2C9045F6_ae) ) ; lv_x += auto2C9045F6_ai ) {
            auto02608B1F_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto02608B1F_ai >= 0 && lv_y <= auto02608B1F_ae) || (auto02608B1F_ai < 0 && lv_y >= auto02608B1F_ae) ) ; lv_y += auto02608B1F_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    gf_RemoveDirtinRegion(RegionCircle(RegionGetCenter(RegionEntireMap()), 62.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ClockCenter", 0, 0, RegionGetCenter(RegionEntireMap()));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 1.0, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetOpacity(0.8, 0));
    TriggerExecute(gt_GenerateClock, true, false);
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateClockPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoF2DCD871_ae = gv_mapSize;
    const int autoF2DCD871_ai = 4;
    const int auto756A492D_ae = gv_mapSize;
    const int auto756A492D_ai = 4;
    playergroup autoE79C3BE9_g;
    playergroup auto4CE85AD2_g;
    int autoF171D3BC_ae;
    const int autoF171D3BC_ai = 1;
    playergroup auto9DC17200_g;
    playergroup auto5F2D6602_g;

    // Variable Initialization
    lv_spawnDistance = 10;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoF2DCD871_ai >= 0 && lv_x <= autoF2DCD871_ae) || (autoF2DCD871_ai < 0 && lv_x >= autoF2DCD871_ae) ) ; lv_x += autoF2DCD871_ai ) {
            lv_y = 0;
            for ( ; ( (auto756A492D_ai >= 0 && lv_y <= auto756A492D_ae) || (auto756A492D_ai < 0 && lv_y >= auto756A492D_ae) ) ; lv_y += auto756A492D_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoE79C3BE9_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoE79C3BE9_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto4CE85AD2_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto4CE85AD2_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoF171D3BC_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoF171D3BC_ai >= 0 && lv_i <= autoF171D3BC_ae) || (autoF171D3BC_ai < 0 && lv_i >= autoF171D3BC_ae) ) ; lv_i += autoF171D3BC_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto9DC17200_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto9DC17200_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto5F2D6602_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto5F2D6602_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateClockHandLine (int lp_angle) {
    int init_i;

    // Variable Declarations
    unitgroup lv_movedUnits;
    point lv_pointToSpawnWallin;
    unitgroup[46] lv_handUnit;
    unitgroup[46] lv_handModel;
    int lv_hand;

    // Automatic Variable Declarations
    const int autoF06AD787_n = 14;
    int autoF06AD787_i;
    unitgroup autoDC6763C0_g;
    int autoDC6763C0_u;
    unit autoDC6763C0_var;
    const int auto1DC24CB7_n = 14;
    int auto1DC24CB7_i;
    unitgroup auto80BC516A_g;
    int auto80BC516A_u;
    unit auto80BC516A_var;
    unitgroup autoCB21EBAD_g;
    int autoCB21EBAD_u;
    unit autoCB21EBAD_var;

    // Variable Initialization
    lv_movedUnits = UnitGroupEmpty();
    for (init_i = 0; init_i <= 45; init_i += 1) {
        lv_handUnit[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 45; init_i += 1) {
        lv_handModel[init_i] = UnitGroupEmpty();
    }

    // Implementation
    for (autoF06AD787_i = 1; autoF06AD787_i <= autoF06AD787_n; autoF06AD787_i += 1) {
        libNtve_gf_KillModel(gv_clockHandModel[lv_hand]);
        UnitRemove(gv_clockHandUnit[lv_hand]);
        lv_hand = (lv_hand + 1);
    }
    libNtve_gf_KillModel(gv_clockHandModel[14]);
    UnitRemove(gv_clockHandUnit[14]);
    lv_hand = 0;
    lv_pointToSpawnWallin = PointWithOffsetPolar(gv_absoluteCenterpoint, 2.0, lp_angle);
    UnitCreate(1, "ClockHand", 0, 0, lv_pointToSpawnWallin, 0.0);
    libNtve_gf_CreateModelWithPointFacing("ClockHandModel", lv_pointToSpawnWallin);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(lp_angle));
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetPausedAll");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 1.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.8, 0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetVisibility(true));
    gv_clockHandModel[lv_hand] = libNtve_gf_ActorLastCreated();
    gv_clockHandUnit[lv_hand] = UnitLastCreated();
    lv_hand = (lv_hand + 1);
    autoDC6763C0_g = UnitGroup(null, c_playerAny, RegionCircle(lv_pointToSpawnWallin, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC6763C0_u = UnitGroupCount(autoDC6763C0_g, c_unitCountAll);
    for (;; autoDC6763C0_u -= 1) {
        autoDC6763C0_var = UnitGroupUnitFromEnd(autoDC6763C0_g, autoDC6763C0_u);
        if (autoDC6763C0_var == null) { break; }
        if ((UnitGetOwner(autoDC6763C0_var) != 0)) {
            libNtve_gf_MakeUnitUncommandable(autoDC6763C0_var, true);
            UnitIssueOrder(autoDC6763C0_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_pointToSpawnWallin, 5.0, (lp_angle - 90))), c_orderQueueReplace);
            UnitGroupAdd(lv_movedUnits, autoDC6763C0_var);
        }

    }
    for (auto1DC24CB7_i = 1; auto1DC24CB7_i <= auto1DC24CB7_n; auto1DC24CB7_i += 1) {
        lv_pointToSpawnWallin = PointWithOffsetPolar(lv_pointToSpawnWallin, 4.0, lp_angle);
        UnitCreate(1, "ClockHand", 0, 0, lv_pointToSpawnWallin, 0.0);
        libNtve_gf_CreateModelWithPointFacing("ClockHandModel", lv_pointToSpawnWallin);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(lp_angle));
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimSetPausedAll");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 25.10, 0.00), 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.8, 0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetVisibility(true));
        gv_clockHandModel[lv_hand] = libNtve_gf_ActorLastCreated();
        gv_clockHandUnit[lv_hand] = UnitLastCreated();
        lv_hand = (lv_hand + 1);
        auto80BC516A_g = UnitGroup(null, c_playerAny, RegionCircle(lv_pointToSpawnWallin, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto80BC516A_u = UnitGroupCount(auto80BC516A_g, c_unitCountAll);
        for (;; auto80BC516A_u -= 1) {
            auto80BC516A_var = UnitGroupUnitFromEnd(auto80BC516A_g, auto80BC516A_u);
            if (auto80BC516A_var == null) { break; }
            if ((UnitGetOwner(auto80BC516A_var) != 0)) {
                libNtve_gf_MakeUnitUncommandable(auto80BC516A_var, true);
                UnitIssueOrder(auto80BC516A_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_pointToSpawnWallin, 5.0, (lp_angle - 90))), c_orderQueueReplace);
                UnitGroupAdd(lv_movedUnits, auto80BC516A_var);
            }

        }
    }
    Wait(1.0, c_timeGame);
    autoCB21EBAD_g = lv_movedUnits;
    autoCB21EBAD_u = UnitGroupCount(autoCB21EBAD_g, c_unitCountAll);
    for (;; autoCB21EBAD_u -= 1) {
        autoCB21EBAD_var = UnitGroupUnitFromEnd(autoCB21EBAD_g, autoCB21EBAD_u);
        if (autoCB21EBAD_var == null) { break; }
        if ((UnitGetType(autoCB21EBAD_var) == "Wall")) {
            UnitKill(autoCB21EBAD_var);
        }

        libNtve_gf_MakeUnitUncommandable(autoCB21EBAD_var, false);
        UnitGroupRemove(lv_movedUnits, autoCB21EBAD_var);
    }
    lv_hand = 0;
}

void gf_GeneratePizzaTerrain () {
    // Variable Declarations
    region lv_nNE;
    region lv_eNE;
    region lv_eSE;
    region lv_sSE;
    region lv_sSW;
    region lv_wSW;
    region lv_wNW;
    region lv_nNW;
    region lv_mapEdges;
    point lv_pointOfRegiontoadd;
    point lv_pointOfRegiontoaddSW;
    point lv_pointOfRegiontoaddNE;
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_slicesEatenAway;
    int lv_pizzaSize;
    int lv_randomNumber;
    point lv_pointofCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoD5A8C634_n = 1;
    int autoD5A8C634_i;
    const int autoBBB809C8_ae = gv_mapSize;
    const int autoBBB809C8_ai = 1;
    const int autoAD7DC56B_ae = gv_mapSize;
    const int autoAD7DC56B_ai = 1;
    int autoA08EB160_ae;
    const int autoA08EB160_ai = 1;
    const int autoB7F653DD_ae = 5;
    const int autoB7F653DD_ai = 1;
    int autoD54C1D1D_ae;
    const int autoD54C1D1D_ai = 1;
    int autoCFE27282_ae;
    const int autoCFE27282_ai = 1;
    int auto7E3C72D2_ae;
    const int auto7E3C72D2_ai = 1;
    int autoF1274427_ae;
    const int autoF1274427_ai = 1;
    int auto81C39422_ae;
    const int auto81C39422_ai = 1;
    int auto0B31DE0A_ae;
    const int auto0B31DE0A_ai = 1;
    unitgroup autoF05F9ECD_g;
    int autoF05F9ECD_u;
    int auto0248B5AD_ae;
    const int auto0248B5AD_ai = 1;
    int auto65B12CFB_ae;
    const int auto65B12CFB_ai = 1;
    const int auto949F26CB_ae = 152;
    const int auto949F26CB_ai = 1;
    const int auto907AA67A_ae = 152;
    const int auto907AA67A_ai = 1;
    int autoCDB22AC4_n;
    int autoCDB22AC4_i;
    playergroup autoC8E88351_g;
    int autoC8E88351_var;

    // Variable Initialization
    lv_nNE = RegionEmpty();
    lv_eNE = RegionEmpty();
    lv_eSE = RegionEmpty();
    lv_sSE = RegionEmpty();
    lv_sSW = RegionEmpty();
    lv_wSW = RegionEmpty();
    lv_wNW = RegionEmpty();
    lv_nNW = RegionEmpty();
    lv_mapEdges = RegionEmpty();
    lv_pizzaSize = RandomInt(60, 70);
    lv_randomNumber = RandomInt(1, 10);

    // Implementation
    for (autoD5A8C634_i = 1; autoD5A8C634_i <= autoD5A8C634_n; autoD5A8C634_i += 1) {
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        PointSetHeight(gv_clearCircles[0], 0.0);
        lv_x = 0;
        for ( ; ( (autoBBB809C8_ai >= 0 && lv_x <= autoBBB809C8_ae) || (autoBBB809C8_ai < 0 && lv_x >= autoBBB809C8_ae) ) ; lv_x += autoBBB809C8_ai ) {
            lv_y = 0;
            for ( ; ( (autoAD7DC56B_ai >= 0 && lv_y <= autoAD7DC56B_ae) || (autoAD7DC56B_ai < 0 && lv_y >= autoAD7DC56B_ae) ) ; lv_y += autoAD7DC56B_ai ) {
                autoA08EB160_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (autoA08EB160_ai >= 0 && lv_i <= autoA08EB160_ae) || (autoA08EB160_ai < 0 && lv_i >= autoA08EB160_ae) ) ; lv_i += autoA08EB160_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (autoB7F653DD_ai >= 0 && lv_i <= autoB7F653DD_ae) || (autoB7F653DD_ai < 0 && lv_i >= autoB7F653DD_ae) ) ; lv_i += autoB7F653DD_ai ) {
            Wait(0.0, c_timeGame);
            autoD54C1D1D_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoD54C1D1D_ai >= 0 && lv_x <= autoD54C1D1D_ae) || (autoD54C1D1D_ai < 0 && lv_x >= autoD54C1D1D_ae) ) ; lv_x += autoD54C1D1D_ai ) {
                autoCFE27282_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoCFE27282_ai >= 0 && lv_y <= autoCFE27282_ae) || (autoCFE27282_ai < 0 && lv_y >= autoCFE27282_ae) ) ; lv_y += autoCFE27282_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            auto7E3C72D2_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto7E3C72D2_ai >= 0 && lv_x <= auto7E3C72D2_ae) || (auto7E3C72D2_ai < 0 && lv_x >= auto7E3C72D2_ae) ) ; lv_x += auto7E3C72D2_ai ) {
                autoF1274427_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoF1274427_ai >= 0 && lv_y <= autoF1274427_ae) || (autoF1274427_ai < 0 && lv_y >= autoF1274427_ae) ) ; lv_y += autoF1274427_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        auto81C39422_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto81C39422_ai >= 0 && lv_x <= auto81C39422_ae) || (auto81C39422_ai < 0 && lv_x >= auto81C39422_ae) ) ; lv_x += auto81C39422_ai ) {
            auto0B31DE0A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto0B31DE0A_ai >= 0 && lv_y <= auto0B31DE0A_ae) || (auto0B31DE0A_ai < 0 && lv_y >= auto0B31DE0A_ae) ) ; lv_y += auto0B31DE0A_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        autoF05F9ECD_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF05F9ECD_u = UnitGroupCount(autoF05F9ECD_g, c_unitCountAll);
        for (;; autoF05F9ECD_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoF05F9ECD_g, autoF05F9ECD_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto0248B5AD_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto0248B5AD_ai >= 0 && lv_x <= auto0248B5AD_ae) || (auto0248B5AD_ai < 0 && lv_x >= auto0248B5AD_ae) ) ; lv_x += auto0248B5AD_ai ) {
            auto65B12CFB_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto65B12CFB_ai >= 0 && lv_y <= auto65B12CFB_ae) || (auto65B12CFB_ai < 0 && lv_y >= auto65B12CFB_ae) ) ; lv_y += auto65B12CFB_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    lv_forEachX = 0;
    for ( ; ( (auto949F26CB_ai >= 0 && lv_forEachX <= auto949F26CB_ae) || (auto949F26CB_ai < 0 && lv_forEachX >= auto949F26CB_ae) ) ; lv_forEachX += auto949F26CB_ai ) {
        lv_forEachY = 0;
        for ( ; ( (auto907AA67A_ai >= 0 && lv_forEachY <= auto907AA67A_ae) || (auto907AA67A_ai < 0 && lv_forEachY >= auto907AA67A_ae) ) ; lv_forEachY += auto907AA67A_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(5), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(9), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_nNE, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(4), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(10), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_eNE, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(7), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(11), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_eSE, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(6), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(9), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_sSE, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(4), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(8), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_sSW, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(5), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(11), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_wSW, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(6), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(10), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_wNW, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(7), Point(lv_forEachX, lv_forEachY)) == true) && (RegionContainsPoint(RegionFromId(8), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_nNW, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

            if (((!((RegionContainsPoint(RegionCircle(gv_absoluteCenterpoint, lv_pizzaSize), Point(lv_forEachX, lv_forEachY)) == true))) && (RegionContainsPoint(RegionEntireMap(), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_mapEdges, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    PingDestroyAll();
    if ((lv_randomNumber <= 2)) {
        lv_slicesEatenAway = RandomInt(2, 3);
    }
    else if ((lv_randomNumber >= 7)) {
        lv_slicesEatenAway = RandomInt(5, 6);
    }
    else if (((lv_randomNumber > 2) && (lv_randomNumber < 7))) {
        lv_slicesEatenAway = RandomInt(3, 4);
    }
    autoCDB22AC4_n = lv_slicesEatenAway;
    for (autoCDB22AC4_i = 1; autoCDB22AC4_i <= autoCDB22AC4_n; autoCDB22AC4_i += 1) {
        lv_randomNumber = RandomInt(1, 8);
        if ((lv_randomNumber == 1)) {
            gf_RemoveDirtinRegion(lv_nNE);
        }
        else if ((lv_randomNumber == 2)) {
            gf_RemoveDirtinRegion(lv_eNE);
        }
        else if ((lv_randomNumber == 3)) {
            gf_RemoveDirtinRegion(lv_eSE);
        }
        else if ((lv_randomNumber == 4)) {
            gf_RemoveDirtinRegion(lv_sSE);
        }
        else if ((lv_randomNumber == 5)) {
            gf_RemoveDirtinRegion(lv_sSW);
        }
        else if ((lv_randomNumber == 6)) {
            gf_RemoveDirtinRegion(lv_wSW);
        }
        else if ((lv_randomNumber == 7)) {
            gf_RemoveDirtinRegion(lv_wNW);
        }
        else if ((lv_randomNumber == 8)) {
            gf_RemoveDirtinRegion(lv_nNW);
        }
    }
    lv_randomNumber = RandomInt(0, 1);
    if ((lv_randomNumber == 1)) {
        gf_RemoveDirtinRegion(lv_mapEdges);
        autoC8E88351_g = PlayerGroupActive();
        autoC8E88351_var = -1;
        while (true) {
            autoC8E88351_var = PlayerGroupNextPlayer(autoC8E88351_g, autoC8E88351_var);
            if (autoC8E88351_var < 0) { break; }
            VisRevealArea(autoC8E88351_var, lv_mapEdges, 0.1, true);
        }
    }

    gf_RemoveDirtinRegion(RegionCircle(gv_absoluteCenterpoint, 3.0));
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GeneratePizzaPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto0098CCDB_ae = gv_mapSize;
    const int auto0098CCDB_ai = 4;
    const int auto948CEEE7_ae = gv_mapSize;
    const int auto948CEEE7_ai = 4;
    playergroup auto5B99E056_g;
    playergroup auto4F27DADF_g;
    int auto5F78596B_ae;
    const int auto5F78596B_ai = 1;
    playergroup autoC89AF5C9_g;
    playergroup auto9B3AAAE0_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto0098CCDB_ai >= 0 && lv_x <= auto0098CCDB_ae) || (auto0098CCDB_ai < 0 && lv_x >= auto0098CCDB_ae) ) ; lv_x += auto0098CCDB_ai ) {
            lv_y = 0;
            for ( ; ( (auto948CEEE7_ai >= 0 && lv_y <= auto948CEEE7_ae) || (auto948CEEE7_ai < 0 && lv_y >= auto948CEEE7_ae) ) ; lv_y += auto948CEEE7_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto5B99E056_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto5B99E056_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto4F27DADF_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto4F27DADF_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto5F78596B_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto5F78596B_ai >= 0 && lv_i <= auto5F78596B_ae) || (auto5F78596B_ai < 0 && lv_i >= auto5F78596B_ae) ) ; lv_i += auto5F78596B_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoC89AF5C9_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoC89AF5C9_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto9B3AAAE0_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto9B3AAAE0_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateRadioactiveTerrain () {
    // Variable Declarations
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint2;
    point lv_pointofCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    point lv_pointOfRegiontoadd;
    int lv_distance;
    int lv_size;
    int lv_angle;
    int lv_originalAngle;

    // Automatic Variable Declarations
    const int auto07E4DF42_n = 1;
    int auto07E4DF42_i;
    const int auto60D85E17_ae = 15;
    const int auto60D85E17_ai = 1;
    const int auto366A74A7_ae = 20;
    const int auto366A74A7_ai = 1;
    int autoE0F586D2_ae;
    const int autoE0F586D2_ai = 1;
    const int autoD7B6E966_ae = gv_mapSize;
    const int autoD7B6E966_ai = 1;
    const int auto236FA1F1_ae = gv_mapSize;
    const int auto236FA1F1_ai = 1;
    int autoF0360A35_ae;
    const int autoF0360A35_ai = 1;
    const int auto359442E4_ae = 6;
    const int auto359442E4_ai = 1;
    int autoC783A3FE_ae;
    const int autoC783A3FE_ai = 1;
    int autoAC87059A_ae;
    const int autoAC87059A_ai = 1;
    int autoCFF9A090_ae;
    const int autoCFF9A090_ai = 1;
    int auto71EF9523_ae;
    const int auto71EF9523_ai = 1;
    const int autoEBE753F7_ae = gv_mapSize;
    const int autoEBE753F7_ai = 1;
    const int auto8684C475_ae = gv_mapSize;
    const int auto8684C475_ai = 1;
    int autoE3DA49A9_ae;
    const int autoE3DA49A9_ai = 1;
    int auto12BA125E_ae;
    const int auto12BA125E_ai = 1;
    unitgroup autoC0A54E09_g;
    int autoC0A54E09_u;
    int autoC4D4F63E_ae;
    const int autoC4D4F63E_ai = 1;
    int autoEE4B4FB7_ae;
    const int autoEE4B4FB7_ai = 1;
    const int auto9350D671_n = 1;
    int auto9350D671_i;
    const int autoF51FE63B_n = 20;
    int autoF51FE63B_i;
    playergroup auto35A37D13_g;
    int auto35A37D13_var;
    const int auto55EB383A_n = 20;
    int auto55EB383A_i;
    playergroup auto124C418A_g;
    int auto124C418A_var;
    playergroup auto1E7328BC_g;
    int auto1E7328BC_var;
    const int auto7E82DF7B_n = 1;
    int auto7E82DF7B_i;
    const int autoF5A9550B_n = 20;
    int autoF5A9550B_i;
    playergroup autoB0C94B19_g;
    int autoB0C94B19_var;
    const int auto595E8B2E_n = 20;
    int auto595E8B2E_i;
    playergroup autoCBBA5860_g;
    int autoCBBA5860_var;
    playergroup auto921C5EE9_g;
    int auto921C5EE9_var;
    const int auto3920A658_n = 1;
    int auto3920A658_i;
    const int auto143AB26A_n = 20;
    int auto143AB26A_i;
    playergroup auto08EE22BD_g;
    int auto08EE22BD_var;
    const int autoB172F332_n = 20;
    int autoB172F332_i;
    playergroup auto016AA4CC_g;
    int auto016AA4CC_var;
    playergroup autoB29CDFEA_g;
    int autoB29CDFEA_var;
    const int auto09DA455D_n = 1;
    int auto09DA455D_i;
    const int auto6BDA5EE2_n = 60;
    int auto6BDA5EE2_i;
    playergroup auto05A59545_g;
    int auto05A59545_var;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;
    lv_distance = 25;
    lv_size = 10;
    lv_angle = RandomInt(1, 360);
    lv_originalAngle = 90;

    // Implementation
    for (auto07E4DF42_i = 1; auto07E4DF42_i <= auto07E4DF42_n; auto07E4DF42_i += 1) {
        gv_clearCircleCount = 60;
        gv_usingInvertedMapLayout = true;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        gv_clearCircleCount = 36;
        gv_clearCircles[0] = lv_dirtMapCenterPoint;
        PointSetHeight(gv_clearCircles[0], 35.0);
        lv_i = 1;
        for ( ; ( (auto60D85E17_ai >= 0 && lv_i <= auto60D85E17_ae) || (auto60D85E17_ai < 0 && lv_i >= auto60D85E17_ae) ) ; lv_i += auto60D85E17_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 5.0, 270.0);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.4), (lv_circleSizeMax * 0.5)));
        }
        lv_i = 16;
        for ( ; ( (auto366A74A7_ai >= 0 && lv_i <= auto366A74A7_ae) || (auto366A74A7_ai < 0 && lv_i >= auto366A74A7_ae) ) ; lv_i += auto366A74A7_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 5.0, libNtve_gf_RandomAngle());
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 0.7), (lv_circleSizeMax * 0.9)));
        }
        autoE0F586D2_ae = gv_clearCircleCount;
        lv_i = 21;
        for ( ; ( (autoE0F586D2_ai >= 0 && lv_i <= autoE0F586D2_ae) || (autoE0F586D2_ai < 0 && lv_i >= autoE0F586D2_ae) ) ; lv_i += autoE0F586D2_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 5.0, libNtve_gf_RandomAngle());
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.0), (lv_circleSizeMax * 1.2)));
        }
        lv_x = 0;
        for ( ; ( (autoD7B6E966_ai >= 0 && lv_x <= autoD7B6E966_ae) || (autoD7B6E966_ai < 0 && lv_x >= autoD7B6E966_ae) ) ; lv_x += autoD7B6E966_ai ) {
            lv_y = 0;
            for ( ; ( (auto236FA1F1_ai >= 0 && lv_y <= auto236FA1F1_ae) || (auto236FA1F1_ai < 0 && lv_y >= auto236FA1F1_ae) ) ; lv_y += auto236FA1F1_ai ) {
                autoF0360A35_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (autoF0360A35_ai >= 0 && lv_i <= autoF0360A35_ae) || (autoF0360A35_ai < 0 && lv_i >= autoF0360A35_ae) ) ; lv_i += autoF0360A35_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (auto359442E4_ai >= 0 && lv_i <= auto359442E4_ae) || (auto359442E4_ai < 0 && lv_i >= auto359442E4_ae) ) ; lv_i += auto359442E4_ai ) {
            Wait(0.0, c_timeGame);
            autoC783A3FE_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoC783A3FE_ai >= 0 && lv_x <= autoC783A3FE_ae) || (autoC783A3FE_ai < 0 && lv_x >= autoC783A3FE_ae) ) ; lv_x += autoC783A3FE_ai ) {
                autoAC87059A_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoAC87059A_ai >= 0 && lv_y <= autoAC87059A_ae) || (autoAC87059A_ai < 0 && lv_y >= autoAC87059A_ae) ) ; lv_y += autoAC87059A_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            autoCFF9A090_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoCFF9A090_ai >= 0 && lv_x <= autoCFF9A090_ae) || (autoCFF9A090_ai < 0 && lv_x >= autoCFF9A090_ae) ) ; lv_x += autoCFF9A090_ai ) {
                auto71EF9523_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto71EF9523_ai >= 0 && lv_y <= auto71EF9523_ae) || (auto71EF9523_ai < 0 && lv_y >= auto71EF9523_ae) ) ; lv_y += auto71EF9523_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_x = 0;
        for ( ; ( (autoEBE753F7_ai >= 0 && lv_x <= autoEBE753F7_ae) || (autoEBE753F7_ai < 0 && lv_x >= autoEBE753F7_ae) ) ; lv_x += autoEBE753F7_ai ) {
            lv_y = 0;
            for ( ; ( (auto8684C475_ai >= 0 && lv_y <= auto8684C475_ae) || (auto8684C475_ai < 0 && lv_y >= auto8684C475_ae) ) ; lv_y += auto8684C475_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                    gv_dirtMap[lv_x][lv_y] = 1;
                }
                else {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }
            }
        }
        autoE3DA49A9_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoE3DA49A9_ai >= 0 && lv_x <= autoE3DA49A9_ae) || (autoE3DA49A9_ai < 0 && lv_x >= autoE3DA49A9_ae) ) ; lv_x += autoE3DA49A9_ai ) {
            auto12BA125E_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto12BA125E_ai >= 0 && lv_y <= auto12BA125E_ae) || (auto12BA125E_ai < 0 && lv_y >= auto12BA125E_ae) ) ; lv_y += auto12BA125E_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        autoC0A54E09_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC0A54E09_u = UnitGroupCount(autoC0A54E09_g, c_unitCountAll);
        for (;; autoC0A54E09_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoC0A54E09_g, autoC0A54E09_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        autoC4D4F63E_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoC4D4F63E_ai >= 0 && lv_x <= autoC4D4F63E_ae) || (autoC4D4F63E_ai < 0 && lv_x >= autoC4D4F63E_ae) ) ; lv_x += autoC4D4F63E_ai ) {
            autoEE4B4FB7_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoEE4B4FB7_ai >= 0 && lv_y <= autoEE4B4FB7_ae) || (autoEE4B4FB7_ai < 0 && lv_y >= autoEE4B4FB7_ae) ) ; lv_y += autoEE4B4FB7_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    for (auto9350D671_i = 1; auto9350D671_i <= auto9350D671_n; auto9350D671_i += 1) {
        lv_distance = 25;
        lv_size = 10;
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        for (autoF51FE63B_i = 1; autoF51FE63B_i <= autoF51FE63B_n; autoF51FE63B_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(lv_pointOfRegiontoadd, 3.0, (lv_angle + 30));
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            auto35A37D13_g = PlayerGroupActive();
            auto35A37D13_var = -1;
            while (true) {
                auto35A37D13_var = PlayerGroupNextPlayer(auto35A37D13_g, auto35A37D13_var);
                if (auto35A37D13_var < 0) { break; }
                VisRevealArea(auto35A37D13_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
        }
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        for (auto55EB383A_i = 1; auto55EB383A_i <= auto55EB383A_n; auto55EB383A_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(lv_pointOfRegiontoadd, 3.0, (lv_angle - 30));
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            auto124C418A_g = PlayerGroupActive();
            auto124C418A_var = -1;
            while (true) {
                auto124C418A_var = PlayerGroupNextPlayer(auto124C418A_g, auto124C418A_var);
                if (auto124C418A_var < 0) { break; }
                VisRevealArea(auto124C418A_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
        }
        lv_size = 20;
        lv_distance = 55;
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
        auto1E7328BC_g = PlayerGroupActive();
        auto1E7328BC_var = -1;
        while (true) {
            auto1E7328BC_var = PlayerGroupNextPlayer(auto1E7328BC_g, auto1E7328BC_var);
            if (auto1E7328BC_var < 0) { break; }
            VisRevealArea(auto1E7328BC_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
        }
        Wait(1.0, c_timeGame);
    }
    for (auto7E82DF7B_i = 1; auto7E82DF7B_i <= auto7E82DF7B_n; auto7E82DF7B_i += 1) {
        lv_angle = (lv_angle + 120);
        lv_distance = 25;
        lv_size = 10;
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        for (autoF5A9550B_i = 1; autoF5A9550B_i <= autoF5A9550B_n; autoF5A9550B_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(lv_pointOfRegiontoadd, 3.0, (lv_angle + 30));
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            autoB0C94B19_g = PlayerGroupActive();
            autoB0C94B19_var = -1;
            while (true) {
                autoB0C94B19_var = PlayerGroupNextPlayer(autoB0C94B19_g, autoB0C94B19_var);
                if (autoB0C94B19_var < 0) { break; }
                VisRevealArea(autoB0C94B19_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
        }
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        for (auto595E8B2E_i = 1; auto595E8B2E_i <= auto595E8B2E_n; auto595E8B2E_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(lv_pointOfRegiontoadd, 3.0, (lv_angle - 30));
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            autoCBBA5860_g = PlayerGroupActive();
            autoCBBA5860_var = -1;
            while (true) {
                autoCBBA5860_var = PlayerGroupNextPlayer(autoCBBA5860_g, autoCBBA5860_var);
                if (autoCBBA5860_var < 0) { break; }
                VisRevealArea(autoCBBA5860_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
        }
        lv_size = 20;
        lv_distance = 55;
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
        auto921C5EE9_g = PlayerGroupActive();
        auto921C5EE9_var = -1;
        while (true) {
            auto921C5EE9_var = PlayerGroupNextPlayer(auto921C5EE9_g, auto921C5EE9_var);
            if (auto921C5EE9_var < 0) { break; }
            VisRevealArea(auto921C5EE9_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
        }
        Wait(1.0, c_timeGame);
    }
    for (auto3920A658_i = 1; auto3920A658_i <= auto3920A658_n; auto3920A658_i += 1) {
        lv_angle = (lv_angle + 120);
        lv_distance = 25;
        lv_size = 10;
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        for (auto143AB26A_i = 1; auto143AB26A_i <= auto143AB26A_n; auto143AB26A_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(lv_pointOfRegiontoadd, 3.0, (lv_angle + 30));
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            auto08EE22BD_g = PlayerGroupActive();
            auto08EE22BD_var = -1;
            while (true) {
                auto08EE22BD_var = PlayerGroupNextPlayer(auto08EE22BD_g, auto08EE22BD_var);
                if (auto08EE22BD_var < 0) { break; }
                VisRevealArea(auto08EE22BD_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
        }
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        for (autoB172F332_i = 1; autoB172F332_i <= autoB172F332_n; autoB172F332_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(lv_pointOfRegiontoadd, 3.0, (lv_angle - 30));
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            auto016AA4CC_g = PlayerGroupActive();
            auto016AA4CC_var = -1;
            while (true) {
                auto016AA4CC_var = PlayerGroupNextPlayer(auto016AA4CC_g, auto016AA4CC_var);
                if (auto016AA4CC_var < 0) { break; }
                VisRevealArea(auto016AA4CC_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
        }
        lv_size = 20;
        lv_distance = 55;
        lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
        gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
        autoB29CDFEA_g = PlayerGroupActive();
        autoB29CDFEA_var = -1;
        while (true) {
            autoB29CDFEA_var = PlayerGroupNextPlayer(autoB29CDFEA_g, autoB29CDFEA_var);
            if (autoB29CDFEA_var < 0) { break; }
            VisRevealArea(autoB29CDFEA_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
        }
        Wait(1.0, c_timeGame);
    }
    for (auto09DA455D_i = 1; auto09DA455D_i <= auto09DA455D_n; auto09DA455D_i += 1) {
        lv_angle = 90;
        lv_distance = 20;
        lv_size = 5;
        for (auto6BDA5EE2_i = 1; auto6BDA5EE2_i <= auto6BDA5EE2_n; auto6BDA5EE2_i += 1) {
            lv_pointOfRegiontoadd = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distance, lv_angle);
            gf_RemoveDirtinRegion(RegionCircle(lv_pointOfRegiontoadd, lv_size));
            auto05A59545_g = PlayerGroupActive();
            auto05A59545_var = -1;
            while (true) {
                auto05A59545_var = PlayerGroupNextPlayer(auto05A59545_g, auto05A59545_var);
                if (auto05A59545_var < 0) { break; }
                VisRevealArea(auto05A59545_var, RegionCircle(lv_pointOfRegiontoadd, (lv_size + 1)), 0.1, false);
            }
            lv_angle = (lv_angle + 6);
        }
        Wait(1.0, c_timeGame);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateRadioactivePlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto71DE4E13_ae = gv_mapSize;
    const int auto71DE4E13_ai = 4;
    const int auto2236248A_ae = gv_mapSize;
    const int auto2236248A_ai = 4;
    playergroup auto2126FDC8_g;
    playergroup autoB229B650_g;
    int auto50D4325F_ae;
    const int auto50D4325F_ai = 1;
    playergroup auto9DEF0507_g;
    playergroup autoA0BA47E9_g;

    // Variable Initialization
    lv_spawnDistance = 20;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto71DE4E13_ai >= 0 && lv_x <= auto71DE4E13_ae) || (auto71DE4E13_ai < 0 && lv_x >= auto71DE4E13_ae) ) ; lv_x += auto71DE4E13_ai ) {
            lv_y = 0;
            for ( ; ( (auto2236248A_ai >= 0 && lv_y <= auto2236248A_ae) || (auto2236248A_ai < 0 && lv_y >= auto2236248A_ae) ) ; lv_y += auto2236248A_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto2126FDC8_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto2126FDC8_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoB229B650_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoB229B650_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto50D4325F_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto50D4325F_ai >= 0 && lv_i <= auto50D4325F_ae) || (auto50D4325F_ai < 0 && lv_i >= auto50D4325F_ae) ) ; lv_i += auto50D4325F_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto9DEF0507_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto9DEF0507_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoA0BA47E9_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA0BA47E9_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateStripesTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;
    region lv_stipesRegion;
    region lv_revealRegion;
    int lv_xRemoval;
    int lv_yRemoval;
    point lv_blockadePoint;

    // Automatic Variable Declarations
    const int auto6986C89C_ae = gv_mapSize;
    const int auto6986C89C_ai = 1;
    const int auto60887709_ae = gv_mapSize;
    const int auto60887709_ai = 1;
    int auto8B3E1CA7_ae;
    const int auto8B3E1CA7_ai = 1;
    const int auto82D2EB15_ae = 5;
    const int auto82D2EB15_ai = 1;
    int auto2E158BD2_ae;
    const int auto2E158BD2_ai = 1;
    int auto97B6A338_ae;
    const int auto97B6A338_ai = 1;
    int auto015575EB_ae;
    const int auto015575EB_ai = 1;
    int auto2B2A0CDA_ae;
    const int auto2B2A0CDA_ai = 1;
    int auto69D36C69_ae;
    const int auto69D36C69_ai = 1;
    int autoA83376FB_ae;
    const int autoA83376FB_ai = 1;
    unitgroup autoFE1E6FDF_g;
    int autoFE1E6FDF_u;
    int autoD3E2D901_ae;
    const int autoD3E2D901_ai = 1;
    int auto5C1116F4_ae;
    const int auto5C1116F4_ai = 1;
    playergroup auto007B9488_g;
    int auto007B9488_var;
    const int auto438E55CE_n = 58;
    int auto438E55CE_i;
    const int autoB729849A_n = 58;
    int autoB729849A_i;
    const int autoA6339226_n = 12;
    int autoA6339226_i;
    playergroup auto46506AB5_g;
    int auto46506AB5_var;
    const int auto9C1AA4A7_n = 12;
    int auto9C1AA4A7_i;
    playergroup auto04B9E2FB_g;
    int auto04B9E2FB_var;
    const int auto83DA4429_n = 58;
    int auto83DA4429_i;
    const int autoEDD6CBE8_n = 58;
    int autoEDD6CBE8_i;
    const int auto7D83088E_n = 12;
    int auto7D83088E_i;
    playergroup auto4D0995B0_g;
    int auto4D0995B0_var;
    const int auto3CF05474_n = 12;
    int auto3CF05474_i;
    playergroup auto708E90E8_g;
    int auto708E90E8_var;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;
    lv_stipesRegion = RegionEmpty();
    lv_revealRegion = RegionEmpty();

    // Implementation
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = PointWithOffset(lv_dirtMapCenterPoint, 0.0, 0.0);
    PointSetHeight(gv_clearCircles[0], 2.0);
    lv_x = 0;
    for ( ; ( (auto6986C89C_ai >= 0 && lv_x <= auto6986C89C_ae) || (auto6986C89C_ai < 0 && lv_x >= auto6986C89C_ae) ) ; lv_x += auto6986C89C_ai ) {
        lv_y = 0;
        for ( ; ( (auto60887709_ai >= 0 && lv_y <= auto60887709_ae) || (auto60887709_ai < 0 && lv_y >= auto60887709_ae) ) ; lv_y += auto60887709_ai ) {
            auto8B3E1CA7_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto8B3E1CA7_ai >= 0 && lv_i <= auto8B3E1CA7_ae) || (auto8B3E1CA7_ai < 0 && lv_i >= auto8B3E1CA7_ae) ) ; lv_i += auto8B3E1CA7_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto82D2EB15_ai >= 0 && lv_i <= auto82D2EB15_ae) || (auto82D2EB15_ai < 0 && lv_i >= auto82D2EB15_ae) ) ; lv_i += auto82D2EB15_ai ) {
        Wait(0.0, c_timeGame);
        auto2E158BD2_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto2E158BD2_ai >= 0 && lv_x <= auto2E158BD2_ae) || (auto2E158BD2_ai < 0 && lv_x >= auto2E158BD2_ae) ) ; lv_x += auto2E158BD2_ai ) {
            auto97B6A338_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto97B6A338_ai >= 0 && lv_y <= auto97B6A338_ae) || (auto97B6A338_ai < 0 && lv_y >= auto97B6A338_ae) ) ; lv_y += auto97B6A338_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto015575EB_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto015575EB_ai >= 0 && lv_x <= auto015575EB_ae) || (auto015575EB_ai < 0 && lv_x >= auto015575EB_ae) ) ; lv_x += auto015575EB_ai ) {
            auto2B2A0CDA_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto2B2A0CDA_ai >= 0 && lv_y <= auto2B2A0CDA_ae) || (auto2B2A0CDA_ai < 0 && lv_y >= auto2B2A0CDA_ae) ) ; lv_y += auto2B2A0CDA_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto69D36C69_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto69D36C69_ai >= 0 && lv_x <= auto69D36C69_ae) || (auto69D36C69_ai < 0 && lv_x >= auto69D36C69_ae) ) ; lv_x += auto69D36C69_ai ) {
        autoA83376FB_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoA83376FB_ai >= 0 && lv_y <= autoA83376FB_ae) || (autoA83376FB_ai < 0 && lv_y >= autoA83376FB_ae) ) ; lv_y += autoA83376FB_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoFE1E6FDF_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFE1E6FDF_u = UnitGroupCount(autoFE1E6FDF_g, c_unitCountAll);
    for (;; autoFE1E6FDF_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoFE1E6FDF_g, autoFE1E6FDF_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoD3E2D901_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoD3E2D901_ai >= 0 && lv_x <= autoD3E2D901_ae) || (autoD3E2D901_ai < 0 && lv_x >= autoD3E2D901_ae) ) ; lv_x += autoD3E2D901_ai ) {
        auto5C1116F4_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto5C1116F4_ai >= 0 && lv_y <= auto5C1116F4_ae) || (auto5C1116F4_ai < 0 && lv_y >= auto5C1116F4_ae) ) ; lv_y += auto5C1116F4_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    if ((gv_sidewaysStripes == 0)) {
        RegionAddRect(lv_stipesRegion, true, 70.0, 0.0, 86.0, 152.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 0.0, 152.0, 16.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 32.0, 152.0, 44.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 56.0, 152.0, 68.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 80.0, 152.0, 92.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 104.0, 152.0, 120.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 136.0, 152.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 68.0, 0.0, 88.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 0.0, 152.0, 18.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 30.0, 152.0, 46.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 54.0, 152.0, 70.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 78.0, 152.0, 94.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 102.0, 152.0, 122.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 134.0, 152.0, 152.0);
    }
    else {
        RegionAddRect(lv_stipesRegion, true, 0.0, 70.0, 152.0, 86.0);
        RegionAddRect(lv_stipesRegion, true, 0.0, 0.0, 16.0, 152.0);
        RegionAddRect(lv_stipesRegion, true, 32.0, 0.0, 44.0, 152.0);
        RegionAddRect(lv_stipesRegion, true, 56.0, 0.0, 68.0, 152.0);
        RegionAddRect(lv_stipesRegion, true, 80.0, 0.0, 92.0, 152.0);
        RegionAddRect(lv_stipesRegion, true, 104.0, 0.0, 120.0, 152.0);
        RegionAddRect(lv_stipesRegion, true, 136.0, 0.0, 152.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 68.0, 152.0, 88.0);
        RegionAddRect(lv_revealRegion, true, 0.0, 0.0, 18.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 30.0, 0.0, 46.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 54.0, 0.0, 70.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 78.0, 0.0, 94.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 102.0, 0.0, 122.0, 152.0);
        RegionAddRect(lv_revealRegion, true, 134.0, 0.0, 152.0, 152.0);
    }
    auto007B9488_g = PlayerGroupActive();
    auto007B9488_var = -1;
    while (true) {
        auto007B9488_var = PlayerGroupNextPlayer(auto007B9488_g, auto007B9488_var);
        if (auto007B9488_var < 0) { break; }
        VisRevealArea(auto007B9488_var, lv_revealRegion, 4.0, false);
    }
    gf_RemoveDirtinRegion(lv_stipesRegion);
    if ((gv_sidewaysStripes == 0)) {
        lv_blockadePoint = Point(70.0, 18.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        for (auto83DA4429_i = 1; auto83DA4429_i <= auto83DA4429_n; auto83DA4429_i += 1) {
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 0.0, 2.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        }
        lv_blockadePoint = Point(86.0, 18.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        for (autoEDD6CBE8_i = 1; autoEDD6CBE8_i <= autoEDD6CBE8_n; autoEDD6CBE8_i += 1) {
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 0.0, 2.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        }
        lv_blockadePoint = Point(86.0, 21.0);
        for (auto7D83088E_i = 1; auto7D83088E_i <= auto7D83088E_n; auto7D83088E_i += 1) {
            libNtve_gf_CreateModelAtPoint("LogBlockade", lv_blockadePoint);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(90.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetVisibility(true));
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 0.0, 10.0);
            auto4D0995B0_g = PlayerGroupActive();
            auto4D0995B0_var = -1;
            while (true) {
                auto4D0995B0_var = PlayerGroupNextPlayer(auto4D0995B0_g, auto4D0995B0_var);
                if (auto4D0995B0_var < 0) { break; }
                VisRevealArea(auto4D0995B0_var, RegionCircle(lv_blockadePoint, 0.5), 0.0, true);
            }
        }
        lv_blockadePoint = Point(70.0, 21.0);
        for (auto3CF05474_i = 1; auto3CF05474_i <= auto3CF05474_n; auto3CF05474_i += 1) {
            libNtve_gf_CreateModelAtPoint("LogBlockade", lv_blockadePoint);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(90.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetVisibility(true));
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 0.0, 10.0);
            auto708E90E8_g = PlayerGroupActive();
            auto708E90E8_var = -1;
            while (true) {
                auto708E90E8_var = PlayerGroupNextPlayer(auto708E90E8_g, auto708E90E8_var);
                if (auto708E90E8_var < 0) { break; }
                VisRevealArea(auto708E90E8_var, RegionCircle(lv_blockadePoint, 0.5), 0.0, true);
            }
        }
    }
    else {
        lv_blockadePoint = Point(18.0, 70.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        for (auto438E55CE_i = 1; auto438E55CE_i <= auto438E55CE_n; auto438E55CE_i += 1) {
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 2.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        }
        lv_blockadePoint = Point(18.0, 86.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        for (autoB729849A_i = 1; autoB729849A_i <= autoB729849A_n; autoB729849A_i += 1) {
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 2.0, 0.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_blockadePoint);
        }
        lv_blockadePoint = Point(21.0, 86.0);
        for (autoA6339226_i = 1; autoA6339226_i <= autoA6339226_n; autoA6339226_i += 1) {
            libNtve_gf_CreateModelAtPoint("LogBlockade", lv_blockadePoint);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(0.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetVisibility(true));
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 10.0, 0.0);
            auto46506AB5_g = PlayerGroupActive();
            auto46506AB5_var = -1;
            while (true) {
                auto46506AB5_var = PlayerGroupNextPlayer(auto46506AB5_g, auto46506AB5_var);
                if (auto46506AB5_var < 0) { break; }
                VisRevealArea(auto46506AB5_var, RegionCircle(lv_blockadePoint, 0.5), 0.0, true);
            }
        }
        lv_blockadePoint = Point(21.0, 70.0);
        for (auto9C1AA4A7_i = 1; auto9C1AA4A7_i <= auto9C1AA4A7_n; auto9C1AA4A7_i += 1) {
            libNtve_gf_CreateModelAtPoint("LogBlockade", lv_blockadePoint);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(0.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetVisibility(true));
            lv_blockadePoint = PointWithOffset(lv_blockadePoint, 10.0, 0.0);
            auto04B9E2FB_g = PlayerGroupActive();
            auto04B9E2FB_var = -1;
            while (true) {
                auto04B9E2FB_var = PlayerGroupNextPlayer(auto04B9E2FB_g, auto04B9E2FB_var);
                if (auto04B9E2FB_var < 0) { break; }
                VisRevealArea(auto04B9E2FB_var, RegionCircle(lv_blockadePoint, 0.5), 0.0, true);
            }
        }
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateStripesPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;
    int lv_randomNumber;

    // Automatic Variable Declarations
    const int autoCD2DFEB8_ae = gv_mapSize;
    const int autoCD2DFEB8_ai = 4;
    const int autoC4BB38CA_ae = gv_mapSize;
    const int autoC4BB38CA_ai = 4;
    playergroup autoCD0D8A8C_g;
    playergroup auto179CA1A2_g;
    int auto2AE3304C_ae;
    const int auto2AE3304C_ai = 1;
    playergroup autoE49DBBE9_g;
    playergroup autoF6E72D61_g;

    // Variable Initialization
    lv_spawnDistance = 68;
    lv_randomNumber = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoCD2DFEB8_ai >= 0 && lv_x <= autoCD2DFEB8_ae) || (autoCD2DFEB8_ai < 0 && lv_x >= autoCD2DFEB8_ae) ) ; lv_x += autoCD2DFEB8_ai ) {
            lv_y = 0;
            for ( ; ( (autoC4BB38CA_ai >= 0 && lv_y <= autoC4BB38CA_ae) || (autoC4BB38CA_ai < 0 && lv_y >= autoC4BB38CA_ae) ) ; lv_y += autoC4BB38CA_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoCD0D8A8C_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoCD0D8A8C_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto179CA1A2_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto179CA1A2_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto2AE3304C_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto2AE3304C_ai >= 0 && lv_i <= auto2AE3304C_ae) || (auto2AE3304C_ai < 0 && lv_i >= auto2AE3304C_ae) ) ; lv_i += auto2AE3304C_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    if ((gv_sidewaysStripes == 0)) {
        if ((lv_randomNumber == 1)) {
            lv_spawnAngle = 90.0;
        }
        else {
            lv_spawnAngle = 270.0;
        }
    }
    else {
        if ((lv_randomNumber == 1)) {
            lv_spawnAngle = 0.0;
        }
        else {
            lv_spawnAngle = 180.0;
        }
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_randomNumber = RandomInt(1, 4);
        if ((lv_randomNumber == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
        else if ((lv_randomNumber == 2)) {
            lv_spawnDistance = 37;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
        else if ((lv_randomNumber == 3)) {
            lv_spawnDistance = 12;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
        else if ((lv_randomNumber == 4)) {
            lv_spawnDistance = 2;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = 2;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_randomNumber = RandomInt(1, 3);
        if ((lv_randomNumber == 1)) {
            lv_spawnDistance = 2;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle - 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 40.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle - 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 40.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        lv_spawnDistance = 2;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = 2;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoE49DBBE9_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoE49DBBE9_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoF6E72D61_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoF6E72D61_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateHexTerrain () {
    // Variable Declarations
    int lv_xIndex;
    int lv_yIndex;
    region lv_hexTestMap;
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_word;
    string lv_currentString;
    int lv_offsetCordsForLogsMidddle;
    int lv_offsetCordsForCement;
    point lv_pointofCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoF2E9BE49_n = 1;
    int autoF2E9BE49_i;
    const int autoAAC6D5B0_ae = gv_mapSize;
    const int autoAAC6D5B0_ai = 1;
    const int autoAF6650F5_ae = gv_mapSize;
    const int autoAF6650F5_ai = 1;
    int autoAF46B953_ae;
    const int autoAF46B953_ai = 1;
    const int auto056B2484_ae = 5;
    const int auto056B2484_ai = 1;
    int auto1AF98375_ae;
    const int auto1AF98375_ai = 1;
    int autoA447155F_ae;
    const int autoA447155F_ai = 1;
    int autoF1D0F765_ae;
    const int autoF1D0F765_ai = 1;
    int auto5E2513F2_ae;
    const int auto5E2513F2_ai = 1;
    int auto365C66E1_ae;
    const int auto365C66E1_ai = 1;
    int auto502E2F11_ae;
    const int auto502E2F11_ai = 1;
    unitgroup auto7EF00B10_g;
    int auto7EF00B10_u;
    int auto3239B8AA_ae;
    const int auto3239B8AA_ai = 1;
    int autoB4DFB7CD_ae;
    const int autoB4DFB7CD_ai = 1;
    const int auto6A2B035F_ae = 52;
    const int auto6A2B035F_ai = 2;
    const int auto6B33CCA0_ae = 74;
    const int auto6B33CCA0_ai = 1;
    const int auto07C9AFEE_ae = 148;
    const int auto07C9AFEE_ai = 2;
    const int auto8084C035_ae = 74;
    const int auto8084C035_ai = 1;
    const int auto56F1BB21_n = 7;
    int auto56F1BB21_i;
    playergroup auto4F5729ED_g;
    int auto4F5729ED_var;
    const int auto3F6789BB_n = 6;
    int auto3F6789BB_i;
    playergroup auto4C268EAA_g;
    int auto4C268EAA_var;
    const int auto92815AE9_n = 22;
    int auto92815AE9_i;
    const int auto10BFA8B0_n = 23;
    int auto10BFA8B0_i;

    // Variable Initialization
    lv_hexTestMap = RegionEmpty();
    lv_currentString = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";

    // Implementation
    for (autoF2E9BE49_i = 1; autoF2E9BE49_i <= autoF2E9BE49_n; autoF2E9BE49_i += 1) {
        gv_clearCircleCount = 1;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = Point(80.0, 76.0);
        gv_clearCircles[0] = Point(3.0, 38.0);
        gv_clearCircles[1] = Point(74.0, 38.0);
        PointSetHeight(gv_clearCircles[0], 10.0);
        PointSetHeight(gv_clearCircles[1], 10.0);
        lv_x = 0;
        for ( ; ( (autoAAC6D5B0_ai >= 0 && lv_x <= autoAAC6D5B0_ae) || (autoAAC6D5B0_ai < 0 && lv_x >= autoAAC6D5B0_ae) ) ; lv_x += autoAAC6D5B0_ai ) {
            lv_y = 0;
            for ( ; ( (autoAF6650F5_ai >= 0 && lv_y <= autoAF6650F5_ae) || (autoAF6650F5_ai < 0 && lv_y >= autoAF6650F5_ae) ) ; lv_y += autoAF6650F5_ai ) {
                autoAF46B953_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (autoAF46B953_ai >= 0 && lv_i <= autoAF46B953_ae) || (autoAF46B953_ai < 0 && lv_i >= autoAF46B953_ae) ) ; lv_i += autoAF46B953_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (auto056B2484_ai >= 0 && lv_i <= auto056B2484_ae) || (auto056B2484_ai < 0 && lv_i >= auto056B2484_ae) ) ; lv_i += auto056B2484_ai ) {
            Wait(0.0, c_timeGame);
            auto1AF98375_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto1AF98375_ai >= 0 && lv_x <= auto1AF98375_ae) || (auto1AF98375_ai < 0 && lv_x >= auto1AF98375_ae) ) ; lv_x += auto1AF98375_ai ) {
                autoA447155F_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoA447155F_ai >= 0 && lv_y <= autoA447155F_ae) || (autoA447155F_ai < 0 && lv_y >= autoA447155F_ae) ) ; lv_y += autoA447155F_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            autoF1D0F765_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoF1D0F765_ai >= 0 && lv_x <= autoF1D0F765_ae) || (autoF1D0F765_ai < 0 && lv_x >= autoF1D0F765_ae) ) ; lv_x += autoF1D0F765_ai ) {
                auto5E2513F2_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto5E2513F2_ai >= 0 && lv_y <= auto5E2513F2_ae) || (auto5E2513F2_ai < 0 && lv_y >= auto5E2513F2_ae) ) ; lv_y += auto5E2513F2_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        auto365C66E1_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto365C66E1_ai >= 0 && lv_x <= auto365C66E1_ae) || (auto365C66E1_ai < 0 && lv_x >= auto365C66E1_ae) ) ; lv_x += auto365C66E1_ai ) {
            auto502E2F11_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto502E2F11_ai >= 0 && lv_y <= auto502E2F11_ae) || (auto502E2F11_ai < 0 && lv_y >= auto502E2F11_ae) ) ; lv_y += auto502E2F11_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        auto7EF00B10_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7EF00B10_u = UnitGroupCount(auto7EF00B10_g, c_unitCountAll);
        for (;; auto7EF00B10_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto7EF00B10_g, auto7EF00B10_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto3239B8AA_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto3239B8AA_ai >= 0 && lv_x <= auto3239B8AA_ae) || (auto3239B8AA_ai < 0 && lv_x >= auto3239B8AA_ae) ) ; lv_x += auto3239B8AA_ai ) {
            autoB4DFB7CD_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB4DFB7CD_ai >= 0 && lv_y <= autoB4DFB7CD_ae) || (autoB4DFB7CD_ai < 0 && lv_y >= autoB4DFB7CD_ae) ) ; lv_y += autoB4DFB7CD_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    if ((RandomInt(0, 1) == 1)) {
        gv_stringsRegionStrings[0] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[1] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[2] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[3] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[4] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[5] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[6] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[7] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[8] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[9] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[10] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[11] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[12] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[13] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[14] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[15] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[16] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[17] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[18] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[19] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[20] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[21] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[22] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[23] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[24] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[25] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[26] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[27] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[28] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[29] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[30] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[31] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[32] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[33] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[34] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[35] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[36] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[37] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[38] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[39] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[40] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[41] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[42] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[43] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[44] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[45] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[46] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[47] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[48] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[49] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[50] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegionStrings[51] = "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ";
        gv_stringsRegion = gf_ScanRemovalStringsAndReturnThemAsARegion();
        gf_RemoveDirtinRegion(RegionRect(50.0, 72.0, 152.0, 74.0));
        RegionAddRegion(gv_stringsRegion, RegionRect(50.0, 72.0, 152.0, 74.0));
        gf_RemoveDirtinRegion(gv_stringsRegion);
        gf_MakesurenoExternalDirthasCreepUnderit();
        lv_offsetCordsForLogsMidddle = (lv_offsetCordsForLogsMidddle + 1);
        for (auto56F1BB21_i = 1; auto56F1BB21_i <= auto56F1BB21_n; auto56F1BB21_i += 1) {
            lv_offsetCordsForLogsMidddle = (lv_offsetCordsForLogsMidddle + 4);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "4x4InvisibleBlockade", 0, 0, PointWithOffsetPolar(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_offsetCordsForLogsMidddle, 0.0), 3.0, -90.0));
            auto4F5729ED_g = PlayerGroupActive();
            auto4F5729ED_var = -1;
            while (true) {
                auto4F5729ED_var = PlayerGroupNextPlayer(auto4F5729ED_g, auto4F5729ED_var);
                if (auto4F5729ED_var < 0) { break; }
                VisRevealArea(auto4F5729ED_var, gf_Convertpointtosquareregion(PointWithOffsetPolar(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_offsetCordsForLogsMidddle, 0.0), 3.0, -90.0), 0.5), 0.0, true);
            }
        }
        libNtve_gf_CreateModelAtPoint("LogBlockade", PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), 12.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.4, 2.0, 1.0, 0.0));
        libNtve_gf_CreateModelAtPoint("LogBlockade", PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), -12.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.4, 2.0, 1.0, 0.0));
        for (auto3F6789BB_i = 1; auto3F6789BB_i <= auto3F6789BB_n; auto3F6789BB_i += 1) {
            lv_offsetCordsForLogsMidddle = (lv_offsetCordsForLogsMidddle + 4);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "4x4InvisibleBlockade", 0, 0, PointWithOffsetPolar(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_offsetCordsForLogsMidddle, 0.0), 3.0, -90.0));
            auto4C268EAA_g = PlayerGroupActive();
            auto4C268EAA_var = -1;
            while (true) {
                auto4C268EAA_var = PlayerGroupNextPlayer(auto4C268EAA_g, auto4C268EAA_var);
                if (auto4C268EAA_var < 0) { break; }
                VisRevealArea(auto4C268EAA_var, gf_Convertpointtosquareregion(PointWithOffsetPolar(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_offsetCordsForLogsMidddle, 0.0), 3.0, -90.0), 0.5), 0.0, true);
            }
        }
        for (auto92815AE9_i = 1; auto92815AE9_i <= auto92815AE9_n; auto92815AE9_i += 1) {
            lv_pointofCement = PointWithOffset(gv_absoluteCenterpoint, 29.0, -74.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, PointWithOffset(lv_pointofCement, 0.0, lv_offsetCordsForCement));
            lv_offsetCordsForCement = (lv_offsetCordsForCement + 2);
        }
        lv_offsetCordsForCement = (lv_offsetCordsForCement + 58);
        for (auto10BFA8B0_i = 1; auto10BFA8B0_i <= auto10BFA8B0_n; auto10BFA8B0_i += 1) {
            lv_pointofCement = PointWithOffset(gv_absoluteCenterpoint, 29.0, -74.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, PointWithOffset(lv_pointofCement, 0.0, lv_offsetCordsForCement));
            lv_offsetCordsForCement = (lv_offsetCordsForCement + 2);
        }
    }
    else {
        gv_stringsRegionStrings[0] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[1] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[2] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[3] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[4] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[5] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[6] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[7] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[8] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[9] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[10] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[11] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[12] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[13] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[14] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[15] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[16] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[17] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[18] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[19] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[20] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[21] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[22] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[23] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[24] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[25] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[26] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[27] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[28] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[29] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[30] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[31] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[32] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[33] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[34] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[35] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[36] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[37] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[38] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[39] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[40] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[41] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[42] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[43] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[44] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[45] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[46] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[47] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[48] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[49] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[50] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegionStrings[51] = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ";
        gv_stringsRegion = gf_ScanRemovalStringsAndReturnThemAsARegion();
        gv_hexVerMid = true;
        lv_xIndex = 4;
        for ( ; ( (auto6A2B035F_ai >= 0 && lv_xIndex <= auto6A2B035F_ae) || (auto6A2B035F_ai < 0 && lv_xIndex >= auto6A2B035F_ae) ) ; lv_xIndex += auto6A2B035F_ai ) {
            lv_yIndex = 74;
            for ( ; ( (auto6B33CCA0_ai >= 0 && lv_yIndex <= auto6B33CCA0_ae) || (auto6B33CCA0_ai < 0 && lv_yIndex >= auto6B33CCA0_ae) ) ; lv_yIndex += auto6B33CCA0_ai ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, Point(lv_xIndex, lv_yIndex));
            }
        }
        lv_xIndex = 104;
        for ( ; ( (auto07C9AFEE_ai >= 0 && lv_xIndex <= auto07C9AFEE_ae) || (auto07C9AFEE_ai < 0 && lv_xIndex >= auto07C9AFEE_ae) ) ; lv_xIndex += auto07C9AFEE_ai ) {
            lv_yIndex = 74;
            for ( ; ( (auto8084C035_ai >= 0 && lv_yIndex <= auto8084C035_ae) || (auto8084C035_ai < 0 && lv_yIndex >= auto8084C035_ae) ) ; lv_yIndex += auto8084C035_ai ) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, Point(lv_xIndex, lv_yIndex));
            }
        }
        RegionAddRegion(gv_stringsRegion, RegionRect(0.0, 30.0, 10.0, 120.0));
        RegionAddRegion(gv_stringsRegion, RegionRect(76.0, 30.0, 78.0, 110.0));
        RegionAddRegion(gv_stringsRegion, RegionRect(72.0, 74.0, 83.0, 75.0));
        RegionAddRegion(gv_stringsRegion, RegionRect(74.0, 72.0, 80.0, 76.0));
        gf_RemoveDirtinRegion(gv_stringsRegion);
        gf_MakesurenoExternalDirthasCreepUnderit();
    }
}

void gf_GenerateHexPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;
    int lv_randomNumber;

    // Automatic Variable Declarations
    const int autoD0CBED09_ae = gv_mapSize;
    const int autoD0CBED09_ai = 4;
    const int auto94C0BAD6_ae = gv_mapSize;
    const int auto94C0BAD6_ai = 4;
    playergroup auto8307B97E_g;
    playergroup auto8C2EB484_g;
    int auto5BF3E1FC_ae;
    const int auto5BF3E1FC_ai = 1;
    playergroup auto2E9138F9_g;
    playergroup autoB9744099_g;

    // Variable Initialization
    lv_spawnDistance = 2;
    lv_randomNumber = RandomInt(1, 4);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoD0CBED09_ai >= 0 && lv_x <= autoD0CBED09_ae) || (autoD0CBED09_ai < 0 && lv_x >= autoD0CBED09_ae) ) ; lv_x += autoD0CBED09_ai ) {
            lv_y = 0;
            for ( ; ( (auto94C0BAD6_ai >= 0 && lv_y <= auto94C0BAD6_ae) || (auto94C0BAD6_ai < 0 && lv_y >= auto94C0BAD6_ae) ) ; lv_y += auto94C0BAD6_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto8307B97E_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto8307B97E_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto8C2EB484_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto8C2EB484_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto5BF3E1FC_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto5BF3E1FC_ai >= 0 && lv_i <= auto5BF3E1FC_ae) || (auto5BF3E1FC_ai < 0 && lv_i >= auto5BF3E1FC_ae) ) ; lv_i += auto5BF3E1FC_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if ((gv_hexVerMid == false)) {
        if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
            if ((lv_randomNumber == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, 90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, -90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, -90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, 90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, 90.0), 25.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, -90.0), 25.0, 180.0));
            }
            else if ((lv_randomNumber == 4)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, -90.0), 25.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, 90.0), 25.0, 180.0));
            }
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
            if ((lv_randomNumber == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, 90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, -90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, -90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, 90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, 90.0), 25.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, -90.0), 25.0, 180.0));
            }
            else if ((lv_randomNumber == 4)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, -90.0), 25.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, 90.0), 25.0, 180.0));
            }
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
            lv_randomNumber = 4;
            if ((lv_randomNumber == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, 90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 30.0, 90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 30.0, -90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, -90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 2)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, 90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, 90.0), 10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, -90.0), 10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, -90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 3)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 10.0, 90.0), 20.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 10.0, 90.0), 10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 10.0, -90.0), 10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 10.0, -90.0), 20.0, 180.0));
            }
            else if ((lv_randomNumber == 4)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 55.0, 90.0), -10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, 90.0), -10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 45.0, -90.0), -10.0, 180.0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 55.0, -90.0), -10.0, 180.0));
            }
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 140.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 140.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 140.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 140.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
            lv_spawnAngle = (lv_spawnAngle + 20.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 3.0, lv_spawnAngle), 20.0, 180.0));
        }
    }
    else {
        if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 120.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
        else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 60.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        }
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto2E9138F9_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto2E9138F9_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoB9744099_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoB9744099_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateOctagonTerrain () {
    // Variable Declarations
    point lv_pointofPillar;
    int lv_pillarOffset;
    region lv_mapEdges;
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_randomNumber;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto7AA9AE09_n = 1;
    int auto7AA9AE09_i;
    const int auto18105D72_ae = gv_mapSize;
    const int auto18105D72_ai = 1;
    const int auto4D3C746F_ae = gv_mapSize;
    const int auto4D3C746F_ai = 1;
    int auto94A23254_ae;
    const int auto94A23254_ai = 1;
    const int autoF3D60700_ae = 5;
    const int autoF3D60700_ai = 1;
    int auto26BBFC12_ae;
    const int auto26BBFC12_ai = 1;
    int auto1198D8D1_ae;
    const int auto1198D8D1_ai = 1;
    int autoBA3B1755_ae;
    const int autoBA3B1755_ai = 1;
    int auto6EDB1B34_ae;
    const int auto6EDB1B34_ai = 1;
    int auto81E72C03_ae;
    const int auto81E72C03_ai = 1;
    int auto5407D6B3_ae;
    const int auto5407D6B3_ai = 1;
    unitgroup auto2612B991_g;
    int auto2612B991_u;
    int auto96912B7E_ae;
    const int auto96912B7E_ai = 1;
    int autoC5C67497_ae;
    const int autoC5C67497_ai = 1;
    const int auto370349D7_n = 1;
    int auto370349D7_i;
    const int auto6F10B3ED_ae = 152;
    const int auto6F10B3ED_ai = 1;
    const int auto81997482_ae = 152;
    const int auto81997482_ai = 1;
    playergroup auto6B043E6E_g;
    int auto6B043E6E_var;
    const int auto4A2A3E14_n = 1;
    int auto4A2A3E14_i;
    const int autoC5B04AED_n = 23;
    int autoC5B04AED_i;
    playergroup auto25D303A2_g;
    int auto25D303A2_var;
    playergroup auto07D16925_g;
    int auto07D16925_var;
    const int autoCC4FB193_n = 23;
    int autoCC4FB193_i;
    playergroup auto301A9638_g;
    int auto301A9638_var;
    const int autoA5688EFA_n = 23;
    int autoA5688EFA_i;
    playergroup auto32A6C0F5_g;
    int auto32A6C0F5_var;
    const int auto3085C121_n = 24;
    int auto3085C121_i;
    playergroup auto9F5A8A02_g;
    int auto9F5A8A02_var;
    const int auto82C5BDAA_n = 1;
    int auto82C5BDAA_i;
    const int auto6BF3F4F6_n = 14;
    int auto6BF3F4F6_i;
    const int auto6CC6C5FD_n = 14;
    int auto6CC6C5FD_i;
    const int auto9DD015F8_n = 14;
    int auto9DD015F8_i;
    const int auto86B50094_n = 12;
    int auto86B50094_i;
    playergroup auto573D6424_g;
    int auto573D6424_var;

    // Variable Initialization
    lv_mapEdges = RegionEmpty();
    lv_randomNumber = RandomInt(1, 10);

    // Implementation
    for (auto7AA9AE09_i = 1; auto7AA9AE09_i <= auto7AA9AE09_n; auto7AA9AE09_i += 1) {
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        PointSetHeight(gv_clearCircles[0], 0.0);
        lv_x = 0;
        for ( ; ( (auto18105D72_ai >= 0 && lv_x <= auto18105D72_ae) || (auto18105D72_ai < 0 && lv_x >= auto18105D72_ae) ) ; lv_x += auto18105D72_ai ) {
            lv_y = 0;
            for ( ; ( (auto4D3C746F_ai >= 0 && lv_y <= auto4D3C746F_ae) || (auto4D3C746F_ai < 0 && lv_y >= auto4D3C746F_ae) ) ; lv_y += auto4D3C746F_ai ) {
                auto94A23254_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (auto94A23254_ai >= 0 && lv_i <= auto94A23254_ae) || (auto94A23254_ai < 0 && lv_i >= auto94A23254_ae) ) ; lv_i += auto94A23254_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (autoF3D60700_ai >= 0 && lv_i <= autoF3D60700_ae) || (autoF3D60700_ai < 0 && lv_i >= autoF3D60700_ae) ) ; lv_i += autoF3D60700_ai ) {
            Wait(0.0, c_timeGame);
            auto26BBFC12_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto26BBFC12_ai >= 0 && lv_x <= auto26BBFC12_ae) || (auto26BBFC12_ai < 0 && lv_x >= auto26BBFC12_ae) ) ; lv_x += auto26BBFC12_ai ) {
                auto1198D8D1_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto1198D8D1_ai >= 0 && lv_y <= auto1198D8D1_ae) || (auto1198D8D1_ai < 0 && lv_y >= auto1198D8D1_ae) ) ; lv_y += auto1198D8D1_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            autoBA3B1755_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoBA3B1755_ai >= 0 && lv_x <= autoBA3B1755_ae) || (autoBA3B1755_ai < 0 && lv_x >= autoBA3B1755_ae) ) ; lv_x += autoBA3B1755_ai ) {
                auto6EDB1B34_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto6EDB1B34_ai >= 0 && lv_y <= auto6EDB1B34_ae) || (auto6EDB1B34_ai < 0 && lv_y >= auto6EDB1B34_ae) ) ; lv_y += auto6EDB1B34_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        auto81E72C03_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto81E72C03_ai >= 0 && lv_x <= auto81E72C03_ae) || (auto81E72C03_ai < 0 && lv_x >= auto81E72C03_ae) ) ; lv_x += auto81E72C03_ai ) {
            auto5407D6B3_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto5407D6B3_ai >= 0 && lv_y <= auto5407D6B3_ae) || (auto5407D6B3_ai < 0 && lv_y >= auto5407D6B3_ae) ) ; lv_y += auto5407D6B3_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        auto2612B991_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2612B991_u = UnitGroupCount(auto2612B991_g, c_unitCountAll);
        for (;; auto2612B991_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto2612B991_g, auto2612B991_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto96912B7E_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto96912B7E_ai >= 0 && lv_x <= auto96912B7E_ae) || (auto96912B7E_ai < 0 && lv_x >= auto96912B7E_ae) ) ; lv_x += auto96912B7E_ai ) {
            autoC5C67497_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoC5C67497_ai >= 0 && lv_y <= autoC5C67497_ae) || (autoC5C67497_ai < 0 && lv_y >= autoC5C67497_ae) ) ; lv_y += autoC5C67497_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    for (auto370349D7_i = 1; auto370349D7_i <= auto370349D7_n; auto370349D7_i += 1) {
        lv_forEachX = 0;
        for ( ; ( (auto6F10B3ED_ai >= 0 && lv_forEachX <= auto6F10B3ED_ae) || (auto6F10B3ED_ai < 0 && lv_forEachX >= auto6F10B3ED_ae) ) ; lv_forEachX += auto6F10B3ED_ai ) {
            lv_forEachY = 0;
            for ( ; ( (auto81997482_ai >= 0 && lv_forEachY <= auto81997482_ae) || (auto81997482_ai < 0 && lv_forEachY >= auto81997482_ae) ) ; lv_forEachY += auto81997482_ai ) {
                if ((lv_amountScanned != 500)) {
                    lv_amountScanned = (lv_amountScanned + 1);
                }
                else {
                    Wait(0.0001, c_timeGame);
                    lv_amountScanned = 0;
                }
                MinimapPing(PlayerGroupAll(), Point(lv_forEachX, lv_forEachY), 0.1, Color(100.00, 100.00, 0.00));
                if (((RegionContainsPoint(RegionFromId(17), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(19), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(20), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(18), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(14), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(16), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(13), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(15), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(22), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(21), Point(lv_forEachX, lv_forEachY)) == true))) {
                    RegionAddRect(lv_mapEdges, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
                }

            }
        }
        PingDestroyAll();
        lv_randomNumber = RandomInt(0, 1);
        if ((lv_randomNumber == 1)) {
            gf_RemoveDirtinRegion(lv_mapEdges);
            auto6B043E6E_g = PlayerGroupActive();
            auto6B043E6E_var = -1;
            while (true) {
                auto6B043E6E_var = PlayerGroupNextPlayer(auto6B043E6E_g, auto6B043E6E_var);
                if (auto6B043E6E_var < 0) { break; }
                VisRevealArea(auto6B043E6E_var, lv_mapEdges, 0.1, true);
            }
        }

        gf_RemoveDirtinRegion(lv_mapEdges);
        gf_MakesurenoExternalDirthasCreepUnderit();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PillarController", 0, 0, Point(10.0, 10.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        UnitGroupAdd(gv_octaPillarControllersUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PillarController", 0, 0, Point(10.0, 142.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        UnitGroupAdd(gv_octaPillarControllersUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PillarController", 0, 0, Point(142.0, 142.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        UnitGroupAdd(gv_octaPillarControllersUnitGroup, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PillarController", 0, 0, Point(142.0, 10.0));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        UnitGroupAdd(gv_octaPillarControllersUnitGroup, UnitLastCreated());
        TriggerEnable(gt_ChangeOwnerOfOctaPillarController, true);
        TriggerEnable(gt_ChangeOwnerOfOctaPillarControllerBack, true);
        TriggerEnable(gt_LowerOrRisePillers, true);
    }
    for (auto4A2A3E14_i = 1; auto4A2A3E14_i <= auto4A2A3E14_n; auto4A2A3E14_i += 1) {
        lv_pointofPillar = Point(76.0, 30.0);
        for (autoC5B04AED_i = 1; autoC5B04AED_i <= autoC5B04AED_n; autoC5B04AED_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(76.0, 30.0), 0.0, lv_pillarOffset);
            lv_pillarOffset = (lv_pillarOffset + 2);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_pointofPillar);
            auto25D303A2_g = PlayerGroupActive();
            auto25D303A2_var = -1;
            while (true) {
                auto25D303A2_var = PlayerGroupNextPlayer(auto25D303A2_g, auto25D303A2_var);
                if (auto25D303A2_var < 0) { break; }
                VisRevealArea(auto25D303A2_var, RegionCircle(lv_pointofPillar, 1.0), 0.0, false);
            }
            libNtve_gf_CreateModelAtPoint("LOSOctaPillars", UnitGetPosition(UnitLastCreated()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        }
        lv_pointofPillar = PointWithOffset(Point(76.0, 30.0), 0.0, lv_pillarOffset);
        lv_pillarOffset = (lv_pillarOffset + 2);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_pointofPillar);
        auto07D16925_g = PlayerGroupActive();
        auto07D16925_var = -1;
        while (true) {
            auto07D16925_var = PlayerGroupNextPlayer(auto07D16925_g, auto07D16925_var);
            if (auto07D16925_var < 0) { break; }
            VisRevealArea(auto07D16925_var, RegionCircle(UnitGetPosition(UnitLastCreated()), 0.5), 0.0, false);
        }
        libNtve_gf_CreateModelAtPoint("LOSOctaPillars", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.8, 1.8, 1.6, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        for (autoCC4FB193_i = 1; autoCC4FB193_i <= autoCC4FB193_n; autoCC4FB193_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(76.0, 30.0), 0.0, lv_pillarOffset);
            lv_pillarOffset = (lv_pillarOffset + 2);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_pointofPillar);
            auto301A9638_g = PlayerGroupActive();
            auto301A9638_var = -1;
            while (true) {
                auto301A9638_var = PlayerGroupNextPlayer(auto301A9638_g, auto301A9638_var);
                if (auto301A9638_var < 0) { break; }
                VisRevealArea(auto301A9638_var, RegionCircle(lv_pointofPillar, 1.0), 0.0, false);
            }
            libNtve_gf_CreateModelAtPoint("LOSOctaPillars", UnitGetPosition(UnitLastCreated()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        }
        lv_pillarOffset = 0;
        for (autoA5688EFA_i = 1; autoA5688EFA_i <= autoA5688EFA_n; autoA5688EFA_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(30.0, 76.0), lv_pillarOffset, 0.0);
            lv_pillarOffset = (lv_pillarOffset + 2);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_pointofPillar);
            auto32A6C0F5_g = PlayerGroupActive();
            auto32A6C0F5_var = -1;
            while (true) {
                auto32A6C0F5_var = PlayerGroupNextPlayer(auto32A6C0F5_g, auto32A6C0F5_var);
                if (auto32A6C0F5_var < 0) { break; }
                VisRevealArea(auto32A6C0F5_var, RegionCircle(lv_pointofPillar, 1.0), 0.0, false);
            }
            libNtve_gf_CreateModelAtPoint("LOSOctaPillars", UnitGetPosition(UnitLastCreated()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        }
        lv_pillarOffset = (lv_pillarOffset + 2);
        for (auto3085C121_i = 1; auto3085C121_i <= auto3085C121_n; auto3085C121_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(30.0, 76.0), lv_pillarOffset, 0.0);
            lv_pillarOffset = (lv_pillarOffset + 2);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "2x2InvisibleBlockade", 0, 0, lv_pointofPillar);
            auto9F5A8A02_g = PlayerGroupActive();
            auto9F5A8A02_var = -1;
            while (true) {
                auto9F5A8A02_var = PlayerGroupNextPlayer(auto9F5A8A02_g, auto9F5A8A02_var);
                if (auto9F5A8A02_var < 0) { break; }
                VisRevealArea(auto9F5A8A02_var, RegionCircle(lv_pointofPillar, 1.0), 0.0, false);
            }
            libNtve_gf_CreateModelAtPoint("LOSOctaPillars", UnitGetPosition(UnitLastCreated()));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
        }
        lv_pillarOffset = 0;
    }
    for (auto82C5BDAA_i = 1; auto82C5BDAA_i <= auto82C5BDAA_n; auto82C5BDAA_i += 1) {
        for (auto6BF3F4F6_i = 1; auto6BF3F4F6_i <= auto6BF3F4F6_n; auto6BF3F4F6_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(76.0, 2.0), 0.0, lv_pillarOffset);
            MinimapPing(PlayerGroupAll(), lv_pointofPillar, 2.0, Color(50.20, 0.00, 50.20));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OctaPillerUp", 0, 0, lv_pointofPillar);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
            UnitGroupAdd(gv_octaPillersSouth, UnitLastCreated());
            lv_pillarOffset = (lv_pillarOffset + 2);
        }
        lv_pillarOffset = (lv_pillarOffset + 94);
        for (auto6CC6C5FD_i = 1; auto6CC6C5FD_i <= auto6CC6C5FD_n; auto6CC6C5FD_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(76.0, 2.0), 0.0, lv_pillarOffset);
            MinimapPing(PlayerGroupAll(), lv_pointofPillar, 2.0, Color(50.20, 0.00, 50.20));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OctaPillerUp", 0, 0, lv_pointofPillar);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
            UnitGroupAdd(gv_octaPillersNorth, UnitLastCreated());
            lv_pillarOffset = (lv_pillarOffset + 2);
        }
        lv_pillarOffset = 0;
        for (auto9DD015F8_i = 1; auto9DD015F8_i <= auto9DD015F8_n; auto9DD015F8_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(2.0, 76.0), lv_pillarOffset, 0.0);
            MinimapPing(PlayerGroupAll(), lv_pointofPillar, 2.0, Color(50.20, 0.00, 50.20));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OctaPillerUp", 0, 0, lv_pointofPillar);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
            UnitGroupAdd(gv_octaPillersWest, UnitLastCreated());
            lv_pillarOffset = (lv_pillarOffset + 2);
        }
        lv_pillarOffset = (lv_pillarOffset + 96);
        for (auto86B50094_i = 1; auto86B50094_i <= auto86B50094_n; auto86B50094_i += 1) {
            lv_pointofPillar = PointWithOffset(Point(2.0, 76.0), lv_pillarOffset, 0.0);
            MinimapPing(PlayerGroupAll(), lv_pointofPillar, 2.0, Color(50.20, 0.00, 50.20));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "OctaPillerUp", 0, 0, lv_pointofPillar);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
            UnitGroupAdd(gv_octaPillersEast, UnitLastCreated());
            lv_pillarOffset = (lv_pillarOffset + 2);
        }
    }
    auto573D6424_g = PlayerGroupActive();
    auto573D6424_var = -1;
    while (true) {
        auto573D6424_var = PlayerGroupNextPlayer(auto573D6424_g, auto573D6424_var);
        if (auto573D6424_var < 0) { break; }
        libNtve_gf_SetUpgradeLevelForPlayer(auto573D6424_var, "OctaPillarsEastUp", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto573D6424_var, "OctaPillarsNorthUp", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto573D6424_var, "OctaPillarsSouthUp", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(auto573D6424_var, "OctaPillarsWestUp", 1);
    }
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateOctagonPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto97EDEA0F_ae = gv_mapSize;
    const int auto97EDEA0F_ai = 4;
    const int auto601F4217_ae = gv_mapSize;
    const int auto601F4217_ai = 4;
    playergroup auto62DF5203_g;
    playergroup auto59C2AB62_g;
    int auto64DB1CD2_ae;
    const int auto64DB1CD2_ai = 1;
    playergroup autoDE049DB4_g;
    playergroup auto6B10C1FB_g;

    // Variable Initialization
    lv_spawnDistance = 60;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto97EDEA0F_ai >= 0 && lv_x <= auto97EDEA0F_ae) || (auto97EDEA0F_ai < 0 && lv_x >= auto97EDEA0F_ae) ) ; lv_x += auto97EDEA0F_ai ) {
            lv_y = 0;
            for ( ; ( (auto601F4217_ai >= 0 && lv_y <= auto601F4217_ae) || (auto601F4217_ai < 0 && lv_y >= auto601F4217_ae) ) ; lv_y += auto601F4217_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto62DF5203_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto62DF5203_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto59C2AB62_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto59C2AB62_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto64DB1CD2_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto64DB1CD2_ai >= 0 && lv_i <= auto64DB1CD2_ae) || (auto64DB1CD2_ai < 0 && lv_i >= auto64DB1CD2_ae) ) ; lv_i += auto64DB1CD2_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoDE049DB4_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoDE049DB4_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto6B10C1FB_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto6B10C1FB_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GeneratePongTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;
    region lv_stipesRegion;
    region lv_revealRegion;
    int lv_xRemoval;
    int lv_yRemoval;
    point lv_blockadePoint;

    // Automatic Variable Declarations
    const int auto90FEA784_ae = gv_mapSize;
    const int auto90FEA784_ai = 1;
    const int auto9D7D748F_ae = gv_mapSize;
    const int auto9D7D748F_ai = 1;
    int auto6AA58831_ae;
    const int auto6AA58831_ai = 1;
    const int autoBBDAF3EA_ae = 5;
    const int autoBBDAF3EA_ai = 1;
    int auto1CB7DC1F_ae;
    const int auto1CB7DC1F_ai = 1;
    int autoA357BF90_ae;
    const int autoA357BF90_ai = 1;
    int auto7AFAB3FB_ae;
    const int auto7AFAB3FB_ai = 1;
    int autoB6FAFD56_ae;
    const int autoB6FAFD56_ai = 1;
    int auto34EE4E30_ae;
    const int auto34EE4E30_ai = 1;
    int auto800FD11D_ae;
    const int auto800FD11D_ai = 1;
    unitgroup auto997C5693_g;
    int auto997C5693_u;
    int auto4A0768C6_ae;
    const int auto4A0768C6_ai = 1;
    int auto70AD4C8F_ae;
    const int auto70AD4C8F_ai = 1;
    unitgroup auto8E443CC1_g;
    int auto8E443CC1_u;
    unit auto8E443CC1_var;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;
    lv_stipesRegion = RegionEmpty();
    lv_revealRegion = RegionEmpty();

    // Implementation
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = PointWithOffset(lv_dirtMapCenterPoint, 0.0, 0.0);
    PointSetHeight(gv_clearCircles[0], 2.0);
    lv_x = 0;
    for ( ; ( (auto90FEA784_ai >= 0 && lv_x <= auto90FEA784_ae) || (auto90FEA784_ai < 0 && lv_x >= auto90FEA784_ae) ) ; lv_x += auto90FEA784_ai ) {
        lv_y = 0;
        for ( ; ( (auto9D7D748F_ai >= 0 && lv_y <= auto9D7D748F_ae) || (auto9D7D748F_ai < 0 && lv_y >= auto9D7D748F_ae) ) ; lv_y += auto9D7D748F_ai ) {
            auto6AA58831_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto6AA58831_ai >= 0 && lv_i <= auto6AA58831_ae) || (auto6AA58831_ai < 0 && lv_i >= auto6AA58831_ae) ) ; lv_i += auto6AA58831_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoBBDAF3EA_ai >= 0 && lv_i <= autoBBDAF3EA_ae) || (autoBBDAF3EA_ai < 0 && lv_i >= autoBBDAF3EA_ae) ) ; lv_i += autoBBDAF3EA_ai ) {
        Wait(0.0, c_timeGame);
        auto1CB7DC1F_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto1CB7DC1F_ai >= 0 && lv_x <= auto1CB7DC1F_ae) || (auto1CB7DC1F_ai < 0 && lv_x >= auto1CB7DC1F_ae) ) ; lv_x += auto1CB7DC1F_ai ) {
            autoA357BF90_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoA357BF90_ai >= 0 && lv_y <= autoA357BF90_ae) || (autoA357BF90_ai < 0 && lv_y >= autoA357BF90_ae) ) ; lv_y += autoA357BF90_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto7AFAB3FB_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto7AFAB3FB_ai >= 0 && lv_x <= auto7AFAB3FB_ae) || (auto7AFAB3FB_ai < 0 && lv_x >= auto7AFAB3FB_ae) ) ; lv_x += auto7AFAB3FB_ai ) {
            autoB6FAFD56_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB6FAFD56_ai >= 0 && lv_y <= autoB6FAFD56_ae) || (autoB6FAFD56_ai < 0 && lv_y >= autoB6FAFD56_ae) ) ; lv_y += autoB6FAFD56_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto34EE4E30_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto34EE4E30_ai >= 0 && lv_x <= auto34EE4E30_ae) || (auto34EE4E30_ai < 0 && lv_x >= auto34EE4E30_ae) ) ; lv_x += auto34EE4E30_ai ) {
        auto800FD11D_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto800FD11D_ai >= 0 && lv_y <= auto800FD11D_ae) || (auto800FD11D_ai < 0 && lv_y >= auto800FD11D_ae) ) ; lv_y += auto800FD11D_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto997C5693_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto997C5693_u = UnitGroupCount(auto997C5693_g, c_unitCountAll);
    for (;; auto997C5693_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto997C5693_g, auto997C5693_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto4A0768C6_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto4A0768C6_ai >= 0 && lv_x <= auto4A0768C6_ae) || (auto4A0768C6_ai < 0 && lv_x >= auto4A0768C6_ae) ) ; lv_x += auto4A0768C6_ai ) {
        auto70AD4C8F_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto70AD4C8F_ai >= 0 && lv_y <= auto70AD4C8F_ae) || (auto70AD4C8F_ai < 0 && lv_y >= auto70AD4C8F_ae) ) ; lv_y += auto70AD4C8F_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    gf_RemoveDirtinRegion(gf_Convertpointtosquareregion(gv_absoluteCenterpoint, 54.0));
    TriggerEnable(gt_MakePongBounce, true);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PongUnit", c_unitCreateIgnorePlacement, 0, gv_absoluteCenterpoint);
    gv_pongUnit = UnitLastCreated();
    PointSet(gv_nextPointOfPongtogotoscan, PointWithOffsetPolar(UnitGetPosition(gv_pongUnit), 4.0, gv_angleOfPong));
    RegionSetCenter(gv_nextPointOfPongtogotoscanRegion, gv_nextPointOfPongtogotoscan);
    MinimapPing(PlayerGroupAll(), gv_nextPointOfPongtogotoscan, 2.0, Color(80.39, 95.69, 22.75));
    UnitIssueOrder(gv_pongUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_nextPointOfPongtogotoscan), c_orderQueueReplace);
    libNtve_gf_AttachModelToUnit(UnitLastCreated(), "UI_Screen_WarChest_Sphere", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.7, 0.8, 0.7, 0.0));
    gf_MakesurenoExternalDirthasCreepUnderit();
    auto8E443CC1_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8E443CC1_u = UnitGroupCount(auto8E443CC1_g, c_unitCountAll);
    for (;; auto8E443CC1_u -= 1) {
        auto8E443CC1_var = UnitGroupUnitFromEnd(auto8E443CC1_g, auto8E443CC1_u);
        if (auto8E443CC1_var == null) { break; }
        RegionAddRegion(gv_dirtEdgesRegion, gf_Convertpointtosquareregion(UnitGetPosition(auto8E443CC1_var), 2.5));
    }
    TriggerEnable(gt_MakeSurePongDoesnotstop, true);
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GeneratePongPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;
    int lv_randomNumber;

    // Automatic Variable Declarations
    const int auto6E56DD75_ae = gv_mapSize;
    const int auto6E56DD75_ai = 4;
    const int auto05A80026_ae = gv_mapSize;
    const int auto05A80026_ai = 4;
    playergroup auto4E3AB4E3_g;
    playergroup auto99045FC0_g;
    int autoBE059D2E_ae;
    const int autoBE059D2E_ai = 1;
    playergroup auto92160D2A_g;
    playergroup auto0019E441_g;

    // Variable Initialization
    lv_spawnDistance = 30;
    lv_randomNumber = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto6E56DD75_ai >= 0 && lv_x <= auto6E56DD75_ae) || (auto6E56DD75_ai < 0 && lv_x >= auto6E56DD75_ae) ) ; lv_x += auto6E56DD75_ai ) {
            lv_y = 0;
            for ( ; ( (auto05A80026_ai >= 0 && lv_y <= auto05A80026_ae) || (auto05A80026_ai < 0 && lv_y >= auto05A80026_ae) ) ; lv_y += auto05A80026_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto4E3AB4E3_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto4E3AB4E3_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto99045FC0_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto99045FC0_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoBE059D2E_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoBE059D2E_ai >= 0 && lv_i <= autoBE059D2E_ae) || (autoBE059D2E_ai < 0 && lv_i >= autoBE059D2E_ae) ) ; lv_i += autoBE059D2E_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_randomNumber = RandomInt(1, 4);
        if ((lv_randomNumber == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
        else if ((lv_randomNumber == 2)) {
            lv_spawnDistance = 30;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
        else if ((lv_randomNumber == 3)) {
            lv_spawnDistance = 12;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 20.0, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
        else if ((lv_randomNumber == 4)) {
            lv_spawnDistance = 2;
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
            lv_spawnAngle = (lv_spawnAngle + 180.0);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle + 90.0)), lv_spawnDistance, lv_spawnAngle));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 2, (lv_spawnAngle - 90.0)), lv_spawnDistance, lv_spawnAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = 2;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_randomNumber = RandomInt(1, 3);
        if ((lv_randomNumber == 1)) {
            lv_spawnDistance = 2;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle - 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 40.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle - 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 40.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        lv_spawnDistance = 2;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = 2;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto92160D2A_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto92160D2A_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto0019E441_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto0019E441_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateWheelTerrain () {
    // Variable Declarations
    point lv_pointofCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    fixed lv_angle;
    int lv_originalAngle;
    int lv_distanceOfScopeBlockers;
    region lv_removeDirtRegion;
    region lv_removeLineDirtInregion;

    // Automatic Variable Declarations
    const int autoA26B92CB_n = 1;
    int autoA26B92CB_i;
    const int auto8D99AAD0_ae = gv_mapSize;
    const int auto8D99AAD0_ai = 1;
    const int autoED4C0A57_ae = gv_mapSize;
    const int autoED4C0A57_ai = 1;
    int autoD2782CB1_ae;
    const int autoD2782CB1_ai = 1;
    const int autoDDCAB324_ae = 5;
    const int autoDDCAB324_ai = 1;
    int autoAE4975FB_ae;
    const int autoAE4975FB_ai = 1;
    int auto479A716E_ae;
    const int auto479A716E_ai = 1;
    int auto845207A2_ae;
    const int auto845207A2_ai = 1;
    int auto4D3B4F46_ae;
    const int auto4D3B4F46_ai = 1;
    int auto5BF1242B_ae;
    const int auto5BF1242B_ai = 1;
    int auto744F0A69_ae;
    const int auto744F0A69_ai = 1;
    unitgroup autoA21A933A_g;
    int autoA21A933A_u;
    int auto25364C8A_ae;
    const int auto25364C8A_ai = 1;
    int auto03D1B3BD_ae;
    const int auto03D1B3BD_ai = 1;
    playergroup auto267D03D4_g;
    int auto267D03D4_var;
    const int auto8EC1A46B_n = 6;
    int auto8EC1A46B_i;
    const int auto5485A41A_n = 29;
    int auto5485A41A_i;
    playergroup auto0F502C55_g;
    int auto0F502C55_var;
    const int auto0251F688_n = 6;
    int auto0251F688_i;
    const int auto25F88918_n = 30;
    int auto25F88918_i;
    playergroup autoFC43A962_g;
    int autoFC43A962_var;
    const int auto62419490_n = 240;
    int auto62419490_i;

    // Variable Initialization
    lv_angle = RandomInt(1, 360);
    lv_originalAngle = gv_angleOfWheel;
    lv_removeDirtRegion = RegionEmpty();
    lv_removeLineDirtInregion = RegionEmpty();

    // Implementation
    lv_originalAngle = FixedToInt(lv_angle);
    gv_angleOfWheel = FixedToInt(lv_angle);
    for (autoA26B92CB_i = 1; autoA26B92CB_i <= autoA26B92CB_n; autoA26B92CB_i += 1) {
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        PointSetHeight(gv_clearCircles[0], 1.0);
        lv_x = 0;
        for ( ; ( (auto8D99AAD0_ai >= 0 && lv_x <= auto8D99AAD0_ae) || (auto8D99AAD0_ai < 0 && lv_x >= auto8D99AAD0_ae) ) ; lv_x += auto8D99AAD0_ai ) {
            lv_y = 0;
            for ( ; ( (autoED4C0A57_ai >= 0 && lv_y <= autoED4C0A57_ae) || (autoED4C0A57_ai < 0 && lv_y >= autoED4C0A57_ae) ) ; lv_y += autoED4C0A57_ai ) {
                autoD2782CB1_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (autoD2782CB1_ai >= 0 && lv_i <= autoD2782CB1_ae) || (autoD2782CB1_ai < 0 && lv_i >= autoD2782CB1_ae) ) ; lv_i += autoD2782CB1_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (autoDDCAB324_ai >= 0 && lv_i <= autoDDCAB324_ae) || (autoDDCAB324_ai < 0 && lv_i >= autoDDCAB324_ae) ) ; lv_i += autoDDCAB324_ai ) {
            Wait(0.0, c_timeGame);
            autoAE4975FB_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoAE4975FB_ai >= 0 && lv_x <= autoAE4975FB_ae) || (autoAE4975FB_ai < 0 && lv_x >= autoAE4975FB_ae) ) ; lv_x += autoAE4975FB_ai ) {
                auto479A716E_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto479A716E_ai >= 0 && lv_y <= auto479A716E_ae) || (auto479A716E_ai < 0 && lv_y >= auto479A716E_ae) ) ; lv_y += auto479A716E_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            auto845207A2_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto845207A2_ai >= 0 && lv_x <= auto845207A2_ae) || (auto845207A2_ai < 0 && lv_x >= auto845207A2_ae) ) ; lv_x += auto845207A2_ai ) {
                auto4D3B4F46_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto4D3B4F46_ai >= 0 && lv_y <= auto4D3B4F46_ae) || (auto4D3B4F46_ai < 0 && lv_y >= auto4D3B4F46_ae) ) ; lv_y += auto4D3B4F46_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        auto5BF1242B_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto5BF1242B_ai >= 0 && lv_x <= auto5BF1242B_ae) || (auto5BF1242B_ai < 0 && lv_x >= auto5BF1242B_ae) ) ; lv_x += auto5BF1242B_ai ) {
            auto744F0A69_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto744F0A69_ai >= 0 && lv_y <= auto744F0A69_ae) || (auto744F0A69_ai < 0 && lv_y >= auto744F0A69_ae) ) ; lv_y += auto744F0A69_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        autoA21A933A_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA21A933A_u = UnitGroupCount(autoA21A933A_g, c_unitCountAll);
        for (;; autoA21A933A_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoA21A933A_g, autoA21A933A_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto25364C8A_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto25364C8A_ai >= 0 && lv_x <= auto25364C8A_ae) || (auto25364C8A_ai < 0 && lv_x >= auto25364C8A_ae) ) ; lv_x += auto25364C8A_ai ) {
            auto03D1B3BD_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto03D1B3BD_ai >= 0 && lv_y <= auto03D1B3BD_ae) || (auto03D1B3BD_ai < 0 && lv_y >= auto03D1B3BD_ae) ) ; lv_y += auto03D1B3BD_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    gf_RemoveDirtinRegion(RegionCircle(RegionGetCenter(RegionEntireMap()), 44.0));
    auto267D03D4_g = PlayerGroupActive();
    auto267D03D4_var = -1;
    while (true) {
        auto267D03D4_var = PlayerGroupNextPlayer(auto267D03D4_g, auto267D03D4_var);
        if (auto267D03D4_var < 0) { break; }
        VisRevealArea(auto267D03D4_var, RegionCircle(RegionGetCenter(RegionEntireMap()), 75.0), 1.0, false);
    }
    for (auto8EC1A46B_i = 1; auto8EC1A46B_i <= auto8EC1A46B_n; auto8EC1A46B_i += 1) {
        lv_distanceOfScopeBlockers = 10;
        for (auto5485A41A_i = 1; auto5485A41A_i <= auto5485A41A_n; auto5485A41A_i += 1) {
            lv_distanceOfScopeBlockers = (lv_distanceOfScopeBlockers + 2);
            RegionAddRegion(lv_removeLineDirtInregion, gf_Convertpointtosquareregion(gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle)), 1.0));
            auto0F502C55_g = PlayerGroupActive();
            auto0F502C55_var = -1;
            while (true) {
                auto0F502C55_var = PlayerGroupNextPlayer(auto0F502C55_g, auto0F502C55_var);
                if (auto0F502C55_var < 0) { break; }
                VisRevealArea(auto0F502C55_var, gf_Convertpointtosquareregion(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle), 2.0), 1.0, false);
            }
        }
        lv_angle = (lv_angle + 60.0);
    }
    lv_angle = lv_originalAngle;
    for (auto0251F688_i = 1; auto0251F688_i <= auto0251F688_n; auto0251F688_i += 1) {
        lv_distanceOfScopeBlockers = 10;
        for (auto25F88918_i = 1; auto25F88918_i <= auto25F88918_n; auto25F88918_i += 1) {
            lv_distanceOfScopeBlockers = (lv_distanceOfScopeBlockers + 2);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle)));
            autoFC43A962_g = PlayerGroupActive();
            autoFC43A962_var = -1;
            while (true) {
                autoFC43A962_var = PlayerGroupNextPlayer(autoFC43A962_g, autoFC43A962_var);
                if (autoFC43A962_var < 0) { break; }
                VisRevealArea(autoFC43A962_var, gf_Convertpointtosquareregion(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle), 2.0), 1.0, false);
            }
        }
        lv_angle = (lv_angle + 60.0);
    }
    lv_angle = lv_originalAngle;
    gf_RemoveDirtinRegion(lv_removeLineDirtInregion);
    lv_angle = lv_originalAngle;
    for (auto62419490_i = 1; auto62419490_i <= auto62419490_n; auto62419490_i += 1) {
        lv_angle = (lv_angle + 1.5);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle)));
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateWheelPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoEDFCF66F_ae = gv_mapSize;
    const int autoEDFCF66F_ai = 4;
    const int auto44793B41_ae = gv_mapSize;
    const int auto44793B41_ai = 4;
    playergroup auto33ED671F_g;
    playergroup auto2DDC9F66_g;
    int auto6A20EEDD_ae;
    const int auto6A20EEDD_ai = 1;
    playergroup autoBBEA881F_g;
    playergroup auto689F89BE_g;

    // Variable Initialization
    lv_spawnDistance = RandomInt(25, 40);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoEDFCF66F_ai >= 0 && lv_x <= autoEDFCF66F_ae) || (autoEDFCF66F_ai < 0 && lv_x >= autoEDFCF66F_ae) ) ; lv_x += autoEDFCF66F_ai ) {
            lv_y = 0;
            for ( ; ( (auto44793B41_ai >= 0 && lv_y <= auto44793B41_ae) || (auto44793B41_ai < 0 && lv_y >= auto44793B41_ae) ) ; lv_y += auto44793B41_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto33ED671F_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto33ED671F_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto2DDC9F66_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto2DDC9F66_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto6A20EEDD_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto6A20EEDD_ai >= 0 && lv_i <= auto6A20EEDD_ae) || (auto6A20EEDD_ai < 0 && lv_i >= auto6A20EEDD_ae) ) ; lv_i += auto6A20EEDD_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = (gv_angleOfWheel + 30);
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoBBEA881F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoBBEA881F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto689F89BE_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto689F89BE_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateRubberWheelTerrain () {
    // Variable Declarations
    point lv_pointofCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    fixed lv_angle;
    int lv_originalAngle;
    int lv_distanceOfScopeBlockers;
    region lv_removeDirtRegion;
    region lv_removeLineDirtInregion;

    // Automatic Variable Declarations
    const int autoB303AAD6_n = 1;
    int autoB303AAD6_i;
    const int auto3D155B06_ae = gv_mapSize;
    const int auto3D155B06_ai = 1;
    const int autoFD413716_ae = gv_mapSize;
    const int autoFD413716_ai = 1;
    int auto426A9871_ae;
    const int auto426A9871_ai = 1;
    const int auto08617806_ae = 5;
    const int auto08617806_ai = 1;
    int auto2489BC60_ae;
    const int auto2489BC60_ai = 1;
    int autoE7DF80DD_ae;
    const int autoE7DF80DD_ai = 1;
    int auto26133BC5_ae;
    const int auto26133BC5_ai = 1;
    int auto4033549D_ae;
    const int auto4033549D_ai = 1;
    int autoE1B15BF2_ae;
    const int autoE1B15BF2_ai = 1;
    int autoB7BC0299_ae;
    const int autoB7BC0299_ai = 1;
    unitgroup autoB47BFC7C_g;
    int autoB47BFC7C_u;
    int auto4D1B4A49_ae;
    const int auto4D1B4A49_ai = 1;
    int autoDBB6269B_ae;
    const int autoDBB6269B_ai = 1;
    playergroup auto3E7B5FF6_g;
    int auto3E7B5FF6_var;
    const int autoE40B8243_n = 6;
    int autoE40B8243_i;
    const int auto2D6E6C54_n = 22;
    int auto2D6E6C54_i;
    playergroup auto490356A1_g;
    int auto490356A1_var;
    const int auto01F342F6_n = 6;
    int auto01F342F6_i;
    const int autoB9E0B536_n = 27;
    int autoB9E0B536_i;
    playergroup auto64BF438B_g;
    int auto64BF438B_var;
    const int auto6781C029_n = 240;
    int auto6781C029_i;

    // Variable Initialization
    lv_angle = RandomInt(1, 360);
    lv_originalAngle = gv_angleOfRubberWheel;
    lv_removeDirtRegion = RegionEmpty();
    lv_removeLineDirtInregion = RegionEmpty();

    // Implementation
    lv_originalAngle = FixedToInt(lv_angle);
    gv_angleOfRubberWheel = FixedToInt(lv_angle);
    for (autoB303AAD6_i = 1; autoB303AAD6_i <= autoB303AAD6_n; autoB303AAD6_i += 1) {
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        PointSetHeight(gv_clearCircles[0], 1.0);
        lv_x = 0;
        for ( ; ( (auto3D155B06_ai >= 0 && lv_x <= auto3D155B06_ae) || (auto3D155B06_ai < 0 && lv_x >= auto3D155B06_ae) ) ; lv_x += auto3D155B06_ai ) {
            lv_y = 0;
            for ( ; ( (autoFD413716_ai >= 0 && lv_y <= autoFD413716_ae) || (autoFD413716_ai < 0 && lv_y >= autoFD413716_ae) ) ; lv_y += autoFD413716_ai ) {
                auto426A9871_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (auto426A9871_ai >= 0 && lv_i <= auto426A9871_ae) || (auto426A9871_ai < 0 && lv_i >= auto426A9871_ae) ) ; lv_i += auto426A9871_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (auto08617806_ai >= 0 && lv_i <= auto08617806_ae) || (auto08617806_ai < 0 && lv_i >= auto08617806_ae) ) ; lv_i += auto08617806_ai ) {
            Wait(0.0, c_timeGame);
            auto2489BC60_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto2489BC60_ai >= 0 && lv_x <= auto2489BC60_ae) || (auto2489BC60_ai < 0 && lv_x >= auto2489BC60_ae) ) ; lv_x += auto2489BC60_ai ) {
                autoE7DF80DD_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoE7DF80DD_ai >= 0 && lv_y <= autoE7DF80DD_ae) || (autoE7DF80DD_ai < 0 && lv_y >= autoE7DF80DD_ae) ) ; lv_y += autoE7DF80DD_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            auto26133BC5_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (auto26133BC5_ai >= 0 && lv_x <= auto26133BC5_ae) || (auto26133BC5_ai < 0 && lv_x >= auto26133BC5_ae) ) ; lv_x += auto26133BC5_ai ) {
                auto4033549D_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto4033549D_ai >= 0 && lv_y <= auto4033549D_ae) || (auto4033549D_ai < 0 && lv_y >= auto4033549D_ae) ) ; lv_y += auto4033549D_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        autoE1B15BF2_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoE1B15BF2_ai >= 0 && lv_x <= autoE1B15BF2_ae) || (autoE1B15BF2_ai < 0 && lv_x >= autoE1B15BF2_ae) ) ; lv_x += autoE1B15BF2_ai ) {
            autoB7BC0299_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB7BC0299_ai >= 0 && lv_y <= autoB7BC0299_ae) || (autoB7BC0299_ai < 0 && lv_y >= autoB7BC0299_ae) ) ; lv_y += autoB7BC0299_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        autoB47BFC7C_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB47BFC7C_u = UnitGroupCount(autoB47BFC7C_g, c_unitCountAll);
        for (;; autoB47BFC7C_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoB47BFC7C_g, autoB47BFC7C_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto4D1B4A49_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto4D1B4A49_ai >= 0 && lv_x <= auto4D1B4A49_ae) || (auto4D1B4A49_ai < 0 && lv_x >= auto4D1B4A49_ae) ) ; lv_x += auto4D1B4A49_ai ) {
            autoDBB6269B_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoDBB6269B_ai >= 0 && lv_y <= autoDBB6269B_ae) || (autoDBB6269B_ai < 0 && lv_y >= autoDBB6269B_ae) ) ; lv_y += autoDBB6269B_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    gf_RemoveDirtinRegion(RegionCircle(RegionGetCenter(RegionEntireMap()), 44.0));
    auto3E7B5FF6_g = PlayerGroupActive();
    auto3E7B5FF6_var = -1;
    while (true) {
        auto3E7B5FF6_var = PlayerGroupNextPlayer(auto3E7B5FF6_g, auto3E7B5FF6_var);
        if (auto3E7B5FF6_var < 0) { break; }
        VisRevealArea(auto3E7B5FF6_var, RegionCircle(RegionGetCenter(RegionEntireMap()), 75.0), 1.0, false);
    }
    for (autoE40B8243_i = 1; autoE40B8243_i <= autoE40B8243_n; autoE40B8243_i += 1) {
        lv_distanceOfScopeBlockers = 10;
        for (auto2D6E6C54_i = 1; auto2D6E6C54_i <= auto2D6E6C54_n; auto2D6E6C54_i += 1) {
            lv_distanceOfScopeBlockers = (lv_distanceOfScopeBlockers + 2);
            RegionAddRegion(lv_removeLineDirtInregion, gf_Convertpointtosquareregion(gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle)), 1.0));
            auto490356A1_g = PlayerGroupActive();
            auto490356A1_var = -1;
            while (true) {
                auto490356A1_var = PlayerGroupNextPlayer(auto490356A1_g, auto490356A1_var);
                if (auto490356A1_var < 0) { break; }
                VisRevealArea(auto490356A1_var, gf_Convertpointtosquareregion(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle), 2.0), 1.0, false);
            }
        }
        lv_angle = (lv_angle + 60.0);
    }
    lv_angle = lv_originalAngle;
    for (auto01F342F6_i = 1; auto01F342F6_i <= auto01F342F6_n; auto01F342F6_i += 1) {
        lv_distanceOfScopeBlockers = 0;
        for (autoB9E0B536_i = 1; autoB9E0B536_i <= autoB9E0B536_n; autoB9E0B536_i += 1) {
            lv_distanceOfScopeBlockers = (lv_distanceOfScopeBlockers + 2);
            RegionAddRegion(lv_removeLineDirtInregion, gf_Convertpointtosquareregion(gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle)), 0.5));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle)));
            auto64BF438B_g = PlayerGroupActive();
            auto64BF438B_var = -1;
            while (true) {
                auto64BF438B_var = PlayerGroupNextPlayer(auto64BF438B_g, auto64BF438B_var);
                if (auto64BF438B_var < 0) { break; }
                VisRevealArea(auto64BF438B_var, gf_Convertpointtosquareregion(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_distanceOfScopeBlockers, lv_angle), 2.0), 1.0, false);
            }
        }
        lv_angle = (lv_angle + 60.0);
    }
    lv_angle = lv_originalAngle;
    gf_RemoveDirtinRegion(lv_removeLineDirtInregion);
    lv_angle = lv_originalAngle;
    for (auto6781C029_i = 1; auto6781C029_i <= auto6781C029_n; auto6781C029_i += 1) {
        lv_angle = (lv_angle + 1.5);
        RegionAddRegion(lv_removeLineDirtInregion, gf_Convertpointtosquareregion(gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, 72.0, lv_angle)), 0.5));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, 72.0, lv_angle)));
    }
    RegionAddRegion(lv_removeLineDirtInregion, gf_Convertpointtosquareregion(gv_absoluteCenterpoint, 0.5));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gv_absoluteCenterpoint);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 1.4, 0.0));
    gf_RemoveDirtinRegion(lv_removeLineDirtInregion);
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateRubberWheelPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto6ADAC5DA_ae = gv_mapSize;
    const int auto6ADAC5DA_ai = 4;
    const int auto2D227A95_ae = gv_mapSize;
    const int auto2D227A95_ai = 4;
    playergroup auto88353EC5_g;
    playergroup auto3DE42055_g;
    int auto4EEDB948_ae;
    const int auto4EEDB948_ai = 1;
    playergroup autoA5233FB8_g;
    playergroup auto614056A6_g;

    // Variable Initialization
    lv_spawnDistance = RandomInt(25, 40);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto6ADAC5DA_ai >= 0 && lv_x <= auto6ADAC5DA_ae) || (auto6ADAC5DA_ai < 0 && lv_x >= auto6ADAC5DA_ae) ) ; lv_x += auto6ADAC5DA_ai ) {
            lv_y = 0;
            for ( ; ( (auto2D227A95_ai >= 0 && lv_y <= auto2D227A95_ae) || (auto2D227A95_ai < 0 && lv_y >= auto2D227A95_ae) ) ; lv_y += auto2D227A95_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto88353EC5_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto88353EC5_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto3DE42055_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto3DE42055_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto4EEDB948_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto4EEDB948_ai >= 0 && lv_i <= auto4EEDB948_ae) || (auto4EEDB948_ai < 0 && lv_i >= auto4EEDB948_ae) ) ; lv_i += auto4EEDB948_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = (gv_angleOfRubberWheel + 30);
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoA5233FB8_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA5233FB8_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto614056A6_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto614056A6_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateChambersTerrain () {
    // Variable Declarations
    int lv_offsetMoveAmount;
    int lv_randomOpening;
    point lv_nW;
    point lv_nE;
    point lv_sE;
    point lv_sW;
    region lv_dirtRemovalRegion;
    int lv_randomCircleAngle;
    point lv_circleTunnelPoint;
    point lv_lastTunnlePoint;
    int lv_currentCircle;
    int lv_labyRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto4D431712_ae = gv_mapSize;
    const int auto4D431712_ai = 1;
    const int autoB1C55F24_ae = gv_mapSize;
    const int autoB1C55F24_ai = 1;
    int autoAFFE3F9E_ae;
    const int autoAFFE3F9E_ai = 1;
    const int auto9FC51C72_ae = 5;
    const int auto9FC51C72_ai = 1;
    int auto46882190_ae;
    const int auto46882190_ai = 1;
    int auto34934A04_ae;
    const int auto34934A04_ai = 1;
    int auto0388F91D_ae;
    const int auto0388F91D_ai = 1;
    int autoDA6817F4_ae;
    const int autoDA6817F4_ai = 1;
    int autoEC18E93A_ae;
    const int autoEC18E93A_ai = 1;
    int auto5A93252C_ae;
    const int auto5A93252C_ai = 1;
    unitgroup auto59710EB4_g;
    int auto59710EB4_u;
    int autoF20116E6_ae;
    const int autoF20116E6_ai = 1;
    int auto2566B77F_ae;
    const int auto2566B77F_ai = 1;
    playergroup autoED9ECE46_g;
    int autoED9ECE46_var;

    // Variable Initialization
    lv_randomOpening = RandomInt(1, 4);
    lv_nW = PointWithOffset(gv_absoluteCenterpoint, -50.0, 50.0);
    lv_nE = PointWithOffset(gv_absoluteCenterpoint, 50.0, 50.0);
    lv_sE = PointWithOffset(gv_absoluteCenterpoint, 50.0, -50.0);
    lv_sW = PointWithOffset(gv_absoluteCenterpoint, -50.0, -50.0);
    lv_dirtRemovalRegion = RegionEmpty();
    lv_currentCircle = 1;
    lv_labyRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_clearCircleCount = 0;
    lv_labyRandomAngle = RandomInt(0, 360);
    gv_mapGenAngle = lv_labyRandomAngle;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 6.0);
    lv_x = 0;
    for ( ; ( (auto4D431712_ai >= 0 && lv_x <= auto4D431712_ae) || (auto4D431712_ai < 0 && lv_x >= auto4D431712_ae) ) ; lv_x += auto4D431712_ai ) {
        lv_y = 0;
        for ( ; ( (autoB1C55F24_ai >= 0 && lv_y <= autoB1C55F24_ae) || (autoB1C55F24_ai < 0 && lv_y >= autoB1C55F24_ae) ) ; lv_y += autoB1C55F24_ai ) {
            autoAFFE3F9E_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoAFFE3F9E_ai >= 0 && lv_i <= autoAFFE3F9E_ae) || (autoAFFE3F9E_ai < 0 && lv_i >= autoAFFE3F9E_ae) ) ; lv_i += autoAFFE3F9E_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto9FC51C72_ai >= 0 && lv_i <= auto9FC51C72_ae) || (auto9FC51C72_ai < 0 && lv_i >= auto9FC51C72_ae) ) ; lv_i += auto9FC51C72_ai ) {
        Wait(0.0, c_timeGame);
        auto46882190_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto46882190_ai >= 0 && lv_x <= auto46882190_ae) || (auto46882190_ai < 0 && lv_x >= auto46882190_ae) ) ; lv_x += auto46882190_ai ) {
            auto34934A04_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto34934A04_ai >= 0 && lv_y <= auto34934A04_ae) || (auto34934A04_ai < 0 && lv_y >= auto34934A04_ae) ) ; lv_y += auto34934A04_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto0388F91D_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto0388F91D_ai >= 0 && lv_x <= auto0388F91D_ae) || (auto0388F91D_ai < 0 && lv_x >= auto0388F91D_ae) ) ; lv_x += auto0388F91D_ai ) {
            autoDA6817F4_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoDA6817F4_ai >= 0 && lv_y <= autoDA6817F4_ae) || (autoDA6817F4_ai < 0 && lv_y >= autoDA6817F4_ae) ) ; lv_y += autoDA6817F4_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoEC18E93A_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoEC18E93A_ai >= 0 && lv_x <= autoEC18E93A_ae) || (autoEC18E93A_ai < 0 && lv_x >= autoEC18E93A_ae) ) ; lv_x += autoEC18E93A_ai ) {
        auto5A93252C_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto5A93252C_ai >= 0 && lv_y <= auto5A93252C_ae) || (auto5A93252C_ai < 0 && lv_y >= auto5A93252C_ae) ) ; lv_y += auto5A93252C_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto59710EB4_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto59710EB4_u = UnitGroupCount(auto59710EB4_g, c_unitCountAll);
    for (;; auto59710EB4_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto59710EB4_g, auto59710EB4_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoF20116E6_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoF20116E6_ai >= 0 && lv_x <= autoF20116E6_ae) || (autoF20116E6_ai < 0 && lv_x >= autoF20116E6_ae) ) ; lv_x += autoF20116E6_ai ) {
        auto2566B77F_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto2566B77F_ai >= 0 && lv_y <= auto2566B77F_ae) || (auto2566B77F_ai < 0 && lv_y >= auto2566B77F_ae) ) ; lv_y += auto2566B77F_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(lv_nW, 18.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(lv_nE, 18.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(lv_sW, 18.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(lv_sE, 18.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(PointGetX(PointWithOffset(lv_nW, -2.0, 0.0)), PointGetY(PointWithOffset(lv_nW, 0.0, -2.0)), PointGetX(PointWithOffset(lv_nE, 2.0, 0.0)), PointGetY(PointWithOffset(lv_nE, 0.0, 1.0))));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(PointGetX(PointWithOffset(lv_sW, -2.0, 0.0)), PointGetY(PointWithOffset(lv_sW, 0.0, -1.0)), PointGetX(PointWithOffset(lv_sE, 2.0, 0.0)), PointGetY(PointWithOffset(lv_sE, 0.0, 2.0))));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(PointGetX(PointWithOffset(lv_sW, 0.0, 2.0)), PointGetY(PointWithOffset(lv_sW, 0.0, 2.0)), PointGetX(PointWithOffset(lv_nW, -2.0, 0.0)), PointGetY(PointWithOffset(lv_nW, 0.0, -2.0))));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(PointGetX(PointWithOffset(lv_sE, 0.0, 2.0)), PointGetY(PointWithOffset(lv_sE, 0.0, 2.0)), PointGetX(PointWithOffset(lv_nE, -2.0, 0.0)), PointGetY(PointWithOffset(lv_nE, 0.0, -2.0))));
    if ((lv_randomOpening == 1)) {
        while (true) {
            RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0), 2.0));
            lv_offsetMoveAmount = (lv_offsetMoveAmount + 4);
            if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
                break;
            }

        }
    }
    else if ((lv_randomOpening == 2)) {
        while (true) {
            RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0), 2.0));
            lv_offsetMoveAmount = (lv_offsetMoveAmount - 4);
            if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
                break;
            }

        }
    }
    else if ((lv_randomOpening == 3)) {
        while (true) {
            RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 0.0, lv_offsetMoveAmount), 2.0));
            lv_offsetMoveAmount = (lv_offsetMoveAmount + 4);
            if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
                break;
            }

        }
    }
    else if ((lv_randomOpening == 4)) {
        while (true) {
            RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 0.0, lv_offsetMoveAmount), 2.0));
            lv_offsetMoveAmount = (lv_offsetMoveAmount - 4);
            if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
                break;
            }

        }
    }
    lv_offsetMoveAmount = 0;
    while (true) {
        RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0), 2.0));
        lv_offsetMoveAmount = (lv_offsetMoveAmount + 4);
        if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
            break;
        }

    }
    lv_offsetMoveAmount = 0;
    while (true) {
        RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0), 2.0));
        lv_offsetMoveAmount = (lv_offsetMoveAmount - 4);
        if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
            break;
        }

    }
    lv_offsetMoveAmount = 0;
    while (true) {
        RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 0.0, lv_offsetMoveAmount), 2.0));
        lv_offsetMoveAmount = (lv_offsetMoveAmount + 4);
        if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
            break;
        }

    }
    lv_offsetMoveAmount = 0;
    while (true) {
        RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 0.0, lv_offsetMoveAmount), 2.0));
        lv_offsetMoveAmount = (lv_offsetMoveAmount - 4);
        if ((RegionContainsPoint(lv_dirtRemovalRegion, PointWithOffset(gv_absoluteCenterpoint, lv_offsetMoveAmount, 0.0)) == true)) {
            break;
        }

    }
    gf_RemoveDirtinRegion(gf_Convertpointtosquareregion(gv_absoluteCenterpoint, 15.0));
    gf_RemoveDirtinRegion(gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 10.0, 0.0), 10.0));
    gf_RemoveDirtinRegion(gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 0.0, 10.0), 10.0));
    gf_RemoveDirtinRegion(gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, -10.0, 0.0), 10.0));
    gf_RemoveDirtinRegion(gf_Convertpointtosquareregion(PointWithOffset(gv_absoluteCenterpoint, 0.0, -10.0), 10.0));
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    autoED9ECE46_g = PlayerGroupActive();
    autoED9ECE46_var = -1;
    while (true) {
        autoED9ECE46_var = PlayerGroupNextPlayer(autoED9ECE46_g, autoED9ECE46_var);
        if (autoED9ECE46_var < 0) { break; }
        VisRevealArea(autoED9ECE46_var, lv_dirtRemovalRegion, 0.1, false);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateChambersPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoE6E13F15_ae = gv_mapSize;
    const int autoE6E13F15_ai = 4;
    const int autoE3B555E2_ae = gv_mapSize;
    const int autoE3B555E2_ai = 4;
    playergroup auto70EAAA20_g;
    playergroup auto74F305F7_g;
    int autoA09013A1_ae;
    const int autoA09013A1_ai = 1;
    playergroup autoBDEC0915_g;
    playergroup auto1A44EE92_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoE6E13F15_ai >= 0 && lv_x <= autoE6E13F15_ae) || (autoE6E13F15_ai < 0 && lv_x >= autoE6E13F15_ae) ) ; lv_x += autoE6E13F15_ai ) {
            lv_y = 0;
            for ( ; ( (autoE3B555E2_ai >= 0 && lv_y <= autoE3B555E2_ae) || (autoE3B555E2_ai < 0 && lv_y >= autoE3B555E2_ae) ) ; lv_y += autoE3B555E2_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto70EAAA20_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto70EAAA20_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto74F305F7_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto74F305F7_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoA09013A1_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoA09013A1_ai >= 0 && lv_i <= autoA09013A1_ae) || (autoA09013A1_ai < 0 && lv_i >= autoA09013A1_ae) ) ; lv_i += autoA09013A1_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoBDEC0915_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoBDEC0915_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto1A44EE92_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto1A44EE92_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateHourglassTerrain () {
    // Variable Declarations
    int lv_offsetMoveAmount;
    region lv_dirtRemovalRegion;
    int lv_randomCircleAngle;
    point lv_circleTunnelPoint;
    point lv_lastTunnlePoint;
    int lv_currentCircle;
    int lv_labyRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto03BB9CFC_ae = gv_mapSize;
    const int auto03BB9CFC_ai = 1;
    const int autoE47EEA44_ae = gv_mapSize;
    const int autoE47EEA44_ai = 1;
    int auto316F2C64_ae;
    const int auto316F2C64_ai = 1;
    const int auto0A7A7D13_ae = 5;
    const int auto0A7A7D13_ai = 1;
    int autoAE5E924D_ae;
    const int autoAE5E924D_ai = 1;
    int autoF07D8C6A_ae;
    const int autoF07D8C6A_ai = 1;
    int auto2E50DE57_ae;
    const int auto2E50DE57_ai = 1;
    int auto508CFDE9_ae;
    const int auto508CFDE9_ai = 1;
    int autoC166B222_ae;
    const int autoC166B222_ai = 1;
    int autoC86F182E_ae;
    const int autoC86F182E_ai = 1;
    unitgroup autoBC4D0BFA_g;
    int autoBC4D0BFA_u;
    int auto55B6FE96_ae;
    const int auto55B6FE96_ai = 1;
    int auto685D4FAE_ae;
    const int auto685D4FAE_ai = 1;
    playergroup auto3A20F5FF_g;
    int auto3A20F5FF_var;

    // Variable Initialization
    lv_dirtRemovalRegion = RegionEmpty();
    lv_currentCircle = 1;
    lv_labyRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    gv_clearCircleCount = 0;
    lv_labyRandomAngle = RandomInt(0, 360);
    gv_mapGenAngle = lv_labyRandomAngle;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (auto03BB9CFC_ai >= 0 && lv_x <= auto03BB9CFC_ae) || (auto03BB9CFC_ai < 0 && lv_x >= auto03BB9CFC_ae) ) ; lv_x += auto03BB9CFC_ai ) {
        lv_y = 0;
        for ( ; ( (autoE47EEA44_ai >= 0 && lv_y <= autoE47EEA44_ae) || (autoE47EEA44_ai < 0 && lv_y >= autoE47EEA44_ae) ) ; lv_y += autoE47EEA44_ai ) {
            auto316F2C64_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto316F2C64_ai >= 0 && lv_i <= auto316F2C64_ae) || (auto316F2C64_ai < 0 && lv_i >= auto316F2C64_ae) ) ; lv_i += auto316F2C64_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto0A7A7D13_ai >= 0 && lv_i <= auto0A7A7D13_ae) || (auto0A7A7D13_ai < 0 && lv_i >= auto0A7A7D13_ae) ) ; lv_i += auto0A7A7D13_ai ) {
        Wait(0.0, c_timeGame);
        autoAE5E924D_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoAE5E924D_ai >= 0 && lv_x <= autoAE5E924D_ae) || (autoAE5E924D_ai < 0 && lv_x >= autoAE5E924D_ae) ) ; lv_x += autoAE5E924D_ai ) {
            autoF07D8C6A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoF07D8C6A_ai >= 0 && lv_y <= autoF07D8C6A_ae) || (autoF07D8C6A_ai < 0 && lv_y >= autoF07D8C6A_ae) ) ; lv_y += autoF07D8C6A_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto2E50DE57_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto2E50DE57_ai >= 0 && lv_x <= auto2E50DE57_ae) || (auto2E50DE57_ai < 0 && lv_x >= auto2E50DE57_ae) ) ; lv_x += auto2E50DE57_ai ) {
            auto508CFDE9_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto508CFDE9_ai >= 0 && lv_y <= auto508CFDE9_ae) || (auto508CFDE9_ai < 0 && lv_y >= auto508CFDE9_ae) ) ; lv_y += auto508CFDE9_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoC166B222_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoC166B222_ai >= 0 && lv_x <= autoC166B222_ae) || (autoC166B222_ai < 0 && lv_x >= autoC166B222_ae) ) ; lv_x += autoC166B222_ai ) {
        autoC86F182E_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoC86F182E_ai >= 0 && lv_y <= autoC86F182E_ae) || (autoC86F182E_ai < 0 && lv_y >= autoC86F182E_ae) ) ; lv_y += autoC86F182E_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoBC4D0BFA_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBC4D0BFA_u = UnitGroupCount(autoBC4D0BFA_g, c_unitCountAll);
    for (;; autoBC4D0BFA_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoBC4D0BFA_g, autoBC4D0BFA_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto55B6FE96_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto55B6FE96_ai >= 0 && lv_x <= auto55B6FE96_ae) || (auto55B6FE96_ai < 0 && lv_x >= auto55B6FE96_ae) ) ; lv_x += auto55B6FE96_ai ) {
        auto685D4FAE_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto685D4FAE_ai >= 0 && lv_y <= auto685D4FAE_ae) || (auto685D4FAE_ai < 0 && lv_y >= auto685D4FAE_ae) ) ; lv_y += auto685D4FAE_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 3.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 54.0, (gv_mapGenAngle + 0)), 50.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 54.0, (gv_mapGenAngle + 180)), 50.0));
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    auto3A20F5FF_g = PlayerGroupActive();
    auto3A20F5FF_var = -1;
    while (true) {
        auto3A20F5FF_var = PlayerGroupNextPlayer(auto3A20F5FF_g, auto3A20F5FF_var);
        if (auto3A20F5FF_var < 0) { break; }
        VisRevealArea(auto3A20F5FF_var, lv_dirtRemovalRegion, 0.1, false);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateHourglassPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoDE7E96D8_ae = gv_mapSize;
    const int autoDE7E96D8_ai = 4;
    const int auto991B7B41_ae = gv_mapSize;
    const int auto991B7B41_ai = 4;
    playergroup autoA1B0A4D2_g;
    playergroup auto0E6528AE_g;
    int auto5603F121_ae;
    const int auto5603F121_ai = 1;
    playergroup auto529A0BD9_g;
    playergroup auto606E9EFE_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoDE7E96D8_ai >= 0 && lv_x <= autoDE7E96D8_ae) || (autoDE7E96D8_ai < 0 && lv_x >= autoDE7E96D8_ae) ) ; lv_x += autoDE7E96D8_ai ) {
            lv_y = 0;
            for ( ; ( (auto991B7B41_ai >= 0 && lv_y <= auto991B7B41_ae) || (auto991B7B41_ai < 0 && lv_y >= auto991B7B41_ae) ) ; lv_y += auto991B7B41_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoA1B0A4D2_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoA1B0A4D2_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto0E6528AE_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto0E6528AE_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto5603F121_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto5603F121_ai >= 0 && lv_i <= auto5603F121_ae) || (auto5603F121_ai < 0 && lv_i >= auto5603F121_ae) ) ; lv_i += auto5603F121_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto529A0BD9_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto529A0BD9_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto606E9EFE_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto606E9EFE_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateBunkerTerrain () {
    // Variable Declarations
    point lv_pointofcircle;
    int lv_localMapgenAngle;
    int lv_offsetMoveAmount1;
    int lv_offsetMoveAmount2;
    region lv_dirtRemovalRegion;
    int lv_randomCircleAngle;
    point lv_circleTunnelPoint;
    point lv_lastTunnlePoint;
    int lv_currentCircle;
    int lv_labyRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto1F7EC460_ae = gv_mapSize;
    const int auto1F7EC460_ai = 1;
    const int auto09852B66_ae = gv_mapSize;
    const int auto09852B66_ai = 1;
    int autoD51B2439_ae;
    const int autoD51B2439_ai = 1;
    const int auto12E9C88B_ae = 5;
    const int auto12E9C88B_ai = 1;
    int autoB4C00C94_ae;
    const int autoB4C00C94_ai = 1;
    int autoEDCA3B1B_ae;
    const int autoEDCA3B1B_ai = 1;
    int autoFB5DD152_ae;
    const int autoFB5DD152_ai = 1;
    int auto767C5D46_ae;
    const int auto767C5D46_ai = 1;
    int autoC9A3F49C_ae;
    const int autoC9A3F49C_ai = 1;
    int auto7814AB7B_ae;
    const int auto7814AB7B_ai = 1;
    unitgroup auto23A38054_g;
    int auto23A38054_u;
    int auto4F3635DD_ae;
    const int auto4F3635DD_ai = 1;
    int auto2F7E2658_ae;
    const int auto2F7E2658_ai = 1;
    const int autoD1B15AD1_n = 2;
    int autoD1B15AD1_i;
    const int autoF80FDC55_n = 10;
    int autoF80FDC55_i;
    const int autoC4CF7DB0_n = 20;
    int autoC4CF7DB0_i;
    const int autoC4171FD9_n = 2;
    int autoC4171FD9_i;
    const int auto5C82DE0E_n = 10;
    int auto5C82DE0E_i;
    const int autoA259C87F_n = 20;
    int autoA259C87F_i;
    const int auto186B3D73_n = 2;
    int auto186B3D73_i;
    const int autoDE2DE76F_n = 10;
    int autoDE2DE76F_i;
    const int auto98DCB732_n = 2;
    int auto98DCB732_i;
    const int auto1D7FD8E3_n = 10;
    int auto1D7FD8E3_i;
    playergroup auto1DFD3BAD_g;
    int auto1DFD3BAD_var;

    // Variable Initialization
    lv_localMapgenAngle = gv_mapGenAngle;
    lv_dirtRemovalRegion = RegionEmpty();
    lv_currentCircle = 1;
    lv_labyRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_localMapgenAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (auto1F7EC460_ai >= 0 && lv_x <= auto1F7EC460_ae) || (auto1F7EC460_ai < 0 && lv_x >= auto1F7EC460_ae) ) ; lv_x += auto1F7EC460_ai ) {
        lv_y = 0;
        for ( ; ( (auto09852B66_ai >= 0 && lv_y <= auto09852B66_ae) || (auto09852B66_ai < 0 && lv_y >= auto09852B66_ae) ) ; lv_y += auto09852B66_ai ) {
            autoD51B2439_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoD51B2439_ai >= 0 && lv_i <= autoD51B2439_ae) || (autoD51B2439_ai < 0 && lv_i >= autoD51B2439_ae) ) ; lv_i += autoD51B2439_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto12E9C88B_ai >= 0 && lv_i <= auto12E9C88B_ae) || (auto12E9C88B_ai < 0 && lv_i >= auto12E9C88B_ae) ) ; lv_i += auto12E9C88B_ai ) {
        Wait(0.0, c_timeGame);
        autoB4C00C94_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoB4C00C94_ai >= 0 && lv_x <= autoB4C00C94_ae) || (autoB4C00C94_ai < 0 && lv_x >= autoB4C00C94_ae) ) ; lv_x += autoB4C00C94_ai ) {
            autoEDCA3B1B_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoEDCA3B1B_ai >= 0 && lv_y <= autoEDCA3B1B_ae) || (autoEDCA3B1B_ai < 0 && lv_y >= autoEDCA3B1B_ae) ) ; lv_y += autoEDCA3B1B_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoFB5DD152_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoFB5DD152_ai >= 0 && lv_x <= autoFB5DD152_ae) || (autoFB5DD152_ai < 0 && lv_x >= autoFB5DD152_ae) ) ; lv_x += autoFB5DD152_ai ) {
            auto767C5D46_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto767C5D46_ai >= 0 && lv_y <= auto767C5D46_ae) || (auto767C5D46_ai < 0 && lv_y >= auto767C5D46_ae) ) ; lv_y += auto767C5D46_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoC9A3F49C_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoC9A3F49C_ai >= 0 && lv_x <= autoC9A3F49C_ae) || (autoC9A3F49C_ai < 0 && lv_x >= autoC9A3F49C_ae) ) ; lv_x += autoC9A3F49C_ai ) {
        auto7814AB7B_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto7814AB7B_ai >= 0 && lv_y <= auto7814AB7B_ae) || (auto7814AB7B_ai < 0 && lv_y >= auto7814AB7B_ae) ) ; lv_y += auto7814AB7B_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto23A38054_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto23A38054_u = UnitGroupCount(auto23A38054_g, c_unitCountAll);
    for (;; auto23A38054_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto23A38054_g, auto23A38054_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto4F3635DD_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto4F3635DD_ai >= 0 && lv_x <= auto4F3635DD_ae) || (auto4F3635DD_ai < 0 && lv_x >= auto4F3635DD_ae) ) ; lv_x += auto4F3635DD_ai ) {
        auto2F7E2658_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto2F7E2658_ai >= 0 && lv_y <= auto2F7E2658_ae) || (auto2F7E2658_ai < 0 && lv_y >= auto2F7E2658_ae) ) ; lv_y += auto2F7E2658_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    gf_RemoveDirtinRegion(RegionCircle(gv_absoluteCenterpoint, 9.0));
    for (autoD1B15AD1_i = 1; autoD1B15AD1_i <= autoD1B15AD1_n; autoD1B15AD1_i += 1) {
        lv_offsetMoveAmount1 = 0;
        lv_pointofcircle = PointWithOffsetPolar(gv_absoluteCenterpoint, 20.0, (lv_localMapgenAngle + 90));
        for (autoF80FDC55_i = 1; autoF80FDC55_i <= autoF80FDC55_n; autoF80FDC55_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 0)));
        }
        for (autoC4CF7DB0_i = 1; autoC4CF7DB0_i <= autoC4CF7DB0_n; autoC4CF7DB0_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 45)));
        }
        lv_localMapgenAngle = (lv_localMapgenAngle + 180);
    }
    for (autoC4171FD9_i = 1; autoC4171FD9_i <= autoC4171FD9_n; autoC4171FD9_i += 1) {
        lv_offsetMoveAmount1 = 0;
        lv_pointofcircle = PointWithOffsetPolar(gv_absoluteCenterpoint, 20.0, (lv_localMapgenAngle - 90));
        for (auto5C82DE0E_i = 1; auto5C82DE0E_i <= auto5C82DE0E_n; auto5C82DE0E_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 0)));
        }
        for (autoA259C87F_i = 1; autoA259C87F_i <= autoA259C87F_n; autoA259C87F_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 315)));
        }
        lv_localMapgenAngle = (lv_localMapgenAngle + 180);
    }
    for (auto186B3D73_i = 1; auto186B3D73_i <= auto186B3D73_n; auto186B3D73_i += 1) {
        lv_offsetMoveAmount1 = 0;
        lv_pointofcircle = PointWithOffsetPolar(gv_absoluteCenterpoint, 30.0, (lv_localMapgenAngle - 90));
        for (autoDE2DE76F_i = 1; autoDE2DE76F_i <= autoDE2DE76F_n; autoDE2DE76F_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 0)));
        }
        lv_localMapgenAngle = (lv_localMapgenAngle + 180);
    }
    for (auto98DCB732_i = 1; auto98DCB732_i <= auto98DCB732_n; auto98DCB732_i += 1) {
        lv_offsetMoveAmount1 = 0;
        lv_pointofcircle = PointWithOffsetPolar(gv_absoluteCenterpoint, 30.0, (lv_localMapgenAngle + 90));
        for (auto1D7FD8E3_i = 1; auto1D7FD8E3_i <= auto1D7FD8E3_n; auto1D7FD8E3_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 0)));
        }
        lv_localMapgenAngle = (lv_localMapgenAngle + 180);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    auto1DFD3BAD_g = PlayerGroupActive();
    auto1DFD3BAD_var = -1;
    while (true) {
        auto1DFD3BAD_var = PlayerGroupNextPlayer(auto1DFD3BAD_g, auto1DFD3BAD_var);
        if (auto1DFD3BAD_var < 0) { break; }
        VisRevealArea(auto1DFD3BAD_var, lv_dirtRemovalRegion, 0.1, false);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateBunkerPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto1E058BEE_ae = gv_mapSize;
    const int auto1E058BEE_ai = 4;
    const int autoDA121C24_ae = gv_mapSize;
    const int autoDA121C24_ai = 4;
    playergroup auto6ECF9D4E_g;
    playergroup auto58BFB260_g;
    int auto28D0E3F1_ae;
    const int auto28D0E3F1_ai = 1;
    playergroup auto0F9F1EAD_g;
    playergroup auto6BAD04C7_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto1E058BEE_ai >= 0 && lv_x <= auto1E058BEE_ae) || (auto1E058BEE_ai < 0 && lv_x >= auto1E058BEE_ae) ) ; lv_x += auto1E058BEE_ai ) {
            lv_y = 0;
            for ( ; ( (autoDA121C24_ai >= 0 && lv_y <= autoDA121C24_ae) || (autoDA121C24_ai < 0 && lv_y >= autoDA121C24_ae) ) ; lv_y += autoDA121C24_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto6ECF9D4E_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto6ECF9D4E_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto58BFB260_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto58BFB260_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto28D0E3F1_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto28D0E3F1_ai >= 0 && lv_i <= auto28D0E3F1_ae) || (auto28D0E3F1_ai < 0 && lv_i >= auto28D0E3F1_ae) ) ; lv_i += auto28D0E3F1_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto0F9F1EAD_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto0F9F1EAD_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto6BAD04C7_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto6BAD04C7_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateHeartBeatTerrain () {
    // Variable Declarations
    point lv_pointofcircle;
    int lv_localMapgenAngle;
    int lv_offsetMoveAmount1;
    int lv_offsetMoveAmount2;
    region lv_dirtRemovalRegion;
    int lv_randomCircleAngle;
    point lv_circleTunnelPoint;
    point lv_lastTunnlePoint;
    int lv_currentCircle;
    int lv_labyRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto717489C6_ae = gv_mapSize;
    const int auto717489C6_ai = 1;
    const int auto625A7225_ae = gv_mapSize;
    const int auto625A7225_ai = 1;
    int auto2A189B13_ae;
    const int auto2A189B13_ai = 1;
    const int auto3443AB60_ae = 5;
    const int auto3443AB60_ai = 1;
    int autoE5D7BC55_ae;
    const int autoE5D7BC55_ai = 1;
    int auto9EF06FBC_ae;
    const int auto9EF06FBC_ai = 1;
    int auto5D1A1D6F_ae;
    const int auto5D1A1D6F_ai = 1;
    int autoF07F8F12_ae;
    const int autoF07F8F12_ai = 1;
    int auto932B3EA0_ae;
    const int auto932B3EA0_ai = 1;
    int autoE1BF1150_ae;
    const int autoE1BF1150_ai = 1;
    unitgroup auto277B51EF_g;
    int auto277B51EF_u;
    int autoD8AB1708_ae;
    const int autoD8AB1708_ai = 1;
    int auto08DC7EEC_ae;
    const int auto08DC7EEC_ai = 1;
    const int autoE4BB8BE0_n = 2;
    int autoE4BB8BE0_i;
    const int auto0C8A69AC_n = 10;
    int auto0C8A69AC_i;
    const int auto7AE6D4EC_n = 20;
    int auto7AE6D4EC_i;
    const int auto9BA7E0AB_n = 2;
    int auto9BA7E0AB_i;
    const int autoA54F10D3_n = 10;
    int autoA54F10D3_i;
    const int auto82664DCB_n = 20;
    int auto82664DCB_i;
    playergroup auto0BB821C5_g;
    int auto0BB821C5_var;

    // Variable Initialization
    lv_localMapgenAngle = gv_mapGenAngle;
    lv_dirtRemovalRegion = RegionEmpty();
    lv_currentCircle = 1;
    lv_labyRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_localMapgenAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (auto717489C6_ai >= 0 && lv_x <= auto717489C6_ae) || (auto717489C6_ai < 0 && lv_x >= auto717489C6_ae) ) ; lv_x += auto717489C6_ai ) {
        lv_y = 0;
        for ( ; ( (auto625A7225_ai >= 0 && lv_y <= auto625A7225_ae) || (auto625A7225_ai < 0 && lv_y >= auto625A7225_ae) ) ; lv_y += auto625A7225_ai ) {
            auto2A189B13_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto2A189B13_ai >= 0 && lv_i <= auto2A189B13_ae) || (auto2A189B13_ai < 0 && lv_i >= auto2A189B13_ae) ) ; lv_i += auto2A189B13_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto3443AB60_ai >= 0 && lv_i <= auto3443AB60_ae) || (auto3443AB60_ai < 0 && lv_i >= auto3443AB60_ae) ) ; lv_i += auto3443AB60_ai ) {
        Wait(0.0, c_timeGame);
        autoE5D7BC55_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoE5D7BC55_ai >= 0 && lv_x <= autoE5D7BC55_ae) || (autoE5D7BC55_ai < 0 && lv_x >= autoE5D7BC55_ae) ) ; lv_x += autoE5D7BC55_ai ) {
            auto9EF06FBC_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto9EF06FBC_ai >= 0 && lv_y <= auto9EF06FBC_ae) || (auto9EF06FBC_ai < 0 && lv_y >= auto9EF06FBC_ae) ) ; lv_y += auto9EF06FBC_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto5D1A1D6F_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto5D1A1D6F_ai >= 0 && lv_x <= auto5D1A1D6F_ae) || (auto5D1A1D6F_ai < 0 && lv_x >= auto5D1A1D6F_ae) ) ; lv_x += auto5D1A1D6F_ai ) {
            autoF07F8F12_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoF07F8F12_ai >= 0 && lv_y <= autoF07F8F12_ae) || (autoF07F8F12_ai < 0 && lv_y >= autoF07F8F12_ae) ) ; lv_y += autoF07F8F12_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto932B3EA0_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto932B3EA0_ai >= 0 && lv_x <= auto932B3EA0_ae) || (auto932B3EA0_ai < 0 && lv_x >= auto932B3EA0_ae) ) ; lv_x += auto932B3EA0_ai ) {
        autoE1BF1150_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoE1BF1150_ai >= 0 && lv_y <= autoE1BF1150_ae) || (autoE1BF1150_ai < 0 && lv_y >= autoE1BF1150_ae) ) ; lv_y += autoE1BF1150_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto277B51EF_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto277B51EF_u = UnitGroupCount(auto277B51EF_g, c_unitCountAll);
    for (;; auto277B51EF_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto277B51EF_g, auto277B51EF_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoD8AB1708_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoD8AB1708_ai >= 0 && lv_x <= autoD8AB1708_ae) || (autoD8AB1708_ai < 0 && lv_x >= autoD8AB1708_ae) ) ; lv_x += autoD8AB1708_ai ) {
        auto08DC7EEC_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto08DC7EEC_ai >= 0 && lv_y <= auto08DC7EEC_ae) || (auto08DC7EEC_ai < 0 && lv_y >= auto08DC7EEC_ae) ) ; lv_y += auto08DC7EEC_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    gf_RemoveDirtinRegion(RegionCircle(gv_absoluteCenterpoint, 6.0));
    for (autoE4BB8BE0_i = 1; autoE4BB8BE0_i <= autoE4BB8BE0_n; autoE4BB8BE0_i += 1) {
        lv_offsetMoveAmount1 = 0;
        lv_pointofcircle = PointWithOffsetPolar(gv_absoluteCenterpoint, 25.0, (lv_localMapgenAngle + 90));
        for (auto0C8A69AC_i = 1; auto0C8A69AC_i <= auto0C8A69AC_n; auto0C8A69AC_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 0)));
        }
        for (auto7AE6D4EC_i = 1; auto7AE6D4EC_i <= auto7AE6D4EC_n; auto7AE6D4EC_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 45)));
        }
        lv_localMapgenAngle = (lv_localMapgenAngle + 180);
    }
    for (auto9BA7E0AB_i = 1; auto9BA7E0AB_i <= auto9BA7E0AB_n; auto9BA7E0AB_i += 1) {
        lv_offsetMoveAmount1 = 0;
        lv_pointofcircle = PointWithOffsetPolar(gv_absoluteCenterpoint, 25.0, (lv_localMapgenAngle - 90));
        for (autoA54F10D3_i = 1; autoA54F10D3_i <= autoA54F10D3_n; autoA54F10D3_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 0)));
        }
        for (auto82664DCB_i = 1; auto82664DCB_i <= auto82664DCB_n; auto82664DCB_i += 1) {
            RegionAddCircle(lv_dirtRemovalRegion, true, lv_pointofcircle, 10.0);
            PointSet(lv_pointofcircle, PointWithOffsetPolar(lv_pointofcircle, 3.0, (lv_localMapgenAngle + 135)));
        }
        lv_localMapgenAngle = (lv_localMapgenAngle + 180);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    auto0BB821C5_g = PlayerGroupActive();
    auto0BB821C5_var = -1;
    while (true) {
        auto0BB821C5_var = PlayerGroupNextPlayer(auto0BB821C5_g, auto0BB821C5_var);
        if (auto0BB821C5_var < 0) { break; }
        VisRevealArea(auto0BB821C5_var, lv_dirtRemovalRegion, 0.1, false);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateHeartBeatPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto3E90EC99_ae = gv_mapSize;
    const int auto3E90EC99_ai = 4;
    const int auto6CCA3E97_ae = gv_mapSize;
    const int auto6CCA3E97_ai = 4;
    playergroup auto3638F527_g;
    playergroup autoABF39BE7_g;
    int autoE0F2C113_ae;
    const int autoE0F2C113_ai = 1;
    playergroup auto67E54275_g;
    playergroup autoD71D9B86_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto3E90EC99_ai >= 0 && lv_x <= auto3E90EC99_ae) || (auto3E90EC99_ai < 0 && lv_x >= auto3E90EC99_ae) ) ; lv_x += auto3E90EC99_ai ) {
            lv_y = 0;
            for ( ; ( (auto6CCA3E97_ai >= 0 && lv_y <= auto6CCA3E97_ae) || (auto6CCA3E97_ai < 0 && lv_y >= auto6CCA3E97_ae) ) ; lv_y += auto6CCA3E97_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto3638F527_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto3638F527_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoABF39BE7_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoABF39BE7_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoE0F2C113_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoE0F2C113_ai >= 0 && lv_i <= autoE0F2C113_ae) || (autoE0F2C113_ai < 0 && lv_i >= autoE0F2C113_ae) ) ; lv_i += autoE0F2C113_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto67E54275_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto67E54275_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoD71D9B86_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoD71D9B86_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateCheeseTerrain () {
    // Variable Declarations
    int lv_offsetCircleOfDirtRemoval;
    region lv_dirtRemovalRegion;
    int lv_RiverAngle;
    int lv_RiverAngle2;
    point lv_point1River;
    point lv_point2River;
    int lv_currentCircle;
    int lv_cavesRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto40A05363_n = 100;
    int auto40A05363_i;
    int auto78179132_ae;
    const int auto78179132_ai = 1;
    const int auto44505421_ae = gv_mapSize;
    const int auto44505421_ai = 1;
    const int auto97FF3C1F_ae = gv_mapSize;
    const int auto97FF3C1F_ai = 1;
    int auto468B0179_ae;
    const int auto468B0179_ai = 1;
    const int autoF0CA8763_ae = 5;
    const int autoF0CA8763_ai = 1;
    int autoA7296272_ae;
    const int autoA7296272_ai = 1;
    int auto08CF2D01_ae;
    const int auto08CF2D01_ai = 1;
    int autoFC404663_ae;
    const int autoFC404663_ai = 1;
    int auto9176FC59_ae;
    const int auto9176FC59_ai = 1;
    int auto4832047F_ae;
    const int auto4832047F_ai = 1;
    int autoC7D851F9_ae;
    const int autoC7D851F9_ai = 1;
    unitgroup auto26415168_g;
    int auto26415168_u;
    int auto6F2A3D9D_ae;
    const int auto6F2A3D9D_ai = 1;
    int auto1E83B5EF_ae;
    const int auto1E83B5EF_ai = 1;
    const int auto626AFFAA_n = 30;
    int auto626AFFAA_i;

    // Variable Initialization
    lv_dirtRemovalRegion = RegionEmpty();
    lv_RiverAngle = RandomInt(0, 180);
    lv_RiverAngle2 = RandomInt(0, 360);
    lv_currentCircle = 1;
    lv_cavesRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 1.0;

    // Implementation
    gv_clearCircleCount = 100;
    lv_cavesRandomAngle = RandomInt(0, 360);
    gv_mapGenAngle = lv_cavesRandomAngle;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    lv_point1River = PointWithOffsetPolar(gv_absoluteCenterpoint, 80.0, (lv_RiverAngle + 180));
    lv_point2River = PointWithOffsetPolar(gv_absoluteCenterpoint, 80.0, (lv_RiverAngle - 0));
    gv_mapGenAngleOffsetForCheese = lv_RiverAngle;
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 2.0);
    for (auto40A05363_i = 1; auto40A05363_i <= auto40A05363_n; auto40A05363_i += 1) {
        auto78179132_ae = lv_currentCircle;
        lv_i = lv_currentCircle;
        for ( ; ( (auto78179132_ai >= 0 && lv_i <= auto78179132_ae) || (auto78179132_ai < 0 && lv_i >= auto78179132_ae) ) ; lv_i += auto78179132_ai ) {
            gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(6.0, 50.0), lv_cavesRandomAngle);
            PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.2), (lv_circleSizeMax * 1.2)));
        }
        lv_currentCircle = (lv_currentCircle + 1);
        lv_cavesRandomAngle = RandomInt(0, 360);
    }
    lv_x = 0;
    for ( ; ( (auto44505421_ai >= 0 && lv_x <= auto44505421_ae) || (auto44505421_ai < 0 && lv_x >= auto44505421_ae) ) ; lv_x += auto44505421_ai ) {
        lv_y = 0;
        for ( ; ( (auto97FF3C1F_ai >= 0 && lv_y <= auto97FF3C1F_ae) || (auto97FF3C1F_ai < 0 && lv_y >= auto97FF3C1F_ae) ) ; lv_y += auto97FF3C1F_ai ) {
            auto468B0179_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto468B0179_ai >= 0 && lv_i <= auto468B0179_ae) || (auto468B0179_ai < 0 && lv_i >= auto468B0179_ae) ) ; lv_i += auto468B0179_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoF0CA8763_ai >= 0 && lv_i <= autoF0CA8763_ae) || (autoF0CA8763_ai < 0 && lv_i >= autoF0CA8763_ae) ) ; lv_i += autoF0CA8763_ai ) {
        Wait(0.0, c_timeGame);
        autoA7296272_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoA7296272_ai >= 0 && lv_x <= autoA7296272_ae) || (autoA7296272_ai < 0 && lv_x >= autoA7296272_ae) ) ; lv_x += autoA7296272_ai ) {
            auto08CF2D01_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto08CF2D01_ai >= 0 && lv_y <= auto08CF2D01_ae) || (auto08CF2D01_ai < 0 && lv_y >= auto08CF2D01_ae) ) ; lv_y += auto08CF2D01_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoFC404663_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoFC404663_ai >= 0 && lv_x <= autoFC404663_ae) || (autoFC404663_ai < 0 && lv_x >= autoFC404663_ae) ) ; lv_x += autoFC404663_ai ) {
            auto9176FC59_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto9176FC59_ai >= 0 && lv_y <= auto9176FC59_ae) || (auto9176FC59_ai < 0 && lv_y >= auto9176FC59_ae) ) ; lv_y += auto9176FC59_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto4832047F_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto4832047F_ai >= 0 && lv_x <= auto4832047F_ae) || (auto4832047F_ai < 0 && lv_x >= auto4832047F_ae) ) ; lv_x += auto4832047F_ai ) {
        autoC7D851F9_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoC7D851F9_ai >= 0 && lv_y <= autoC7D851F9_ae) || (autoC7D851F9_ai < 0 && lv_y >= autoC7D851F9_ae) ) ; lv_y += autoC7D851F9_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto26415168_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto26415168_u = UnitGroupCount(auto26415168_g, c_unitCountAll);
    for (;; auto26415168_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto26415168_g, auto26415168_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto6F2A3D9D_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto6F2A3D9D_ai >= 0 && lv_x <= auto6F2A3D9D_ae) || (auto6F2A3D9D_ai < 0 && lv_x >= auto6F2A3D9D_ae) ) ; lv_x += auto6F2A3D9D_ai ) {
        auto1E83B5EF_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto1E83B5EF_ai >= 0 && lv_y <= auto1E83B5EF_ae) || (auto1E83B5EF_ai < 0 && lv_y >= auto1E83B5EF_ae) ) ; lv_y += auto1E83B5EF_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    for (auto626AFFAA_i = 1; auto626AFFAA_i <= auto626AFFAA_n; auto626AFFAA_i += 1) {
        RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(lv_point1River, lv_offsetCircleOfDirtRemoval, (lv_RiverAngle + 90)), 40.0));
        RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(lv_point1River, lv_offsetCircleOfDirtRemoval, (lv_RiverAngle - 90)), 40.0));
        RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(lv_point2River, lv_offsetCircleOfDirtRemoval, (lv_RiverAngle + 90)), 40.0));
        RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(lv_point2River, lv_offsetCircleOfDirtRemoval, (lv_RiverAngle - 90)), 40.0));
        lv_offsetCircleOfDirtRemoval = (lv_offsetCircleOfDirtRemoval + 3);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateCheesePlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto49340720_ae = gv_mapSize;
    const int auto49340720_ai = 4;
    const int auto83768227_ae = gv_mapSize;
    const int auto83768227_ai = 4;
    playergroup auto76C4227C_g;
    playergroup auto24C6BF7C_g;
    int auto50BA75C1_ae;
    const int auto50BA75C1_ai = 1;
    playergroup auto8E63354F_g;
    playergroup auto437DC2E7_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto49340720_ai >= 0 && lv_x <= auto49340720_ae) || (auto49340720_ai < 0 && lv_x >= auto49340720_ae) ) ; lv_x += auto49340720_ai ) {
            lv_y = 0;
            for ( ; ( (auto83768227_ai >= 0 && lv_y <= auto83768227_ae) || (auto83768227_ai < 0 && lv_y >= auto83768227_ae) ) ; lv_y += auto83768227_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto76C4227C_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto76C4227C_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto24C6BF7C_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto24C6BF7C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto50BA75C1_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto50BA75C1_ai >= 0 && lv_i <= auto50BA75C1_ae) || (auto50BA75C1_ai < 0 && lv_i >= auto50BA75C1_ae) ) ; lv_i += auto50BA75C1_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = 55;
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = 55;
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = 55;
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        lv_spawnDistance = 55;
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = 55;
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (gv_mapGenAngleOffsetForCheese + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(gv_absoluteCenterpoint, lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto8E63354F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto8E63354F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto437DC2E7_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto437DC2E7_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateChipTerrain () {
    // Variable Declarations
    point lv_pointofcircle;
    int lv_localMapgenAngle;
    int lv_offsetMoveAmount1;
    int lv_offsetMoveAmount2;
    region lv_dirtRemovalRegion;
    int lv_randomCircleAngle;
    point lv_circleTunnelPoint;
    point lv_lastTunnlePoint;
    int lv_currentCircle;
    int lv_labyRandomAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto1812B7CC_ae = gv_mapSize;
    const int auto1812B7CC_ai = 1;
    const int auto7AD48244_ae = gv_mapSize;
    const int auto7AD48244_ai = 1;
    int auto6E60B43E_ae;
    const int auto6E60B43E_ai = 1;
    const int auto2D5BBB4F_ae = 5;
    const int auto2D5BBB4F_ai = 1;
    int auto7192D808_ae;
    const int auto7192D808_ai = 1;
    int auto188361D6_ae;
    const int auto188361D6_ai = 1;
    int auto6433101D_ae;
    const int auto6433101D_ai = 1;
    int autoECDCC623_ae;
    const int autoECDCC623_ai = 1;
    int auto5B0C3032_ae;
    const int auto5B0C3032_ai = 1;
    int auto46ECDA4F_ae;
    const int auto46ECDA4F_ai = 1;
    unitgroup auto81580FAF_g;
    int auto81580FAF_u;
    int autoAF8F7960_ae;
    const int autoAF8F7960_ai = 1;
    int auto1ED2CFD9_ae;
    const int auto1ED2CFD9_ai = 1;
    playergroup auto949B530F_g;
    int auto949B530F_var;

    // Variable Initialization
    lv_localMapgenAngle = gv_mapGenAngle;
    lv_dirtRemovalRegion = RegionEmpty();
    lv_currentCircle = 1;
    lv_labyRandomAngle = 360;
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_localMapgenAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (auto1812B7CC_ai >= 0 && lv_x <= auto1812B7CC_ae) || (auto1812B7CC_ai < 0 && lv_x >= auto1812B7CC_ae) ) ; lv_x += auto1812B7CC_ai ) {
        lv_y = 0;
        for ( ; ( (auto7AD48244_ai >= 0 && lv_y <= auto7AD48244_ae) || (auto7AD48244_ai < 0 && lv_y >= auto7AD48244_ae) ) ; lv_y += auto7AD48244_ai ) {
            auto6E60B43E_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto6E60B43E_ai >= 0 && lv_i <= auto6E60B43E_ae) || (auto6E60B43E_ai < 0 && lv_i >= auto6E60B43E_ae) ) ; lv_i += auto6E60B43E_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto2D5BBB4F_ai >= 0 && lv_i <= auto2D5BBB4F_ae) || (auto2D5BBB4F_ai < 0 && lv_i >= auto2D5BBB4F_ae) ) ; lv_i += auto2D5BBB4F_ai ) {
        Wait(0.0, c_timeGame);
        auto7192D808_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto7192D808_ai >= 0 && lv_x <= auto7192D808_ae) || (auto7192D808_ai < 0 && lv_x >= auto7192D808_ae) ) ; lv_x += auto7192D808_ai ) {
            auto188361D6_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto188361D6_ai >= 0 && lv_y <= auto188361D6_ae) || (auto188361D6_ai < 0 && lv_y >= auto188361D6_ae) ) ; lv_y += auto188361D6_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto6433101D_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto6433101D_ai >= 0 && lv_x <= auto6433101D_ae) || (auto6433101D_ai < 0 && lv_x >= auto6433101D_ae) ) ; lv_x += auto6433101D_ai ) {
            autoECDCC623_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoECDCC623_ai >= 0 && lv_y <= autoECDCC623_ae) || (autoECDCC623_ai < 0 && lv_y >= autoECDCC623_ae) ) ; lv_y += autoECDCC623_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto5B0C3032_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto5B0C3032_ai >= 0 && lv_x <= auto5B0C3032_ae) || (auto5B0C3032_ai < 0 && lv_x >= auto5B0C3032_ae) ) ; lv_x += auto5B0C3032_ai ) {
        auto46ECDA4F_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto46ECDA4F_ai >= 0 && lv_y <= auto46ECDA4F_ae) || (auto46ECDA4F_ai < 0 && lv_y >= auto46ECDA4F_ae) ) ; lv_y += auto46ECDA4F_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto81580FAF_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto81580FAF_u = UnitGroupCount(auto81580FAF_g, c_unitCountAll);
    for (;; auto81580FAF_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto81580FAF_g, auto81580FAF_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoAF8F7960_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoAF8F7960_ai >= 0 && lv_x <= autoAF8F7960_ae) || (autoAF8F7960_ai < 0 && lv_x >= autoAF8F7960_ae) ) ; lv_x += autoAF8F7960_ai ) {
        auto1ED2CFD9_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto1ED2CFD9_ai >= 0 && lv_y <= auto1ED2CFD9_ae) || (auto1ED2CFD9_ai < 0 && lv_y >= auto1ED2CFD9_ae) ) ; lv_y += auto1ED2CFD9_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(0.0, 66.0, 152.0, 86.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(152.0, 106.0, 0.0, 119.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(152.0, 33.0, 0.0, 46.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(3.0, 40.0, 4.0, 112.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(24.0, 0.0, 26.0, 112.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(46.0, 0.0, 48.0, 112.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(68.0, 0.0, 70.0, 112.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(82.0, 40.0, 84.0, 152.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(104.0, 40.0, 106.0, 152.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(126.0, 40.0, 128.0, 152.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(148.0, 40.0, 150.0, 112.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(24.0, 0.0, 70.0, 30.0));
    RegionAddRegion(lv_dirtRemovalRegion, RegionRect(82.0, 122.0, 128.0, 152.0));
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    auto949B530F_g = PlayerGroupActive();
    auto949B530F_var = -1;
    while (true) {
        auto949B530F_var = PlayerGroupNextPlayer(auto949B530F_g, auto949B530F_var);
        if (auto949B530F_var < 0) { break; }
        VisRevealArea(auto949B530F_var, lv_dirtRemovalRegion, 0.1, false);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
    gv_amountOfDirtScatterSmall = 0;
    gv_amountOfDirtScatterMid = 0;
    gv_amountOfDirtScatterLarge = 0;
}

void gf_GenerateChipPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto91F6BCD4_ae = gv_mapSize;
    const int auto91F6BCD4_ai = 4;
    const int auto626599A4_ae = gv_mapSize;
    const int auto626599A4_ai = 4;
    playergroup auto8B0CB15E_g;
    playergroup auto953B4EEE_g;
    int auto21C45909_ae;
    const int auto21C45909_ai = 1;
    playergroup auto762D7EB7_g;
    playergroup autoC61CF770_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto91F6BCD4_ai >= 0 && lv_x <= auto91F6BCD4_ae) || (auto91F6BCD4_ai < 0 && lv_x >= auto91F6BCD4_ae) ) ; lv_x += auto91F6BCD4_ai ) {
            lv_y = 0;
            for ( ; ( (auto626599A4_ai >= 0 && lv_y <= auto626599A4_ae) || (auto626599A4_ai < 0 && lv_y >= auto626599A4_ae) ) ; lv_y += auto626599A4_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto8B0CB15E_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto8B0CB15E_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto953B4EEE_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto953B4EEE_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto21C45909_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto21C45909_ai >= 0 && lv_i <= auto21C45909_ae) || (auto21C45909_ai < 0 && lv_i >= auto21C45909_ae) ) ; lv_i += auto21C45909_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto762D7EB7_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto762D7EB7_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoC61CF770_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoC61CF770_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateAntFarmTerrain () {
    // Variable Declarations
    point lv_centerPointwithoffsetUp;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;
    region lv_dirtRemovalRegion;
    region lv_dirtRemovalArmsEndRegion;
    region lv_dirtRemovalArmsStartRegion;
    int lv_angleforLine;
    point lv_dirtLineExecuter;
    point lv_dirtArmExecuterStartPoint;
    point lv_dirtArmExecuterEndPoint;
    fixed lv_dirtArmExecuterOffsetFraction;

    // Automatic Variable Declarations
    const int auto05D54F74_ae = 35;
    const int auto05D54F74_ai = 1;
    const int autoD00E40F0_ae = 40;
    const int autoD00E40F0_ai = 1;
    const int auto53720FB2_ae = gv_mapSize;
    const int auto53720FB2_ai = 1;
    const int auto8891219A_ae = gv_mapSize;
    const int auto8891219A_ai = 1;
    int auto27788F6B_ae;
    const int auto27788F6B_ai = 1;
    const int autoF5A4687A_ae = 5;
    const int autoF5A4687A_ai = 1;
    int auto5364EBFA_ae;
    const int auto5364EBFA_ai = 1;
    int auto6D81F1A4_ae;
    const int auto6D81F1A4_ai = 1;
    int auto529B5805_ae;
    const int auto529B5805_ai = 1;
    int autoAFD0A13A_ae;
    const int autoAFD0A13A_ai = 1;
    int autoBCCB58D6_ae;
    const int autoBCCB58D6_ai = 1;
    int autoF8D43C24_ae;
    const int autoF8D43C24_ai = 1;
    unitgroup auto978AB3EC_g;
    int auto978AB3EC_u;
    int autoD8DFBFEB_ae;
    const int autoD8DFBFEB_ai = 1;
    int auto2D0C7230_ae;
    const int auto2D0C7230_ai = 1;
    const int auto3B8389D6_n = 1;
    int auto3B8389D6_i;
    const int auto72E76CD0_n = 20;
    int auto72E76CD0_i;
    const int autoCE80D409_n = 5;
    int autoCE80D409_i;
    const int auto8C5E1D42_n = 20;
    int auto8C5E1D42_i;
    const int autoC7261DB0_n = 20;
    int autoC7261DB0_i;
    const int autoB98D66BE_n = 20;
    int autoB98D66BE_i;
    const int auto315F2830_n = 20;
    int auto315F2830_i;
    const int auto70D503E5_n = 5;
    int auto70D503E5_i;
    const int auto4C069A29_n = 20;
    int auto4C069A29_i;
    const int autoF0B6D593_n = 20;
    int autoF0B6D593_i;
    const int auto7083E646_n = 20;
    int auto7083E646_i;
    const int auto492AF56A_n = 2;
    int auto492AF56A_i;
    const int auto6282000D_n = 100;
    int auto6282000D_i;
    playergroup auto2BCBFAE2_g;
    int auto2BCBFAE2_var;

    // Variable Initialization
    lv_centerPointwithoffsetUp = PointWithOffset(gv_absoluteCenterpoint, 0.0, 7.0);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;
    lv_dirtRemovalRegion = RegionEmpty();
    lv_dirtRemovalArmsEndRegion = RegionRect(10.0, 10.0, 142.0, 40.0);
    lv_dirtRemovalArmsStartRegion = RegionRect(10.0, 100.0, 142.0, 140.0);

    // Implementation
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), gv_mapSize);
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, -10.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 14.0);
    lv_i = 21;
    for ( ; ( (auto05D54F74_ai >= 0 && lv_i <= auto05D54F74_ae) || (auto05D54F74_ai < 0 && lv_i >= auto05D54F74_ae) ) ; lv_i += auto05D54F74_ai ) {
    }
    lv_i = 36;
    for ( ; ( (autoD00E40F0_ai >= 0 && lv_i <= autoD00E40F0_ae) || (autoD00E40F0_ai < 0 && lv_i >= autoD00E40F0_ae) ) ; lv_i += autoD00E40F0_ai ) {
    }
    lv_x = 0;
    for ( ; ( (auto53720FB2_ai >= 0 && lv_x <= auto53720FB2_ae) || (auto53720FB2_ai < 0 && lv_x >= auto53720FB2_ae) ) ; lv_x += auto53720FB2_ai ) {
        lv_y = 0;
        for ( ; ( (auto8891219A_ai >= 0 && lv_y <= auto8891219A_ae) || (auto8891219A_ai < 0 && lv_y >= auto8891219A_ae) ) ; lv_y += auto8891219A_ai ) {
            auto27788F6B_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto27788F6B_ai >= 0 && lv_i <= auto27788F6B_ae) || (auto27788F6B_ai < 0 && lv_i >= auto27788F6B_ae) ) ; lv_i += auto27788F6B_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoF5A4687A_ai >= 0 && lv_i <= autoF5A4687A_ae) || (autoF5A4687A_ai < 0 && lv_i >= autoF5A4687A_ae) ) ; lv_i += autoF5A4687A_ai ) {
        Wait(0.0, c_timeGame);
        auto5364EBFA_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto5364EBFA_ai >= 0 && lv_x <= auto5364EBFA_ae) || (auto5364EBFA_ai < 0 && lv_x >= auto5364EBFA_ae) ) ; lv_x += auto5364EBFA_ai ) {
            auto6D81F1A4_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto6D81F1A4_ai >= 0 && lv_y <= auto6D81F1A4_ae) || (auto6D81F1A4_ai < 0 && lv_y >= auto6D81F1A4_ae) ) ; lv_y += auto6D81F1A4_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto529B5805_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto529B5805_ai >= 0 && lv_x <= auto529B5805_ae) || (auto529B5805_ai < 0 && lv_x >= auto529B5805_ae) ) ; lv_x += auto529B5805_ai ) {
            autoAFD0A13A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoAFD0A13A_ai >= 0 && lv_y <= autoAFD0A13A_ae) || (autoAFD0A13A_ai < 0 && lv_y >= autoAFD0A13A_ae) ) ; lv_y += autoAFD0A13A_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoBCCB58D6_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoBCCB58D6_ai >= 0 && lv_x <= autoBCCB58D6_ae) || (autoBCCB58D6_ai < 0 && lv_x >= autoBCCB58D6_ae) ) ; lv_x += autoBCCB58D6_ai ) {
        autoF8D43C24_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoF8D43C24_ai >= 0 && lv_y <= autoF8D43C24_ae) || (autoF8D43C24_ai < 0 && lv_y >= autoF8D43C24_ae) ) ; lv_y += autoF8D43C24_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto978AB3EC_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto978AB3EC_u = UnitGroupCount(auto978AB3EC_g, c_unitCountAll);
    for (;; auto978AB3EC_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto978AB3EC_g, auto978AB3EC_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoD8DFBFEB_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoD8DFBFEB_ai >= 0 && lv_x <= autoD8DFBFEB_ae) || (autoD8DFBFEB_ai < 0 && lv_x >= autoD8DFBFEB_ae) ) ; lv_x += autoD8DFBFEB_ai ) {
        auto2D0C7230_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto2D0C7230_ai >= 0 && lv_y <= auto2D0C7230_ae) || (auto2D0C7230_ai < 0 && lv_y >= auto2D0C7230_ae) ) ; lv_y += auto2D0C7230_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    for (auto3B8389D6_i = 1; auto3B8389D6_i <= auto3B8389D6_n; auto3B8389D6_i += 1) {
        RegionAddRegion(lv_dirtRemovalRegion, RegionRect(0.0, 80.0, 152.0, 152.0));
        RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 8.0));
        lv_angleforLine = (0 + RandomInt(-20, 20));
        for (auto72E76CD0_i = 1; auto72E76CD0_i <= auto72E76CD0_n; auto72E76CD0_i += 1) {
            lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), lv_angleforLine);
            RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
        }
        for (autoCE80D409_i = 1; autoCE80D409_i <= autoCE80D409_n; autoCE80D409_i += 1) {
            lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), lv_angleforLine);
            RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.8), (lv_circleSizeMax * 2.1))));
        }
        if ((lv_angleforLine < 0)) {
            for (auto8C5E1D42_i = 1; auto8C5E1D42_i <= auto8C5E1D42_n; auto8C5E1D42_i += 1) {
                lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), (lv_angleforLine + 10));
                RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
            }
            for (autoC7261DB0_i = 1; autoC7261DB0_i <= autoC7261DB0_n; autoC7261DB0_i += 1) {
                lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), (lv_angleforLine + 20));
                RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
            }
            for (autoB98D66BE_i = 1; autoB98D66BE_i <= autoB98D66BE_n; autoB98D66BE_i += 1) {
                lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), (lv_angleforLine + 30));
                RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
            }
        }

        lv_angleforLine = (180 + RandomInt(-20, 20));
        for (auto315F2830_i = 1; auto315F2830_i <= auto315F2830_n; auto315F2830_i += 1) {
            lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), lv_angleforLine);
            RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
        }
        for (auto70D503E5_i = 1; auto70D503E5_i <= auto70D503E5_n; auto70D503E5_i += 1) {
            lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), lv_angleforLine);
            RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.8), (lv_circleSizeMax * 2.1))));
        }
        if ((lv_angleforLine > 180)) {
            for (auto4C069A29_i = 1; auto4C069A29_i <= auto4C069A29_n; auto4C069A29_i += 1) {
                lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), (lv_angleforLine - 10));
                RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
            }
            for (autoF0B6D593_i = 1; autoF0B6D593_i <= autoF0B6D593_n; autoF0B6D593_i += 1) {
                lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), (lv_angleforLine - 20));
                RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
            }
            for (auto7083E646_i = 1; auto7083E646_i <= auto7083E646_n; auto7083E646_i += 1) {
                lv_dirtLineExecuter = PointWithOffsetPolar(lv_centerPointwithoffsetUp, RandomFixed(5.0, 80.0), (lv_angleforLine - 30));
                RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtLineExecuter, RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3))));
            }
        }

    }
    for (auto492AF56A_i = 1; auto492AF56A_i <= auto492AF56A_n; auto492AF56A_i += 1) {
        lv_dirtArmExecuterStartPoint = RegionRandomPoint(lv_dirtRemovalArmsStartRegion);
        lv_dirtArmExecuterEndPoint = RegionRandomPoint(lv_dirtRemovalArmsEndRegion);
        lv_dirtArmExecuterOffsetFraction = 0.0;
        for (auto6282000D_i = 1; auto6282000D_i <= auto6282000D_n; auto6282000D_i += 1) {
            RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(PointInterpolate(lv_dirtArmExecuterStartPoint, lv_dirtArmExecuterEndPoint, lv_dirtArmExecuterOffsetFraction), 2.0));
            lv_dirtArmExecuterOffsetFraction = (lv_dirtArmExecuterOffsetFraction + 0.01);
        }
        RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(lv_dirtArmExecuterEndPoint, 8.0));
    }
    auto2BCBFAE2_g = PlayerGroupActive();
    auto2BCBFAE2_var = -1;
    while (true) {
        auto2BCBFAE2_var = PlayerGroupNextPlayer(auto2BCBFAE2_g, auto2BCBFAE2_var);
        if (auto2BCBFAE2_var < 0) { break; }
        VisRevealArea(auto2BCBFAE2_var, lv_dirtRemovalRegion, 7.0, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateAntFarmPlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto39D1F2E3_ae = gv_mapSize;
    const int auto39D1F2E3_ai = 4;
    const int auto6F793E13_ae = gv_mapSize;
    const int auto6F793E13_ai = 4;
    playergroup auto240B36C3_g;
    playergroup autoEBE2E686_g;
    int autoD3610775_ae;
    const int autoD3610775_ai = 1;
    playergroup auto236FB57F_g;
    playergroup autoB006368C_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto39D1F2E3_ai >= 0 && lv_x <= auto39D1F2E3_ae) || (auto39D1F2E3_ai < 0 && lv_x >= auto39D1F2E3_ae) ) ; lv_x += auto39D1F2E3_ai ) {
            lv_y = 0;
            for ( ; ( (auto6F793E13_ai >= 0 && lv_y <= auto6F793E13_ae) || (auto6F793E13_ai < 0 && lv_y >= auto6F793E13_ae) ) ; lv_y += auto6F793E13_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto240B36C3_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto240B36C3_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoEBE2E686_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoEBE2E686_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoD3610775_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoD3610775_ai >= 0 && lv_i <= autoD3610775_ae) || (autoD3610775_ai < 0 && lv_i >= autoD3610775_ae) ) ; lv_i += autoD3610775_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, (gv_mapGenAngle - 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, gv_mapGenAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, (gv_mapGenAngle - 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, gv_mapGenAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = (lv_spawnDistance + 5);
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = (lv_spawnDistance + 5);
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto236FB57F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto236FB57F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoB006368C_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoB006368C_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateDuelCircleTerrain () {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto2E24D723_ae = gv_mapSize;
    const int auto2E24D723_ai = 1;
    const int auto86C43A28_ae = gv_mapSize;
    const int auto86C43A28_ai = 1;
    int auto64551465_ae;
    const int auto64551465_ai = 1;
    const int autoE2B46413_ae = 6;
    const int autoE2B46413_ai = 1;
    int auto276C68F5_ae;
    const int auto276C68F5_ai = 1;
    int auto6B607F8B_ae;
    const int auto6B607F8B_ai = 1;
    int auto6BC8D1F0_ae;
    const int auto6BC8D1F0_ai = 1;
    int autoE742F90F_ae;
    const int autoE742F90F_ai = 1;
    const int auto61AF5FC1_ae = gv_mapSize;
    const int auto61AF5FC1_ai = 1;
    const int autoFB06C4CC_ae = gv_mapSize;
    const int autoFB06C4CC_ai = 1;
    int autoB8B9A562_ae;
    const int autoB8B9A562_ai = 1;
    int auto0D4F2F26_ae;
    const int auto0D4F2F26_ai = 1;
    unitgroup auto2ADE8EED_g;
    int auto2ADE8EED_u;
    int autoA0C9AE95_ae;
    const int autoA0C9AE95_ai = 1;
    int auto5A2883D0_ae;
    const int auto5A2883D0_ai = 1;

    // Variable Initialization
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 7.0;

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    gv_usingInvertedMapLayout = true;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircleCount = 6;
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 3.0);
    gv_clearCircles[1] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 24.0, (gv_mapGenAngle + 45));
    PointSetHeight(gv_clearCircles[1], 16.0);
    gv_clearCircles[2] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 24.0, (gv_mapGenAngle + 115));
    PointSetHeight(gv_clearCircles[2], 2.5);
    gv_clearCircles[3] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 24.0, (gv_mapGenAngle + 155));
    PointSetHeight(gv_clearCircles[3], 2.5);
    gv_clearCircles[4] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 24.0, (gv_mapGenAngle + 225));
    PointSetHeight(gv_clearCircles[4], 16.0);
    gv_clearCircles[5] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 24.0, (gv_mapGenAngle + 295));
    PointSetHeight(gv_clearCircles[5], 2.5);
    gv_clearCircles[6] = PointWithOffsetPolar(lv_dirtMapCenterPoint, 24.0, (gv_mapGenAngle + 335));
    PointSetHeight(gv_clearCircles[6], 2.5);
    lv_x = 0;
    for ( ; ( (auto2E24D723_ai >= 0 && lv_x <= auto2E24D723_ae) || (auto2E24D723_ai < 0 && lv_x >= auto2E24D723_ae) ) ; lv_x += auto2E24D723_ai ) {
        lv_y = 0;
        for ( ; ( (auto86C43A28_ai >= 0 && lv_y <= auto86C43A28_ae) || (auto86C43A28_ai < 0 && lv_y >= auto86C43A28_ae) ) ; lv_y += auto86C43A28_ai ) {
            auto64551465_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto64551465_ai >= 0 && lv_i <= auto64551465_ae) || (auto64551465_ai < 0 && lv_i >= auto64551465_ae) ) ; lv_i += auto64551465_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoE2B46413_ai >= 0 && lv_i <= autoE2B46413_ae) || (autoE2B46413_ai < 0 && lv_i >= autoE2B46413_ae) ) ; lv_i += autoE2B46413_ai ) {
        Wait(0.0, c_timeGame);
        auto276C68F5_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto276C68F5_ai >= 0 && lv_x <= auto276C68F5_ae) || (auto276C68F5_ai < 0 && lv_x >= auto276C68F5_ae) ) ; lv_x += auto276C68F5_ai ) {
            auto6B607F8B_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto6B607F8B_ai >= 0 && lv_y <= auto6B607F8B_ae) || (auto6B607F8B_ai < 0 && lv_y >= auto6B607F8B_ae) ) ; lv_y += auto6B607F8B_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto6BC8D1F0_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto6BC8D1F0_ai >= 0 && lv_x <= auto6BC8D1F0_ae) || (auto6BC8D1F0_ai < 0 && lv_x >= auto6BC8D1F0_ae) ) ; lv_x += auto6BC8D1F0_ai ) {
            autoE742F90F_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoE742F90F_ai >= 0 && lv_y <= autoE742F90F_ae) || (autoE742F90F_ai < 0 && lv_y >= autoE742F90F_ae) ) ; lv_y += autoE742F90F_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_x = 0;
    for ( ; ( (auto61AF5FC1_ai >= 0 && lv_x <= auto61AF5FC1_ae) || (auto61AF5FC1_ai < 0 && lv_x >= auto61AF5FC1_ae) ) ; lv_x += auto61AF5FC1_ai ) {
        lv_y = 0;
        for ( ; ( (autoFB06C4CC_ai >= 0 && lv_y <= autoFB06C4CC_ae) || (autoFB06C4CC_ai < 0 && lv_y >= autoFB06C4CC_ae) ) ; lv_y += autoFB06C4CC_ai ) {
            if ((gv_dirtMap[lv_x][lv_y] == 0)) {
                gv_dirtMap[lv_x][lv_y] = 1;
            }
            else {
                gv_dirtMap[lv_x][lv_y] = 0;
            }
        }
    }
    autoB8B9A562_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoB8B9A562_ai >= 0 && lv_x <= autoB8B9A562_ae) || (autoB8B9A562_ai < 0 && lv_x >= autoB8B9A562_ae) ) ; lv_x += autoB8B9A562_ai ) {
        auto0D4F2F26_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto0D4F2F26_ai >= 0 && lv_y <= auto0D4F2F26_ae) || (auto0D4F2F26_ai < 0 && lv_y >= auto0D4F2F26_ae) ) ; lv_y += auto0D4F2F26_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto2ADE8EED_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto2ADE8EED_u = UnitGroupCount(auto2ADE8EED_g, c_unitCountAll);
    for (;; auto2ADE8EED_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto2ADE8EED_g, auto2ADE8EED_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoA0C9AE95_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoA0C9AE95_ai >= 0 && lv_x <= autoA0C9AE95_ae) || (autoA0C9AE95_ai < 0 && lv_x >= autoA0C9AE95_ae) ) ; lv_x += autoA0C9AE95_ai ) {
        auto5A2883D0_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto5A2883D0_ai >= 0 && lv_y <= auto5A2883D0_ae) || (auto5A2883D0_ai < 0 && lv_y >= auto5A2883D0_ae) ) ; lv_y += auto5A2883D0_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateDuelCirclePlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoAF36B74F_ae = gv_mapSize;
    const int autoAF36B74F_ai = 4;
    const int auto8DE326E8_ae = gv_mapSize;
    const int auto8DE326E8_ai = 4;
    playergroup autoDB5375D5_g;
    playergroup auto4031A734_g;
    int auto10D5C4DD_ae;
    const int auto10D5C4DD_ai = 1;
    playergroup auto928C6463_g;
    playergroup autoF909CA0B_g;

    // Variable Initialization
    lv_spawnDistance = 10;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoAF36B74F_ai >= 0 && lv_x <= autoAF36B74F_ae) || (autoAF36B74F_ai < 0 && lv_x >= autoAF36B74F_ae) ) ; lv_x += autoAF36B74F_ai ) {
            lv_y = 0;
            for ( ; ( (auto8DE326E8_ai >= 0 && lv_y <= auto8DE326E8_ae) || (auto8DE326E8_ai < 0 && lv_y >= auto8DE326E8_ae) ) ; lv_y += auto8DE326E8_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoDB5375D5_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoDB5375D5_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto4031A734_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto4031A734_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto10D5C4DD_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto10D5C4DD_ai >= 0 && lv_i <= auto10D5C4DD_ae) || (auto10D5C4DD_ai < 0 && lv_i >= auto10D5C4DD_ae) ) ; lv_i += auto10D5C4DD_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto928C6463_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto928C6463_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoF909CA0B_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoF909CA0B_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateOpenWheelTerrain () {
    // Variable Declarations
    point lv_pointofCement;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    fixed lv_angle;
    int lv_originalAngle;
    int lv_distanceOfScopeBlockers;
    region lv_removeDirtRegion;
    region lv_removeLineDirtInregion;

    // Automatic Variable Declarations
    const int autoA7372DBF_n = 1;
    int autoA7372DBF_i;
    const int auto93A705E1_ae = gv_mapSize;
    const int auto93A705E1_ai = 1;
    const int auto4BB490BE_ae = gv_mapSize;
    const int auto4BB490BE_ai = 1;
    int auto5520A0A0_ae;
    const int auto5520A0A0_ai = 1;
    const int auto99410251_ae = 5;
    const int auto99410251_ai = 1;
    int autoD65719FE_ae;
    const int autoD65719FE_ai = 1;
    int auto292936A6_ae;
    const int auto292936A6_ai = 1;
    int autoCA7D9B4A_ae;
    const int autoCA7D9B4A_ai = 1;
    int autoED11F31D_ae;
    const int autoED11F31D_ai = 1;
    int auto5E3A3AA7_ae;
    const int auto5E3A3AA7_ai = 1;
    int autoC9796508_ae;
    const int autoC9796508_ai = 1;
    unitgroup auto49F350C8_g;
    int auto49F350C8_u;
    int auto85860606_ae;
    const int auto85860606_ai = 1;
    int auto1DA211CA_ae;
    const int auto1DA211CA_ai = 1;
    playergroup auto4B56FBFD_g;
    int auto4B56FBFD_var;
    const int auto08887BBD_n = 240;
    int auto08887BBD_i;

    // Variable Initialization
    lv_angle = RandomInt(1, 360);
    lv_originalAngle = gv_angleOfRubberWheel2;
    lv_removeDirtRegion = RegionEmpty();
    lv_removeLineDirtInregion = RegionEmpty();

    // Implementation
    lv_originalAngle = FixedToInt(lv_angle);
    gv_angleOfRubberWheel2 = FixedToInt(lv_angle);
    for (autoA7372DBF_i = 1; autoA7372DBF_i <= autoA7372DBF_n; autoA7372DBF_i += 1) {
        gv_clearCircleCount = 0;
        gv_usingInvertedMapLayout = false;
        lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
        lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
        PointSetHeight(gv_clearCircles[0], 1.0);
        lv_x = 0;
        for ( ; ( (auto93A705E1_ai >= 0 && lv_x <= auto93A705E1_ae) || (auto93A705E1_ai < 0 && lv_x >= auto93A705E1_ae) ) ; lv_x += auto93A705E1_ai ) {
            lv_y = 0;
            for ( ; ( (auto4BB490BE_ai >= 0 && lv_y <= auto4BB490BE_ae) || (auto4BB490BE_ai < 0 && lv_y >= auto4BB490BE_ae) ) ; lv_y += auto4BB490BE_ai ) {
                auto5520A0A0_ae = gv_clearCircleCount;
                lv_i = 0;
                for ( ; ( (auto5520A0A0_ai >= 0 && lv_i <= auto5520A0A0_ae) || (auto5520A0A0_ai < 0 && lv_i >= auto5520A0A0_ae) ) ; lv_i += auto5520A0A0_ai ) {
                    if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        lv_i = 1;
        for ( ; ( (auto99410251_ai >= 0 && lv_i <= auto99410251_ae) || (auto99410251_ai < 0 && lv_i >= auto99410251_ae) ) ; lv_i += auto99410251_ai ) {
            Wait(0.0, c_timeGame);
            autoD65719FE_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoD65719FE_ai >= 0 && lv_x <= autoD65719FE_ae) || (autoD65719FE_ai < 0 && lv_x >= autoD65719FE_ae) ) ; lv_x += autoD65719FE_ai ) {
                auto292936A6_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (auto292936A6_ai >= 0 && lv_y <= auto292936A6_ae) || (auto292936A6_ai < 0 && lv_y >= auto292936A6_ae) ) ; lv_y += auto292936A6_ai ) {
                    lv_neighborCount = 0;
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                    lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                    if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                        gv_clearMap[lv_x][lv_y] = 1;
                    }

                }
            }
            autoCA7D9B4A_ae = (gv_mapSize - 1);
            lv_x = 1;
            for ( ; ( (autoCA7D9B4A_ai >= 0 && lv_x <= autoCA7D9B4A_ae) || (autoCA7D9B4A_ai < 0 && lv_x >= autoCA7D9B4A_ae) ) ; lv_x += autoCA7D9B4A_ai ) {
                autoED11F31D_ae = (gv_mapSize - 1);
                lv_y = 1;
                for ( ; ( (autoED11F31D_ai >= 0 && lv_y <= autoED11F31D_ae) || (autoED11F31D_ai < 0 && lv_y >= autoED11F31D_ae) ) ; lv_y += autoED11F31D_ai ) {
                    if ((gv_clearMap[lv_x][lv_y] == 1)) {
                        gv_dirtMap[lv_x][lv_y] = 0;
                        gv_clearMap[lv_x][lv_y] = 0;
                    }

                }
            }
        }
        auto5E3A3AA7_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto5E3A3AA7_ai >= 0 && lv_x <= auto5E3A3AA7_ae) || (auto5E3A3AA7_ai < 0 && lv_x >= auto5E3A3AA7_ae) ) ; lv_x += auto5E3A3AA7_ai ) {
            autoC9796508_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoC9796508_ai >= 0 && lv_y <= autoC9796508_ae) || (autoC9796508_ai < 0 && lv_y >= autoC9796508_ae) ) ; lv_y += autoC9796508_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                    ActorScopeSend(ActorScopeFromActor(ActorFrom("::global.RockModel")), libNtve_gf_SetTintColor(Color(100.0, 0.0, 0.0), 1.0, 0.0));
                    ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(100.0, 100.0, 100.0), 1.0, 0.0));
                    UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                }

            }
        }
        auto49F350C8_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto49F350C8_u = UnitGroupCount(auto49F350C8_g, c_unitCountAll);
        for (;; auto49F350C8_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto49F350C8_g, auto49F350C8_u);
            if (lv_currentUnit == null) { break; }
            lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
            lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
            gv_dirtMap[lv_x][lv_y] = 0;
        }
        auto85860606_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto85860606_ai >= 0 && lv_x <= auto85860606_ae) || (auto85860606_ai < 0 && lv_x >= auto85860606_ae) ) ; lv_x += auto85860606_ai ) {
            auto1DA211CA_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto1DA211CA_ai >= 0 && lv_y <= auto1DA211CA_ae) || (auto1DA211CA_ai < 0 && lv_y >= auto1DA211CA_ae) ) ; lv_y += auto1DA211CA_ai ) {
                gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
            }
        }
    }
    lv_angle = lv_originalAngle;
    auto4B56FBFD_g = PlayerGroupActive();
    auto4B56FBFD_var = -1;
    while (true) {
        auto4B56FBFD_var = PlayerGroupNextPlayer(auto4B56FBFD_g, auto4B56FBFD_var);
        if (auto4B56FBFD_var < 0) { break; }
        VisRevealArea(auto4B56FBFD_var, lv_removeLineDirtInregion, 0.2, false);
    }
    RegionAddRegion(lv_removeLineDirtInregion, RegionCircle(RegionGetCenter(RegionEntireMap()), 50.0));
    gf_RemoveDirtinRegion(lv_removeLineDirtInregion);
    for (auto08887BBD_i = 1; auto08887BBD_i <= auto08887BBD_n; auto08887BBD_i += 1) {
        lv_angle = (lv_angle + 1.5);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, 72.0, lv_angle)));
    }
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 1.4, 0.0));
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateOpenWheelPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoC508EA03_ae = gv_mapSize;
    const int autoC508EA03_ai = 4;
    const int auto662BEC48_ae = gv_mapSize;
    const int auto662BEC48_ai = 4;
    playergroup auto1B6FAEEC_g;
    playergroup autoE4355D93_g;
    int autoC9F8F4A3_ae;
    const int autoC9F8F4A3_ai = 1;
    playergroup autoF38F9427_g;
    playergroup autoE56DC739_g;

    // Variable Initialization
    lv_spawnDistance = RandomInt(25, 46);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoC508EA03_ai >= 0 && lv_x <= autoC508EA03_ae) || (autoC508EA03_ai < 0 && lv_x >= autoC508EA03_ae) ) ; lv_x += autoC508EA03_ai ) {
            lv_y = 0;
            for ( ; ( (auto662BEC48_ai >= 0 && lv_y <= auto662BEC48_ae) || (auto662BEC48_ai < 0 && lv_y >= auto662BEC48_ae) ) ; lv_y += auto662BEC48_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto1B6FAEEC_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto1B6FAEEC_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoE4355D93_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoE4355D93_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoC9F8F4A3_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoC9F8F4A3_ai >= 0 && lv_i <= autoC9F8F4A3_ae) || (autoC9F8F4A3_ai < 0 && lv_i >= autoC9F8F4A3_ae) ) ; lv_i += autoC9F8F4A3_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = (gv_angleOfRubberWheel2 + 30);
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoF38F9427_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoF38F9427_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoE56DC739_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoE56DC739_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateThreatTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_threatAngle;
    int lv_dirtSaveingOriginalAngle;
    fixed lv_dirtSaveingCircleSize;
    int lv_dirtSaveingOffsetFromCenter;
    int lv_dirtSaveingOffsetAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    point lv_dirtSaveingCirclePosition;
    int lv_circleRepeatedXTimes;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    point lv_threatStartPoint;

    // Automatic Variable Declarations
    const int autoCCD58EB9_ae = gv_mapSize;
    const int autoCCD58EB9_ai = 1;
    const int autoBE2C938F_ae = gv_mapSize;
    const int autoBE2C938F_ai = 1;
    int autoD4116AB1_ae;
    const int autoD4116AB1_ai = 1;
    const int auto15F523B7_ae = 5;
    const int auto15F523B7_ai = 1;
    int auto4B40D70B_ae;
    const int auto4B40D70B_ai = 1;
    int autoF846CDB3_ae;
    const int autoF846CDB3_ai = 1;
    int auto6445C84D_ae;
    const int auto6445C84D_ai = 1;
    int auto95E1247D_ae;
    const int auto95E1247D_ai = 1;
    int autoF875155C_ae;
    const int autoF875155C_ai = 1;
    int auto1DA8FFB5_ae;
    const int auto1DA8FFB5_ai = 1;
    unitgroup autoA8E47B27_g;
    int autoA8E47B27_u;
    int auto7CEE3F7B_ae;
    const int auto7CEE3F7B_ai = 1;
    int autoA7C3E89B_ae;
    const int autoA7C3E89B_ai = 1;
    const int auto728A41CC_n = 4;
    int auto728A41CC_i;
    const int auto68E562C3_ae = 152;
    const int auto68E562C3_ai = 1;
    const int auto201C5A4C_ae = 152;
    const int auto201C5A4C_ai = 1;
    playergroup autoF492FDE1_g;
    int autoF492FDE1_var;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_threatAngle = gv_mapGenAngle;
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (autoCCD58EB9_ai >= 0 && lv_x <= autoCCD58EB9_ae) || (autoCCD58EB9_ai < 0 && lv_x >= autoCCD58EB9_ae) ) ; lv_x += autoCCD58EB9_ai ) {
        lv_y = 0;
        for ( ; ( (autoBE2C938F_ai >= 0 && lv_y <= autoBE2C938F_ae) || (autoBE2C938F_ai < 0 && lv_y >= autoBE2C938F_ae) ) ; lv_y += autoBE2C938F_ai ) {
            autoD4116AB1_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoD4116AB1_ai >= 0 && lv_i <= autoD4116AB1_ae) || (autoD4116AB1_ai < 0 && lv_i >= autoD4116AB1_ae) ) ; lv_i += autoD4116AB1_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto15F523B7_ai >= 0 && lv_i <= auto15F523B7_ae) || (auto15F523B7_ai < 0 && lv_i >= auto15F523B7_ae) ) ; lv_i += auto15F523B7_ai ) {
        Wait(0.0, c_timeGame);
        auto4B40D70B_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto4B40D70B_ai >= 0 && lv_x <= auto4B40D70B_ae) || (auto4B40D70B_ai < 0 && lv_x >= auto4B40D70B_ae) ) ; lv_x += auto4B40D70B_ai ) {
            autoF846CDB3_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoF846CDB3_ai >= 0 && lv_y <= autoF846CDB3_ae) || (autoF846CDB3_ai < 0 && lv_y >= autoF846CDB3_ae) ) ; lv_y += autoF846CDB3_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto6445C84D_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto6445C84D_ai >= 0 && lv_x <= auto6445C84D_ae) || (auto6445C84D_ai < 0 && lv_x >= auto6445C84D_ae) ) ; lv_x += auto6445C84D_ai ) {
            auto95E1247D_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto95E1247D_ai >= 0 && lv_y <= auto95E1247D_ae) || (auto95E1247D_ai < 0 && lv_y >= auto95E1247D_ae) ) ; lv_y += auto95E1247D_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoF875155C_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoF875155C_ai >= 0 && lv_x <= autoF875155C_ae) || (autoF875155C_ai < 0 && lv_x >= autoF875155C_ae) ) ; lv_x += autoF875155C_ai ) {
        auto1DA8FFB5_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto1DA8FFB5_ai >= 0 && lv_y <= auto1DA8FFB5_ae) || (auto1DA8FFB5_ai < 0 && lv_y >= auto1DA8FFB5_ae) ) ; lv_y += auto1DA8FFB5_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoA8E47B27_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA8E47B27_u = UnitGroupCount(autoA8E47B27_g, c_unitCountAll);
    for (;; autoA8E47B27_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoA8E47B27_g, autoA8E47B27_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto7CEE3F7B_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto7CEE3F7B_ai >= 0 && lv_x <= auto7CEE3F7B_ae) || (auto7CEE3F7B_ai < 0 && lv_x >= auto7CEE3F7B_ae) ) ; lv_x += auto7CEE3F7B_ai ) {
        autoA7C3E89B_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoA7C3E89B_ai >= 0 && lv_y <= autoA7C3E89B_ae) || (autoA7C3E89B_ai < 0 && lv_y >= autoA7C3E89B_ae) ) ; lv_y += autoA7C3E89B_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/C54E2C8B") + StringExternal("Param/Value/B3CBC925")));
    for (auto728A41CC_i = 1; auto728A41CC_i <= auto728A41CC_n; auto728A41CC_i += 1) {
        lv_threatStartPoint = PointWithOffsetPolar(gv_absoluteCenterpoint, 19.0, lv_threatAngle);
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(lv_threatStartPoint, 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 3.0, (lv_threatAngle + 90)), 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 6.0, (lv_threatAngle + 90)), 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 9.0, (lv_threatAngle + 90)), 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 6.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 9.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 12.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 15.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 18.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0, (lv_threatAngle + 0)), 3.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle + 45)), 15.0, (lv_threatAngle + 90)), 25.0, lv_threatAngle), 10.0, (lv_threatAngle + 90)), 3.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 3.0, (lv_threatAngle - 90)), 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 6.0, (lv_threatAngle - 90)), 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 9.0, (lv_threatAngle - 90)), 20.0, lv_threatAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 6.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 9.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 12.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 15.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 18.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0, (lv_threatAngle - 0)), 3.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(PointWithOffsetPolar(lv_threatStartPoint, 21.0, (lv_threatAngle - 45)), 15.0, (lv_threatAngle - 90)), 25.0, lv_threatAngle), 10.0, (lv_threatAngle - 90)), 3.0));
        lv_threatAngle = (lv_threatAngle + 90);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/8BEF616F") + StringExternal("Param/Value/E40000DF")));
    lv_forEachX = 0;
    for ( ; ( (auto68E562C3_ai >= 0 && lv_forEachX <= auto68E562C3_ae) || (auto68E562C3_ai < 0 && lv_forEachX >= auto68E562C3_ae) ) ; lv_forEachX += auto68E562C3_ai ) {
        lv_forEachY = 0;
        for ( ; ( (auto201C5A4C_ai >= 0 && lv_forEachY <= auto201C5A4C_ae) || (auto201C5A4C_ai < 0 && lv_forEachY >= auto201C5A4C_ae) ) ; lv_forEachY += auto201C5A4C_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if ((!((RegionContainsPoint(lv_dirtSaveingRegion, Point(lv_forEachX, lv_forEachY)) == true)))) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/6DDAEE74") + StringExternal("Param/Value/3752CF16")));
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 9.0));
    autoF492FDE1_g = PlayerGroupAll();
    autoF492FDE1_var = -1;
    while (true) {
        autoF492FDE1_var = PlayerGroupNextPlayer(autoF492FDE1_g, autoF492FDE1_var);
        if (autoF492FDE1_var < 0) { break; }
        VisRevealArea(autoF492FDE1_var, lv_dirtRemovalRegion, 3.5, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateThreatPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoBC202EB5_ae = gv_mapSize;
    const int autoBC202EB5_ai = 4;
    const int auto93FB7922_ae = gv_mapSize;
    const int auto93FB7922_ai = 4;
    playergroup autoF7BD8C4F_g;
    playergroup autoA660A2C8_g;
    int autoFEEBE4AC_ae;
    const int autoFEEBE4AC_ai = 1;
    playergroup autoAB3432A1_g;
    playergroup autoD5666F49_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoBC202EB5_ai >= 0 && lv_x <= autoBC202EB5_ae) || (autoBC202EB5_ai < 0 && lv_x >= autoBC202EB5_ae) ) ; lv_x += autoBC202EB5_ai ) {
            lv_y = 0;
            for ( ; ( (auto93FB7922_ai >= 0 && lv_y <= auto93FB7922_ae) || (auto93FB7922_ai < 0 && lv_y >= auto93FB7922_ae) ) ; lv_y += auto93FB7922_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoF7BD8C4F_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoF7BD8C4F_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoA660A2C8_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoA660A2C8_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoFEEBE4AC_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoFEEBE4AC_ai >= 0 && lv_i <= autoFEEBE4AC_ae) || (autoFEEBE4AC_ai < 0 && lv_i >= autoFEEBE4AC_ae) ) ; lv_i += autoFEEBE4AC_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    autoAB3432A1_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoAB3432A1_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoD5666F49_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoD5666F49_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateEyeTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_dirtSaveingOriginalAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    unit lv_currentUnit;
    int lv_xMapGen;
    int lv_yMapGen;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    int lv_compassAngle;
    fixed lv_compassAngleForDirtCircle;
    int lv_compassOffset;
    int lv_compassCircleSize;
    unitgroup lv_pillarsOpeningPillarsUnitGroup;
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    fixed lv_y;
    fixed lv_pillarAngle;
    int lv_pillarOffset;

    // Automatic Variable Declarations
    const int auto8A62D704_ae = gv_mapSize;
    const int auto8A62D704_ai = 1;
    const int autoA06335FA_ae = gv_mapSize;
    const int autoA06335FA_ai = 1;
    int auto910637D8_ae;
    const int auto910637D8_ai = 1;
    const int autoD963AC28_ae = 5;
    const int autoD963AC28_ai = 1;
    int autoEE89446F_ae;
    const int autoEE89446F_ai = 1;
    int auto1149E567_ae;
    const int auto1149E567_ai = 1;
    int auto8E9BEB38_ae;
    const int auto8E9BEB38_ai = 1;
    int auto7D94ACAD_ae;
    const int auto7D94ACAD_ai = 1;
    int auto6E59CCCC_ae;
    const int auto6E59CCCC_ai = 1;
    int auto167E95C9_ae;
    const int auto167E95C9_ai = 1;
    unitgroup auto40F6DBC6_g;
    int auto40F6DBC6_u;
    int autoFF8CC5E0_ae;
    const int autoFF8CC5E0_ai = 1;
    int autoEA947C03_ae;
    const int autoEA947C03_ai = 1;
    const int auto3618A225_n = 2;
    int auto3618A225_i;
    const int auto25229BA5_n = 20;
    int auto25229BA5_i;
    const int auto0CE59A27_ae = 152;
    const int auto0CE59A27_ai = 1;
    const int autoC893F1CC_ae = 152;
    const int autoC893F1CC_ai = 1;
    playergroup auto155F4EDF_g;
    int auto155F4EDF_var;
    const int auto1005BA46_n = 80;
    int auto1005BA46_i;
    unitgroup auto725D55C2_g;
    int auto725D55C2_u;
    unit auto725D55C2_var;
    unitgroup auto35733FB5_g;
    int auto35733FB5_u;
    unit auto35733FB5_var;
    unitgroup autoBA689F8F_g;
    int autoBA689F8F_u;
    unit autoBA689F8F_var;
    unitgroup autoDC7FC5C7_g;
    int autoDC7FC5C7_u;
    unit autoDC7FC5C7_var;
    unitgroup auto60B42C3A_g;
    int auto60B42C3A_u;
    unit auto60B42C3A_var;
    unitgroup autoFF6409B2_g;
    int autoFF6409B2_u;
    unit autoFF6409B2_var;
    const int autoA8C7B562_n = 7;
    int autoA8C7B562_i;
    const int auto7F2A7703_n = 7;
    int auto7F2A7703_i;
    const int autoF2B3D5BA_n = 7;
    int autoF2B3D5BA_i;
    const int autoC2471442_n = 7;
    int autoC2471442_i;
    const int auto2D3DF0D8_n = 7;
    int auto2D3DF0D8_i;
    const int auto5C71FAF1_n = 7;
    int auto5C71FAF1_i;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();
    lv_pillarsOpeningPillarsUnitGroup = UnitGroupEmpty();

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    lv_compassAngle = gv_mapGenAngle;
    lv_compassAngleForDirtCircle = lv_compassAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = Point(3.0, 3.0);
    PointSetHeight(gv_clearCircles[0], 3.0);
    lv_xMapGen = 0;
    for ( ; ( (auto8A62D704_ai >= 0 && lv_xMapGen <= auto8A62D704_ae) || (auto8A62D704_ai < 0 && lv_xMapGen >= auto8A62D704_ae) ) ; lv_xMapGen += auto8A62D704_ai ) {
        lv_yMapGen = 0;
        for ( ; ( (autoA06335FA_ai >= 0 && lv_yMapGen <= autoA06335FA_ae) || (autoA06335FA_ai < 0 && lv_yMapGen >= autoA06335FA_ae) ) ; lv_yMapGen += autoA06335FA_ai ) {
            auto910637D8_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto910637D8_ai >= 0 && lv_i <= auto910637D8_ae) || (auto910637D8_ai < 0 && lv_i >= auto910637D8_ae) ) ; lv_i += auto910637D8_ai ) {
                if ((DistanceBetweenPoints(Point(lv_xMapGen, lv_yMapGen), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_xMapGen][lv_yMapGen] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoD963AC28_ai >= 0 && lv_i <= autoD963AC28_ae) || (autoD963AC28_ai < 0 && lv_i >= autoD963AC28_ae) ) ; lv_i += autoD963AC28_ai ) {
        Wait(0.0, c_timeGame);
        autoEE89446F_ae = (gv_mapSize - 1);
        lv_xMapGen = 1;
        for ( ; ( (autoEE89446F_ai >= 0 && lv_xMapGen <= autoEE89446F_ae) || (autoEE89446F_ai < 0 && lv_xMapGen >= autoEE89446F_ae) ) ; lv_xMapGen += autoEE89446F_ai ) {
            auto1149E567_ae = (gv_mapSize - 1);
            lv_yMapGen = 1;
            for ( ; ( (auto1149E567_ai >= 0 && lv_yMapGen <= auto1149E567_ae) || (auto1149E567_ai < 0 && lv_yMapGen >= auto1149E567_ae) ) ; lv_yMapGen += auto1149E567_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_xMapGen - 1)][(lv_yMapGen - 1)];
                lv_neighborCount += gv_dirtMap[(lv_xMapGen - 1)][lv_yMapGen];
                lv_neighborCount += gv_dirtMap[(lv_xMapGen - 1)][(lv_yMapGen + 1)];
                lv_neighborCount += gv_dirtMap[lv_xMapGen][(lv_yMapGen - 1)];
                lv_neighborCount += gv_dirtMap[lv_xMapGen][(lv_yMapGen + 1)];
                lv_neighborCount += gv_dirtMap[(lv_xMapGen + 1)][(lv_yMapGen - 1)];
                lv_neighborCount += gv_dirtMap[(lv_xMapGen + 1)][lv_yMapGen];
                lv_neighborCount += gv_dirtMap[(lv_xMapGen + 1)][(lv_yMapGen + 1)];
                if ((gv_dirtMap[lv_xMapGen][lv_yMapGen] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_xMapGen][lv_yMapGen] = 1;
                }

            }
        }
        auto8E9BEB38_ae = (gv_mapSize - 1);
        lv_xMapGen = 1;
        for ( ; ( (auto8E9BEB38_ai >= 0 && lv_xMapGen <= auto8E9BEB38_ae) || (auto8E9BEB38_ai < 0 && lv_xMapGen >= auto8E9BEB38_ae) ) ; lv_xMapGen += auto8E9BEB38_ai ) {
            auto7D94ACAD_ae = (gv_mapSize - 1);
            lv_yMapGen = 1;
            for ( ; ( (auto7D94ACAD_ai >= 0 && lv_yMapGen <= auto7D94ACAD_ae) || (auto7D94ACAD_ai < 0 && lv_yMapGen >= auto7D94ACAD_ae) ) ; lv_yMapGen += auto7D94ACAD_ai ) {
                if ((gv_clearMap[lv_xMapGen][lv_yMapGen] == 1)) {
                    gv_dirtMap[lv_xMapGen][lv_yMapGen] = 0;
                    gv_clearMap[lv_xMapGen][lv_yMapGen] = 0;
                }

            }
        }
    }
    auto6E59CCCC_ae = (gv_mapSize - 1);
    lv_xMapGen = 1;
    for ( ; ( (auto6E59CCCC_ai >= 0 && lv_xMapGen <= auto6E59CCCC_ae) || (auto6E59CCCC_ai < 0 && lv_xMapGen >= auto6E59CCCC_ae) ) ; lv_xMapGen += auto6E59CCCC_ai ) {
        auto167E95C9_ae = (gv_mapSize - 1);
        lv_yMapGen = 1;
        for ( ; ( (auto167E95C9_ai >= 0 && lv_yMapGen <= auto167E95C9_ae) || (auto167E95C9_ai < 0 && lv_yMapGen >= auto167E95C9_ae) ) ; lv_yMapGen += auto167E95C9_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_xMapGen - 1)][(lv_yMapGen - 1)];
            lv_neighborCount += gv_dirtMap[(lv_xMapGen - 1)][lv_yMapGen];
            lv_neighborCount += gv_dirtMap[(lv_xMapGen - 1)][(lv_yMapGen + 1)];
            lv_neighborCount += gv_dirtMap[lv_xMapGen][(lv_yMapGen - 1)];
            lv_neighborCount += gv_dirtMap[lv_xMapGen][(lv_yMapGen + 1)];
            lv_neighborCount += gv_dirtMap[(lv_xMapGen + 1)][(lv_yMapGen - 1)];
            lv_neighborCount += gv_dirtMap[(lv_xMapGen + 1)][lv_yMapGen];
            lv_neighborCount += gv_dirtMap[(lv_xMapGen + 1)][(lv_yMapGen + 1)];
            if ((gv_dirtMap[lv_xMapGen][lv_yMapGen] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_xMapGen * 2.0), (lv_yMapGen * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto40F6DBC6_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto40F6DBC6_u = UnitGroupCount(auto40F6DBC6_g, c_unitCountAll);
    for (;; auto40F6DBC6_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto40F6DBC6_g, auto40F6DBC6_u);
        if (lv_currentUnit == null) { break; }
        lv_xMapGen = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_yMapGen = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_xMapGen][lv_yMapGen] = 0;
    }
    autoFF8CC5E0_ae = (gv_mapSize - 1);
    lv_xMapGen = 1;
    for ( ; ( (autoFF8CC5E0_ai >= 0 && lv_xMapGen <= autoFF8CC5E0_ae) || (autoFF8CC5E0_ai < 0 && lv_xMapGen >= autoFF8CC5E0_ae) ) ; lv_xMapGen += autoFF8CC5E0_ai ) {
        autoEA947C03_ae = (gv_mapSize - 1);
        lv_yMapGen = 1;
        for ( ; ( (autoEA947C03_ai >= 0 && lv_yMapGen <= autoEA947C03_ae) || (autoEA947C03_ai < 0 && lv_yMapGen >= autoEA947C03_ae) ) ; lv_yMapGen += autoEA947C03_ai ) {
            gv_clearMap[lv_xMapGen][lv_yMapGen] = gv_dirtMap[lv_xMapGen][lv_yMapGen];
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/8AAFFFD3") + StringExternal("Param/Value/18580FB2")));
    for (auto3618A225_i = 1; auto3618A225_i <= auto3618A225_n; auto3618A225_i += 1) {
        lv_compassOffset = 0;
        lv_compassCircleSize = 30;
        for (auto25229BA5_i = 1; auto25229BA5_i <= auto25229BA5_n; auto25229BA5_i += 1) {
            RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_compassOffset, lv_compassAngle), lv_compassCircleSize));
            lv_compassOffset = (lv_compassOffset + 5);
            lv_compassCircleSize = (lv_compassCircleSize - 2);
        }
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 5.0, lv_compassAngle), 29.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 10.0, lv_compassAngle), 29.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 15.0, lv_compassAngle), 27.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 23.0, lv_compassAngle), 24.0));
        lv_compassAngle = (lv_compassAngle + 180);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/4DF96EDE") + StringExternal("Param/Value/977FC91C")));
    lv_forEachX = 0;
    for ( ; ( (auto0CE59A27_ai >= 0 && lv_forEachX <= auto0CE59A27_ae) || (auto0CE59A27_ai < 0 && lv_forEachX >= auto0CE59A27_ae) ) ; lv_forEachX += auto0CE59A27_ai ) {
        lv_forEachY = 0;
        for ( ; ( (autoC893F1CC_ai >= 0 && lv_forEachY <= autoC893F1CC_ae) || (autoC893F1CC_ai < 0 && lv_forEachY >= autoC893F1CC_ae) ) ; lv_forEachY += autoC893F1CC_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if ((RegionContainsPoint(lv_dirtSaveingRegion, Point(lv_forEachX, lv_forEachY)) == false)) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/913A4131") + StringExternal("Param/Value/57D8467B")));
    RegionAddCircle(lv_dirtRemovalRegion, true, gv_absoluteCenterpoint, 5.0);
    RegionAddRect(lv_dirtRemovalRegion, true, 0.0, 0.0, 4.0, 152.0);
    RegionAddRect(lv_dirtRemovalRegion, true, 0.0, 148.0, 152.0, 152.0);
    RegionAddRect(lv_dirtRemovalRegion, true, 148.0, 0.0, 152.0, 152.0);
    RegionAddRect(lv_dirtRemovalRegion, true, 0.0, 0.0, 152.0, 4.0);
    auto155F4EDF_g = PlayerGroupAll();
    auto155F4EDF_var = -1;
    while (true) {
        auto155F4EDF_var = PlayerGroupNextPlayer(auto155F4EDF_g, auto155F4EDF_var);
        if (auto155F4EDF_var < 0) { break; }
        VisRevealArea(auto155F4EDF_var, lv_dirtRemovalRegion, 6.5, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    for (auto1005BA46_i = 1; auto1005BA46_i <= auto1005BA46_n; auto1005BA46_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, 27.0, lv_pillarAngle)));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 0.5, 6.0));
        lv_pillarAngle = (lv_pillarAngle + 4.5);
    }
    auto725D55C2_g = UnitGroup("Dirt", c_playerAny, RegionCircle(gv_absoluteCenterpoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto725D55C2_u = UnitGroupCount(auto725D55C2_g, c_unitCountAll);
    for (;; auto725D55C2_u -= 1) {
        auto725D55C2_var = UnitGroupUnitFromEnd(auto725D55C2_g, auto725D55C2_u);
        if (auto725D55C2_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(UnitGetPosition(auto725D55C2_var)));
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 0.5, 6.0));
        lv_dirtX = FloorI((PointGetX(UnitGetPosition(auto725D55C2_var)) * 0.5));
        lv_dirtY = FloorI((PointGetY(UnitGetPosition(auto725D55C2_var)) * 0.5));
        gf_Activatedirt(lv_dirtX, lv_dirtY);
        lv_x = PointGetX(UnitGetPosition(auto725D55C2_var));
        lv_y = PointGetY(UnitGetPosition(auto725D55C2_var));
        VisRevealArea(UnitGetOwner(auto725D55C2_var), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 1.2, false);
        Wait(0.0, c_timeGame);
        UnitKill(auto725D55C2_var);
    }
    lv_compassAngle = (lv_compassAngle + 90);
    auto35733FB5_g = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 6.0, lv_compassAngle), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto35733FB5_u = UnitGroupCount(auto35733FB5_g, c_unitCountAll);
    for (;; auto35733FB5_u -= 1) {
        auto35733FB5_var = UnitGroupUnitFromEnd(auto35733FB5_g, auto35733FB5_u);
        if (auto35733FB5_var == null) { break; }
        UnitGroupAdd(lv_pillarsOpeningPillarsUnitGroup, auto35733FB5_var);
    }
    lv_compassAngle = (lv_compassAngle + 180);
    autoBA689F8F_g = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 6.0, lv_compassAngle), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA689F8F_u = UnitGroupCount(autoBA689F8F_g, c_unitCountAll);
    for (;; autoBA689F8F_u -= 1) {
        autoBA689F8F_var = UnitGroupUnitFromEnd(autoBA689F8F_g, autoBA689F8F_u);
        if (autoBA689F8F_var == null) { break; }
        UnitGroupAdd(lv_pillarsOpeningPillarsUnitGroup, autoBA689F8F_var);
    }
    lv_compassAngle = (lv_compassAngle + 90);
    autoDC7FC5C7_g = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 27.0, lv_compassAngle), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDC7FC5C7_u = UnitGroupCount(autoDC7FC5C7_g, c_unitCountAll);
    for (;; autoDC7FC5C7_u -= 1) {
        autoDC7FC5C7_var = UnitGroupUnitFromEnd(autoDC7FC5C7_g, autoDC7FC5C7_u);
        if (autoDC7FC5C7_var == null) { break; }
        UnitGroupAdd(lv_pillarsOpeningPillarsUnitGroup, autoDC7FC5C7_var);
    }
    lv_compassAngle = (lv_compassAngle + 180);
    auto60B42C3A_g = UnitGroup(null, c_playerAny, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 27.0, lv_compassAngle), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto60B42C3A_u = UnitGroupCount(auto60B42C3A_g, c_unitCountAll);
    for (;; auto60B42C3A_u -= 1) {
        auto60B42C3A_var = UnitGroupUnitFromEnd(auto60B42C3A_g, auto60B42C3A_u);
        if (auto60B42C3A_var == null) { break; }
        UnitGroupAdd(lv_pillarsOpeningPillarsUnitGroup, auto60B42C3A_var);
    }
    autoFF6409B2_g = lv_pillarsOpeningPillarsUnitGroup;
    autoFF6409B2_u = UnitGroupCount(autoFF6409B2_g, c_unitCountAll);
    for (;; autoFF6409B2_u -= 1) {
        autoFF6409B2_var = UnitGroupUnitFromEnd(autoFF6409B2_g, autoFF6409B2_u);
        if (autoFF6409B2_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(UnitGetPosition(autoFF6409B2_var)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        UnitRemove(autoFF6409B2_var);
    }
    lv_pillarAngle = (lv_compassAngle + 135.0);
    lv_pillarOffset = 40;
    for (autoA8C7B562_i = 1; autoA8C7B562_i <= autoA8C7B562_n; autoA8C7B562_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_pillarOffset, lv_pillarAngle)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        lv_pillarOffset = (lv_pillarOffset + 2);
    }
    lv_pillarAngle = (lv_pillarAngle - 45.0);
    lv_pillarOffset = 40;
    for (auto7F2A7703_i = 1; auto7F2A7703_i <= auto7F2A7703_n; auto7F2A7703_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_pillarOffset, lv_pillarAngle)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        lv_pillarOffset = (lv_pillarOffset + 2);
    }
    lv_pillarAngle = (lv_pillarAngle - 45.0);
    lv_pillarOffset = 40;
    for (autoF2B3D5BA_i = 1; autoF2B3D5BA_i <= autoF2B3D5BA_n; autoF2B3D5BA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_pillarOffset, lv_pillarAngle)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        lv_pillarOffset = (lv_pillarOffset + 2);
    }
    lv_pillarAngle = (lv_pillarAngle - 45.0);
    lv_pillarAngle = (lv_pillarAngle - 45.0);
    lv_pillarOffset = 40;
    for (autoC2471442_i = 1; autoC2471442_i <= autoC2471442_n; autoC2471442_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_pillarOffset, lv_pillarAngle)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        lv_pillarOffset = (lv_pillarOffset + 2);
    }
    lv_pillarAngle = (lv_pillarAngle - 45.0);
    lv_pillarOffset = 40;
    for (auto2D3DF0D8_i = 1; auto2D3DF0D8_i <= auto2D3DF0D8_n; auto2D3DF0D8_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_pillarOffset, lv_pillarAngle)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        lv_pillarOffset = (lv_pillarOffset + 2);
    }
    lv_pillarAngle = (lv_pillarAngle - 45.0);
    lv_pillarOffset = 40;
    for (auto5C71FAF1_i = 1; auto5C71FAF1_i <= auto5C71FAF1_n; auto5C71FAF1_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnbreakableDirtNoBlocker", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_pillarOffset, lv_pillarAngle)));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 0.0));
        lv_pillarOffset = (lv_pillarOffset + 2);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateEyePlayers () {
    // Variable Declarations
    int lv_debuggingRepeater;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto716CD8D1_ae = gv_mapSize;
    const int auto716CD8D1_ai = 4;
    const int auto2839285E_ae = gv_mapSize;
    const int auto2839285E_ai = 4;
    playergroup autoBD038F1F_g;
    playergroup auto5ECCF365_g;
    int auto88919D29_ae;
    const int auto88919D29_ai = 1;
    playergroup auto3D204A3B_g;
    playergroup autoD0156045_g;

    // Variable Initialization
    lv_debuggingRepeater = 1;
    lv_spawnAngle = gv_mapGenAngle;
    lv_spawnDistance = 40;

    // Implementation
    gv_possibleSpawnPoint[1] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 15), (lv_spawnAngle + 45.0));
    gv_possibleSpawnPoint[2] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle + 90.0));
    gv_possibleSpawnPoint[3] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 15), (lv_spawnAngle + 135.0));
    gv_possibleSpawnPoint[4] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 15), (lv_spawnAngle - 45.0));
    gv_possibleSpawnPoint[5] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle - 90.0));
    gv_possibleSpawnPoint[6] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 15), (lv_spawnAngle - 135.0));
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto716CD8D1_ai >= 0 && lv_x <= auto716CD8D1_ae) || (auto716CD8D1_ai < 0 && lv_x >= auto716CD8D1_ae) ) ; lv_x += auto716CD8D1_ai ) {
            lv_y = 0;
            for ( ; ( (auto2839285E_ai >= 0 && lv_y <= auto2839285E_ae) || (auto2839285E_ai < 0 && lv_y >= auto2839285E_ae) ) ; lv_y += auto2839285E_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoBD038F1F_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoBD038F1F_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto5ECCF365_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto5ECCF365_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto88919D29_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto88919D29_ai >= 0 && lv_i <= auto88919D29_ae) || (auto88919D29_ai < 0 && lv_i >= auto88919D29_ae) ) ; lv_i += auto88919D29_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[1], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[3], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[4], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[6], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[1], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[3], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[4], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[6], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto3D204A3B_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto3D204A3B_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoD0156045_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoD0156045_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateCompassTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_dirtSaveingOriginalAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    int lv_compassAngle;
    fixed lv_compassAngleForDirtCircle;
    int lv_compassOffset;
    int lv_compassCircleSize;

    // Automatic Variable Declarations
    const int autoDDBFAAA3_ae = gv_mapSize;
    const int autoDDBFAAA3_ai = 1;
    const int autoF1DF1008_ae = gv_mapSize;
    const int autoF1DF1008_ai = 1;
    int auto745BAF59_ae;
    const int auto745BAF59_ai = 1;
    const int auto0194AED1_ae = 5;
    const int auto0194AED1_ai = 1;
    int auto70FB5B50_ae;
    const int auto70FB5B50_ai = 1;
    int auto7CDF23E4_ae;
    const int auto7CDF23E4_ai = 1;
    int auto13BD9A3C_ae;
    const int auto13BD9A3C_ai = 1;
    int auto8DC7BBF0_ae;
    const int auto8DC7BBF0_ai = 1;
    int auto46F55904_ae;
    const int auto46F55904_ai = 1;
    int autoBC98AE8C_ae;
    const int autoBC98AE8C_ai = 1;
    unitgroup auto900FA0AE_g;
    int auto900FA0AE_u;
    int auto6557BF79_ae;
    const int auto6557BF79_ai = 1;
    int autoCEE92C54_ae;
    const int autoCEE92C54_ai = 1;
    const int auto9EC689CA_n = 4;
    int auto9EC689CA_i;
    const int autoBEBBE8C4_n = 20;
    int autoBEBBE8C4_i;
    const int autoF29F12DA_ae = 152;
    const int autoF29F12DA_ai = 1;
    const int auto2EDDD402_ae = 152;
    const int auto2EDDD402_ai = 1;
    playergroup autoECB770EB_g;
    int autoECB770EB_var;
    const int auto9724C34A_n = 4;
    int auto9724C34A_i;
    const int autoAB2A6ABA_n = 10;
    int autoAB2A6ABA_i;
    const int auto1C936580_n = 100;
    int auto1C936580_i;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    lv_compassAngle = gv_mapGenAngle;
    lv_compassAngleForDirtCircle = lv_compassAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = Point(3.0, 3.0);
    PointSetHeight(gv_clearCircles[0], 3.0);
    lv_x = 0;
    for ( ; ( (autoDDBFAAA3_ai >= 0 && lv_x <= autoDDBFAAA3_ae) || (autoDDBFAAA3_ai < 0 && lv_x >= autoDDBFAAA3_ae) ) ; lv_x += autoDDBFAAA3_ai ) {
        lv_y = 0;
        for ( ; ( (autoF1DF1008_ai >= 0 && lv_y <= autoF1DF1008_ae) || (autoF1DF1008_ai < 0 && lv_y >= autoF1DF1008_ae) ) ; lv_y += autoF1DF1008_ai ) {
            auto745BAF59_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto745BAF59_ai >= 0 && lv_i <= auto745BAF59_ae) || (auto745BAF59_ai < 0 && lv_i >= auto745BAF59_ae) ) ; lv_i += auto745BAF59_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto0194AED1_ai >= 0 && lv_i <= auto0194AED1_ae) || (auto0194AED1_ai < 0 && lv_i >= auto0194AED1_ae) ) ; lv_i += auto0194AED1_ai ) {
        Wait(0.0, c_timeGame);
        auto70FB5B50_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto70FB5B50_ai >= 0 && lv_x <= auto70FB5B50_ae) || (auto70FB5B50_ai < 0 && lv_x >= auto70FB5B50_ae) ) ; lv_x += auto70FB5B50_ai ) {
            auto7CDF23E4_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto7CDF23E4_ai >= 0 && lv_y <= auto7CDF23E4_ae) || (auto7CDF23E4_ai < 0 && lv_y >= auto7CDF23E4_ae) ) ; lv_y += auto7CDF23E4_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto13BD9A3C_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto13BD9A3C_ai >= 0 && lv_x <= auto13BD9A3C_ae) || (auto13BD9A3C_ai < 0 && lv_x >= auto13BD9A3C_ae) ) ; lv_x += auto13BD9A3C_ai ) {
            auto8DC7BBF0_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto8DC7BBF0_ai >= 0 && lv_y <= auto8DC7BBF0_ae) || (auto8DC7BBF0_ai < 0 && lv_y >= auto8DC7BBF0_ae) ) ; lv_y += auto8DC7BBF0_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto46F55904_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto46F55904_ai >= 0 && lv_x <= auto46F55904_ae) || (auto46F55904_ai < 0 && lv_x >= auto46F55904_ae) ) ; lv_x += auto46F55904_ai ) {
        autoBC98AE8C_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoBC98AE8C_ai >= 0 && lv_y <= autoBC98AE8C_ae) || (autoBC98AE8C_ai < 0 && lv_y >= autoBC98AE8C_ae) ) ; lv_y += autoBC98AE8C_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto900FA0AE_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto900FA0AE_u = UnitGroupCount(auto900FA0AE_g, c_unitCountAll);
    for (;; auto900FA0AE_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto900FA0AE_g, auto900FA0AE_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto6557BF79_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto6557BF79_ai >= 0 && lv_x <= auto6557BF79_ae) || (auto6557BF79_ai < 0 && lv_x >= auto6557BF79_ae) ) ; lv_x += auto6557BF79_ai ) {
        autoCEE92C54_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoCEE92C54_ai >= 0 && lv_y <= autoCEE92C54_ae) || (autoCEE92C54_ai < 0 && lv_y >= autoCEE92C54_ae) ) ; lv_y += autoCEE92C54_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/0923C2EF") + StringExternal("Param/Value/41B24FB5")));
    for (auto9EC689CA_i = 1; auto9EC689CA_i <= auto9EC689CA_n; auto9EC689CA_i += 1) {
        lv_compassOffset = 0;
        lv_compassCircleSize = 15;
        for (autoBEBBE8C4_i = 1; autoBEBBE8C4_i <= autoBEBBE8C4_n; autoBEBBE8C4_i += 1) {
            RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_compassOffset, lv_compassAngle), lv_compassCircleSize));
            lv_compassOffset = (lv_compassOffset + 5);
            lv_compassCircleSize = (lv_compassCircleSize - 1);
        }
        lv_compassAngle = (lv_compassAngle + 90);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/4C688684") + StringExternal("Param/Value/AE1288B0")));
    lv_forEachX = 0;
    for ( ; ( (autoF29F12DA_ai >= 0 && lv_forEachX <= autoF29F12DA_ae) || (autoF29F12DA_ai < 0 && lv_forEachX >= autoF29F12DA_ae) ) ; lv_forEachX += autoF29F12DA_ai ) {
        lv_forEachY = 0;
        for ( ; ( (auto2EDDD402_ai >= 0 && lv_forEachY <= auto2EDDD402_ae) || (auto2EDDD402_ai < 0 && lv_forEachY >= auto2EDDD402_ae) ) ; lv_forEachY += auto2EDDD402_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if ((RegionContainsPoint(lv_dirtSaveingRegion, Point(lv_forEachX, lv_forEachY)) == false)) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/C7864F6A") + StringExternal("Param/Value/B85D4929")));
    autoECB770EB_g = PlayerGroupAll();
    autoECB770EB_var = -1;
    while (true) {
        autoECB770EB_var = PlayerGroupNextPlayer(autoECB770EB_g, autoECB770EB_var);
        if (autoECB770EB_var < 0) { break; }
        VisRevealArea(autoECB770EB_var, lv_dirtRemovalRegion, 5.5, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gv_absoluteCenterpoint);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.2, 1.2, 1.2, 0.0));
    for (auto9724C34A_i = 1; auto9724C34A_i <= auto9724C34A_n; auto9724C34A_i += 1) {
        lv_compassOffset = 0;
        for (autoAB2A6ABA_i = 1; autoAB2A6ABA_i <= autoAB2A6ABA_n; autoAB2A6ABA_i += 1) {
            lv_compassOffset = (lv_compassOffset + 2);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_compassOffset, lv_compassAngle)));
        }
        lv_compassAngle = (lv_compassAngle + 90);
    }
    for (auto1C936580_i = 1; auto1C936580_i <= auto1C936580_n; auto1C936580_i += 1) {
        if ((RegionContainsPoint(lv_dirtSaveingRegion, PointWithOffsetPolar(gv_absoluteCenterpoint, 32.0, lv_compassAngle)) == true) && (RegionContainsPoint(lv_dirtSaveingRegion, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, 32.0, (lv_compassAngleForDirtCircle + 3.6)))) == true)) {
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 0, gf_CorrectDirtPoint(PointWithOffsetPolar(gv_absoluteCenterpoint, 32.0, (lv_compassAngleForDirtCircle + 3.6))));
        }
        lv_compassAngleForDirtCircle = (lv_compassAngleForDirtCircle + 3.6);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateCompassPlayers () {
    // Variable Declarations
    int lv_debuggingRepeater;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoDC27C923_ae = gv_mapSize;
    const int autoDC27C923_ai = 4;
    const int auto3C022C42_ae = gv_mapSize;
    const int auto3C022C42_ai = 4;
    playergroup autoFD78F1E0_g;
    playergroup auto3D3FF2E6_g;
    int auto2876C59B_ae;
    const int auto2876C59B_ai = 1;
    playergroup auto18AB1F7C_g;
    playergroup auto1ADAB315_g;

    // Variable Initialization
    lv_debuggingRepeater = 1;
    lv_spawnAngle = gv_mapGenAngle;
    lv_spawnDistance = 40;

    // Implementation
    lv_spawnAngle = (lv_spawnAngle + 45.0);
    gv_possibleSpawnPoint[1] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 6), (lv_spawnAngle + 70.0));
    gv_possibleSpawnPoint[2] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle + 90.0));
    gv_possibleSpawnPoint[3] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 6), (lv_spawnAngle + 110.0));
    gv_possibleSpawnPoint[4] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 6), (lv_spawnAngle - 70.0));
    gv_possibleSpawnPoint[5] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle - 90.0));
    gv_possibleSpawnPoint[6] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 6), (lv_spawnAngle - 110.0));
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoDC27C923_ai >= 0 && lv_x <= autoDC27C923_ae) || (autoDC27C923_ai < 0 && lv_x >= autoDC27C923_ae) ) ; lv_x += autoDC27C923_ai ) {
            lv_y = 0;
            for ( ; ( (auto3C022C42_ai >= 0 && lv_y <= auto3C022C42_ae) || (auto3C022C42_ai < 0 && lv_y >= auto3C022C42_ae) ) ; lv_y += auto3C022C42_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoFD78F1E0_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoFD78F1E0_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto3D3FF2E6_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto3D3FF2E6_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto2876C59B_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto2876C59B_ai >= 0 && lv_i <= auto2876C59B_ae) || (auto2876C59B_ai < 0 && lv_i >= auto2876C59B_ae) ) ; lv_i += auto2876C59B_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[1], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[3], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[4], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[6], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[1], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[3], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[4], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[6], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto18AB1F7C_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto18AB1F7C_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto1ADAB315_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto1ADAB315_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateChokeTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_threatAngle;
    int lv_dirtSaveingOriginalAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    int lv_randomNumber;
    int lv_pillarCreationOffset;

    // Automatic Variable Declarations
    const int autoD12D2F36_ae = gv_mapSize;
    const int autoD12D2F36_ai = 1;
    const int autoD82E3A51_ae = gv_mapSize;
    const int autoD82E3A51_ai = 1;
    int auto411599C7_ae;
    const int auto411599C7_ai = 1;
    const int auto88D48630_ae = 5;
    const int auto88D48630_ai = 1;
    int autoC610B2FE_ae;
    const int autoC610B2FE_ai = 1;
    int autoFA03E810_ae;
    const int autoFA03E810_ai = 1;
    int auto0E657278_ae;
    const int auto0E657278_ai = 1;
    int autoB3016BEC_ae;
    const int autoB3016BEC_ai = 1;
    int autoBA4BC395_ae;
    const int autoBA4BC395_ai = 1;
    int autoD858E3EF_ae;
    const int autoD858E3EF_ai = 1;
    unitgroup auto87938DE1_g;
    int auto87938DE1_u;
    int auto152E545C_ae;
    const int auto152E545C_ai = 1;
    int autoD523399C_ae;
    const int autoD523399C_ai = 1;
    const int auto92BFBCEA_ae = 152;
    const int auto92BFBCEA_ai = 1;
    const int autoB57B17F5_ae = 152;
    const int autoB57B17F5_ai = 1;
    playergroup autoA6B85425_g;
    int autoA6B85425_var;
    const int auto1EECFD0A_n = 76;
    int auto1EECFD0A_i;
    const int autoCAEC6EC6_n = 76;
    int autoCAEC6EC6_i;
    unitgroup autoB8E935D0_g;
    int autoB8E935D0_u;
    unit autoB8E935D0_var;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();
    lv_randomNumber = RandomInt(0, 1);

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    if ((lv_randomNumber == 1)) {
        gv_mapGenAngle = 0;
    }
    else {
        gv_mapGenAngle = 90;
    }
    lv_threatAngle = gv_mapGenAngle;
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (autoD12D2F36_ai >= 0 && lv_x <= autoD12D2F36_ae) || (autoD12D2F36_ai < 0 && lv_x >= autoD12D2F36_ae) ) ; lv_x += autoD12D2F36_ai ) {
        lv_y = 0;
        for ( ; ( (autoD82E3A51_ai >= 0 && lv_y <= autoD82E3A51_ae) || (autoD82E3A51_ai < 0 && lv_y >= autoD82E3A51_ae) ) ; lv_y += autoD82E3A51_ai ) {
            auto411599C7_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto411599C7_ai >= 0 && lv_i <= auto411599C7_ae) || (auto411599C7_ai < 0 && lv_i >= auto411599C7_ae) ) ; lv_i += auto411599C7_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto88D48630_ai >= 0 && lv_i <= auto88D48630_ae) || (auto88D48630_ai < 0 && lv_i >= auto88D48630_ae) ) ; lv_i += auto88D48630_ai ) {
        Wait(0.0, c_timeGame);
        autoC610B2FE_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoC610B2FE_ai >= 0 && lv_x <= autoC610B2FE_ae) || (autoC610B2FE_ai < 0 && lv_x >= autoC610B2FE_ae) ) ; lv_x += autoC610B2FE_ai ) {
            autoFA03E810_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoFA03E810_ai >= 0 && lv_y <= autoFA03E810_ae) || (autoFA03E810_ai < 0 && lv_y >= autoFA03E810_ae) ) ; lv_y += autoFA03E810_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto0E657278_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto0E657278_ai >= 0 && lv_x <= auto0E657278_ae) || (auto0E657278_ai < 0 && lv_x >= auto0E657278_ae) ) ; lv_x += auto0E657278_ai ) {
            autoB3016BEC_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB3016BEC_ai >= 0 && lv_y <= autoB3016BEC_ae) || (autoB3016BEC_ai < 0 && lv_y >= autoB3016BEC_ae) ) ; lv_y += autoB3016BEC_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoBA4BC395_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoBA4BC395_ai >= 0 && lv_x <= autoBA4BC395_ae) || (autoBA4BC395_ai < 0 && lv_x >= autoBA4BC395_ae) ) ; lv_x += autoBA4BC395_ai ) {
        autoD858E3EF_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoD858E3EF_ai >= 0 && lv_y <= autoD858E3EF_ae) || (autoD858E3EF_ai < 0 && lv_y >= autoD858E3EF_ae) ) ; lv_y += autoD858E3EF_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto87938DE1_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87938DE1_u = UnitGroupCount(auto87938DE1_g, c_unitCountAll);
    for (;; auto87938DE1_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto87938DE1_g, auto87938DE1_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto152E545C_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto152E545C_ai >= 0 && lv_x <= auto152E545C_ae) || (auto152E545C_ai < 0 && lv_x >= auto152E545C_ae) ) ; lv_x += auto152E545C_ai ) {
        autoD523399C_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoD523399C_ai >= 0 && lv_y <= autoD523399C_ae) || (autoD523399C_ai < 0 && lv_y >= autoD523399C_ae) ) ; lv_y += autoD523399C_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/281840BB") + StringExternal("Param/Value/0570EFE3")));
    lv_forEachX = 0;
    for ( ; ( (auto92BFBCEA_ai >= 0 && lv_forEachX <= auto92BFBCEA_ae) || (auto92BFBCEA_ai < 0 && lv_forEachX >= auto92BFBCEA_ae) ) ; lv_forEachX += auto92BFBCEA_ai ) {
        lv_forEachY = 0;
        for ( ; ( (autoB57B17F5_ai >= 0 && lv_forEachY <= autoB57B17F5_ae) || (autoB57B17F5_ai < 0 && lv_forEachY >= autoB57B17F5_ae) ) ; lv_forEachY += autoB57B17F5_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if (((RegionContainsPoint(RegionFromId(15), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(16), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(13), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(14), Point(lv_forEachX, lv_forEachY)) == true))) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/5F9BD30D") + StringExternal("Param/Value/1DBB06E1")));
    if ((lv_randomNumber == 1)) {
        RegionAddRegion(lv_dirtRemovalRegion, RegionRect(76.0, 0.0, 76.0, 152.0));
    }
    else {
        RegionAddRegion(lv_dirtRemovalRegion, RegionRect(0.0, 76.0, 152.0, 76.0));
    }
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 7.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(38.0, 38.0), 8.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(38.0, 114.0), 8.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(114.0, 38.0), 8.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(114.0, 114.0), 8.0));
    autoA6B85425_g = PlayerGroupAll();
    autoA6B85425_var = -1;
    while (true) {
        autoA6B85425_var = PlayerGroupNextPlayer(autoA6B85425_g, autoA6B85425_var);
        if (autoA6B85425_var < 0) { break; }
        VisRevealArea(autoA6B85425_var, lv_dirtRemovalRegion, 5.0, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    if ((lv_randomNumber == 1)) {
        for (autoCAEC6EC6_i = 1; autoCAEC6EC6_i <= autoCAEC6EC6_n; autoCAEC6EC6_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, PointWithOffset(Point(76.0, 0.0), 0.0, lv_pillarCreationOffset));
            lv_pillarCreationOffset = (lv_pillarCreationOffset + 2);
        }
    }
    else {
        for (auto1EECFD0A_i = 1; auto1EECFD0A_i <= auto1EECFD0A_n; auto1EECFD0A_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, PointWithOffset(Point(0.0, 76.0), lv_pillarCreationOffset, 0.0));
            lv_pillarCreationOffset = (lv_pillarCreationOffset + 2);
        }
    }
    autoB8E935D0_g = UnitGroup("DirtUnbreakableandUntargetable", c_playerAny, RegionCircle(gv_absoluteCenterpoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB8E935D0_u = UnitGroupCount(autoB8E935D0_g, c_unitCountAll);
    for (;; autoB8E935D0_u -= 1) {
        autoB8E935D0_var = UnitGroupUnitFromEnd(autoB8E935D0_g, autoB8E935D0_u);
        if (autoB8E935D0_var == null) { break; }
        UnitRemove(autoB8E935D0_var);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateChokePlayers () {
    // Variable Declarations
    int lv_debuggingRepeater;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto8873F240_ae = gv_mapSize;
    const int auto8873F240_ai = 4;
    const int auto81B1FF23_ae = gv_mapSize;
    const int auto81B1FF23_ai = 4;
    playergroup autoEE8F35A3_g;
    playergroup autoC7FF9F0C_g;
    int autoE87B4400_ae;
    const int autoE87B4400_ai = 1;
    playergroup auto4A548ABE_g;
    playergroup autoA12F8454_g;

    // Variable Initialization
    lv_debuggingRepeater = 1;
    lv_spawnAngle = gv_mapGenAngle;
    lv_spawnDistance = 54;

    // Implementation
    lv_spawnAngle = (lv_spawnAngle + 90.0);
    gv_possibleSpawnPoint[1] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle + 45.0));
    gv_possibleSpawnPoint[2] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 15), (lv_spawnAngle + 90.0));
    gv_possibleSpawnPoint[3] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle + 135.0));
    gv_possibleSpawnPoint[4] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle - 45.0));
    gv_possibleSpawnPoint[5] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), (lv_spawnDistance + 15), (lv_spawnAngle - 90.0));
    gv_possibleSpawnPoint[6] = PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (lv_spawnAngle - 135.0));
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (auto8873F240_ai >= 0 && lv_x <= auto8873F240_ae) || (auto8873F240_ai < 0 && lv_x >= auto8873F240_ae) ) ; lv_x += auto8873F240_ai ) {
            lv_y = 0;
            for ( ; ( (auto81B1FF23_ai >= 0 && lv_y <= auto81B1FF23_ae) || (auto81B1FF23_ai < 0 && lv_y >= auto81B1FF23_ae) ) ; lv_y += auto81B1FF23_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoEE8F35A3_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoEE8F35A3_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoC7FF9F0C_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoC7FF9F0C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoE87B4400_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoE87B4400_ai >= 0 && lv_i <= autoE87B4400_ae) || (autoE87B4400_ai < 0 && lv_i >= autoE87B4400_ae) ) ; lv_i += autoE87B4400_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[1], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[3], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[4], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[6], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[1], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[3], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[4], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[6], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[2], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(gv_possibleSpawnPoint[5], RandomInt(0, 2), libNtve_gf_RandomAngle()));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto4A548ABE_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto4A548ABE_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    autoA12F8454_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoA12F8454_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateTeardropTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_tearOffset;
    int lv_tearAngle;
    int lv_dirtSaveingOriginalAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    point lv_dirtSaveingCirclePosition;
    int lv_circleRepeatedXTimes;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto1FF8ADEA_ae = gv_mapSize;
    const int auto1FF8ADEA_ai = 1;
    const int autoD632E095_ae = gv_mapSize;
    const int autoD632E095_ai = 1;
    int auto8E3B4923_ae;
    const int auto8E3B4923_ai = 1;
    const int auto070C228E_ae = 5;
    const int auto070C228E_ai = 1;
    int autoEEA58297_ae;
    const int autoEEA58297_ai = 1;
    int autoB1462040_ae;
    const int autoB1462040_ai = 1;
    int auto46F74CD5_ae;
    const int auto46F74CD5_ai = 1;
    int autoB3B2B426_ae;
    const int autoB3B2B426_ai = 1;
    int auto8EDF344A_ae;
    const int auto8EDF344A_ai = 1;
    int autoA5CFEF4A_ae;
    const int autoA5CFEF4A_ai = 1;
    unitgroup autoC5C747F2_g;
    int autoC5C747F2_u;
    int auto84074612_ae;
    const int auto84074612_ai = 1;
    int auto271143BC_ae;
    const int auto271143BC_ai = 1;
    const int autoAA181AEB_n = 4;
    int autoAA181AEB_i;
    const int autoE30DABF0_n = 50;
    int autoE30DABF0_i;
    const int autoBFB2E0A1_n = 50;
    int autoBFB2E0A1_i;
    const int auto2604BB62_ae = 152;
    const int auto2604BB62_ai = 1;
    const int auto6F7D6DF6_ae = 152;
    const int auto6F7D6DF6_ai = 1;
    playergroup auto0AE9B4B9_g;
    int auto0AE9B4B9_var;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_tearAngle = gv_mapGenAngle;
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (auto1FF8ADEA_ai >= 0 && lv_x <= auto1FF8ADEA_ae) || (auto1FF8ADEA_ai < 0 && lv_x >= auto1FF8ADEA_ae) ) ; lv_x += auto1FF8ADEA_ai ) {
        lv_y = 0;
        for ( ; ( (autoD632E095_ai >= 0 && lv_y <= autoD632E095_ae) || (autoD632E095_ai < 0 && lv_y >= autoD632E095_ae) ) ; lv_y += autoD632E095_ai ) {
            auto8E3B4923_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto8E3B4923_ai >= 0 && lv_i <= auto8E3B4923_ae) || (auto8E3B4923_ai < 0 && lv_i >= auto8E3B4923_ae) ) ; lv_i += auto8E3B4923_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto070C228E_ai >= 0 && lv_i <= auto070C228E_ae) || (auto070C228E_ai < 0 && lv_i >= auto070C228E_ae) ) ; lv_i += auto070C228E_ai ) {
        Wait(0.0, c_timeGame);
        autoEEA58297_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoEEA58297_ai >= 0 && lv_x <= autoEEA58297_ae) || (autoEEA58297_ai < 0 && lv_x >= autoEEA58297_ae) ) ; lv_x += autoEEA58297_ai ) {
            autoB1462040_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB1462040_ai >= 0 && lv_y <= autoB1462040_ae) || (autoB1462040_ai < 0 && lv_y >= autoB1462040_ae) ) ; lv_y += autoB1462040_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto46F74CD5_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto46F74CD5_ai >= 0 && lv_x <= auto46F74CD5_ae) || (auto46F74CD5_ai < 0 && lv_x >= auto46F74CD5_ae) ) ; lv_x += auto46F74CD5_ai ) {
            autoB3B2B426_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoB3B2B426_ai >= 0 && lv_y <= autoB3B2B426_ae) || (autoB3B2B426_ai < 0 && lv_y >= autoB3B2B426_ae) ) ; lv_y += autoB3B2B426_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto8EDF344A_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto8EDF344A_ai >= 0 && lv_x <= auto8EDF344A_ae) || (auto8EDF344A_ai < 0 && lv_x >= auto8EDF344A_ae) ) ; lv_x += auto8EDF344A_ai ) {
        autoA5CFEF4A_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (autoA5CFEF4A_ai >= 0 && lv_y <= autoA5CFEF4A_ae) || (autoA5CFEF4A_ai < 0 && lv_y >= autoA5CFEF4A_ae) ) ; lv_y += autoA5CFEF4A_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    autoC5C747F2_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC5C747F2_u = UnitGroupCount(autoC5C747F2_g, c_unitCountAll);
    for (;; autoC5C747F2_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoC5C747F2_g, autoC5C747F2_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    auto84074612_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto84074612_ai >= 0 && lv_x <= auto84074612_ae) || (auto84074612_ai < 0 && lv_x >= auto84074612_ae) ) ; lv_x += auto84074612_ai ) {
        auto271143BC_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto271143BC_ai >= 0 && lv_y <= auto271143BC_ae) || (auto271143BC_ai < 0 && lv_y >= auto271143BC_ae) ) ; lv_y += auto271143BC_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    for (autoAA181AEB_i = 1; autoAA181AEB_i <= autoAA181AEB_n; autoAA181AEB_i += 1) {
        for (autoE30DABF0_i = 1; autoE30DABF0_i <= autoE30DABF0_n; autoE30DABF0_i += 1) {
            RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_tearOffset, lv_tearAngle), 3.0));
            lv_tearOffset = (lv_tearOffset + 3);
        }
        lv_tearAngle = (lv_tearAngle + 27);
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 12.0, lv_tearAngle), 8.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 23.0, lv_tearAngle), 10.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 35.0, lv_tearAngle), 15.0));
        RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, 50.0, lv_tearAngle), 21.0));
        lv_tearAngle = (lv_tearAngle + 28);
        lv_tearOffset = 0;
        for (autoBFB2E0A1_i = 1; autoBFB2E0A1_i <= autoBFB2E0A1_n; autoBFB2E0A1_i += 1) {
            RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(PointWithOffsetPolar(gv_absoluteCenterpoint, lv_tearOffset, lv_tearAngle), 3.0));
            lv_tearOffset = (lv_tearOffset + 3);
        }
        lv_tearAngle = (lv_tearAngle + 35);
        lv_tearOffset = 0;
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/BCC99920") + StringExternal("Param/Value/222AF911")));
    lv_forEachX = 0;
    for ( ; ( (auto2604BB62_ai >= 0 && lv_forEachX <= auto2604BB62_ae) || (auto2604BB62_ai < 0 && lv_forEachX >= auto2604BB62_ae) ) ; lv_forEachX += auto2604BB62_ai ) {
        lv_forEachY = 0;
        for ( ; ( (auto6F7D6DF6_ai >= 0 && lv_forEachY <= auto6F7D6DF6_ae) || (auto6F7D6DF6_ai < 0 && lv_forEachY >= auto6F7D6DF6_ae) ) ; lv_forEachY += auto6F7D6DF6_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if ((!((RegionContainsPoint(lv_dirtSaveingRegion, Point(lv_forEachX, lv_forEachY)) == true)))) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/B0E21AAE") + StringExternal("Param/Value/921FA86E")));
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 4.0));
    auto0AE9B4B9_g = PlayerGroupAll();
    auto0AE9B4B9_var = -1;
    while (true) {
        auto0AE9B4B9_var = PlayerGroupNextPlayer(auto0AE9B4B9_g, auto0AE9B4B9_var);
        if (auto0AE9B4B9_var < 0) { break; }
        VisRevealArea(auto0AE9B4B9_var, lv_dirtRemovalRegion, 3.5, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateTeardropPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoE9F0864D_ae = gv_mapSize;
    const int autoE9F0864D_ai = 4;
    const int autoDF71D4F7_ae = gv_mapSize;
    const int autoDF71D4F7_ai = 4;
    playergroup autoD05DE72B_g;
    playergroup auto058A06FB_g;
    int autoDA19E950_ae;
    const int autoDA19E950_ai = 1;
    playergroup auto90B62D6B_g;
    playergroup auto02A1AD25_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoE9F0864D_ai >= 0 && lv_x <= autoE9F0864D_ae) || (autoE9F0864D_ai < 0 && lv_x >= autoE9F0864D_ae) ) ; lv_x += autoE9F0864D_ai ) {
            lv_y = 0;
            for ( ; ( (autoDF71D4F7_ai >= 0 && lv_y <= autoDF71D4F7_ae) || (autoDF71D4F7_ai < 0 && lv_y >= autoDF71D4F7_ae) ) ; lv_y += autoDF71D4F7_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoD05DE72B_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoD05DE72B_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto058A06FB_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto058A06FB_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            autoDA19E950_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoDA19E950_ai >= 0 && lv_i <= autoDA19E950_ae) || (autoDA19E950_ai < 0 && lv_i >= autoDA19E950_ae) ) ; lv_i += autoDA19E950_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto90B62D6B_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto90B62D6B_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto02A1AD25_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto02A1AD25_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateRiverTerrain5 () {
    // Variable Declarations
    int lv_RiverAngle;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    fixed lv_maxCenterPointOffset;
    fixed lv_circleSizeMax;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int auto57B9127A_ae = 15;
    const int auto57B9127A_ai = 1;
    const int auto25D679A0_ae = 20;
    const int auto25D679A0_ai = 1;
    int autoA5C67F5F_ae;
    const int autoA5C67F5F_ai = 1;
    const int autoD4E90E11_ae = gv_mapSize;
    const int autoD4E90E11_ai = 1;
    const int autoE4CF29C7_ae = gv_mapSize;
    const int autoE4CF29C7_ai = 1;
    int autoCF7B11DC_ae;
    const int autoCF7B11DC_ai = 1;
    const int auto5EE5164C_ae = 5;
    const int auto5EE5164C_ai = 1;
    int autoCAB8E1CC_ae;
    const int autoCAB8E1CC_ai = 1;
    int autoD101B79E_ae;
    const int autoD101B79E_ai = 1;
    int auto8BE69D14_ae;
    const int auto8BE69D14_ai = 1;
    int autoDCA7A84E_ae;
    const int autoDCA7A84E_ai = 1;
    int autoD0845A97_ae;
    const int autoD0845A97_ai = 1;
    int auto38E82290_ae;
    const int auto38E82290_ai = 1;
    unitgroup auto4B579A28_g;
    int auto4B579A28_u;
    int autoFAB3F579_ae;
    const int autoFAB3F579_ai = 1;
    int auto24EB4AE2_ae;
    const int auto24EB4AE2_ai = 1;

    // Variable Initialization
    lv_RiverAngle = RandomInt(0, 360);
    lv_maxCenterPointOffset = 22.0;
    lv_circleSizeMax = 22.0;

    // Implementation
    gv_mapGenAngle = lv_RiverAngle;
    gv_clearCircleCount = 30;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 7.0);
    lv_i = 1;
    for ( ; ( (auto57B9127A_ai >= 0 && lv_i <= auto57B9127A_ae) || (auto57B9127A_ai < 0 && lv_i >= auto57B9127A_ae) ) ; lv_i += auto57B9127A_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed(lv_circleSizeMax, lv_circleSizeMax));
    }
    lv_i = 16;
    for ( ; ( (auto25D679A0_ai >= 0 && lv_i <= auto25D679A0_ae) || (auto25D679A0_ai < 0 && lv_i >= auto25D679A0_ae) ) ; lv_i += auto25D679A0_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed((lv_circleSizeMax * 1.1), (lv_circleSizeMax * 1.3)));
    }
    autoA5C67F5F_ae = gv_clearCircleCount;
    lv_i = 21;
    for ( ; ( (autoA5C67F5F_ai >= 0 && lv_i <= autoA5C67F5F_ae) || (autoA5C67F5F_ai < 0 && lv_i >= autoA5C67F5F_ae) ) ; lv_i += autoA5C67F5F_ai ) {
        gv_clearCircles[lv_i] = PointWithOffsetPolar(lv_dirtMapCenterPoint, RandomFixed(-50.0, 50.0), lv_RiverAngle);
        PointSetHeight(gv_clearCircles[lv_i], RandomFixed(lv_circleSizeMax, lv_circleSizeMax));
    }
    lv_x = 0;
    for ( ; ( (autoD4E90E11_ai >= 0 && lv_x <= autoD4E90E11_ae) || (autoD4E90E11_ai < 0 && lv_x >= autoD4E90E11_ae) ) ; lv_x += autoD4E90E11_ai ) {
        lv_y = 0;
        for ( ; ( (autoE4CF29C7_ai >= 0 && lv_y <= autoE4CF29C7_ae) || (autoE4CF29C7_ai < 0 && lv_y >= autoE4CF29C7_ae) ) ; lv_y += autoE4CF29C7_ai ) {
            autoCF7B11DC_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoCF7B11DC_ai >= 0 && lv_i <= autoCF7B11DC_ae) || (autoCF7B11DC_ai < 0 && lv_i >= autoCF7B11DC_ae) ) ; lv_i += autoCF7B11DC_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto5EE5164C_ai >= 0 && lv_i <= auto5EE5164C_ae) || (auto5EE5164C_ai < 0 && lv_i >= auto5EE5164C_ae) ) ; lv_i += auto5EE5164C_ai ) {
        Wait(0.0, c_timeGame);
        autoCAB8E1CC_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoCAB8E1CC_ai >= 0 && lv_x <= autoCAB8E1CC_ae) || (autoCAB8E1CC_ai < 0 && lv_x >= autoCAB8E1CC_ae) ) ; lv_x += autoCAB8E1CC_ai ) {
            autoD101B79E_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoD101B79E_ai >= 0 && lv_y <= autoD101B79E_ae) || (autoD101B79E_ai < 0 && lv_y >= autoD101B79E_ae) ) ; lv_y += autoD101B79E_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        auto8BE69D14_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto8BE69D14_ai >= 0 && lv_x <= auto8BE69D14_ae) || (auto8BE69D14_ai < 0 && lv_x >= auto8BE69D14_ae) ) ; lv_x += auto8BE69D14_ai ) {
            autoDCA7A84E_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoDCA7A84E_ai >= 0 && lv_y <= autoDCA7A84E_ae) || (autoDCA7A84E_ai < 0 && lv_y >= autoDCA7A84E_ae) ) ; lv_y += autoDCA7A84E_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    autoD0845A97_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoD0845A97_ai >= 0 && lv_x <= autoD0845A97_ae) || (autoD0845A97_ai < 0 && lv_x >= autoD0845A97_ae) ) ; lv_x += autoD0845A97_ai ) {
        auto38E82290_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto38E82290_ai >= 0 && lv_y <= auto38E82290_ae) || (auto38E82290_ai < 0 && lv_y >= auto38E82290_ae) ) ; lv_y += auto38E82290_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto4B579A28_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4B579A28_u = UnitGroupCount(auto4B579A28_g, c_unitCountAll);
    for (;; auto4B579A28_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto4B579A28_g, auto4B579A28_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoFAB3F579_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoFAB3F579_ai >= 0 && lv_x <= autoFAB3F579_ae) || (autoFAB3F579_ai < 0 && lv_x >= autoFAB3F579_ae) ) ; lv_x += autoFAB3F579_ai ) {
        auto24EB4AE2_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto24EB4AE2_ai >= 0 && lv_y <= auto24EB4AE2_ae) || (auto24EB4AE2_ai < 0 && lv_y >= auto24EB4AE2_ae) ) ; lv_y += auto24EB4AE2_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
}

void gf_GenerateRavinePlayers () {
    // Variable Declarations
    int lv_closeOrFar;
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoFE7A781E_ae = gv_mapSize;
    const int autoFE7A781E_ai = 4;
    const int auto02C0683B_ae = gv_mapSize;
    const int auto02C0683B_ai = 4;
    playergroup auto726337E5_g;
    playergroup autoCB40553E_g;
    int auto177F7359_ae;
    const int auto177F7359_ai = 1;
    playergroup auto257E3B68_g;
    playergroup auto435024DF_g;

    // Variable Initialization
    lv_closeOrFar = RandomInt(0, 1);

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoFE7A781E_ai >= 0 && lv_x <= autoFE7A781E_ae) || (autoFE7A781E_ai < 0 && lv_x >= autoFE7A781E_ae) ) ; lv_x += autoFE7A781E_ai ) {
            lv_y = 0;
            for ( ; ( (auto02C0683B_ai >= 0 && lv_y <= auto02C0683B_ae) || (auto02C0683B_ai < 0 && lv_y >= auto02C0683B_ae) ) ; lv_y += auto02C0683B_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto726337E5_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto726337E5_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        autoCB40553E_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoCB40553E_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto177F7359_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto177F7359_ai >= 0 && lv_i <= auto177F7359_ae) || (auto177F7359_ai < 0 && lv_i >= auto177F7359_ae) ) ; lv_i += auto177F7359_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, (gv_mapGenAngle - 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, gv_mapGenAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, (gv_mapGenAngle - 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 40.0, gv_mapGenAngle));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        if ((lv_closeOrFar == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
        }
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        lv_spawnDistance = (lv_spawnDistance + 5);
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        lv_spawnDistance = (lv_spawnDistance + 10);
        lv_spawnAngle = (lv_spawnAngle + 0.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle + 90)), 40.0, (gv_mapGenAngle + 180)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 0)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, (gv_mapGenAngle - 90)), 40.0, (gv_mapGenAngle + 180)));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        lv_spawnDistance = (lv_spawnDistance + 5);
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto257E3B68_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto257E3B68_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto435024DF_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto435024DF_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    gv_announceAlliances = true;
}

void gf_GenerateTwirlTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_twirlAmount;
    int lv_twirlAmountOffset;
    int lv_dirtSaveingOriginalAngle;
    fixed lv_dirtSaveingCircleSize;
    int lv_dirtSaveingOffsetFromCenter;
    int lv_dirtSaveingOffsetAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    point lv_dirtSaveingCirclePosition;
    int lv_circleRepeatedXTimes;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;

    // Automatic Variable Declarations
    const int autoB6090BAE_ae = gv_mapSize;
    const int autoB6090BAE_ai = 1;
    const int auto5238B992_ae = gv_mapSize;
    const int auto5238B992_ai = 1;
    int auto31EBB11C_ae;
    const int auto31EBB11C_ai = 1;
    const int auto538A1672_ae = 5;
    const int auto538A1672_ai = 1;
    int auto486D0520_ae;
    const int auto486D0520_ai = 1;
    int auto8AA8A04A_ae;
    const int auto8AA8A04A_ai = 1;
    int autoBCFFC41E_ae;
    const int autoBCFFC41E_ai = 1;
    int auto54A33D1E_ae;
    const int auto54A33D1E_ai = 1;
    int auto1895F9B5_ae;
    const int auto1895F9B5_ai = 1;
    int auto232DBB0E_ae;
    const int auto232DBB0E_ai = 1;
    unitgroup auto064E7523_g;
    int auto064E7523_u;
    int autoD291CD05_ae;
    const int autoD291CD05_ai = 1;
    int auto32CCAF3F_ae;
    const int auto32CCAF3F_ai = 1;
    int autoADCFB922_n;
    int autoADCFB922_i;
    const int auto50A3396E_n = 100;
    int auto50A3396E_i;
    const int autoDC0B10B6_ae = 152;
    const int autoDC0B10B6_ai = 1;
    const int auto0FC0023D_ae = 152;
    const int auto0FC0023D_ai = 1;
    playergroup auto937DB1DF_g;
    int auto937DB1DF_var;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (autoB6090BAE_ai >= 0 && lv_x <= autoB6090BAE_ae) || (autoB6090BAE_ai < 0 && lv_x >= autoB6090BAE_ae) ) ; lv_x += autoB6090BAE_ai ) {
        lv_y = 0;
        for ( ; ( (auto5238B992_ai >= 0 && lv_y <= auto5238B992_ae) || (auto5238B992_ai < 0 && lv_y >= auto5238B992_ae) ) ; lv_y += auto5238B992_ai ) {
            auto31EBB11C_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto31EBB11C_ai >= 0 && lv_i <= auto31EBB11C_ae) || (auto31EBB11C_ai < 0 && lv_i >= auto31EBB11C_ae) ) ; lv_i += auto31EBB11C_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (auto538A1672_ai >= 0 && lv_i <= auto538A1672_ae) || (auto538A1672_ai < 0 && lv_i >= auto538A1672_ae) ) ; lv_i += auto538A1672_ai ) {
        Wait(0.0, c_timeGame);
        auto486D0520_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto486D0520_ai >= 0 && lv_x <= auto486D0520_ae) || (auto486D0520_ai < 0 && lv_x >= auto486D0520_ae) ) ; lv_x += auto486D0520_ai ) {
            auto8AA8A04A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto8AA8A04A_ai >= 0 && lv_y <= auto8AA8A04A_ae) || (auto8AA8A04A_ai < 0 && lv_y >= auto8AA8A04A_ae) ) ; lv_y += auto8AA8A04A_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoBCFFC41E_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoBCFFC41E_ai >= 0 && lv_x <= autoBCFFC41E_ae) || (autoBCFFC41E_ai < 0 && lv_x >= autoBCFFC41E_ae) ) ; lv_x += autoBCFFC41E_ai ) {
            auto54A33D1E_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (auto54A33D1E_ai >= 0 && lv_y <= auto54A33D1E_ae) || (auto54A33D1E_ai < 0 && lv_y >= auto54A33D1E_ae) ) ; lv_y += auto54A33D1E_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto1895F9B5_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto1895F9B5_ai >= 0 && lv_x <= auto1895F9B5_ae) || (auto1895F9B5_ai < 0 && lv_x >= auto1895F9B5_ae) ) ; lv_x += auto1895F9B5_ai ) {
        auto232DBB0E_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto232DBB0E_ai >= 0 && lv_y <= auto232DBB0E_ae) || (auto232DBB0E_ai < 0 && lv_y >= auto232DBB0E_ae) ) ; lv_y += auto232DBB0E_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto064E7523_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto064E7523_u = UnitGroupCount(auto064E7523_g, c_unitCountAll);
    for (;; auto064E7523_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto064E7523_g, auto064E7523_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoD291CD05_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoD291CD05_ai >= 0 && lv_x <= autoD291CD05_ae) || (autoD291CD05_ai < 0 && lv_x >= autoD291CD05_ae) ) ; lv_x += autoD291CD05_ai ) {
        auto32CCAF3F_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto32CCAF3F_ai >= 0 && lv_y <= auto32CCAF3F_ae) || (auto32CCAF3F_ai < 0 && lv_y >= auto32CCAF3F_ae) ) ; lv_y += auto32CCAF3F_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/3CEACA27") + StringExternal("Param/Value/F500DE4C")));
    lv_twirlAmount = RandomInt(2, 5);
    lv_twirlAmountOffset = (360 / lv_twirlAmount);
    autoADCFB922_n = lv_twirlAmount;
    for (autoADCFB922_i = 1; autoADCFB922_i <= autoADCFB922_n; autoADCFB922_i += 1) {
        lv_dirtSaveingOffsetAngle = lv_dirtSaveingOriginalAngle;
        lv_dirtSaveingOffsetFromCenter = -3;
        lv_dirtSaveingCircleSize = 0.0;
        lv_dirtSaveingOriginalAngle = (lv_dirtSaveingOriginalAngle + lv_twirlAmountOffset);
        Wait(2.0, c_timeGame);
        for (auto50A3396E_i = 1; auto50A3396E_i <= auto50A3396E_n; auto50A3396E_i += 1) {
            if ((lv_circleRepeatedXTimes <= 30)) {
                lv_dirtSaveingCircleSize = (lv_dirtSaveingCircleSize + (lv_circleRepeatedXTimes * 0.02));
            }
            else {
                lv_dirtSaveingCircleSize = (lv_dirtSaveingCircleSize + 0.2);
            }
            lv_dirtSaveingOffsetFromCenter = (lv_dirtSaveingOffsetFromCenter + 1);
            lv_dirtSaveingOffsetAngle = (lv_dirtSaveingOffsetAngle + 1);
            lv_circleRepeatedXTimes = (lv_circleRepeatedXTimes + 1);
            lv_dirtSaveingCirclePosition = PointWithOffsetPolar(gv_absoluteCenterpoint, lv_dirtSaveingOffsetFromCenter, lv_dirtSaveingOffsetAngle);
            RegionAddRegion(lv_dirtSaveingRegion, RegionCircle(lv_dirtSaveingCirclePosition, lv_dirtSaveingCircleSize));
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/D06FFCD9") + StringExternal("Param/Value/DF857032")));
    lv_forEachX = 0;
    for ( ; ( (autoDC0B10B6_ai >= 0 && lv_forEachX <= autoDC0B10B6_ae) || (autoDC0B10B6_ai < 0 && lv_forEachX >= autoDC0B10B6_ae) ) ; lv_forEachX += autoDC0B10B6_ai ) {
        lv_forEachY = 0;
        for ( ; ( (auto0FC0023D_ai >= 0 && lv_forEachY <= auto0FC0023D_ae) || (auto0FC0023D_ai < 0 && lv_forEachY >= auto0FC0023D_ae) ) ; lv_forEachY += auto0FC0023D_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if (((RegionContainsPoint(lv_dirtSaveingRegion, Point(lv_forEachX, lv_forEachY)) == false))) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/2492C1DC") + StringExternal("Param/Value/BFF876FF")));
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 9.0));
    auto937DB1DF_g = PlayerGroupAll();
    auto937DB1DF_var = -1;
    while (true) {
        auto937DB1DF_var = PlayerGroupNextPlayer(auto937DB1DF_g, auto937DB1DF_var);
        if (auto937DB1DF_var < 0) { break; }
        VisRevealArea(auto937DB1DF_var, lv_dirtRemovalRegion, 3.5, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateTwirlPlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoD9C2A799_ae = gv_mapSize;
    const int autoD9C2A799_ai = 4;
    const int autoF2998997_ae = gv_mapSize;
    const int autoF2998997_ai = 4;
    playergroup auto51389255_g;
    playergroup auto1CDD1B53_g;
    int auto9AA66DAD_ae;
    const int auto9AA66DAD_ai = 1;
    playergroup auto416D6476_g;
    playergroup auto47E34FB2_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoD9C2A799_ai >= 0 && lv_x <= autoD9C2A799_ae) || (autoD9C2A799_ai < 0 && lv_x >= autoD9C2A799_ae) ) ; lv_x += autoD9C2A799_ai ) {
            lv_y = 0;
            for ( ; ( (autoF2998997_ai >= 0 && lv_y <= autoF2998997_ae) || (autoF2998997_ai < 0 && lv_y >= autoF2998997_ae) ) ; lv_y += autoF2998997_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    auto51389255_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(auto51389255_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto1CDD1B53_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto1CDD1B53_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto9AA66DAD_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto9AA66DAD_ai >= 0 && lv_i <= auto9AA66DAD_ae) || (auto9AA66DAD_ai < 0 && lv_i >= auto9AA66DAD_ae) ) ; lv_i += auto9AA66DAD_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto416D6476_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto416D6476_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto47E34FB2_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto47E34FB2_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_GenerateInvertedChokeTerrain () {
    // Variable Declarations
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_threatAngle;
    int lv_dirtSaveingOriginalAngle;
    region lv_dirtSaveingRegion;
    region lv_dirtRemovalRegion;
    unit lv_currentUnit;
    int lv_x;
    int lv_y;
    int lv_neighborCount;
    int lv_i;
    point lv_dirtMapCenterPoint;
    int lv_randomNumber;
    int lv_pillarCreationOffset;

    // Automatic Variable Declarations
    const int auto76432C89_ae = gv_mapSize;
    const int auto76432C89_ai = 1;
    const int auto26BEE74F_ae = gv_mapSize;
    const int auto26BEE74F_ai = 1;
    int autoFE701C30_ae;
    const int autoFE701C30_ai = 1;
    const int autoBBBAA519_ae = 5;
    const int autoBBBAA519_ai = 1;
    int auto71E83407_ae;
    const int auto71E83407_ai = 1;
    int autoF3214D1A_ae;
    const int autoF3214D1A_ai = 1;
    int autoCA9B2C8F_ae;
    const int autoCA9B2C8F_ai = 1;
    int autoDC19A76D_ae;
    const int autoDC19A76D_ai = 1;
    int auto1C532A70_ae;
    const int auto1C532A70_ai = 1;
    int auto3C7E8202_ae;
    const int auto3C7E8202_ai = 1;
    unitgroup auto176607B2_g;
    int auto176607B2_u;
    int autoEA211013_ae;
    const int autoEA211013_ai = 1;
    int auto6C4AB3A7_ae;
    const int auto6C4AB3A7_ai = 1;
    const int autoC02E7B06_ae = 152;
    const int autoC02E7B06_ai = 1;
    const int autoB030C807_ae = 152;
    const int autoB030C807_ai = 1;
    playergroup auto98F5663F_g;
    int auto98F5663F_var;
    const int auto60CD7E71_n = 76;
    int auto60CD7E71_i;
    const int auto5401F28E_n = 76;
    int auto5401F28E_i;
    unitgroup auto7F8CD370_g;
    int auto7F8CD370_u;
    unit auto7F8CD370_var;

    // Variable Initialization
    lv_dirtSaveingRegion = RegionEmpty();
    lv_dirtRemovalRegion = RegionEmpty();
    lv_randomNumber = RandomInt(0, 1);

    // Implementation
    gv_mapGenAngle = RandomInt(1, 360);
    if ((lv_randomNumber == 1)) {
        gv_mapGenAngle = 0;
    }
    else {
        gv_mapGenAngle = 90;
    }
    lv_threatAngle = gv_mapGenAngle;
    lv_dirtSaveingOriginalAngle = gv_mapGenAngle;
    gv_clearCircleCount = 0;
    gv_usingInvertedMapLayout = false;
    lv_dirtMapCenterPoint = Point((gv_mapSize / 2.0), (gv_mapSize / 2.0));
    lv_dirtMapCenterPoint = PointWithOffset(lv_dirtMapCenterPoint, 1.0, 0.0);
    gv_clearCircles[0] = lv_dirtMapCenterPoint;
    PointSetHeight(gv_clearCircles[0], 0.0);
    lv_x = 0;
    for ( ; ( (auto76432C89_ai >= 0 && lv_x <= auto76432C89_ae) || (auto76432C89_ai < 0 && lv_x >= auto76432C89_ae) ) ; lv_x += auto76432C89_ai ) {
        lv_y = 0;
        for ( ; ( (auto26BEE74F_ai >= 0 && lv_y <= auto26BEE74F_ae) || (auto26BEE74F_ai < 0 && lv_y >= auto26BEE74F_ae) ) ; lv_y += auto26BEE74F_ai ) {
            autoFE701C30_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (autoFE701C30_ai >= 0 && lv_i <= autoFE701C30_ae) || (autoFE701C30_ai < 0 && lv_i >= autoFE701C30_ae) ) ; lv_i += autoFE701C30_ai ) {
                if ((DistanceBetweenPoints(Point(lv_x, lv_y), gv_clearCircles[lv_i]) < PointGetHeight(gv_clearCircles[lv_i]))) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    lv_i = 1;
    for ( ; ( (autoBBBAA519_ai >= 0 && lv_i <= autoBBBAA519_ae) || (autoBBBAA519_ai < 0 && lv_i >= autoBBBAA519_ae) ) ; lv_i += autoBBBAA519_ai ) {
        Wait(0.0, c_timeGame);
        auto71E83407_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (auto71E83407_ai >= 0 && lv_x <= auto71E83407_ae) || (auto71E83407_ai < 0 && lv_x >= auto71E83407_ae) ) ; lv_x += auto71E83407_ai ) {
            autoF3214D1A_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoF3214D1A_ai >= 0 && lv_y <= autoF3214D1A_ae) || (autoF3214D1A_ai < 0 && lv_y >= autoF3214D1A_ae) ) ; lv_y += autoF3214D1A_ai ) {
                lv_neighborCount = 0;
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
                lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
                if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 3)) {
                    gv_clearMap[lv_x][lv_y] = 1;
                }

            }
        }
        autoCA9B2C8F_ae = (gv_mapSize - 1);
        lv_x = 1;
        for ( ; ( (autoCA9B2C8F_ai >= 0 && lv_x <= autoCA9B2C8F_ae) || (autoCA9B2C8F_ai < 0 && lv_x >= autoCA9B2C8F_ae) ) ; lv_x += autoCA9B2C8F_ai ) {
            autoDC19A76D_ae = (gv_mapSize - 1);
            lv_y = 1;
            for ( ; ( (autoDC19A76D_ai >= 0 && lv_y <= autoDC19A76D_ae) || (autoDC19A76D_ai < 0 && lv_y >= autoDC19A76D_ae) ) ; lv_y += autoDC19A76D_ai ) {
                if ((gv_clearMap[lv_x][lv_y] == 1)) {
                    gv_dirtMap[lv_x][lv_y] = 0;
                    gv_clearMap[lv_x][lv_y] = 0;
                }

            }
        }
    }
    auto1C532A70_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (auto1C532A70_ai >= 0 && lv_x <= auto1C532A70_ae) || (auto1C532A70_ai < 0 && lv_x >= auto1C532A70_ae) ) ; lv_x += auto1C532A70_ai ) {
        auto3C7E8202_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto3C7E8202_ai >= 0 && lv_y <= auto3C7E8202_ae) || (auto3C7E8202_ai < 0 && lv_y >= auto3C7E8202_ae) ) ; lv_y += auto3C7E8202_ai ) {
            lv_neighborCount = 0;
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x - 1)][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[lv_x][(lv_y + 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y - 1)];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][lv_y];
            lv_neighborCount += gv_dirtMap[(lv_x + 1)][(lv_y + 1)];
            if ((gv_dirtMap[lv_x][lv_y] == 1) && (lv_neighborCount <= 7)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed(gv_groundTextureRed, gv_groundTextureRed), RandomFixed(gv_groundTextureGreen, gv_groundTextureGreen), RandomFixed(gv_groundTextureBlue, gv_groundTextureBlue), 90.0), 1.0, 6.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
            }

        }
    }
    auto176607B2_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto176607B2_u = UnitGroupCount(auto176607B2_g, c_unitCountAll);
    for (;; auto176607B2_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto176607B2_g, auto176607B2_u);
        if (lv_currentUnit == null) { break; }
        lv_x = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_y = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gv_dirtMap[lv_x][lv_y] = 0;
    }
    autoEA211013_ae = (gv_mapSize - 1);
    lv_x = 1;
    for ( ; ( (autoEA211013_ai >= 0 && lv_x <= autoEA211013_ae) || (autoEA211013_ai < 0 && lv_x >= autoEA211013_ae) ) ; lv_x += autoEA211013_ai ) {
        auto6C4AB3A7_ae = (gv_mapSize - 1);
        lv_y = 1;
        for ( ; ( (auto6C4AB3A7_ai >= 0 && lv_y <= auto6C4AB3A7_ae) || (auto6C4AB3A7_ai < 0 && lv_y >= auto6C4AB3A7_ae) ) ; lv_y += auto6C4AB3A7_ai ) {
            gv_clearMap[lv_x][lv_y] = gv_dirtMap[lv_x][lv_y];
        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/B860B360") + StringExternal("Param/Value/42664307")));
    lv_forEachX = 0;
    for ( ; ( (autoC02E7B06_ai >= 0 && lv_forEachX <= autoC02E7B06_ae) || (autoC02E7B06_ai < 0 && lv_forEachX >= autoC02E7B06_ae) ) ; lv_forEachX += autoC02E7B06_ai ) {
        lv_forEachY = 0;
        for ( ; ( (autoB030C807_ai >= 0 && lv_forEachY <= autoB030C807_ae) || (autoB030C807_ai < 0 && lv_forEachY >= autoB030C807_ae) ) ; lv_forEachY += autoB030C807_ai ) {
            if ((lv_amountScanned != 500)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if ((!(((RegionContainsPoint(RegionFromId(15), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(16), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(13), Point(lv_forEachX, lv_forEachY)) == true) || (RegionContainsPoint(RegionFromId(14), Point(lv_forEachX, lv_forEachY)) == true))))) {
                RegionAddRect(lv_dirtRemovalRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, (StringExternal("Param/Value/D5010237") + StringExternal("Param/Value/7C01A0BD")));
    if ((lv_randomNumber == 1)) {
        RegionAddRegion(lv_dirtRemovalRegion, RegionRect(76.0, 0.0, 76.0, 152.0));
    }
    else {
        RegionAddRegion(lv_dirtRemovalRegion, RegionRect(0.0, 76.0, 152.0, 76.0));
    }
    RegionAddRegion(lv_dirtRemovalRegion, RegionCircle(gv_absoluteCenterpoint, 7.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(38.0, 38.0), 8.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(38.0, 114.0), 8.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(114.0, 38.0), 8.0));
    RegionAddRegion(lv_dirtRemovalRegion, gf_Convertpointtosquareregion(Point(114.0, 114.0), 8.0));
    auto98F5663F_g = PlayerGroupAll();
    auto98F5663F_var = -1;
    while (true) {
        auto98F5663F_var = PlayerGroupNextPlayer(auto98F5663F_g, auto98F5663F_var);
        if (auto98F5663F_var < 0) { break; }
        VisRevealArea(auto98F5663F_var, lv_dirtRemovalRegion, 5.0, false);
    }
    gf_RemoveDirtinRegion(lv_dirtRemovalRegion);
    if ((lv_randomNumber == 1)) {
        for (auto5401F28E_i = 1; auto5401F28E_i <= auto5401F28E_n; auto5401F28E_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, PointWithOffset(Point(76.0, 0.0), 0.0, lv_pillarCreationOffset));
            lv_pillarCreationOffset = (lv_pillarCreationOffset + 2);
        }
    }
    else {
        for (auto60CD7E71_i = 1; auto60CD7E71_i <= auto60CD7E71_n; auto60CD7E71_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DirtUnbreakableandUntargetable", 0, 0, PointWithOffset(Point(0.0, 76.0), lv_pillarCreationOffset, 0.0));
            lv_pillarCreationOffset = (lv_pillarCreationOffset + 2);
        }
    }
    auto7F8CD370_g = UnitGroup("DirtUnbreakableandUntargetable", c_playerAny, RegionCircle(gv_absoluteCenterpoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7F8CD370_u = UnitGroupCount(auto7F8CD370_g, c_unitCountAll);
    for (;; auto7F8CD370_u -= 1) {
        auto7F8CD370_var = UnitGroupUnitFromEnd(auto7F8CD370_g, auto7F8CD370_u);
        if (auto7F8CD370_var == null) { break; }
        UnitRemove(auto7F8CD370_var);
    }
    gf_MakesurenoExternalDirthasCreepUnderit();
}

void gf_GenerateInvertedChokePlayers () {
    // Variable Declarations
    int lv_repeatOddsetAdded;
    int lv_repeatOddsetAdded2;
    int lv_repeatTimes;
    int lv__3V3angle;
    int lv_currentPlayer;
    int lv_i;
    fixed lv_spawnAngle;
    int lv_spawnDistance;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int autoDCD8C44B_ae = gv_mapSize;
    const int autoDCD8C44B_ai = 4;
    const int auto4E962328_ae = gv_mapSize;
    const int auto4E962328_ai = 4;
    playergroup autoBE51F2C5_g;
    playergroup auto6A2AD33C_g;
    int auto035A3259_ae;
    const int auto035A3259_ai = 1;
    playergroup auto64A54591_g;
    playergroup auto8AC779FD_g;

    // Variable Initialization
    lv_spawnDistance = 2;

    // Implementation
    Wait(0.0, c_timeGame);
    RegionPlayableMapSet(RegionFromId(1));
    CameraSetBounds(PlayerGroupAll(), RegionFromId(1), true);
    if ((gv_usingInvertedMapLayout == true)) {
        lv_x = 4;
        for ( ; ( (autoDCD8C44B_ai >= 0 && lv_x <= autoDCD8C44B_ae) || (autoDCD8C44B_ai < 0 && lv_x >= autoDCD8C44B_ae) ) ; lv_x += autoDCD8C44B_ai ) {
            lv_y = 0;
            for ( ; ( (auto4E962328_ai >= 0 && lv_y <= auto4E962328_ae) || (auto4E962328_ai < 0 && lv_y >= auto4E962328_ae) ) ; lv_y += auto4E962328_ai ) {
                if ((gv_dirtMap[lv_x][lv_y] == 0) && (UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    autoBE51F2C5_g = PlayerGroupActive();
                    lv_currentPlayer = -1;
                    while (true) {
                        lv_currentPlayer = PlayerGroupNextPlayer(autoBE51F2C5_g, lv_currentPlayer);
                        if (lv_currentPlayer < 0) { break; }
                        VisRevealArea(lv_currentPlayer, RegionCircle(Point((lv_x * 2.0), (lv_y * 2.0)), 30.0), 0.1, true);
                    }
                }

            }
        }
    }
    else {
        auto6A2AD33C_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto6A2AD33C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            auto035A3259_ae = gv_clearCircleCount;
            lv_i = 0;
            for ( ; ( (auto035A3259_ai >= 0 && lv_i <= auto035A3259_ae) || (auto035A3259_ai < 0 && lv_i >= auto035A3259_ae) ) ; lv_i += auto035A3259_ai ) {
                VisRevealArea(lv_currentPlayer, RegionCircle(Point((PointGetX(gv_clearCircles[lv_i]) * 2.0), (PointGetY(gv_clearCircles[lv_i]) * 2.0)), ((PointGetHeight(gv_clearCircles[lv_i]) * 2.0) + 4.0)), 0.1, true);
            }
        }
    }
    Wait(0.2, c_timeGame);
    lv_spawnAngle = libNtve_gf_RandomAngle();
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0010"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 180.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0008") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 160.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), 65.0, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 100.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 140.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 20.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[3], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[4], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[5], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[6], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0011"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[1], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 1), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 2), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 3), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
        lv_spawnAngle = (lv_spawnAngle + 60.0);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NewQueen", c_unitCreateIgnorePlacement, PlayerGroupPlayer(gv_playerSpawnTeam[2], 4), PointWithOffsetPolar(RegionGetCenter(RegionPlayableMap()), lv_spawnDistance, lv_spawnAngle));
    }
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        TriggerEnable(gt_UpdateleaderboardRanked, true);
        TriggerExecute(gt_UpdateleaderboardRanked, false, false);
    }
    else {
        TriggerEnable(gt_UpdateleaderboardUnranked, true);
        TriggerExecute(gt_UpdateleaderboardUnranked, false, false);
    }
    Wait(0.2, c_timeGame);
    auto64A54591_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto64A54591_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((PlayerGroupCount(PlayerGroupActive()) >= 2) && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0005") && (GameAttributeGameValue("[bnet:local/0.0/273101]1") != "0006")) {
            MeleeSetOption(lv_currentPlayer, c_meleeOptionDefeat, true);
            MeleeSetOption(lv_currentPlayer, c_meleeOptionVictory, true);
        }

    }
    Wait(0.1, c_timeGame);
    auto8AC779FD_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto8AC779FD_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
}

void gf_FixMapGenVision () {
    // Variable Declarations
    unitgroup lv_visionFixingAnimalsOnMap;
    unit lv_oneAnimal;

    // Automatic Variable Declarations
    playergroup auto20F3A6AE_g;
    int auto20F3A6AE_var;
    unitgroup autoD91ECAD2_g;
    int autoD91ECAD2_u;
    unit autoD91ECAD2_var;
    playergroup autoD70B231F_g;
    int autoD70B231F_var;
    unitgroup autoBCB9F8CD_g;
    int autoBCB9F8CD_u;
    unit autoBCB9F8CD_var;
    unitgroup autoC5831C2B_g;
    int autoC5831C2B_u;
    unit autoC5831C2B_var;
    playergroup auto40B451D7_g;
    int auto40B451D7_var;
    unitgroup auto16A3EB26_g;
    int auto16A3EB26_u;
    unit auto16A3EB26_var;
    unitgroup auto29230025_g;
    int auto29230025_u;
    unit auto29230025_var;
    unitgroup auto442DE2F6_g;
    int auto442DE2F6_u;
    unit auto442DE2F6_var;

    // Variable Initialization
    lv_visionFixingAnimalsOnMap = UnitGroupEmpty();

    // Implementation
    auto20F3A6AE_g = PlayerGroupActive();
    auto20F3A6AE_var = -1;
    while (true) {
        auto20F3A6AE_var = PlayerGroupNextPlayer(auto20F3A6AE_g, auto20F3A6AE_var);
        if (auto20F3A6AE_var < 0) { break; }
        VisRevealArea(auto20F3A6AE_var, gv_aEvoOriginalGrassMapRegion14, 0.1, true);
    }
    lv_visionFixingAnimalsOnMap = UnitGroup("SpaceCowSmall", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_oneAnimal = UnitGroupRandomUnit(UnitGroup("SpaceCowSmall", c_playerAny, RegionRect(0.0, 0.0, 15.0, 15.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UnitRemove(lv_oneAnimal);
    Wait(0.1, c_timeGame);
    autoD91ECAD2_g = lv_visionFixingAnimalsOnMap;
    autoD91ECAD2_u = UnitGroupCount(autoD91ECAD2_g, c_unitCountAll);
    for (;; autoD91ECAD2_u -= 1) {
        autoD91ECAD2_var = UnitGroupUnitFromEnd(autoD91ECAD2_g, autoD91ECAD2_u);
        if (autoD91ECAD2_var == null) { break; }
        if ((UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(UnitGetPosition(autoD91ECAD2_var), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)) {
            UnitGroupRemove(lv_visionFixingAnimalsOnMap, autoD91ECAD2_var);
        }

    }
    autoD70B231F_g = PlayerGroupActive();
    autoD70B231F_var = -1;
    while (true) {
        autoD70B231F_var = PlayerGroupNextPlayer(autoD70B231F_g, autoD70B231F_var);
        if (autoD70B231F_var < 0) { break; }
        autoBCB9F8CD_g = lv_visionFixingAnimalsOnMap;
        autoBCB9F8CD_u = UnitGroupCount(autoBCB9F8CD_g, c_unitCountAll);
        for (;; autoBCB9F8CD_u -= 1) {
            autoBCB9F8CD_var = UnitGroupUnitFromEnd(autoBCB9F8CD_g, autoBCB9F8CD_u);
            if (autoBCB9F8CD_var == null) { break; }
            UnitSetOwner(autoBCB9F8CD_var, autoD70B231F_var, false);
        }
        Wait(0.1, c_timeGame);
        autoC5831C2B_g = lv_visionFixingAnimalsOnMap;
        autoC5831C2B_u = UnitGroupCount(autoC5831C2B_g, c_unitCountAll);
        for (;; autoC5831C2B_u -= 1) {
            autoC5831C2B_var = UnitGroupUnitFromEnd(autoC5831C2B_g, autoC5831C2B_u);
            if (autoC5831C2B_var == null) { break; }
            UnitSetOwner(autoC5831C2B_var, 0, false);
        }
        Wait(0.1, c_timeGame);
    }
    auto40B451D7_g = PlayerGroupActive();
    auto40B451D7_var = -1;
    while (true) {
        auto40B451D7_var = PlayerGroupNextPlayer(auto40B451D7_g, auto40B451D7_var);
        if (auto40B451D7_var < 0) { break; }
        auto16A3EB26_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "", "", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto16A3EB26_u = UnitGroupCount(auto16A3EB26_g, c_unitCountAll);
        for (;; auto16A3EB26_u -= 1) {
            auto16A3EB26_var = UnitGroupUnitFromEnd(auto16A3EB26_g, auto16A3EB26_u);
            if (auto16A3EB26_var == null) { break; }
            VisRevealArea(auto40B451D7_var, RegionCircle(UnitGetPosition(auto16A3EB26_var), 0.8), 0.1, false);
        }
        auto29230025_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("OctaPillerUp", "OctaPillerDown", "", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto29230025_u = UnitGroupCount(auto29230025_g, c_unitCountAll);
        for (;; auto29230025_u -= 1) {
            auto29230025_var = UnitGroupUnitFromEnd(auto29230025_g, auto29230025_u);
            if (auto29230025_var == null) { break; }
            VisRevealArea(auto40B451D7_var, RegionCircle(UnitGetPosition(auto29230025_var), 0.8), 0.1, false);
        }
        auto442DE2F6_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DirtUnbreakableandUntargetable", "UnbreakableDirtNoBlocker", "", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto442DE2F6_u = UnitGroupCount(auto442DE2F6_g, c_unitCountAll);
        for (;; auto442DE2F6_u -= 1) {
            auto442DE2F6_var = UnitGroupUnitFromEnd(auto442DE2F6_g, auto442DE2F6_u);
            if (auto442DE2F6_var == null) { break; }
            VisRevealArea(auto40B451D7_var, RegionCircle(UnitGetPosition(auto442DE2F6_var), 0.8), 0.1, false);
        }
        Wait(0.1, c_timeGame);
    }
}

void gf_DeleteInactivePlayers () {
    // Variable Declarations
    playergroup lv_inactivePlayers;
    unitgroup lv_inactivePlayerssUnits;
    unitgroup lv_unitsOfInactivePlayers;

    // Automatic Variable Declarations
    playergroup auto8E4178AC_g;
    int auto8E4178AC_var;
    unitgroup auto717987F0_g;
    int auto717987F0_u;
    unit auto717987F0_var;

    // Variable Initialization
    lv_inactivePlayers = PlayerGroupAll();
    lv_inactivePlayerssUnits = UnitGroupEmpty();
    lv_unitsOfInactivePlayers = UnitGroupEmpty();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(PlayerGroupActive(), lv_inactivePlayers);
    auto8E4178AC_g = lv_inactivePlayers;
    auto8E4178AC_var = -1;
    while (true) {
        auto8E4178AC_var = PlayerGroupNextPlayer(auto8E4178AC_g, auto8E4178AC_var);
        if (auto8E4178AC_var < 0) { break; }
        if (((auto8E4178AC_var == 1) || (auto8E4178AC_var == 2) || (auto8E4178AC_var == 3) || (auto8E4178AC_var == 4) || (auto8E4178AC_var == 5) || (auto8E4178AC_var == 6))) {
            lv_inactivePlayerssUnits = UnitGroup(null, auto8E4178AC_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto717987F0_g = lv_inactivePlayerssUnits;
            auto717987F0_u = UnitGroupCount(auto717987F0_g, c_unitCountAll);
            for (;; auto717987F0_u -= 1) {
                auto717987F0_var = UnitGroupUnitFromEnd(auto717987F0_g, auto717987F0_u);
                if (auto717987F0_var == null) { break; }
                UnitRemove(auto717987F0_var);
            }
        }

    }
}

void gf_Createstartingcritters () {
    // Variable Declarations
    region lv_localPond;
    fixed lv_x;
    fixed lv_y;
    int lv_neighborCount;
    point lv_critterSpawnPoint;
    unitgroup lv_closestDirtGroup;

    // Automatic Variable Declarations
    fixed autoA871491D_ae;
    const fixed autoA871491D_ai = 3.5;
    fixed auto1FC4D978_ae;
    const fixed auto1FC4D978_ai = 3.5;

    // Variable Initialization
    lv_localPond = RegionCircle(gv_absoluteCenterpoint, 10.0);
    lv_closestDirtGroup = UnitGroupEmpty();

    // Implementation
    Wait(0.0, c_timeGame);
    autoA871491D_ae = (gv_mapSize - 2.0);
    lv_x = 2.0;
    for ( ; ( (autoA871491D_ai >= 0 && lv_x <= autoA871491D_ae) || (autoA871491D_ai < 0 && lv_x >= autoA871491D_ae) ) ; lv_x += autoA871491D_ai ) {
        auto1FC4D978_ae = (gv_mapSize - 2.0);
        lv_y = 2.0;
        for ( ; ( (auto1FC4D978_ai >= 0 && lv_y <= auto1FC4D978_ae) || (auto1FC4D978_ai < 0 && lv_y >= auto1FC4D978_ae) ) ; lv_y += auto1FC4D978_ai ) {
            lv_neighborCount = 0;
            if ((gv_dirtMap[FloorI(lv_x)][FloorI(lv_y)] == 1)) {
                continue;
            }

            lv_critterSpawnPoint = Point((lv_x * 2.0), (lv_y * 2.0));
            lv_critterSpawnPoint = PointWithOffsetPolar(lv_critterSpawnPoint, RandomFixed(0.0, 0.5), libNtve_gf_RandomAngle());
            if ((ModI(FloorI(lv_x), 2) == 0)) {
                lv_critterSpawnPoint = PointWithOffset(lv_critterSpawnPoint, 0.0, 3.5);
            }

            if ((gv_usingInvertedMapLayout == true) && (RegionContainsPoint(RegionFromId(2), lv_critterSpawnPoint) == false)) {
                continue;
            }

            if ((gv_usingInvertedMapLayout == true)) {
                lv_closestDirtGroup = UnitGroup("Dirt", c_playerAny, RegionCircle(lv_critterSpawnPoint, 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            }
            else {
                lv_closestDirtGroup = UnitGroup("Dirt", c_playerAny, RegionCircle(lv_critterSpawnPoint, 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            }
            if ((UnitGroupCount(lv_closestDirtGroup, c_unitCountAlive) >= 1)) {
                continue;
            }

            if (((gv_MapGen == 4) && (RegionContainsPoint(gv_pond, lv_critterSpawnPoint) == true))) {
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", c_unitCreateIgnorePlacement, 0, lv_critterSpawnPoint);
                ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap(gf_FoodModelForMapgen(), 1));
                UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeashShort", UnitLastCreated(), 1);
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                if ((UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(UnitGetPosition(UnitLastCreated()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
                    if ((RegionContainsPoint(gv_nEMapCorner, UnitGetPosition(UnitLastCreated())) == true)) {
                        RegionAddRegion(gv_nEMapCornerRespawn, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 3.5));
                    }
                    else if ((RegionContainsPoint(gv_nWMapCorner, UnitGetPosition(UnitLastCreated())) == true)) {
                        RegionAddRegion(gv_nWMapCornerRespawn, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 3.5));
                    }
                    else if ((RegionContainsPoint(gv_sEMapCorner, UnitGetPosition(UnitLastCreated())) == true)) {
                        RegionAddRegion(gv_sEMapCornerRespawn, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 3.5));
                    }
                    else if ((RegionContainsPoint(gv_sWMapCorner, UnitGetPosition(UnitLastCreated())) == true)) {
                        RegionAddRegion(gv_sWMapCornerRespawn, gf_Convertpointtosquareregion(UnitGetPosition(UnitLastCreated()), 3.5));
                    }
                }

            }
        }
    }
    RegionAddRect(gv_nEMapCornerRespawn, false, 0.0, 0.0, 2.0, 152.0);
    RegionAddRect(gv_nEMapCornerRespawn, false, 0.0, 0.0, 152.0, 2.0);
    RegionAddRect(gv_nEMapCornerRespawn, false, 150.0, 0.0, 152.0, 152.0);
    RegionAddRect(gv_nEMapCornerRespawn, false, 0.0, 150.0, 152.0, 152.0);
    RegionAddRect(gv_nWMapCornerRespawn, false, 0.0, 0.0, 2.0, 152.0);
    RegionAddRect(gv_nWMapCornerRespawn, false, 0.0, 0.0, 152.0, 2.0);
    RegionAddRect(gv_nWMapCornerRespawn, false, 150.0, 0.0, 152.0, 152.0);
    RegionAddRect(gv_nWMapCornerRespawn, false, 0.0, 150.0, 152.0, 152.0);
    RegionAddRect(gv_sEMapCornerRespawn, false, 0.0, 0.0, 2.0, 152.0);
    RegionAddRect(gv_sEMapCornerRespawn, false, 0.0, 0.0, 152.0, 2.0);
    RegionAddRect(gv_sEMapCornerRespawn, false, 150.0, 0.0, 152.0, 152.0);
    RegionAddRect(gv_sEMapCornerRespawn, false, 0.0, 150.0, 152.0, 152.0);
    RegionAddRect(gv_sWMapCornerRespawn, false, 0.0, 0.0, 2.0, 152.0);
    RegionAddRect(gv_sWMapCornerRespawn, false, 0.0, 0.0, 152.0, 2.0);
    RegionAddRect(gv_sWMapCornerRespawn, false, 150.0, 0.0, 152.0, 152.0);
    RegionAddRect(gv_sWMapCornerRespawn, false, 0.0, 150.0, 152.0, 152.0);
}

void gf_CreatestartingPlants () {
    // Variable Declarations
    int lv_amountOfAnimalsOnTheMap;
    unit lv_currentAnimal;
    point lv_pointForPlanttospawnin;
    int lv_spawningRateforplants;
    unitgroup lv_animals;

    // Automatic Variable Declarations
    int auto862C84BC_n;
    int auto862C84BC_i;

    // Variable Initialization
    lv_pointForPlanttospawnin = Point(76.0, 76.0);
    lv_animals = UnitGroupEmpty();

    // Implementation
    lv_animals = UnitGroup("SpaceCowSmall", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_amountOfAnimalsOnTheMap = UnitGroupCount(lv_animals, c_unitCountAlive);
    auto862C84BC_n = (lv_amountOfAnimalsOnTheMap / 2);
    for (auto862C84BC_i = 1; auto862C84BC_i <= auto862C84BC_n; auto862C84BC_i += 1) {
        lv_currentAnimal = UnitGroupRandomUnit(lv_animals, c_unitCountAlive);
        PointSet(lv_pointForPlanttospawnin, UnitGetPosition(lv_currentAnimal));
        UnitCreate(1, "PlantFood", 0, 0, PointWithOffsetPolar(lv_pointForPlanttospawnin, 2.0, libNtve_gf_RandomAngle()), libNtve_gf_RandomAngle());
        UnitRemove(lv_currentAnimal);
    }
}

void gf_MovecamaraSetselectionandspawnunit (unit lp_queenUnit, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    PlayerModifyPropertyFixed(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, gv_startingFoodAmountChosen);
    gf_AddUnitToCustomCtrlGroup(0, lp_queenUnit, gv_ctrlGroup_Queen[lp_player]);
    UnitSelect(lp_queenUnit, lp_player, true);
    UnitSetPropertyFixed(lp_queenUnit, c_unitPropBaseMovementSpeed, 0.0);
    libNtve_gf_MakeUnitUncommandable(lp_queenUnit, true);
    gv_queenOfPlayer[lp_player] = lp_queenUnit;
    CameraPan(lp_player, PointWithOffset(UnitGetPosition(lp_queenUnit), 0.0, -2.0), 1.0, -1, 10.0, false);
}

void gf_MakeChangesbasedongamemode () {
    // Automatic Variable Declarations
    playergroup autoA446C402_g;
    int autoA446C402_var;

    // Implementation
    if ((gv_gameModeChosen == "CTF")) {
        autoA446C402_g = PlayerGroupActive();
        autoA446C402_var = -1;
        while (true) {
            autoA446C402_var = PlayerGroupNextPlayer(autoA446C402_g, autoA446C402_var);
            if (autoA446C402_var < 0) { break; }
            TechTreeUpgradeAddLevel(autoA446C402_var, "Playingcapturetheflag", 1);
        }
    }
}

void gf_CTFCreateGiveAllyFlagDialog () {
    // Variable Declarations
    int lv_repeater;
    int lv_yOffsetForButtons;

    // Automatic Variable Declarations
    const int auto39C81799_n = 6;
    int auto39C81799_i;

    // Variable Initialization
    lv_repeater = 1;
    lv_yOffsetForButtons = -150;

    // Implementation
    gf_DialogCreateAEvo(420, 240, c_anchorCenter, 700, 100, false);
    gv_cTFGiveAllyFlagDialog = DialogLastCreated();
    gf_ButtonCreateAEvo(gv_cTFGiveAllyFlagDialog, 40, 80, c_anchorCenter, 0, -190, null, StringExternal("Param/Value/00E0A279"), false, null);
    gv_cTFGiveAllyButtonCloseRedX = DialogControlLastCreated();
    for (auto39C81799_i = 1; auto39C81799_i <= auto39C81799_n; auto39C81799_i += 1) {
        if (((PlayerType(lv_repeater) != c_playerTypeComputer) && (PlayerGroupHasPlayer(PlayerGroupActive(), lv_repeater) == true))) {
            gf_ButtonCreateAEvo(gv_cTFGiveAllyFlagDialog, 60, 200, c_anchorCenter, 0, lv_yOffsetForButtons, null, TextWithColor(PlayerName(lv_repeater), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_repeater, false))), false, null);
            gv_cTFGiveAllyButtonToAllyPlayer[lv_repeater] = DialogControlLastCreated();
            lv_repeater = (lv_repeater + 1);
            lv_yOffsetForButtons = (lv_yOffsetForButtons + 60);
        }

    }
}

void gf_ScatterDirt () {
    // Variable Declarations
    unitgroup lv_originalDirtUnitsBeforeScatter;
    unitgroup lv_newScatteredDirtUnitsSmall;
    int lv_amountLeftToScatterSmall;
    int lv_amountLeftToScatterLarge;
    unitgroup lv_newScatteredDirtUnitsMid;
    unitgroup lv_newScatteredDirtUnitsLarge;
    point lv_tryHerePoint;

    // Automatic Variable Declarations
    int auto041FC5F2_n;
    int auto041FC5F2_i;

    // Variable Initialization
    lv_originalDirtUnitsBeforeScatter = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_newScatteredDirtUnitsSmall = UnitGroupEmpty();
    lv_amountLeftToScatterSmall = gv_amountOfDirtScatterSmall;
    lv_amountLeftToScatterLarge = gv_amountOfDirtScatterLarge;
    lv_newScatteredDirtUnitsMid = UnitGroupEmpty();
    lv_newScatteredDirtUnitsLarge = UnitGroupEmpty();

    // Implementation
    auto041FC5F2_n = (gv_amountOfDirtScatterSmall + gv_amountOfDirtScatterMid + gv_amountOfDirtScatterLarge);
    for (auto041FC5F2_i = 1; auto041FC5F2_i <= auto041FC5F2_n; auto041FC5F2_i += 1) {
        while (true) {
            lv_tryHerePoint = gf_CorrectDirtPoint(PointWithOffsetPolar(UnitGetPosition(UnitGroupRandomUnit(lv_originalDirtUnitsBeforeScatter, c_unitCountAlive)), RandomInt(3, 6), libNtve_gf_RandomAngle()));
            if (gf_IsThisAValidPointForADirtScatter(lv_tryHerePoint)) {
                UnitCreate(1, "Dirt", 0, 0, lv_tryHerePoint, libNtve_gf_RandomAngle());
                if ((lv_amountLeftToScatterSmall != 0)) {
                    lv_amountLeftToScatterSmall = (lv_amountLeftToScatterSmall - 1);
                    UnitBehaviorAdd(UnitLastCreated(), "SwapDirtModelIntoSmallerDirt", UnitLastCreated(), 1);
                    UnitGroupAdd(lv_newScatteredDirtUnitsSmall, UnitLastCreated());
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, ((UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) / 4.0) * 3.0));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(RandomFixed(0.7, 0.9), RandomFixed(0.8, 1.0), RandomFixed(0.8, 1.0), 0.0));
                }
                else if ((lv_amountLeftToScatterLarge != 0)) {
                    lv_amountLeftToScatterLarge = (lv_amountLeftToScatterLarge - 1);
                    UnitBehaviorAdd(UnitLastCreated(), "SwapDirtModelIntoBiggerDirt", UnitLastCreated(), 1);
                    UnitGroupAdd(lv_newScatteredDirtUnitsLarge, UnitLastCreated());
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, ((UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) / 4.0) * 5.0));
                    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, ((UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLife, c_unitPropCurrent) / 4.0) * 5.0));
                    UnitSetInfoText2(UnitLastCreated(), StringExternal("Param/Value/E77E4C20"));
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(RandomFixed(1.1, 1.3), RandomFixed(1.0, 1.2), RandomFixed(1.0, 1.2), 0.0));
                }
                else if (true) {
                    UnitBehaviorAdd(UnitLastCreated(), "SwapDirtModelIntoMediumDirt", UnitLastCreated(), 1);
                    UnitGroupAdd(lv_newScatteredDirtUnitsMid, UnitLastCreated());
                    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(RandomFixed(0.9, 1.1), RandomFixed(0.9, 1.1), RandomFixed(0.9, 1.0), 0.0));
                }
                break;
            }

        }
    }
}

point gf_CorrectDirtPoint (point lp_pointToBeCorrected) {
    // Variable Declarations
    fixed lv_xOfPoint;
    fixed lv_xOfPointMinimized;
    fixed lv_yOfPoint;
    fixed lv_yOfPointMinimized;
    point lv_correctedPoint;
    fixed lv_correctedX;
    fixed lv_correctedY;
    bool lv_xNeedsToBeRoundedDown;
    bool lv_yNeedsToBeRoundedDown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_xOfPoint = PointGetY(lp_pointToBeCorrected);
    lv_xOfPointMinimized = lv_xOfPoint;
    lv_yOfPoint = PointGetX(lp_pointToBeCorrected);
    lv_yOfPointMinimized = lv_yOfPoint;

    // Implementation
    while (true) {
        if (true) {
            if ((lv_xOfPointMinimized < 1.0)) {
                lv_xNeedsToBeRoundedDown = true;
            }

            break;
        }
        else {
            lv_xOfPointMinimized = (lv_xOfPointMinimized - 2.0);
        }
        if ((lv_yOfPointMinimized < 2.0)) {
            if ((lv_yOfPointMinimized < 1.0)) {
                lv_yNeedsToBeRoundedDown = true;
            }

            break;
        }
        else {
            lv_yOfPointMinimized = (lv_yOfPointMinimized - 2.0);
        }
    }
    if ((lv_xNeedsToBeRoundedDown == true)) {
        lv_correctedX = (IntToFixed(FixedToInt((FixedToInt(PointGetX(lp_pointToBeCorrected)) / 2.0))) * 2.0);
    }
    else {
        lv_correctedX = (Round((FixedToInt(PointGetX(lp_pointToBeCorrected)) / 2.0)) * 2.0);
    }
    if ((lv_yNeedsToBeRoundedDown == true)) {
        lv_correctedY = (IntToFixed(FixedToInt((FixedToInt(PointGetY(lp_pointToBeCorrected)) / 2.0))) * 2.0);
    }
    else {
        lv_correctedY = (Round((FixedToInt(PointGetY(lp_pointToBeCorrected)) / 2.0)) * 2.0);
    }
    lv_correctedPoint = Point(lv_correctedX, lv_correctedY);
    return lv_correctedPoint;
}

unitgroup gf_AllQueensOfAllTypesOfPlayer (int lp_ownedbyPlayer, bool lp_alsoIncludeNewQueens, bool lp_alsoIncludeNullRemovedQueens) {
    // Variable Declarations
    unitgroup lv_blackQueens;
    unitgroup lv_fireQueens;
    unitgroup lv_woodQueens;
    unitgroup lv_leafCutterQueens;
    unitgroup lv_pharaohQueens;
    unitgroup lv_ghostQueens;
    unitgroup lv_removedQueens;
    unitgroup lv_newQueens;
    unitgroup lv_allQueens;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_blackQueens = UnitGroup("QueenBlackAnt", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_fireQueens = UnitGroup("QueenFireAnt", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_woodQueens = UnitGroup("QueenWoodAnt", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_leafCutterQueens = UnitGroup("QueenLeafCutterAnt", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_pharaohQueens = UnitGroup("QueenPharaohAnt", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_ghostQueens = UnitGroup("QueenGhostAnt", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_removedQueens = UnitGroup("Queen", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_newQueens = UnitGroup("NewQueen", lp_ownedbyPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_allQueens = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_allQueens, lv_blackQueens);
    UnitGroupAddUnitGroup(lv_allQueens, lv_fireQueens);
    UnitGroupAddUnitGroup(lv_allQueens, lv_woodQueens);
    UnitGroupAddUnitGroup(lv_allQueens, lv_leafCutterQueens);
    UnitGroupAddUnitGroup(lv_allQueens, lv_pharaohQueens);
    UnitGroupAddUnitGroup(lv_allQueens, lv_ghostQueens);
    if ((lp_alsoIncludeNullRemovedQueens == true)) {
        UnitGroupAddUnitGroup(lv_allQueens, lv_removedQueens);
    }

    if ((lp_alsoIncludeNewQueens == true)) {
        UnitGroupAddUnitGroup(lv_allQueens, lv_newQueens);
    }

    return lv_allQueens;
}

void gf_DisplayErrorForPlayer (text lp_errortext, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaError, lp_errortext);
    SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
}

void gf_MakesureplayersareenemiesonOpenalliance () {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto5F3DB828_g;
    int auto5F3DB828_var;
    const int autoAE11EF59_n = 6;
    int autoAE11EF59_i;

    // Variable Initialization

    // Implementation
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002"))) {
        auto5F3DB828_g = PlayerGroupActive();
        auto5F3DB828_var = -1;
        while (true) {
            auto5F3DB828_var = PlayerGroupNextPlayer(auto5F3DB828_g, auto5F3DB828_var);
            if (auto5F3DB828_var < 0) { break; }
            for (autoAE11EF59_i = 1; autoAE11EF59_i <= autoAE11EF59_n; autoAE11EF59_i += 1) {
                lv_player = (lv_player + 1);
                libNtve_gf_SetAllianceOneWay(auto5F3DB828_var, lv_player, libNtve_ge_AllianceSetting_Enemy);
            }
            lv_player = 0;
        }
    }

}

void gf_DebuggingTextMessageFromString (int lp_messageArea, color lp_color, string lp_text) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), lp_messageArea, TextWithColor(StringToText(lp_text), lp_color));
}

string gf_ReturnNumberAs64x64Image (int lp_pick09Number) {
    // Variable Declarations
    string lv_imageToReturn;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_imageToReturn = "0.dds";

    // Implementation
    if ((lp_pick09Number == 1)) {
        lv_imageToReturn = "1.dds";
    }
    else if ((lp_pick09Number == 2)) {
        lv_imageToReturn = "2.dds";
    }
    else if ((lp_pick09Number == 3)) {
        lv_imageToReturn = "3.dds";
    }
    else if ((lp_pick09Number == 4)) {
        lv_imageToReturn = "4.dds";
    }
    else if ((lp_pick09Number == 5)) {
        lv_imageToReturn = "5.dds";
    }
    else if ((lp_pick09Number == 6)) {
        lv_imageToReturn = "6.dds";
    }
    else if ((lp_pick09Number == 7)) {
        lv_imageToReturn = "7.dds";
    }
    else if ((lp_pick09Number == 8)) {
        lv_imageToReturn = "8.dds";
    }
    else if ((lp_pick09Number == 9)) {
        lv_imageToReturn = "9.dds";
    }
    return lv_imageToReturn;
}

void gf_ButtonCreateAEvo (int lp_dialogToPlaceButtonon, int lp_sizeHeight, int lp_sizeWeight, int lp_ancorLocation, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, bool lp_attachImageToCenterOfButton, string lp_imageToAttachToCenterOfButton) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_attachImageToCenterOfButton == true)) {
        libNtve_gf_CreateDialogItemImage(lp_dialogToPlaceButtonon, (lp_sizeWeight - 10), (lp_sizeHeight - 10), c_anchorCenter, lp_offsetX, lp_offsetY, StringToText(""), lp_imageToAttachToCenterOfButton, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }

    libNtve_gf_CreateDialogItemButton(lp_dialogToPlaceButtonon, lp_sizeWeight, lp_sizeHeight, lp_ancorLocation, lp_offsetX, lp_offsetY, lp_tooltip, lp_buttonText, "AEvo Button Texture Hover.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "AEvo Button Texture.dds", PlayerGroupAll());
}

void gf_EmptyButtonCreate (int lp_dialogToPlaceButtonon, int lp_sizeHeight, int lp_sizeWeight, int lp_ancorLocation, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, bool lp_attachImageToCenterOfButton, string lp_imageToAttachToCenterOfButton) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_attachImageToCenterOfButton == true)) {
        libNtve_gf_CreateDialogItemImage(lp_dialogToPlaceButtonon, (lp_sizeWeight - 10), (lp_sizeHeight - 10), c_anchorCenter, lp_offsetX, lp_offsetY, StringToText(""), lp_imageToAttachToCenterOfButton, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    }

    libNtve_gf_CreateDialogItemButton(lp_dialogToPlaceButtonon, lp_sizeWeight, lp_sizeHeight, lp_ancorLocation, lp_offsetX, lp_offsetY, lp_tooltip, lp_buttonText, "Nothing Button Texture.dds");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Nothing Button Texture.dds", PlayerGroupAll());
}

void gf_DialogCreateAEvo (int lp_sizeHeight, int lp_sizeWeight, int lp_ancorLocation, int lp_offsetX, int lp_offsetY, bool lp_showDialogToAllPlayers) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(lp_sizeWeight, lp_sizeHeight, lp_ancorLocation, lp_offsetX, lp_offsetY, true);
    DialogSetImage(DialogLastCreated(), "AEvo Dialog Texture.dds");
    if ((lp_showDialogToAllPlayers == true)) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    }

}

void gf_CountAlliedQueensOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_amountOfBothwaysAllies;
    unitgroup lv_allAlliedQueensOfTriggeringPlayer;
    int lv_amountOfFriendlyQueensNewEggandremoved;
    int lv_amountOfFriendlyQueensBlackFireandwood;
    int lv_amountOfFriendlyQueensLeafCutterPharaohGhost;

    // Automatic Variable Declarations
    unitgroup auto3493156B_g;
    int auto3493156B_u;
    unit auto3493156B_var;

    // Variable Initialization
    lv_allAlliedQueensOfTriggeringPlayer = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_allAlliedQueensOfTriggeringPlayer, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewQueen", "RavagerCocoon", "Queen", lp_player, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_allAlliedQueensOfTriggeringPlayer, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", lp_player, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_allAlliedQueensOfTriggeringPlayer, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", lp_player, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto3493156B_g = lv_allAlliedQueensOfTriggeringPlayer;
    auto3493156B_u = UnitGroupCount(auto3493156B_g, c_unitCountAll);
    for (;; auto3493156B_u -= 1) {
        auto3493156B_var = UnitGroupUnitFromEnd(auto3493156B_g, auto3493156B_u);
        if (auto3493156B_var == null) { break; }
        if (((PlayerGetAlliance(UnitGetOwner(auto3493156B_var), c_allianceIdChat, lp_player) == true))) {
            lv_amountOfBothwaysAllies = (lv_amountOfBothwaysAllies + 1);
        }

    }
    gv_alliedQueenOfPlayer[lp_player] = lv_amountOfBothwaysAllies;
}

void gf_CountEnemyQueensOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_amountOfEnemyQueensNewEggandremoved;
    int lv_amountOfEnemyQueensBlackFireandwood;
    int lv_amountOfEnemyQueensLeafCutterPharaohGhost;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_amountOfEnemyQueensNewEggandremoved = UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewQueen", "RavagerCocoon", "Queen", lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_amountOfEnemyQueensBlackFireandwood = UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_amountOfEnemyQueensLeafCutterPharaohGhost = UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    gv_enemyQueenOfPlayer[lp_player] = (lv_amountOfEnemyQueensNewEggandremoved + lv_amountOfEnemyQueensLeafCutterPharaohGhost + lv_amountOfEnemyQueensBlackFireandwood);
}

string gf_ReturnDebuggingModelFromNumber110 (int lp_number) {
    // Variable Declarations
    string lv_debuggingModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_debuggingModel = "Mutalisk";

    // Implementation
    if ((lp_number == 1)) {
        lv_debuggingModel = "DebugNumber";
    }
    else if ((lp_number == 2)) {
        lv_debuggingModel = "DebugNumber2";
    }
    else if ((lp_number == 3)) {
        lv_debuggingModel = "DebugNumber3";
    }
    else if ((lp_number == 4)) {
        lv_debuggingModel = "DebugNumber4";
    }
    else if ((lp_number == 5)) {
        lv_debuggingModel = "DebugNumber5";
    }
    else if ((lp_number == 6)) {
        lv_debuggingModel = "DebugNumber6";
    }
    else if ((lp_number == 7)) {
        lv_debuggingModel = "DebugNumber7";
    }
    else if ((lp_number == 8)) {
        lv_debuggingModel = "DebugNumber8";
    }
    else if ((lp_number == 9)) {
        lv_debuggingModel = "DebugNumber9";
    }
    else if ((lp_number == 10)) {
        lv_debuggingModel = "DebugNumber10";
    }
    else if (true) {
        gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 0.00, 0.00), "--- \"Return Debugging Model From Number\" ---");
        gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 0.00, 0.00), (("---- Number \"" + IntToString(lp_number)) + "\" Is not within 1-10 ----"));
        gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 0.00, 0.00), "--- \"Return Debugging Model From Number\" ---");
    }
    return lv_debuggingModel;
}

void gf_ShowHideActorForPlayerGroup (playergroup lp_players, actor lp_actor, bool lp_show) {
    // Variable Declarations
    actor lv_agent;
    playergroup lv_otherPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_otherPlayers = PlayerGroupActive();

    // Implementation
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lv_otherPlayers);
    UIFlyerHelperOverride(lp_players, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UIFlyerHelperOverride(lv_otherPlayers, libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    ActorSend(lp_actor, "Create TriggerPerPlayerActorAgent");
    lv_agent = ActorFromActor(lp_actor, "::LastCreatedActual");
    ActorSend(lp_actor, "AliasAdd _TriggerTarget");
    if ((lp_show == true)) {
        ActorSend(lv_agent, "Signal Show");
    }
    else {
        ActorSend(lv_agent, "Signal Hide");
    }
    ActorSend(lp_actor, "AliasRemove _TriggerTarget");
    ActorSend(lv_agent, "Destroy");
    UIFlyerHelperClearOverride(PlayerGroupAll());
}

region gf_Convertpointtosquareregion (point lp_point, fixed lp_size) {
    // Automatic Variable Declarations
    // Implementation
    return RegionRect(PointGetX(PointWithOffset(lp_point, (0.0 - lp_size), 0.0)), PointGetY(PointWithOffset(lp_point, 0.0, (0.0 - lp_size))), PointGetX(PointWithOffset(lp_point, (0.0 + lp_size), 0.0)), PointGetY(PointWithOffset(lp_point, 0.0, (0.0 + lp_size))));
}

void gf_DebuggingRevealRegionEdges (bool lp_bigRegion, region lp_region, int lp_optionalControlOfAmountChosenAmountwillbex10thenumberyouInput, bool lp_skipwaitscancauselagoreveneditorcrashs) {
    // Variable Declarations
    int lv_repeatAmount;
    point lv_randomPoint;
    string lv_groundModelToRevealRegionWith;
    string lv_aboveModelToRevealRegionWith;
    string lv_whiteCircleModelUnit;

    // Automatic Variable Declarations
    const int autoA2BB060B_n = 10;
    int autoA2BB060B_i;
    int autoA23A8F75_n;
    int autoA23A8F75_i;
    const int auto30D06B92_n = 10;
    int auto30D06B92_i;
    int auto2BE17D3E_n;
    int auto2BE17D3E_i;

    // Variable Initialization

    // Implementation
    if ((lp_bigRegion == true)) {
        lv_groundModelToRevealRegionWith = "RegionTest";
        lv_aboveModelToRevealRegionWith = "RegionDetectingModelBig";
    }
    else {
        lv_groundModelToRevealRegionWith = "RegionTestSmall";
        lv_aboveModelToRevealRegionWith = "RegionDetectingModelSmall";
    }
    if ((lp_optionalControlOfAmountChosenAmountwillbex10thenumberyouInput != 0)) {
        lv_repeatAmount = lp_optionalControlOfAmountChosenAmountwillbex10thenumberyouInput;
    }
    else {
        lv_repeatAmount = 100;
    }
    if ((lp_bigRegion == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3D423941"));
        for (auto30D06B92_i = 1; auto30D06B92_i <= auto30D06B92_n; auto30D06B92_i += 1) {
            if ((lv_repeatAmount <= 100)) {
            }
            else {
                if ((lp_skipwaitscancauselagoreveneditorcrashs == true)) {
                    Wait(0.1, c_timeGame);
                }
                else {
                    Wait(2.0, c_timeGame);
                }
            }
            auto2BE17D3E_n = lv_repeatAmount;
            for (auto2BE17D3E_i = 1; auto2BE17D3E_i <= auto2BE17D3E_n; auto2BE17D3E_i += 1) {
                lv_randomPoint = RegionRandomPoint(lp_region);
                libNtve_gf_CreateActorAtPoint("RegionDetectorRedCircle", lv_randomPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.2, 0));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "WhiteCircleBig", 0, 1, lv_randomPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.2, 0));
            }
        }
    }
    else {
        for (autoA2BB060B_i = 1; autoA2BB060B_i <= autoA2BB060B_n; autoA2BB060B_i += 1) {
            if ((lv_repeatAmount <= 100)) {
            }
            else {
                if ((lp_skipwaitscancauselagoreveneditorcrashs == true)) {
                    Wait(0.1, c_timeGame);
                }
                else {
                    Wait(1.0, c_timeGame);
                }
            }
            autoA23A8F75_n = lv_repeatAmount;
            for (autoA23A8F75_i = 1; autoA23A8F75_i <= autoA23A8F75_n; autoA23A8F75_i += 1) {
                lv_randomPoint = RegionRandomPoint(lp_region);
                libNtve_gf_CreateActorAtPoint("RegionDetectorRedCircleSmall", lv_randomPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.2, 0));
                libNtve_gf_CreateActorAtPoint("RegionDetectorWhitePillerSmall", lv_randomPoint);
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.2, 0));
            }
        }
    }
}

void gf_RemoveDirtinRegion (region lp_region) {
    // Variable Declarations
    unitgroup lv_dirtUnitGroup;
    unit lv_currentDirt;
    int lv_dirtX;
    int lv_dirtY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dirtUnitGroup = UnitGroupEmpty();

    // Implementation
    lv_dirtX = FloorI((PointGetX(RegionGetCenter(lp_region)) * 0.5));
    lv_dirtY = FloorI((PointGetY(RegionGetCenter(lp_region)) * 0.5));
    gf_Activatedirt(lv_dirtX, lv_dirtY);
    while (true) {
        UnitGroupAddUnitGroup(lv_dirtUnitGroup, UnitGroup("Dirt", c_playerAny, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitGroupCount(lv_dirtUnitGroup, c_unitCountAlive) == 0)) {
            if ((PlayerGroupCount(PlayerGroupActive()) == 1)) {
            }

            break;
        }

        while ((UnitGroupCount(lv_dirtUnitGroup, c_unitCountAlive) >= 1)) {
            lv_currentDirt = UnitGroupUnit(lv_dirtUnitGroup, 1);
            lv_dirtX = FloorI((PointGetX(UnitGetPosition(lv_currentDirt)) * 0.5));
            lv_dirtY = FloorI((PointGetY(UnitGetPosition(lv_currentDirt)) * 0.5));
            gf_Activatedirt(lv_dirtX, lv_dirtY);
            UnitGroupRemove(lv_dirtUnitGroup, lv_currentDirt);
            UnitRemove(lv_currentDirt);
        }
        Wait(0.001, c_timeGame);
    }
}

region gf_ScanRemovalStringsAndReturnThemAsARegion () {
    // Variable Declarations
    bool lv_skippedTheFirstLineScan;
    int lv_timesitreset;
    int lv_timesItReachedTheTop;
    region lv_scannedRegion;
    int lv_forEachX;
    int lv_forEachY;
    int lv_amountScanned;
    int lv_word;

    // Automatic Variable Declarations
    const int auto382E5050_ae = 152;
    const int auto382E5050_ai = 1;
    const int auto88D37C7E_ae = 152;
    const int auto88D37C7E_ai = 1;

    // Variable Initialization
    lv_scannedRegion = RegionEmpty();

    // Implementation
    lv_forEachX = 0;
    for ( ; ( (auto382E5050_ai >= 0 && lv_forEachX <= auto382E5050_ae) || (auto382E5050_ai < 0 && lv_forEachX >= auto382E5050_ae) ) ; lv_forEachX += auto382E5050_ai ) {
        lv_forEachY = 0;
        for ( ; ( (auto88D37C7E_ai >= 0 && lv_forEachY <= auto88D37C7E_ae) || (auto88D37C7E_ai < 0 && lv_forEachY >= auto88D37C7E_ae) ) ; lv_forEachY += auto88D37C7E_ai ) {
            if ((lv_amountScanned != 200)) {
                lv_amountScanned = (lv_amountScanned + 1);
            }
            else {
                Wait(0.0001, c_timeGame);
                lv_amountScanned = 0;
            }
            if ((RegionContainsPoint(RegionFromId(12), Point(lv_forEachX, lv_forEachY)) == true)) {
                if ((lv_skippedTheFirstLineScan == true)) {
                    lv_timesItReachedTheTop = (lv_timesItReachedTheTop + 1);
                    if ((lv_timesItReachedTheTop == 3)) {
                        lv_word = 0;
                        lv_timesItReachedTheTop = 0;
                        lv_timesitreset = (lv_timesitreset + 1);
                    }
                    else {
                        lv_word = (lv_word - 1);
                    }
                }
                else {
                    lv_skippedTheFirstLineScan = true;
                }
            }

            lv_word = (lv_word + 1);
            if (((StringWord(gv_stringsRegionStrings[lv_timesitreset], lv_word) == "0"))) {
                RegionAddRect(lv_scannedRegion, true, PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), -0.5, -0.5)), PointGetX(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)), PointGetY(PointWithOffset(Point(lv_forEachX, lv_forEachY), 0.5, 0.5)));
            }

        }
    }
    return lv_scannedRegion;
}

void gf_PlayerPicksMapGen2 () {
    // Variable Declarations
    text lv_randomChosenText;
    text lv_pickedChosenText;
    text lv_votedChosenText;
    text lv_chooseingMode;
    text lv_chosenMapGen;
    text lv_playerName;
    text lv_userType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomChosenText = StringExternal("Param/Value/4959F11C");
    lv_pickedChosenText = StringExternal("Param/Value/24B2B4DB");
    lv_votedChosenText = StringExternal("Param/Value/4C4147A7");
    lv_chooseingMode = StringExternal("Param/Value/E62455F5");
    lv_chosenMapGen = StringExternal("Param/Value/48347F91");
    lv_playerName = StringExternal("Param/Value/4B620CCA");
    lv_userType = StringExternal("Param/Value/C4F681D0");

    // Implementation
    if ((gv_MapGen == 1)) {
        lv_playerName = StringExternal("Param/Value/845EA99A");
        lv_userType = StringExternal("Param/Value/65FB2130");
    }
    else if ((gv_MapGen == 2)) {
        lv_playerName = StringExternal("Param/Value/236E6191");
        lv_userType = StringExternal("Param/Value/D6347904");
    }
    else if ((gv_MapGen == 3)) {
        lv_playerName = StringExternal("Param/Value/8A239223");
        lv_userType = StringExternal("Param/Value/D2136387");
    }
    else if ((gv_MapGen == 4)) {
        lv_playerName = StringExternal("Param/Value/1076D2BE");
        lv_userType = StringExternal("Param/Value/D5BCC70D");
    }
    else if ((gv_MapGen == 5)) {
        lv_playerName = StringExternal("Param/Value/AEA10BEB");
        lv_userType = StringExternal("Param/Value/D09C8394");
    }
    else if ((gv_MapGen == 6)) {
        lv_playerName = StringExternal("Param/Value/9E223381");
        lv_userType = StringExternal("Param/Value/5A1A2DCF");
    }
    else if ((gv_MapGen == 7)) {
        lv_playerName = StringExternal("Param/Value/DFA9166D");
        lv_userType = StringExternal("Param/Value/885384F8");
    }
    else if ((gv_MapGen == 8)) {
        lv_playerName = StringExternal("Param/Value/5B6F88E2");
        lv_userType = StringExternal("Param/Value/321016CD");
    }
    else if ((gv_MapGen == 9)) {
        lv_playerName = StringExternal("Param/Value/7A2AA66A");
        lv_userType = StringExternal("Param/Value/75776B82");
    }
    else if ((gv_MapGen == 10)) {
        lv_playerName = StringExternal("Param/Value/86B3B8A6");
        lv_userType = StringExternal("Param/Value/ED604DB5");
    }
    else if ((gv_MapGen == 11)) {
        lv_playerName = StringExternal("Param/Value/F68D868C");
        lv_userType = StringExternal("Param/Value/DFB755E5");
    }
    else if ((gv_MapGen == 12)) {
        lv_playerName = StringExternal("Param/Value/237390C9");
        lv_userType = StringExternal("Param/Value/E268454A");
    }
    else if ((gv_MapGen == 13)) {
        lv_playerName = StringExternal("Param/Value/597795D0");
        lv_userType = StringExternal("Param/Value/8960EF91");
    }
    else if ((gv_MapGen == 14)) {
        lv_playerName = StringExternal("Param/Value/B500715C");
        lv_userType = StringExternal("Param/Value/7CFCE013");
    }
    else if ((gv_MapGen == 15)) {
        lv_playerName = StringExternal("Param/Value/C13EDBB9");
        lv_userType = StringExternal("Param/Value/DCE7B3C2");
    }
    else if ((gv_MapGen == 16)) {
        lv_playerName = StringExternal("Param/Value/3E5E1C6C");
        lv_userType = StringExternal("Param/Value/6C2348C4");
    }
    else if ((gv_MapGen == 17)) {
        lv_playerName = StringExternal("Param/Value/FFDA9C54");
        lv_userType = StringExternal("Param/Value/4D20BE1A");
    }
    else if ((gv_MapGen == 18)) {
        lv_playerName = StringExternal("Param/Value/5DC9FDCB");
        lv_userType = StringExternal("Param/Value/94B93D3D");
    }
    else if ((gv_MapGen == 19)) {
        lv_playerName = StringExternal("Param/Value/EFC71F65");
        lv_userType = StringExternal("Param/Value/105556F6");
    }
    else if ((gv_MapGen == 20)) {
        lv_playerName = StringExternal("Param/Value/969A9780");
        lv_userType = StringExternal("Param/Value/2B03AB39");
    }
    else if ((gv_MapGen == 21)) {
        lv_playerName = StringExternal("Param/Value/40509AE6");
        lv_userType = StringExternal("Param/Value/D1A80743");
    }
    else if ((gv_MapGen == 22)) {
        lv_playerName = StringExternal("Param/Value/2A6E652F");
        lv_userType = StringExternal("Param/Value/675BA873");
    }
    else if ((gv_MapGen == 23)) {
        lv_playerName = StringExternal("Param/Value/8C071127");
        lv_userType = StringExternal("Param/Value/CDEB37C8");
    }
    else if ((gv_MapGen == 24)) {
        lv_playerName = StringExternal("Param/Value/EBF4E248");
        lv_userType = StringExternal("Param/Value/FFE98CB3");
    }
    else if ((gv_MapGen == 25)) {
        lv_playerName = StringExternal("Param/Value/C4956307");
        lv_userType = StringExternal("Param/Value/21CE71F0");
    }
    else if ((gv_MapGen == 26)) {
        lv_playerName = StringExternal("Param/Value/393C32C1");
        lv_userType = StringExternal("Param/Value/BEB8EF21");
    }
    else if ((gv_MapGen == 27)) {
        lv_playerName = StringExternal("Param/Value/ACB53CFB");
        lv_userType = StringExternal("Param/Value/EC05B48B");
    }
    else if ((gv_MapGen == 28)) {
        lv_playerName = StringExternal("Param/Value/D04CAFCA");
        lv_userType = StringExternal("Param/Value/911F3009");
    }
    else if ((gv_MapGen == 29)) {
        lv_playerName = StringExternal("Param/Value/B2303B10");
        lv_userType = StringExternal("Param/Value/BECC4047");
    }
    else if ((gv_MapGen == 30)) {
        lv_playerName = StringExternal("Param/Value/664AF74F");
        lv_userType = StringExternal("Param/Value/90E244B0");
    }
    else if (((gv_MapGen >= 31) && (gv_MapGen <= 40))) {
        lv_playerName = StringExternal("Param/Value/B60E989C");
        lv_userType = StringExternal("Param/Value/9CAE5E65");
    }
    else if ((gv_MapGen == 41)) {
        lv_playerName = StringExternal("Param/Value/9E59AA08");
        lv_userType = StringExternal("Param/Value/66DC41FC");
    }
    lv_chosenMapGen = StringToText((("<c val=\"FFFFFF\">" + gf_ConvertMapMapGenInintoLayoutname(gv_MapGen)) + "</c>"));
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0026")) {
        lv_chooseingMode = lv_votedChosenText;
    }
    else if (((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0003") || (gv_generateRandomMap == true))) {
        lv_chooseingMode = lv_randomChosenText;
    }
    else if (true) {
        lv_chooseingMode = lv_pickedChosenText;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/40CB07F6") + lv_chosenMapGen + lv_chooseingMode));
    SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/D67A7776") + lv_playerName + lv_userType));
    TriggerExecute(gt_TellPlayersenvironmentalLayoutInformation, false, false);
    TriggerExecute(gt_TellPlayersToSuggestIdeas, false, false);
}

void gf_PlayerPicksMapGen3 () {
    // Variable Declarations
    text lv_pickedChosenText;
    text lv_votedChosenText;
    text lv_tiedChosenText;
    text lv_chooseingMode;
    text lv_chosegameMode;
    text lv_playerName;
    text lv_userType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pickedChosenText = StringExternal("Param/Value/D99B65DF");
    lv_votedChosenText = StringExternal("Param/Value/0B4B83CC");
    lv_tiedChosenText = StringExternal("Param/Value/0BC4BC33");
    lv_chooseingMode = StringExternal("Param/Value/0BF2A9E8");
    lv_chosegameMode = StringExternal("Param/Value/2CA0C425");
    lv_playerName = StringExternal("Param/Value/D4B0F545");
    lv_userType = StringExternal("Param/Value/5D7D134D");

    // Implementation
    if ((gv_gameModeChosen == "Normal")) {
        lv_chosegameMode = StringExternal("Param/Value/F82D31A7");
    }
    else if ((gv_gameModeChosen == "CTF")) {
        lv_chosegameMode = StringExternal("Param/Value/4494001F");
    }
    else if ((gv_gameModeChosen == "NYI")) {
        lv_chosegameMode = StringExternal("Param/Value/5697D7C8");
    }
    if ((gv_gameModeVoteEndedwithTie == true)) {
        lv_chooseingMode = lv_tiedChosenText;
    }
    else if ((gv_gameModeVoteEndedwithTie == false)) {
        lv_chooseingMode = lv_votedChosenText;
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/2174C977") + lv_chosegameMode + lv_chooseingMode));
    SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
}

void gf_Announcegamevariant () {
    // Variable Declarations
    text lv_teamNames;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto6F94D07C_g;
    playergroup auto73112C2C_g;
    playergroup autoEFE38C03_g;
    playergroup auto698AAA75_g;
    playergroup autoBD259E2E_g;
    playergroup auto8AB954CC_g;
    playergroup auto2CE7F918_g;
    playergroup auto66C80554_g;
    playergroup auto7E012124_g;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/BBC90DC1")));
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/80BBAC99")));
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/AF005C0E")));
        lv_teamNames = StringToText("");
        auto6F94D07C_g = GameAttributePlayersForTeam(1);
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto6F94D07C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/65ABB931"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/37D5217A"));
        lv_teamNames = StringToText("");
        auto73112C2C_g = GameAttributePlayersForTeam(2);
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto73112C2C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/DA9F323C"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/2B9D2141")));
        lv_teamNames = StringToText("");
        autoEFE38C03_g = GameAttributePlayersForTeam(1);
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoEFE38C03_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/0E882BFF"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/17797F95"));
        lv_teamNames = StringToText("");
        auto698AAA75_g = GameAttributePlayersForTeam(2);
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto698AAA75_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/39A9B36F"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/27E6D9BD"));
        lv_teamNames = StringToText("");
        autoBD259E2E_g = GameAttributePlayersForTeam(3);
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoBD259E2E_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/1D2516D6"));
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/905C2A36")));
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005")) {
        if ((PlayerGroupCount(PlayerGroupActive()) == 6)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/BFA191AB")));
            lv_teamNames = StringToText("");
            auto8AB954CC_g = GameAttributePlayersForTeam(1);
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto8AB954CC_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/B5C10E1D"));
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/6E87DDAF"));
            lv_teamNames = StringToText("");
            auto2CE7F918_g = GameAttributePlayersForTeam(2);
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto2CE7F918_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/CD834251"));
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/FA641077")));
            SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
            gv_skipStatWarning = true;
            gf_Endrankednostats();
        }
    }
    else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006")) {
        if ((PlayerGroupCount(PlayerGroupActive()) == 4)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/97A99453")));
            lv_teamNames = StringToText("");
            auto66C80554_g = GameAttributePlayersForTeam(1);
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto66C80554_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/57B01EC4"));
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/41D0F597"));
            lv_teamNames = StringToText("");
            auto7E012124_g = GameAttributePlayersForTeam(2);
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto7E012124_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                lv_teamNames = (lv_teamNames + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/82BE3640"));
            }
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_teamNames);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/E62E12E6")));
            SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
            gv_skipStatWarning = true;
            gf_Endrankednostats();
        }
    }
}

void gf_MakesurenoExternalDirthasCreepUnderit () {
    // Automatic Variable Declarations
    unitgroup auto7E345B76_g;
    int auto7E345B76_u;
    unit auto7E345B76_var;

    // Implementation
    auto7E345B76_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7E345B76_u = UnitGroupCount(auto7E345B76_g, c_unitCountAll);
    for (;; auto7E345B76_u -= 1) {
        auto7E345B76_var = UnitGroupUnitFromEnd(auto7E345B76_g, auto7E345B76_u);
        if (auto7E345B76_var == null) { break; }
        UnitGroupAdd(gv_externalDirt, auto7E345B76_var);
    }
}

void gf_CreatePlayerVisionRequestDialogs () {
    // Variable Declarations
    int lv_playerIndex;
    text lv_nameOfPlayer;
    int lv_xOffsetOfRequestRecivedDialogs;
    int lv_yOffsetOfRequestRecivedDialogs;

    // Automatic Variable Declarations
    const int auto4AA2894D_ae = 6;
    const int auto4AA2894D_ai = 1;

    // Variable Initialization
    lv_nameOfPlayer = (StringExternal("Param/Value/2A4AA50C") + TextWithColor(StringExternal("Param/Value/5C866229"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))) + StringExternal("Param/Value/0006AF4B"));
    lv_xOffsetOfRequestRecivedDialogs = 30;
    lv_yOffsetOfRequestRecivedDialogs = 700;

    // Implementation
    lv_playerIndex = 1;
    for ( ; ( (auto4AA2894D_ai >= 0 && lv_playerIndex <= auto4AA2894D_ae) || (auto4AA2894D_ai < 0 && lv_playerIndex >= auto4AA2894D_ae) ) ; lv_playerIndex += auto4AA2894D_ai ) {
        if ((PlayerType(lv_playerIndex) == c_playerTypeUser)) {
            lv_nameOfPlayer = (StringExternal("Param/Value/78130E87") + TextWithColor(PlayerName(lv_playerIndex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))) + StringExternal("Param/Value/58EFEAB7"));
        }
        else if ((PlayerType(lv_playerIndex) == c_playerTypeComputer)) {
            lv_nameOfPlayer = (StringExternal("Param/Value/E5B6908B") + TextWithColor(gf_GetCompDifficultyName(lv_playerIndex), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))) + StringExternal("Param/Value/42BDB547"));
        }
        else if (true) {
            lv_nameOfPlayer = (StringExternal("Param/Value/AC21F2D0") + TextWithColor(StringExternal("Param/Value/8E3AED0D"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))) + StringExternal("Param/Value/802951A6"));
        }
        gf_DialogCreateAEvo(90, 380, c_anchorBottomLeft, lv_xOffsetOfRequestRecivedDialogs, lv_yOffsetOfRequestRecivedDialogs, false);
        gv_playerVisionRequestDialogForPlayer[lv_playerIndex] = DialogLastCreated();
        lv_yOffsetOfRequestRecivedDialogs = (lv_yOffsetOfRequestRecivedDialogs - 100);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 315, 50, c_anchorTop, 0, 0, (StringExternal("Param/Value/C4D4BC50") + TextWithColor(StringExternal("Param/Value/86071CF6"), Color((ColorGetComponent(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), c_colorComponentRed) + 20.0), (ColorGetComponent(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), c_colorComponentGreen) + 20.0), (ColorGetComponent(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false)), c_colorComponentBlue) + 20.0))) + StringExternal("Param/Value/5042AC10")), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorLeft, 50, 12, lv_nameOfPlayer, ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorRight, 30, 0, null, "Assets\\Textures\\XSymbol 52x52.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gf_ButtonCreateAEvo(DialogLastCreated(), 52, 52, c_anchorRight, 20, 0, StringExternal("Param/Value/7EAD20CF"), null, false, null);
        gv_playerVisionRequestNOButton[lv_playerIndex] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 32, 32, c_anchorRight, 90, 0, null, "Assets\\Textures\\VSymbol 52x52.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gf_ButtonCreateAEvo(DialogLastCreated(), 52, 52, c_anchorRight, 80, 0, StringExternal("Param/Value/7E4993F4"), null, false, null);
        gv_playerVisionRequestYESButton[lv_playerIndex] = DialogControlLastCreated();
    }
    gf_DialogCreateAEvo(200, 500, c_anchorBottom, 0, 0, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_playerVisionRequestRequestVisionDialogButton = DialogLastCreated();
    gf_ButtonCreateAEvo(gv_playerVisionRequestRequestVisionDialogButton, 200, 500, c_anchorBottom, 0, 0, StringExternal("Param/Value/E70CF08B"), StringExternal("Param/Value/C9BD9EB3"), false, null);
    gv_playerVisionRequestRequestVisionButton = DialogControlLastCreated();
}

void gf_CreatePlayerDefeatedManu () {
    // Automatic Variable Declarations
    playergroup autoD3F71544_g;
    int autoD3F71544_var;

    // Implementation
    gf_DialogCreateAEvo(400, 980, c_anchorCenter, 0, -330, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_playerDefeatedManuDialog[0] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 1000, c_anchorCenter, 0, -80, StringToText(""), "Assets\\Textures\\EndgameVision Defeated.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 1000, c_anchorCenter, 0, 80, StringToText(""), "Assets\\Textures\\EndgameVision QueenDied.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_DialogCreateAEvo(565, 1105, c_anchorCenter, 0, 100, false);
    gv_playerDefeatedManuDialog[1] = DialogLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 500, 500, c_anchorRight, 50, 0, null, null, false, null);
    gv_endGameVisionDefeatMenuWatch = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 500, c_anchorRight, 50, 0, StringToText(""), "Assets\\Textures\\WatchTheGameEnglish.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_ButtonCreateAEvo(DialogLastCreated(), 500, 500, c_anchorLeft, 50, 0, null, null, false, null);
    gv_endGameVisionDefeatMenuLeave = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 500, 500, c_anchorLeft, 50, 0, StringToText(""), "Assets\\Textures\\LeaveTheGameEnglish.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    autoD3F71544_g = PlayerGroupActive();
    autoD3F71544_var = -1;
    while (true) {
        autoD3F71544_var = PlayerGroupNextPlayer(autoD3F71544_g, autoD3F71544_var);
        if (autoD3F71544_var < 0) { break; }
        gf_DialogCreateAEvo(220, 370, c_anchorBottom, 0, 0, false);
        gv_discordLinkDefeatScreen[autoD3F71544_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
        gv_discordLinkDefeatScreenEditBox[autoD3F71544_var] = DialogControlLastCreated();
        DialogControlSetSize(gv_discordLinkDefeatScreenEditBox[autoD3F71544_var], PlayerGroupAll(), 320, 200);
        DialogControlSetPosition(gv_discordLinkDefeatScreenEditBox[autoD3F71544_var], PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemEditorValue(gv_discordLinkDefeatScreenEditBox[autoD3F71544_var], "https://discord.gg/SZ3ekuK", PlayerGroupAll());
    }
}

void gf_CreateUGUIBar () {
    // Variable Declarations
    int lv_boardersDialogHealthBar;

    // Automatic Variable Declarations
    playergroup auto2479B913_g;
    int auto2479B913_var;

    // Variable Initialization

    // Implementation
    gf_DialogCreateAEvo(30, 800, c_anchorBottom, 0, 185, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_uGUIBarBoardersDialogHealthBar = DialogLastCreated();
    gf_DialogCreateAEvo(20, 700, c_anchorBottom, 0, 150, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_uGUIBarBoardersDialogEnergybar = DialogLastCreated();
    auto2479B913_g = PlayerGroupActive();
    auto2479B913_var = -1;
    while (true) {
        auto2479B913_var = PlayerGroupNextPlayer(auto2479B913_g, auto2479B913_var);
        if (auto2479B913_var < 0) { break; }
        libNtve_gf_CreateDialogItemImage(gv_uGUIBarBoardersDialogHealthBar, 900, 30, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\QueenHealthbarAEvoGUIBarGreen.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uGUIBarDialogItemImageHealthBar[auto2479B913_var] = DialogControlLastCreated();
        DialogControlSetVisible(gv_uGUIBarDialogItemImageHealthBar[auto2479B913_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uGUIBarDialogItemImageHealthBar[auto2479B913_var], PlayerGroupSingle(auto2479B913_var), true);
        libNtve_gf_CreateDialogItemImage(gv_uGUIBarBoardersDialogEnergybar, 800, 20, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\QueenHealthbarAEvoGUIBarPurple.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_uGUIBarDialogItemImageEnergybar[auto2479B913_var] = DialogControlLastCreated();
        DialogControlSetVisible(gv_uGUIBarDialogItemImageEnergybar[auto2479B913_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uGUIBarDialogItemImageEnergybar[auto2479B913_var], PlayerGroupSingle(auto2479B913_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_uGUIBarBoardersDialogHealthBar, 200, 20, c_anchorCenter, 0, 0, StringToText((((("<s val=\"HeaderExtendedTemplate\">" + "1") + "/") + "2") + "</s>")), ColorWithAlpha(0,0,0,0), false, 0.0);
        gv_uGUIBarDialogItemLabelHealthBar[auto2479B913_var] = DialogControlLastCreated();
        DialogControlSetVisible(gv_uGUIBarDialogItemLabelHealthBar[auto2479B913_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uGUIBarDialogItemLabelHealthBar[auto2479B913_var], PlayerGroupSingle(auto2479B913_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_uGUIBarBoardersDialogEnergybar, 200, 20, c_anchorCenter, 0, 0, StringToText((((("<s val=\"HeaderExtendedTemplate\">" + "1") + "/") + "2") + "</s>")), ColorWithAlpha(0,0,0,0), false, 0.0);
        gv_uGUIBarDialogItemLabelEnergybar[auto2479B913_var] = DialogControlLastCreated();
        DialogControlSetVisible(gv_uGUIBarDialogItemLabelEnergybar[auto2479B913_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_uGUIBarDialogItemLabelEnergybar[auto2479B913_var], PlayerGroupSingle(auto2479B913_var), true);
    }
    gf_DialogCreateAEvo(80, 800, c_anchorBottom, 0, 140, false);
    gv_uGUIBarFramesDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 810, 40, c_anchorCenter, 0, -20, StringToText(""), "Assets\\Textures\\QueenHealthbarAEvoGUIFrame.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uGUIBarDialogItemFrameHealthbar = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 710, 30, c_anchorCenter, 0, 20, StringToText(""), "Assets\\Textures\\QueenHealthbarAEvoGUIFrame.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_uGUIBarDialogItemFrameEnergybar = DialogControlLastCreated();
    gf_EmptyButtonCreate(DialogLastCreated(), 40, 810, c_anchorCenter, 0, -20, null, null, false, null);
    gv_uGUIBarWhenClickedMoveCamaratoselectedUnitButton = DialogControlLastCreated();
    TriggerExecute(gt_UpdateUGUIBarTrigger, true, false);
}

void gf_UpdateUGUIBar (int lp_updateForPlayer) {
    // Variable Declarations
    int lv_unitHealth;
    int lv_unitEnergy;
    color lv_healthtextColor;
    unit lv_unit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_healthtextColor = Color(0,0,0);
    lv_unit = UnitGroupUnit(UnitGroupSelected(lp_updateForPlayer), 1);

    // Implementation
    lv_unitHealth = FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent));
    lv_unitEnergy = FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropEnergyPercent, c_unitPropCurrent));
    DialogControlSetPosition(gv_uGUIBarDialogItemImageHealthBar[lp_updateForPlayer], PlayerGroupSingle(lp_updateForPlayer), c_anchorCenter, (-800 + (lv_unitHealth * 8)), 0);
    DialogControlSetPosition(gv_uGUIBarDialogItemImageEnergybar[lp_updateForPlayer], PlayerGroupSingle(lp_updateForPlayer), c_anchorCenter, (-700 + (lv_unitEnergy * 7)), 0);
    if ((lv_unitHealth > 75)) {
        libNtve_gf_SetDialogItemImage(gv_uGUIBarDialogItemImageHealthBar[lp_updateForPlayer], "Assets\\Textures\\QueenHealthbarAEvoGUIBarGreen.dds", PlayerGroupSingle(lp_updateForPlayer));
        lv_healthtextColor = Color(0.00, 50.20, 0.00);
    }
    else {
        if ((lv_unitHealth > 50)) {
            libNtve_gf_SetDialogItemImage(gv_uGUIBarDialogItemImageHealthBar[lp_updateForPlayer], "Assets\\Textures\\QueenHealthbarAEvoGUIBarYellow.dds", PlayerGroupSingle(lp_updateForPlayer));
            lv_healthtextColor = Color(83.53, 83.53, 0.00);
        }
        else {
            if ((lv_unitHealth > 25)) {
                libNtve_gf_SetDialogItemImage(gv_uGUIBarDialogItemImageHealthBar[lp_updateForPlayer], "Assets\\Textures\\QueenHealthbarAEvoGUIBarOrange.dds", PlayerGroupSingle(lp_updateForPlayer));
                lv_healthtextColor = Color(80.78, 40.39, 0.00);
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_uGUIBarDialogItemImageHealthBar[lp_updateForPlayer], "Assets\\Textures\\QueenHealthbarAEvoGUIBarRed.dds", PlayerGroupSingle(lp_updateForPlayer));
                lv_healthtextColor = Color(76.86, 0.00, 0.00);
            }
        }
    }
    libNtve_gf_SetDialogItemText(gv_uGUIBarDialogItemLabelHealthBar[lp_updateForPlayer], TextWithColor(StringToText(((((((("<s val=\"HeaderExtendedTemplate\">" + IntToString(FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropCurrent)))) + "/") + IntToString(FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropLife, c_unitPropNormal)))) + "(") + IntToString(FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent)))) + "%)") + "</s>")), lv_healthtextColor), PlayerGroupSingle(lp_updateForPlayer));
    libNtve_gf_SetDialogItemText(gv_uGUIBarDialogItemLabelEnergybar[lp_updateForPlayer], TextWithColor(StringToText(((((((("<s val=\"HeaderExtendedTemplate\">" + IntToString(FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropEnergy, c_unitPropCurrent)))) + "/") + IntToString(FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropEnergy, c_unitPropNormal)))) + "(") + IntToString(FixedToInt(UnitGetPropertyFixed(lv_unit, c_unitPropEnergyPercent, c_unitPropCurrent)))) + "%)") + "</s>")), Color(50.20, 0.00, 50.20)), PlayerGroupSingle(lp_updateForPlayer));
    if ((UnitGetPropertyFixed(lv_unit, c_unitPropEnergy, c_unitPropNormal) == 0.0)) {
        DialogSetVisible(gv_uGUIBarBoardersDialogEnergybar, PlayerGroupSingle(lp_updateForPlayer), false);
        DialogControlSetVisible(gv_uGUIBarDialogItemFrameEnergybar, PlayerGroupSingle(lp_updateForPlayer), false);
    }
    else {
        DialogSetVisible(gv_uGUIBarBoardersDialogEnergybar, PlayerGroupSingle(lp_updateForPlayer), true);
        DialogControlSetVisible(gv_uGUIBarDialogItemFrameEnergybar, PlayerGroupSingle(lp_updateForPlayer), true);
    }
    if ((UnitIsSelected(lv_unit, lp_updateForPlayer) == true)) {
        DialogSetVisible(gv_uGUIBarBoardersDialogHealthBar, PlayerGroupSingle(lp_updateForPlayer), true);
        DialogControlSetVisible(gv_uGUIBarDialogItemFrameHealthbar, PlayerGroupSingle(lp_updateForPlayer), true);
    }
    else {
        DialogSetVisible(gv_uGUIBarBoardersDialogHealthBar, PlayerGroupSingle(lp_updateForPlayer), false);
        DialogControlSetVisible(gv_uGUIBarDialogItemFrameHealthbar, PlayerGroupSingle(lp_updateForPlayer), false);
    }
}

void gf_CreateSettingsDialog () {
    // Automatic Variable Declarations
    playergroup auto824F871B_g;
    int auto824F871B_var;
    playergroup auto551B07A9_g;
    int auto551B07A9_var;
    playergroup auto2D263DD7_g;
    int auto2D263DD7_var;

    // Implementation
    auto824F871B_g = PlayerGroupActive();
    auto824F871B_var = -1;
    while (true) {
        auto824F871B_var = PlayerGroupNextPlayer(auto824F871B_g, auto824F871B_var);
        if (auto824F871B_var < 0) { break; }
        gf_DialogCreateAEvo(80, 120, c_anchorBottomRight, 250, 265, false);
        gv_settingsMenuToggleButtonDialog[auto824F871B_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        gf_ButtonCreateAEvo(DialogLastCreated(), 60, 120, c_anchorBottom, 0, 0, null, StringExternal("Param/Value/A4549148"), false, null);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto824F871B_var), true);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto824F871B_var), true);
        gv_settingsMenuToggleButton[auto824F871B_var] = DialogControlLastCreated();
    }
    gf_DialogCreateAEvo(500, 950, c_anchorCenter, 0, 0, false);
    gv_settingsMenu = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 850, 100, c_anchorTopLeft, 50, 25, StringExternal("Param/Value/DC71C435"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gf_ButtonCreateAEvo(gv_settingsMenu, 85, 170, c_anchorTopLeft, 50, 100, null, StringExternal("Param/Value/CC639DD9"), false, null);
    gv_customGUISC2GUI[0] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_settingsMenu, 85, 170, c_anchorTopLeft, 220, 100, null, StringExternal("Param/Value/1476859A"), false, null);
    gv_customGUISC2GUI[1] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_settingsMenu, 85, 170, c_anchorTopLeft, 390, 100, null, StringExternal("Param/Value/D7A80D9E"), false, null);
    gv_customGUISC2GUI[2] = DialogControlLastCreated();
    gf_EmptyButtonCreate(gv_settingsMenu, 85, 170, c_anchorTopLeft, 390, 100, null, null, false, null);
    gf_ButtonCreateAEvo(gv_settingsMenu, 85, 170, c_anchorTopLeft, 560, 100, null, StringExternal("Param/Value/641B39FE"), false, null);
    gv_customGUISC2GUI[3] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_settingsMenu, 85, 170, c_anchorTopLeft, 730, 100, null, StringExternal("Param/Value/AE630929"), false, null);
    gv_customGUISC2GUI[4] = DialogControlLastCreated();
    gf_EmptyButtonCreate(gv_settingsMenu, 85, 170, c_anchorTopLeft, 730, 100, null, null, false, null);
    auto551B07A9_g = PlayerGroupActive();
    auto551B07A9_var = -1;
    while (true) {
        auto551B07A9_var = PlayerGroupNextPlayer(auto551B07A9_g, auto551B07A9_var);
        if (auto551B07A9_var < 0) { break; }
        if ((gv_playerCustomGUIString[auto551B07A9_var] == "Starcraft")) {
            libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[0], true, PlayerGroupSingle(auto551B07A9_var));
        }
        else if ((gv_playerCustomGUIString[auto551B07A9_var] == "Evolution")) {
            libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[1], true, PlayerGroupSingle(auto551B07A9_var));
        }
        else if ((gv_playerCustomGUIString[auto551B07A9_var] == "Clean")) {
            libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[2], true, PlayerGroupSingle(auto551B07A9_var));
        }
        else if ((gv_playerCustomGUIString[auto551B07A9_var] == "Minimal")) {
            libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[3], true, PlayerGroupSingle(auto551B07A9_var));
        }
        else if ((gv_playerCustomGUIString[auto551B07A9_var] == "Custom")) {
            libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[4], true, PlayerGroupSingle(auto551B07A9_var));
        }
    }
    gf_ButtonCreateAEvo(gv_settingsMenu, 70, 300, c_anchorTopLeft, 50, 200, null, StringExternal("Param/Value/5C83DC85"), false, null);
    gv_settingsMenuHideRightSideButtons0Out1in[0] = DialogControlLastCreated();
    DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[0], PlayerGroupAll(), false);
    gf_ButtonCreateAEvo(gv_settingsMenu, 70, 300, c_anchorTopLeft, 50, 200, null, StringExternal("Param/Value/EFD7E736"), false, null);
    gv_settingsMenuHideRightSideButtons0Out1in[1] = DialogControlLastCreated();
    DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[1], PlayerGroupAll(), false);
    auto2D263DD7_g = PlayerGroupActive();
    auto2D263DD7_var = -1;
    while (true) {
        auto2D263DD7_var = PlayerGroupNextPlayer(auto2D263DD7_g, auto2D263DD7_var);
        if (auto2D263DD7_var < 0) { break; }
        if ((gv_settingsMenuHideRightSideButtonsHiddenForPlayer[auto2D263DD7_var] == true)) {
            DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[1], PlayerGroupSingle(auto2D263DD7_var), true);
            DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[0], PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_skinsDialogTogglebuttonDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_discordLinkCopyToggleDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_ctrlGroup_ToggleDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_patchNotes_ToggleDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_statsDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogSetVisible(gv_statsToggleDialog, PlayerGroupSingle(auto2D263DD7_var), false);
            DialogControlSetVisible(gv_toggleUIBarManu, PlayerGroupSingle(auto2D263DD7_var), false);
        }
        else {
            DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[1], PlayerGroupSingle(auto2D263DD7_var), false);
            DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[0], PlayerGroupSingle(auto2D263DD7_var), true);
            DialogSetVisible(gv_skinsDialogTogglebuttonDialog, PlayerGroupSingle(auto2D263DD7_var), true);
            DialogSetVisible(gv_discordLinkCopyToggleDialog, PlayerGroupSingle(auto2D263DD7_var), true);
            DialogSetVisible(gv_ctrlGroup_ToggleDialog, PlayerGroupSingle(auto2D263DD7_var), true);
            DialogSetVisible(gv_patchNotes_ToggleDialog, PlayerGroupSingle(auto2D263DD7_var), true);
            DialogSetVisible(gv_statsToggleDialog, PlayerGroupSingle(auto2D263DD7_var), true);
            if ((gv_playerCustomGUIString[auto2D263DD7_var] == "SC2GUI")) {
                DialogControlSetVisible(gv_toggleUIBarManu, PlayerGroupSingle(auto2D263DD7_var), true);
            }

        }
    }
    gf_ButtonCreateAEvo(gv_settingsMenu, 40, 80, c_anchorTopRight, 10, 0, StringExternal("Param/Value/998A5412"), StringExternal("Param/Value/5E53A5E4"), false, null);
    gv_settingsMenuredX = DialogControlLastCreated();
}

void gf_ChangePlayerSC2UIbasedonlobbychoice () {
    // Automatic Variable Declarations
    playergroup auto8CE85DC1_g;
    int auto8CE85DC1_var;

    // Implementation
    auto8CE85DC1_g = PlayerGroupActive();
    auto8CE85DC1_var = -1;
    while (true) {
        auto8CE85DC1_var = PlayerGroupNextPlayer(auto8CE85DC1_g, auto8CE85DC1_var);
        if (auto8CE85DC1_var < 0) { break; }
        if ((GameAttributePlayerValue("[bnet:local/0.0/273101]5", auto8CE85DC1_var) == "0002")) {
            gv_playerCustomGUIString[auto8CE85DC1_var] = "SC2GUI";
        }
        else if ((GameAttributePlayerValue("[bnet:local/0.0/273101]5", auto8CE85DC1_var) == "0004")) {
            gv_playerCustomGUIString[auto8CE85DC1_var] = "Evolution";
        }
        else if ((GameAttributePlayerValue("[bnet:local/0.0/273101]5", auto8CE85DC1_var) == "0003")) {
            gv_playerCustomGUIString[auto8CE85DC1_var] = "Minimal";
        }
        else if (true) {
            gv_playerCustomGUIString[auto8CE85DC1_var] = "Evolution";
        }
    }
}

void gf_CreateWinchanceDialog () {
    int init_i;

    // Variable Declarations
    text[7] lv_toggleButtonTooltipName;
    text[7] lv_toggleButtonTooltipGamesWon;
    text[7] lv_toggleButtonTooltipGamesPlayed;
    text[7] lv_toggleButtonTooltipCombinedForPlayer;
    text lv_toggleButtonTooltipAllPlayersandAllStats;
    int lv_textX;
    int lv_textY;
    int lv_playerIndex;

    // Automatic Variable Declarations
    playergroup autoA4B23EF6_g;
    int autoA4B23EF6_var;
    const int auto1F18EF6D_ae = 6;
    const int auto1F18EF6D_ai = 1;
    const int auto4ED8CB79_ae = 6;
    const int auto4ED8CB79_ai = 1;
    playergroup autoA8439637_g;
    int autoA8439637_var;
    playergroup autoA5626939_g;
    int autoA5626939_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_toggleButtonTooltipName[init_i] = StringExternal("Param/Value/4D31AFBB");
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_toggleButtonTooltipGamesWon[init_i] = StringExternal("Param/Value/456FEB67");
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_toggleButtonTooltipGamesPlayed[init_i] = StringExternal("Param/Value/CC406A9B");
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_toggleButtonTooltipCombinedForPlayer[init_i] = StringToText("");
    }
    lv_toggleButtonTooltipAllPlayersandAllStats = StringExternal("Param/Value/FFAEF57D");
    lv_textX = 50;
    lv_textY = 20;

    // Implementation
    gf_CalculateWinchanceForEveryone();
    autoA4B23EF6_g = PlayerGroupActive();
    autoA4B23EF6_var = -1;
    while (true) {
        autoA4B23EF6_var = PlayerGroupNextPlayer(autoA4B23EF6_g, autoA4B23EF6_var);
        if (autoA4B23EF6_var < 0) { break; }
        gf_DialogCreateAEvo(30, 30, c_anchorTopLeft, 220, 10, false);
        gv_winrateWinChanceToggleButtonDialog[autoA4B23EF6_var] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(autoA4B23EF6_var), true);
        gf_ButtonCreateAEvo(DialogLastCreated(), 30, 30, c_anchorCenter, 0, 0, null, null, true, "EditorData\\Images\\TerrainModule\\BrushStyle\\AirBrush.tga");
        gv_winrateWinChanceToggleButton[autoA4B23EF6_var] = DialogControlLastCreated();
        gf_DialogCreateAEvo(400, 600, c_anchorTopLeft, 250, 10, false);
        gv_winrateWinChanceDialog[autoA4B23EF6_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(autoA4B23EF6_var), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        lv_textX = 50;
        lv_textY = 20;
        libNtve_gf_CreateDialogItemLabel(gv_winrateWinChanceDialog[autoA4B23EF6_var], 200, 50, c_anchorTopLeft, lv_textX, 0, StringExternal("Param/Value/0EC2E496"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_playerIndex = 1;
        for ( ; ( (auto1F18EF6D_ai >= 0 && lv_playerIndex <= auto1F18EF6D_ae) || (auto1F18EF6D_ai < 0 && lv_playerIndex >= auto1F18EF6D_ae) ) ; lv_playerIndex += auto1F18EF6D_ai ) {
            if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_playerIndex) == true)) {
                libNtve_gf_CreateDialogItemLabel(gv_winrateWinChanceDialog[autoA4B23EF6_var], 200, 50, c_anchorTopLeft, lv_textX, lv_textY, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_winrateOfPlayer[lv_playerIndex])), c_fixedPrecisionAny) + StringExternal("Param/Value/7702F49A")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
                if ((lv_playerIndex == 1)) {
                    gv_winrateLabelNumberforplayer1[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 2)) {
                    gv_winrateLabelNumberforplayer2[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 3)) {
                    gv_winrateLabelNumberforplayer3[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 4)) {
                    gv_winrateLabelNumberforplayer4[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 5)) {
                    gv_winrateLabelNumberforplayer5[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 6)) {
                    gv_winrateLabelNumberforplayer6[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                lv_textY = (lv_textY + 20);
            }

        }
        lv_textX = 125;
        lv_textY = 20;
        libNtve_gf_CreateDialogItemLabel(gv_winrateWinChanceDialog[autoA4B23EF6_var], 200, 50, c_anchorTopLeft, lv_textX, 0, StringExternal("Param/Value/22DB7A61"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_playerIndex = 1;
        for ( ; ( (auto4ED8CB79_ai >= 0 && lv_playerIndex <= auto4ED8CB79_ae) || (auto4ED8CB79_ai < 0 && lv_playerIndex >= auto4ED8CB79_ae) ) ; lv_playerIndex += auto4ED8CB79_ai ) {
            if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_playerIndex) == true)) {
                libNtve_gf_CreateDialogItemLabel(gv_winrateWinChanceDialog[autoA4B23EF6_var], 200, 50, c_anchorTopLeft, lv_textX, lv_textY, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_winchanceOfPlayer[lv_playerIndex])), c_fixedPrecisionAny) + StringExternal("Param/Value/4A4AFFC1")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
                if ((lv_playerIndex == 1)) {
                    gv_winchanceLabelNumberforplayer1[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 2)) {
                    gv_winchanceLabelNumberforplayer2[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 3)) {
                    gv_winchanceLabelNumberforplayer3[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 4)) {
                    gv_winchanceLabelNumberforplayer4[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 5)) {
                    gv_winchanceLabelNumberforplayer5[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                else if ((lv_playerIndex == 6)) {
                    gv_winchanceLabelNumberforplayer6[autoA4B23EF6_var] = DialogControlLastCreated();
                }
                lv_textY = (lv_textY + 20);
            }

        }
    }
    autoA8439637_g = PlayerGroupActive();
    autoA8439637_var = -1;
    while (true) {
        autoA8439637_var = PlayerGroupNextPlayer(autoA8439637_g, autoA8439637_var);
        if (autoA8439637_var < 0) { break; }
        if ((PlayerType(autoA8439637_var) == c_playerTypeComputer)) {
            lv_toggleButtonTooltipName[autoA8439637_var] = (StringExternal("Param/Value/BEFD4F48") + TextWithColor(gf_GetCompDifficultyName(autoA8439637_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoA8439637_var, false))) + StringExternal("Param/Value/E9655F1D"));
        }
        else {
            lv_toggleButtonTooltipName[autoA8439637_var] = (StringExternal("Param/Value/9203DC90") + TextWithColor(PlayerName(autoA8439637_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoA8439637_var, false))) + StringExternal("Param/Value/6707723B"));
        }
        lv_toggleButtonTooltipGamesPlayed[autoA8439637_var] = (StringExternal("Param/Value/B16FCC93") + TextWithColor((StringExternal("Param/Value/27CD302C") + IntToText(gv_amountOfGamesPlayed[autoA8439637_var])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoA8439637_var, false))) + StringExternal("Param/Value/6324C5FA"));
        lv_toggleButtonTooltipGamesWon[autoA8439637_var] = (StringExternal("Param/Value/A0C6F0BE") + TextWithColor((StringExternal("Param/Value/97C5C3A9") + IntToText(gv_amountOfGamesWon[autoA8439637_var])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoA8439637_var, false))) + StringExternal("Param/Value/44DE0E77"));
        lv_toggleButtonTooltipCombinedForPlayer[autoA8439637_var] = ((lv_toggleButtonTooltipName[autoA8439637_var] + lv_toggleButtonTooltipGamesPlayed[autoA8439637_var]) + (StringExternal("Param/Value/9380A3E7") + (lv_toggleButtonTooltipGamesWon[autoA8439637_var] + StringExternal("Param/Value/7A54E64C"))));
    }
    lv_toggleButtonTooltipAllPlayersandAllStats = (lv_toggleButtonTooltipCombinedForPlayer[1] + lv_toggleButtonTooltipCombinedForPlayer[2] + lv_toggleButtonTooltipCombinedForPlayer[3] + lv_toggleButtonTooltipCombinedForPlayer[4] + lv_toggleButtonTooltipCombinedForPlayer[5] + lv_toggleButtonTooltipCombinedForPlayer[6]);
    autoA5626939_g = PlayerGroupActive();
    autoA5626939_var = -1;
    while (true) {
        autoA5626939_var = PlayerGroupNextPlayer(autoA5626939_g, autoA5626939_var);
        if (autoA5626939_var < 0) { break; }
        libNtve_gf_SetDialogItemTooltip(gv_winrateWinChanceToggleButton[autoA5626939_var], lv_toggleButtonTooltipAllPlayersandAllStats, PlayerGroupSingle(autoA5626939_var));
    }
}

void gf_RecalculateMainWinchanceswinrates () {
    // Variable Declarations
    int lv_playerIndex;
    int lv_textX;
    int lv_textY;

    // Automatic Variable Declarations
    playergroup autoE51E0DAC_g;
    int autoE51E0DAC_var;
    const int autoEF04C66D_ae = 6;
    const int autoEF04C66D_ai = 1;
    const int auto847E9A66_ae = 6;
    const int auto847E9A66_ai = 1;

    // Variable Initialization
    lv_textX = 50;
    lv_textY = 20;

    // Implementation
    SoundPlayForPlayer(SoundLink("AC_UI_MapSelect", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    gf_CalculateWinchanceForEveryone();
    autoE51E0DAC_g = PlayerGroupActive();
    autoE51E0DAC_var = -1;
    while (true) {
        autoE51E0DAC_var = PlayerGroupNextPlayer(autoE51E0DAC_g, autoE51E0DAC_var);
        if (autoE51E0DAC_var < 0) { break; }
        DialogControlSetVisible(gv_winrateLabelNumberforplayer1[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winrateLabelNumberforplayer2[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winrateLabelNumberforplayer3[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winrateLabelNumberforplayer4[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winrateLabelNumberforplayer5[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winrateLabelNumberforplayer6[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winchanceLabelNumberforplayer1[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winchanceLabelNumberforplayer2[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winchanceLabelNumberforplayer3[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winchanceLabelNumberforplayer4[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winchanceLabelNumberforplayer5[autoE51E0DAC_var], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_winchanceLabelNumberforplayer6[autoE51E0DAC_var], PlayerGroupAll(), false);
        lv_textY = 20;
        lv_textX = 50;
        lv_playerIndex = 1;
        for ( ; ( (autoEF04C66D_ai >= 0 && lv_playerIndex <= autoEF04C66D_ae) || (autoEF04C66D_ai < 0 && lv_playerIndex >= autoEF04C66D_ae) ) ; lv_playerIndex += autoEF04C66D_ai ) {
            if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_playerIndex) == true) && (PlayerGroupHasPlayer(gv_deadPlayerGroup, lv_playerIndex) == false)) {
                libNtve_gf_CreateDialogItemLabel(gv_winrateWinChanceDialog[autoE51E0DAC_var], 200, 50, c_anchorTopLeft, lv_textX, lv_textY, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_winrateOfPlayer[lv_playerIndex])), c_fixedPrecisionAny) + StringExternal("Param/Value/8C2EAC42")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
                lv_textY = (lv_textY + 20);
                if ((lv_playerIndex == 1)) {
                    gv_winrateLabelNumberforplayer1[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winrateLabelNumberforplayer1[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 2)) {
                    gv_winrateLabelNumberforplayer2[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winrateLabelNumberforplayer2[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 3)) {
                    gv_winrateLabelNumberforplayer3[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winrateLabelNumberforplayer3[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 4)) {
                    gv_winrateLabelNumberforplayer4[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winrateLabelNumberforplayer4[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 5)) {
                    gv_winrateLabelNumberforplayer5[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winrateLabelNumberforplayer5[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 6)) {
                    gv_winrateLabelNumberforplayer6[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winrateLabelNumberforplayer6[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
            }

        }
        lv_textY = 20;
        lv_textX = 125;
        lv_playerIndex = 1;
        for ( ; ( (auto847E9A66_ai >= 0 && lv_playerIndex <= auto847E9A66_ae) || (auto847E9A66_ai < 0 && lv_playerIndex >= auto847E9A66_ae) ) ; lv_playerIndex += auto847E9A66_ai ) {
            if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_playerIndex) == true) && (PlayerGroupHasPlayer(gv_deadPlayerGroup, lv_playerIndex) == false)) {
                libNtve_gf_CreateDialogItemLabel(gv_winrateWinChanceDialog[autoE51E0DAC_var], 200, 50, c_anchorTopLeft, lv_textX, lv_textY, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_winchanceOfPlayer[lv_playerIndex])), c_fixedPrecisionAny) + StringExternal("Param/Value/C62C90A9")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_playerIndex, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
                lv_textY = (lv_textY + 20);
                if ((lv_playerIndex == 1)) {
                    gv_winchanceLabelNumberforplayer1[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winchanceLabelNumberforplayer1[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 2)) {
                    gv_winchanceLabelNumberforplayer2[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winchanceLabelNumberforplayer2[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 3)) {
                    gv_winchanceLabelNumberforplayer3[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winchanceLabelNumberforplayer3[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 4)) {
                    gv_winchanceLabelNumberforplayer4[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winchanceLabelNumberforplayer4[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 5)) {
                    gv_winchanceLabelNumberforplayer5[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winchanceLabelNumberforplayer5[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
                else if ((lv_playerIndex == 6)) {
                    gv_winchanceLabelNumberforplayer6[autoE51E0DAC_var] = DialogControlLastCreated();
                    DialogControlSetVisible(gv_winchanceLabelNumberforplayer6[autoE51E0DAC_var], PlayerGroupSingle(autoE51E0DAC_var), true);
                }
            }

        }
    }
}

fixed gf_CalculateBlackWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsBlackant[lp_player];
    lv_wongames = gv_amountOfGamesWonAsBlackant[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculateFireWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsFireAnt[lp_player];
    lv_wongames = gv_amountOfGamesWonAsFireAnt[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculateWoodWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsWoodAnt[lp_player];
    lv_wongames = gv_amountOfGamesWonAsWoodAnt[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculateLeafCutterWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsLeafCutterAnt[lp_player];
    lv_wongames = gv_amountOfGamesWonAsLeafCutterAnt[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculatePharaohWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsPharaohAnt[lp_player];
    lv_wongames = gv_amountOfGamesWonAsPharaohAnt[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculateGhostWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsGhostAnt[lp_player];
    lv_wongames = gv_amountOfGamesWonAsGhostAnt[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculateRandomWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_totalgames = gv_amountOfGamesPlayedAsRandomAnt[lp_player];
    lv_wongames = gv_amountOfGamesWonAsRandomAnt[lp_player];

    // Implementation
    if ((lv_wongames == 0.0)) {
        lv_winratetoreturn = 0.0;
    }

    if ((lv_totalgames == 0.0)) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    return lv_winratetoreturn;
}

fixed gf_CalculateWinrateOfPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_winratetoreturn;
    fixed lv_defaultWinrate;
    fixed lv_totalgames;
    fixed lv_wongames;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defaultWinrate = 1.0;
    lv_totalgames = gv_amountOfGamesPlayed[lp_player];
    lv_wongames = gv_amountOfGamesWon[lp_player];

    // Implementation
    if (((lv_wongames != 0.0) && (lv_totalgames != 0.0))) {
        lv_winratetoreturn = ((lv_wongames / lv_totalgames) * 100.0);
    }

    if (((lv_wongames < 10.0))) {
        lv_winratetoreturn = lv_defaultWinrate;
    }

    if ((PlayerType(lp_player) == c_playerTypeComputer)) {
        if ((PlayerDifficulty(lp_player) == 1)) {
            lv_winratetoreturn = 10.0;
        }
        else if ((PlayerDifficulty(lp_player) == 2)) {
            lv_winratetoreturn = 25.0;
        }
        else if ((PlayerDifficulty(lp_player) == 3)) {
            lv_winratetoreturn = 50.0;
        }
        else if ((PlayerDifficulty(lp_player) == 4)) {
            lv_winratetoreturn = 60.0;
        }
        else if ((PlayerDifficulty(lp_player) == 5)) {
            lv_winratetoreturn = 60.0;
        }
        else if ((PlayerDifficulty(lp_player) == 6)) {
            lv_winratetoreturn = 80.0;
        }
        else if ((PlayerDifficulty(lp_player) == 7)) {
            lv_winratetoreturn = 90.0;
        }
        else if (((PlayerDifficulty(lp_player) == 8) || (PlayerDifficulty(lp_player) == 9) || (PlayerDifficulty(lp_player) == 10))) {
            lv_winratetoreturn = 95.0;
        }
        else if (true) {
            lv_winratetoreturn = 100.0;
        }
        lv_winratetoreturn = (lv_winratetoreturn / 2.0);
    }

    return lv_winratetoreturn;
}

void gf_CalculateWinchanceForEveryone () {
    // Variable Declarations
    fixed lv_combinedWinrate;
    playergroup lv_activeNonDefeatedPlayers;

    // Automatic Variable Declarations
    playergroup autoECBBD3F7_g;
    int autoECBBD3F7_var;
    playergroup auto1652ECA2_g;
    int auto1652ECA2_var;
    playergroup auto86C5553F_g;
    int auto86C5553F_var;
    playergroup auto8FFA0704_g;
    int auto8FFA0704_var;

    // Variable Initialization
    lv_activeNonDefeatedPlayers = PlayerGroupActive();

    // Implementation
    autoECBBD3F7_g = PlayerGroupActive();
    autoECBBD3F7_var = -1;
    while (true) {
        autoECBBD3F7_var = PlayerGroupNextPlayer(autoECBBD3F7_g, autoECBBD3F7_var);
        if (autoECBBD3F7_var < 0) { break; }
        if ((gv_playerDefeated[autoECBBD3F7_var] == true)) {
            PlayerGroupRemove(lv_activeNonDefeatedPlayers, autoECBBD3F7_var);
        }

    }
    Wait(0.2, c_timeGame);
    auto1652ECA2_g = lv_activeNonDefeatedPlayers;
    auto1652ECA2_var = -1;
    while (true) {
        auto1652ECA2_var = PlayerGroupNextPlayer(auto1652ECA2_g, auto1652ECA2_var);
        if (auto1652ECA2_var < 0) { break; }
        gv_winrateOfPlayer[auto1652ECA2_var] = (gf_CalculateWinrateOfPlayer(auto1652ECA2_var) + 0.0);
        lv_combinedWinrate = ((lv_combinedWinrate + gf_CalculateWinrateOfPlayer(auto1652ECA2_var)) + 0.0);
        gv_blackWinrateOfPlayer[auto1652ECA2_var] = (gf_CalculateBlackWinrateOfPlayer(auto1652ECA2_var) + 0.0);
        gv_fireWinrateOfPlayer[auto1652ECA2_var] = (gf_CalculateFireWinrateOfPlayer(auto1652ECA2_var) + 0.0);
        gv_leafCutterWinrateOfPlayer[auto1652ECA2_var] = (gf_CalculateLeafCutterWinrateOfPlayer(auto1652ECA2_var) + 0.0);
        gv_pharaohWinrateOfPlayer[auto1652ECA2_var] = (gf_CalculatePharaohWinrateOfPlayer(auto1652ECA2_var) + 0.0);
        gv_ghostWinrateOfPlayer[auto1652ECA2_var] = (gf_CalculateGhostWinrateOfPlayer(auto1652ECA2_var) + 0.0);
        gv_randomWinrateOfPlayer[auto1652ECA2_var] = (gf_CalculateRandomWinrateOfPlayer(auto1652ECA2_var) + 0.0);
    }
    auto86C5553F_g = lv_activeNonDefeatedPlayers;
    auto86C5553F_var = -1;
    while (true) {
        auto86C5553F_var = PlayerGroupNextPlayer(auto86C5553F_g, auto86C5553F_var);
        if (auto86C5553F_var < 0) { break; }
        gv_winchanceOfPlayer[auto86C5553F_var] = (((gv_winrateOfPlayer[auto86C5553F_var] / lv_combinedWinrate) * 100.0) + 0.0);
    }
    auto8FFA0704_g = lv_activeNonDefeatedPlayers;
    auto8FFA0704_var = -1;
    while (true) {
        auto8FFA0704_var = PlayerGroupNextPlayer(auto8FFA0704_g, auto8FFA0704_var);
        if (auto8FFA0704_var < 0) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), auto8FFA0704_var) == false)) {
            gv_winrateOfPlayer[auto8FFA0704_var] = 0.0;
            gv_winchanceOfPlayer[auto8FFA0704_var] = 0.0;
        }

    }
}

void gf_ShowOnScreenImages () {
    // Automatic Variable Declarations
    // Implementation
    gf_ChangePlayerSC2UIbasedonlobbychoice();
    gf_CreateDialogItemsforSC2CustomAEvoGUI();
}

void gf_CreateDialogItemsforSC2CustomAEvoGUI () {
    // Variable Declarations
    int lv_repeater;

    // Automatic Variable Declarations
    const int auto52CA7BA1_n = 10;
    int auto52CA7BA1_i;
    const int auto90D1A01C_n = 10;
    int auto90D1A01C_i;
    const int autoFD938783_n = 5;
    int autoFD938783_i;
    const int auto9AD97D22_n = 6;
    int auto9AD97D22_i;
    const int auto107A3530_n = 24;
    int auto107A3530_i;
    const int auto4230955A_n = 24;
    int auto4230955A_i;
    const int auto61391E7B_n = 24;
    int auto61391E7B_i;
    const int auto46A60ECC_n = 24;
    int auto46A60ECC_i;
    const int auto41B636F8_n = 24;
    int auto41B636F8_i;
    const int autoDD8FD816_n = 24;
    int autoDD8FD816_i;
    const int autoBE6465FC_n = 6;
    int autoBE6465FC_i;
    const int autoA559CE6F_n = 6;
    int autoA559CE6F_i;
    const int autoE9C5B751_n = 2;
    int autoE9C5B751_i;
    const int auto0ACFA294_n = 2;
    int auto0ACFA294_i;
    playergroup auto11BEC341_g;
    int auto11BEC341_var;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/");
    gv_dialogSC2Everyting = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/");
    gv_minimapAllIncluded = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/Minimap");
    gv_minimapItself = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
    gv_minimapPingButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/TerrainButton");
    gv_minimapTerrainButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel/ColorButton");
    gv_minimapColorButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ArmyButton");
    gv_selectAllArmyUnitsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/IdleButton");
    gv_selectAllWorkerUnitsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MissionTimePanel");
    gv_gameTimeLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/ControlGroupPanel");
    gv_controlGroupPanel = DialogControlLastCreated();
    for (auto52CA7BA1_i = 1; auto52CA7BA1_i <= auto52CA7BA1_n; auto52CA7BA1_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/ControlGroupPanel/ControlGroupButton" + IntToString(lv_repeater)));
        lv_repeater = (lv_repeater + 1);
        gv_controlGroupNumber[lv_repeater] = DialogControlLastCreated();
    }
    lv_repeater = 0;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar/MenuBarBackgroundImage");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar");
    gv_manuBarMain = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar/HelpButton");
    gv_manuBarHelpButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar/ChatButton");
    gv_manuBarChatButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar/SocialButton");
    gv_manuBarSocialButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar/MenuButton");
    gv_manuBarMenuButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel");
    gv_commandButtonsPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/CommandPanel/CommandTargetImage");
    gv_commandDigTip = DialogControlLastCreated();
    for (auto90D1A01C_i = 1; auto90D1A01C_i <= auto90D1A01C_n; auto90D1A01C_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton0" + IntToString(lv_repeater)));
        gv_commandButtons[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    for (autoFD938783_i = 1; autoFD938783_i <= autoFD938783_n; autoFD938783_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/CommandPanel/CommandButton" + IntToString(lv_repeater)));
        gv_commandButtons[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/");
    gv_infoPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup");
    gv_allUnitsInSelectionPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/UnitPanel/BehaviorBar");
    gv_behaviorBarItself = DialogControlLastCreated();
    for (auto9AD97D22_i = 1; auto9AD97D22_i <= auto9AD97D22_n; auto9AD97D22_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/UnitPanel/BehaviorBar/BehaviorIcon" + IntToString(lv_repeater)));
        gv_behaviorBarIcons[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (auto107A3530_i = 1; auto107A3530_i <= auto107A3530_n; auto107A3530_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame0/GroupUnitButton" + IntToString(lv_repeater)));
        gv_unitInSelectionSlotOfPage0[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (auto4230955A_i = 1; auto4230955A_i <= auto4230955A_n; auto4230955A_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame1/GroupUnitButton" + IntToString(lv_repeater)));
        gv_unitInSelectionSlotOfPage1[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (auto61391E7B_i = 1; auto61391E7B_i <= auto61391E7B_n; auto61391E7B_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame2/GroupUnitButton" + IntToString(lv_repeater)));
        gv_unitInSelectionSlotOfPage2[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (auto46A60ECC_i = 1; auto46A60ECC_i <= auto46A60ECC_n; auto46A60ECC_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame3/GroupUnitButton" + IntToString(lv_repeater)));
        gv_unitInSelectionSlotOfPage3[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (auto41B636F8_i = 1; auto41B636F8_i <= auto41B636F8_n; auto41B636F8_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame4/GroupUnitButton" + IntToString(lv_repeater)));
        gv_unitInSelectionSlotOfPage4[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (autoDD8FD816_i = 1; autoDD8FD816_i <= autoDD8FD816_n; autoDD8FD816_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageFrame5/GroupUnitButton" + IntToString(lv_repeater)));
        gv_unitInSelectionSlotOfPage5[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (autoBE6465FC_i = 1; autoBE6465FC_i <= autoBE6465FC_n; autoBE6465FC_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneGroup/PageButton" + IntToString(lv_repeater)));
        gv_unitsInSelectionPage[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneQueue/QueuePanel");
    gv_queuePanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneQueue");
    gv_infoPaneQueue = DialogControlLastCreated();
    for (autoA559CE6F_i = 1; autoA559CE6F_i <= autoA559CE6F_n; autoA559CE6F_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneQueue/QueuePanel/QueueButton0" + IntToString(lv_repeater)));
        gv_selectedUnitQueueSlot = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (autoE9C5B751_i = 1; autoE9C5B751_i <= autoE9C5B751_n; autoE9C5B751_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, (("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneQueue/QueuePanel/ActiveQueuePanel0" + IntToString(lv_repeater)) + "/QueueButton"));
        gv_selectedUnitActiveQueueSlot[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    for (auto0ACFA294_i = 1; auto0ACFA294_i <= auto0ACFA294_n; auto0ACFA294_i += 1) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneQueue/QueuePanel/ActiveQueuePanel0" + IntToString(lv_repeater)));
        gv_selectedUnitActiveQueueText[lv_repeater] = DialogControlLastCreated();
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 0;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/UnitPanel/UnitWireframe");
    gv_selectedUnitHPImageandNumbers = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneUnit");
    gv_infoPaneUnit = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneUnit/NameLabel");
    gv_selectedUnitName = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneUnit/InfoLabel");
    gv_selectedUnitKillsandRank = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneUnit/EquipmentPanel");
    gv_selectedUnitEquipment = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneUnit/TypeLabel");
    gv_selectedUnitAttributes = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel");
    gv_resourcePanelMain = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame");
    gv_resourcePanelResourceFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/SupplyLabel");
    gv_resourcePanelSupplyNumber = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/SupplyIcon");
    gv_resourcePanelSupplyIcon = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceLabel0");
    gv_resourcePanelMineralsNumber = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ResourcePanel/ResourceFrame/ResourceIcon0");
    gv_resourcePanelMineralsIcon = DialogControlLastCreated();
    gf_DialogCreateAEvo(1200, 2140, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2140, 1200, c_anchorCenter, 0, 0, StringToText(""), "BlackFrame.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_gUIFrame[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 450, 450, c_anchorTopLeft, 0, 0, StringToText(""), "BlackFrameForEvo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_gUIFrame[1] = DialogControlLastCreated();
    DialogControlSetVisible(gv_gUIFrame[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gUIFrame[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gUIFrame[2], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gUIFrame[3], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gUIFrame[4], PlayerGroupAll(), false);
    auto11BEC341_g = PlayerGroupActive();
    auto11BEC341_var = -1;
    while (true) {
        auto11BEC341_var = PlayerGroupNextPlayer(auto11BEC341_g, auto11BEC341_var);
        if (auto11BEC341_var < 0) { break; }
        if ((PlayerType(auto11BEC341_var) == c_playerTypeUser)) {
            gf_MoveGUIItemstolocationsbasedontheplayerschoice(auto11BEC341_var);
        }

    }
}

void gf_MoveGUIItemstolocationsbasedontheplayerschoice (int lp_parametherPlayer) {
    // Variable Declarations
    int lv_repeater;

    // Automatic Variable Declarations
    const int autoDBBECB60_n = 24;
    int autoDBBECB60_i;
    const int auto344B10D9_n = 24;
    int auto344B10D9_i;
    const int autoE2561CA2_n = 24;
    int autoE2561CA2_i;
    const int auto9CB8A7D5_n = 24;
    int auto9CB8A7D5_i;
    const int auto0E5947C0_n = 24;
    int auto0E5947C0_i;
    const int autoFFA1D30E_n = 24;
    int autoFFA1D30E_i;
    const int auto9E31E1D3_n = 6;
    int auto9E31E1D3_i;
    const int auto3A17DBF7_n = 6;
    int auto3A17DBF7_i;
    const int auto824B4040_n = 5;
    int auto824B4040_i;
    const int autoF6DE1886_n = 24;
    int autoF6DE1886_i;
    const int autoE6393FDE_n = 24;
    int autoE6393FDE_i;
    const int auto5329CFE0_n = 24;
    int auto5329CFE0_i;
    const int autoB17ABDD5_n = 24;
    int autoB17ABDD5_i;
    const int auto48997F28_n = 24;
    int auto48997F28_i;
    const int autoB8CFC3DE_n = 24;
    int autoB8CFC3DE_i;
    const int auto5160931C_n = 6;
    int auto5160931C_i;
    const int auto508D37DF_n = 6;
    int auto508D37DF_i;
    const int autoDB6B5E05_n = 5;
    int autoDB6B5E05_i;

    // Variable Initialization

    // Implementation
    if ((gv_playerCustomGUIString[lp_parametherPlayer] != "SC2GUI")) {
        UISetFrameVisible(PlayerGroupSingle(lp_parametherPlayer), c_syncFrameTypeConsolePanel, true);
        if ((gv_playerCustomGUIString[lp_parametherPlayer] == "Evolution")) {
            DialogControlSetVisible(gv_gUIFrame[0], PlayerGroupSingle(lp_parametherPlayer), true);
            DialogControlSetVisible(gv_gUIFrame[1], PlayerGroupSingle(lp_parametherPlayer), true);
            DialogControlSetVisible(gv_gUIFrame[2], PlayerGroupSingle(lp_parametherPlayer), false);
            UISetFrameVisible(PlayerGroupSingle(lp_parametherPlayer), c_syncFrameTypeConsolePanel, false);
            DialogControlSetSize(gv_minimapAllIncluded, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_minimapAllIncluded, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 0, 0);
            DialogControlSetPosition(gv_minimapItself, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 0, 0);
            DialogControlSetSize(gv_minimapItself, PlayerGroupSingle(lp_parametherPlayer), 350, 350);
            DialogControlSetPosition(gv_minimapPingButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 0, 340);
            DialogControlSetSize(gv_minimapPingButton, PlayerGroupSingle(lp_parametherPlayer), 140, 30);
            DialogControlSetPosition(gv_minimapTerrainButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 150, 340);
            DialogControlSetSize(gv_minimapTerrainButton, PlayerGroupSingle(lp_parametherPlayer), 30, 30);
            DialogControlSetPosition(gv_minimapColorButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 190, 340);
            DialogControlSetSize(gv_minimapColorButton, PlayerGroupSingle(lp_parametherPlayer), 30, 30);
            DialogControlSetSize(gv_selectAllWorkerUnitsButton, PlayerGroupSingle(lp_parametherPlayer), 90, 60);
            DialogControlSetPosition(gv_selectAllWorkerUnitsButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -530, 5);
            DialogControlSetSize(gv_selectAllArmyUnitsButton, PlayerGroupSingle(lp_parametherPlayer), 90, 60);
            DialogControlSetPosition(gv_selectAllArmyUnitsButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -440, 5);
            DialogControlSetPosition(gv_resourcePanelSupplyNumber, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, -40, 0);
            DialogControlSetPosition(gv_resourcePanelSupplyIcon, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, 100, 0);
            DialogControlSetPosition(gv_resourcePanelMineralsNumber, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, 0, 35);
            DialogControlSetPosition(gv_resourcePanelMineralsIcon, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, 100, 35);
            DialogControlSetPosition(gv_gameTimeLabel, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 240, 335);
            DialogControlSetSize(gv_infoPanel, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_infoPanel, PlayerGroupSingle(lp_parametherPlayer), c_anchorCenter, 0, 0);
            DialogControlSetPosition(gv_unitsInSelectionPage[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 350, 75);
            DialogControlSetPosition(gv_unitsInSelectionPage[3], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 1035, 75);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage0[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 395, 75);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage1[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 395, 75);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage2[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 395, 75);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage3[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 395, 75);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage4[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 395, 75);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage5[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorTopLeft, 75, 95);
            lv_repeater = 0;
            for (autoDBBECB60_i = 1; autoDBBECB60_i <= autoDBBECB60_n; autoDBBECB60_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage0[lv_repeater], PlayerGroupAll(), 80, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto344B10D9_i = 1; auto344B10D9_i <= auto344B10D9_n; auto344B10D9_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage1[lv_repeater], PlayerGroupAll(), 80, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (autoE2561CA2_i = 1; autoE2561CA2_i <= autoE2561CA2_n; autoE2561CA2_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage2[lv_repeater], PlayerGroupAll(), 80, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto9CB8A7D5_i = 1; auto9CB8A7D5_i <= auto9CB8A7D5_n; auto9CB8A7D5_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage3[lv_repeater], PlayerGroupAll(), 80, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto0E5947C0_i = 1; auto0E5947C0_i <= auto0E5947C0_n; auto0E5947C0_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage4[lv_repeater], PlayerGroupAll(), 80, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (autoFFA1D30E_i = 1; autoFFA1D30E_i <= autoFFA1D30E_n; autoFFA1D30E_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage5[lv_repeater], PlayerGroupAll(), 80, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto9E31E1D3_i = 1; auto9E31E1D3_i <= auto9E31E1D3_n; auto9E31E1D3_i += 1) {
                DialogControlSetSize(gv_unitsInSelectionPage[lv_repeater], PlayerGroupSingle(lp_parametherPlayer), 45, 50);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            DialogControlSetPosition(gv_controlGroupPanel, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, 0, 0);
            DialogControlSetPosition(gv_controlGroupNumber[1], PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -350, 5);
            DialogControlSetSize(gv_controlGroupPanel, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_manuBarMain, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, 0, 0);
            DialogControlSetSize(gv_manuBarMain, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_manuBarMenuButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -630, 5);
            DialogControlSetSize(gv_manuBarMenuButton, PlayerGroupSingle(lp_parametherPlayer), 105, 30);
            DialogControlSetSize(gv_manuBarSocialButton, PlayerGroupSingle(lp_parametherPlayer), 50, 40);
            DialogControlSetPosition(gv_manuBarSocialButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -700, 2);
            DialogControlSetSize(gv_manuBarChatButton, PlayerGroupSingle(lp_parametherPlayer), 35, 25);
            DialogControlSetPosition(gv_manuBarChatButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -707, 45);
            DialogControlSetSize(gv_manuBarHelpButton, PlayerGroupSingle(lp_parametherPlayer), 30, 30);
            DialogControlSetPosition(gv_manuBarHelpButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorTop, -595, 40);
            DialogControlSetVisible(gv_manuBarHelpButton, PlayerGroupAll(), false);
            DialogControlSetSize(gv_behaviorBarItself, PlayerGroupSingle(lp_parametherPlayer), 240, 40);
            DialogControlSetPosition(gv_behaviorBarItself, PlayerGroupAll(), c_anchorBottom, 0, 212);
            for (auto3A17DBF7_i = 1; auto3A17DBF7_i <= auto3A17DBF7_n; auto3A17DBF7_i += 1) {
                DialogControlSetSize(gv_behaviorBarIcons[lv_repeater], PlayerGroupSingle(lp_parametherPlayer), 40, 40);
                libNtve_gf_SetDialogItemBackgroundVisible(gv_behaviorBarIcons[lv_repeater], false, PlayerGroupSingle(lp_parametherPlayer));
                lv_repeater = (lv_repeater + 1);
            }
            DialogControlSetPosition(gv_behaviorBarIcons[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -100, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[1], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -60, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[2], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -20, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[3], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 20, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[4], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 60, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[5], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 100, 0);
            lv_repeater = 0;
            DialogControlSetSize(gv_infoPaneUnit, PlayerGroupSingle(lp_parametherPlayer), 1240, 1200);
            DialogControlSetPosition(gv_selectedUnitEquipment, PlayerGroupSingle(lp_parametherPlayer), c_anchorCenter, 0, 0);
            DialogControlSetPosition(gv_selectedUnitHPImageandNumbers, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 60, 40);
            DialogControlSetSize(gv_selectedUnitHPImageandNumbers, PlayerGroupSingle(lp_parametherPlayer), 300, 300);
            DialogControlSetPosition(gv_selectedUnitName, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 60, 148);
            DialogControlSetPosition(gv_selectedUnitEquipment, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 150, 50);
            DialogControlSetSize(gv_selectedUnitEquipment, PlayerGroupSingle(lp_parametherPlayer), 300, 100);
            DialogControlSetPosition(gv_selectedUnitKillsandRank, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, -200, -200);
            DialogControlSetPosition(gv_commandButtonsPanel, PlayerGroupSingle(lp_parametherPlayer), c_anchorCenter, 0, 0);
            DialogControlSetSize(gv_commandButtonsPanel, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_commandButtons[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -80, 80);
            DialogControlSetPosition(gv_commandButtons[5], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -345, 0);
            DialogControlSetPosition(gv_commandButtons[10], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 40, 0);
            DialogControlSetPosition(gv_commandDigTip, PlayerGroupAll(), c_anchorLeft, 100, 200);
            for (auto824B4040_i = 1; auto824B4040_i <= auto824B4040_n; auto824B4040_i += 1) {
                DialogControlSetSize(gv_commandButtons[lv_repeater], PlayerGroupSingle(lp_parametherPlayer), 40, 40);
                lv_repeater = (lv_repeater + 1);
            }
            DialogControlSetVisible(gv_toggleUIBarManu, PlayerGroupSingle(lp_parametherPlayer), false);
            DialogSetPosition(gv_winrateWinChanceDialog[lp_parametherPlayer], c_anchorBottomLeft, 300, -230);
            DialogSetPosition(gv_winrateWinChanceToggleButtonDialog[lp_parametherPlayer], c_anchorBottomLeft, 300, 140);
            DialogSetPosition(gv_leaderboardDialog[lp_parametherPlayer], c_anchorBottomLeft, 25, -350);
            DialogSetVisible(gv_uGUIBarBoardersDialogHealthBar, PlayerGroupSingle(lp_parametherPlayer), true);
            DialogSetVisible(gv_uGUIBarBoardersDialogEnergybar, PlayerGroupSingle(lp_parametherPlayer), true);
            DialogSetVisible(gv_uGUIBarFramesDialog, PlayerGroupSingle(lp_parametherPlayer), true);
            DialogSetPosition(gv_settingsMenuToggleButtonDialog[lp_parametherPlayer], c_anchorTop, -630, 35);
            DialogSetSize(gv_settingsMenuToggleButtonDialog[lp_parametherPlayer], 120, 40);
            DialogControlSetPosition(gv_settingsMenuToggleButton[lp_parametherPlayer], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 0);
            DialogControlSetSize(gv_settingsMenuToggleButton[lp_parametherPlayer], PlayerGroupSingle(lp_parametherPlayer), 120, 40);
        }
        else if ((gv_playerCustomGUIString[lp_parametherPlayer] == "Minimal")) {
            DialogControlSetVisible(gv_gUIFrame[0], PlayerGroupSingle(lp_parametherPlayer), false);
            DialogControlSetVisible(gv_gUIFrame[1], PlayerGroupSingle(lp_parametherPlayer), false);
            DialogControlSetVisible(gv_gUIFrame[2], PlayerGroupSingle(lp_parametherPlayer), false);
            UISetFrameVisible(PlayerGroupSingle(lp_parametherPlayer), c_syncFrameTypeConsolePanel, false);
            DialogControlSetSize(gv_minimapAllIncluded, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_minimapAllIncluded, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 0, 0);
            DialogControlSetPosition(gv_minimapItself, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 0, 0);
            DialogControlSetSize(gv_minimapItself, PlayerGroupSingle(lp_parametherPlayer), 350, 350);
            DialogControlSetPosition(gv_minimapPingButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 355, 315);
            DialogControlSetSize(gv_minimapPingButton, PlayerGroupSingle(lp_parametherPlayer), 30, 30);
            DialogControlSetPosition(gv_minimapTerrainButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 355, 275);
            DialogControlSetSize(gv_minimapTerrainButton, PlayerGroupSingle(lp_parametherPlayer), 30, 30);
            DialogControlSetPosition(gv_minimapColorButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 355, 235);
            DialogControlSetSize(gv_minimapColorButton, PlayerGroupSingle(lp_parametherPlayer), 30, 30);
            DialogControlSetSize(gv_selectAllWorkerUnitsButton, PlayerGroupSingle(lp_parametherPlayer), 90, 60);
            DialogControlSetPosition(gv_selectAllWorkerUnitsButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 95, 350);
            DialogControlSetSize(gv_selectAllArmyUnitsButton, PlayerGroupSingle(lp_parametherPlayer), 90, 60);
            DialogControlSetPosition(gv_selectAllArmyUnitsButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 5, 350);
            DialogControlSetPosition(gv_resourcePanelSupplyNumber, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, -40, 0);
            DialogControlSetPosition(gv_resourcePanelSupplyIcon, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, 100, 0);
            DialogControlSetPosition(gv_resourcePanelMineralsNumber, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, 0, 35);
            DialogControlSetPosition(gv_resourcePanelMineralsIcon, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, 100, 35);
            DialogControlSetPosition(gv_gameTimeLabel, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 240, 350);
            DialogControlSetSize(gv_infoPanel, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_infoPanel, PlayerGroupSingle(lp_parametherPlayer), c_anchorCenter, 0, 0);
            DialogControlSetPosition(gv_unitsInSelectionPage[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 350, 150);
            DialogControlSetPosition(gv_unitsInSelectionPage[3], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 350, 60);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage0[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 380, 120);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage1[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 380, 120);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage2[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 380, 120);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage3[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 380, 120);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage4[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 380, 120);
            DialogControlSetPosition(gv_unitInSelectionSlotOfPage5[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 380, 120);
            lv_repeater = 0;
            for (autoF6DE1886_i = 1; autoF6DE1886_i <= autoF6DE1886_n; autoF6DE1886_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage0[lv_repeater], PlayerGroupAll(), 60, 60);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (autoE6393FDE_i = 1; autoE6393FDE_i <= autoE6393FDE_n; autoE6393FDE_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage1[lv_repeater], PlayerGroupAll(), 60, 60);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto5329CFE0_i = 1; auto5329CFE0_i <= auto5329CFE0_n; auto5329CFE0_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage2[lv_repeater], PlayerGroupAll(), 60, 60);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (autoB17ABDD5_i = 1; autoB17ABDD5_i <= autoB17ABDD5_n; autoB17ABDD5_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage3[lv_repeater], PlayerGroupAll(), 60, 60);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto48997F28_i = 1; auto48997F28_i <= auto48997F28_n; auto48997F28_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage4[lv_repeater], PlayerGroupAll(), 60, 60);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (autoB8CFC3DE_i = 1; autoB8CFC3DE_i <= autoB8CFC3DE_n; autoB8CFC3DE_i += 1) {
                DialogControlSetSize(gv_unitInSelectionSlotOfPage5[lv_repeater], PlayerGroupAll(), 60, 60);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            for (auto5160931C_i = 1; auto5160931C_i <= auto5160931C_n; auto5160931C_i += 1) {
                DialogControlSetSize(gv_unitsInSelectionPage[lv_repeater], PlayerGroupSingle(lp_parametherPlayer), 30, 30);
                lv_repeater = (lv_repeater + 1);
            }
            lv_repeater = 0;
            DialogControlSetPosition(gv_controlGroupPanel, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 0, 0);
            DialogControlSetPosition(gv_controlGroupNumber[1], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomLeft, 350, 170);
            DialogControlSetSize(gv_controlGroupPanel, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetPosition(gv_manuBarMain, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 0, 0);
            DialogControlSetSize(gv_manuBarMain, PlayerGroupSingle(lp_parametherPlayer), 2140, 1200);
            DialogControlSetSize(gv_manuBarMenuButton, PlayerGroupSingle(lp_parametherPlayer), 70, 35);
            DialogControlSetPosition(gv_manuBarMenuButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 5, 228);
            DialogControlSetSize(gv_manuBarSocialButton, PlayerGroupSingle(lp_parametherPlayer), 35, 35);
            DialogControlSetPosition(gv_manuBarSocialButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 75, 228);
            DialogControlSetSize(gv_manuBarChatButton, PlayerGroupSingle(lp_parametherPlayer), 35, 35);
            DialogControlSetPosition(gv_manuBarChatButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 110, 228);
            DialogControlSetSize(gv_manuBarHelpButton, PlayerGroupSingle(lp_parametherPlayer), 35, 35);
            DialogControlSetPosition(gv_manuBarHelpButton, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 145, 228);
            DialogControlSetSize(gv_behaviorBarItself, PlayerGroupSingle(lp_parametherPlayer), 120, 80);
            DialogControlSetPosition(gv_behaviorBarItself, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 120);
            for (auto508D37DF_i = 1; auto508D37DF_i <= auto508D37DF_n; auto508D37DF_i += 1) {
                DialogControlSetSize(gv_behaviorBarIcons[lv_repeater], PlayerGroupSingle(lp_parametherPlayer), 40, 40);
                libNtve_gf_SetDialogItemBackgroundVisible(gv_behaviorBarIcons[lv_repeater], false, PlayerGroupSingle(lp_parametherPlayer));
                lv_repeater = (lv_repeater + 1);
            }
            DialogControlSetPosition(gv_behaviorBarIcons[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -40, 40);
            DialogControlSetPosition(gv_behaviorBarIcons[1], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 40);
            DialogControlSetPosition(gv_behaviorBarIcons[2], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 40, 40);
            DialogControlSetPosition(gv_behaviorBarIcons[3], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, -40, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[4], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 0);
            DialogControlSetPosition(gv_behaviorBarIcons[5], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 40, 0);
            DialogControlSetSize(gv_infoPaneUnit, PlayerGroupSingle(lp_parametherPlayer), 1240, 1200);
            DialogControlSetPosition(gv_selectedUnitEquipment, PlayerGroupSingle(lp_parametherPlayer), c_anchorCenter, 0, 0);
            DialogControlSetSize(gv_selectedUnitHPImageandNumbers, PlayerGroupSingle(lp_parametherPlayer), 100, 100);
            DialogControlSetPosition(gv_selectedUnitHPImageandNumbers, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 30);
            DialogControlSetPosition(gv_selectedUnitName, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 185);
            DialogControlSetSize(gv_selectedUnitEquipment, PlayerGroupSingle(lp_parametherPlayer), 60, 70);
            DialogControlSetPosition(gv_selectedUnitEquipment, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 70);
            DialogControlSetPosition(gv_selectedUnitKillsandRank, PlayerGroupSingle(lp_parametherPlayer), c_anchorTopRight, -200, -200);
            DialogControlSetPosition(gv_commandButtonsPanel, PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 0, 0);
            DialogControlSetSize(gv_commandButtonsPanel, PlayerGroupSingle(lp_parametherPlayer), 400, 400);
            DialogControlSetPosition(gv_commandButtons[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 304, 152);
            DialogControlSetPosition(gv_commandButtons[5], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 304, 76);
            DialogControlSetPosition(gv_commandButtons[10], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottomRight, 304, 0);
            for (autoDB6B5E05_i = 1; autoDB6B5E05_i <= autoDB6B5E05_n; autoDB6B5E05_i += 1) {
                DialogControlSetSize(gv_commandButtons[lv_repeater], PlayerGroupSingle(lp_parametherPlayer), 76, 76);
                lv_repeater = (lv_repeater + 1);
            }
            DialogControlSetPosition(gv_commandDigTip, PlayerGroupAll(), c_anchorBottom, 100, 20);
            DialogControlSetVisible(gv_toggleUIBarManu, PlayerGroupSingle(lp_parametherPlayer), false);
            DialogSetPosition(gv_winrateWinChanceDialog[lp_parametherPlayer], c_anchorTopLeft, 150, 30);
            DialogSetPosition(gv_winrateWinChanceToggleButtonDialog[lp_parametherPlayer], c_anchorTopLeft, 140, 30);
            DialogSetPosition(gv_leaderboardDialog[lp_parametherPlayer], c_anchorTopLeft, 5, 45);
            DialogSetVisible(gv_uGUIBarBoardersDialogHealthBar, PlayerGroupSingle(lp_parametherPlayer), false);
            DialogSetVisible(gv_uGUIBarBoardersDialogEnergybar, PlayerGroupSingle(lp_parametherPlayer), false);
            DialogSetVisible(gv_uGUIBarFramesDialog, PlayerGroupSingle(lp_parametherPlayer), false);
            DialogSetPosition(gv_settingsMenuToggleButtonDialog[lp_parametherPlayer], c_anchorBottomRight, 160, 220);
            DialogSetSize(gv_settingsMenuToggleButtonDialog[lp_parametherPlayer], 160, 80);
            DialogControlSetPosition(gv_settingsMenuToggleButton[lp_parametherPlayer], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 0);
            DialogControlSetSize(gv_settingsMenuToggleButton[lp_parametherPlayer], PlayerGroupSingle(lp_parametherPlayer), 130, 45);
        }
    }
    else {
        DialogSetPosition(gv_settingsMenuToggleButtonDialog[0], c_anchorBottomRight, 250, 270);
        DialogSetSize(gv_settingsMenuToggleButtonDialog[0], 120, 80);
        DialogControlSetPosition(gv_settingsMenuToggleButton[0], PlayerGroupSingle(lp_parametherPlayer), c_anchorBottom, 0, 0);
        DialogControlSetSize(gv_settingsMenuToggleButton[0], PlayerGroupSingle(lp_parametherPlayer), 120, 60);
    }
}

void gf_CreateDiscordLinkDialog () {
    // Variable Declarations
    int lv_textX;
    int lv_textY;

    // Automatic Variable Declarations
    playergroup autoC940FF63_g;
    int autoC940FF63_var;
    playergroup auto8E80DCC6_g;
    int auto8E80DCC6_var;

    // Variable Initialization
    lv_textX = 50;
    lv_textY = 50;

    // Implementation
    DialogCreate(360, 100, c_anchorTopRight, 100, 340, true);
    gv_discordLinkCopyDialog = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeEditBox);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 320, 60);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4857147F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemEditorValue(DialogControlLastCreated(), "https://discord.gg/SZ3ekuK", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "AEvo Button Texture.dds", PlayerGroupAll());
    autoC940FF63_g = PlayerGroupActive();
    autoC940FF63_var = -1;
    while (true) {
        autoC940FF63_var = PlayerGroupNextPlayer(autoC940FF63_g, autoC940FF63_var);
        if (autoC940FF63_var < 0) { break; }
        gv_discordLinkCopyEditBox[autoC940FF63_var] = DialogControlLastCreated();
    }
    DialogCreate(100, 100, c_anchorTopRight, 0, 340, true);
    gv_discordLinkCopyToggleDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    auto8E80DCC6_g = PlayerGroupActive();
    auto8E80DCC6_var = -1;
    while (true) {
        auto8E80DCC6_var = PlayerGroupNextPlayer(auto8E80DCC6_g, auto8E80DCC6_var);
        if (auto8E80DCC6_var < 0) { break; }
        gf_EmptyButtonCreate(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 0, null, null, false, "DiscordIcon2.tga");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto8E80DCC6_var), true);
        gv_discordLinkCopyToggleButton[auto8E80DCC6_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorCenter, 0, 0, StringToText(""), "DiscordIconFull.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto8E80DCC6_var), true);
        gv_discordLinkCopyToggleButtonImage[auto8E80DCC6_var] = DialogControlLastCreated();
    }
}

void gf_StartVoteForStartingFoodAmount () {
    // Automatic Variable Declarations
    // Implementation
    gf_DialogCreateAEvo(500, 900, c_anchorCenter, 0, 0, true);
    gv_foodVoteDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 200, c_anchorTop, 0, 30, StringExternal("Param/Value/0D42F00A"), Color(62.35, 47.06, 33.33), false, 2.0);
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, -250, 0, null, null, true, "FoodVote150.dds");
    gv_foodVoteButton150 = DialogControlLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, 0, 0, null, null, true, "FoodVote250.dds");
    gv_foodVoteButton250 = DialogControlLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, 250, 0, null, null, true, "FoodVote350.dds");
    gv_foodVoteButton350 = DialogControlLastCreated();
    gf_CalculateVotesForStartingFoodAmount();
    TimerStart(gv_foodVoteTimer, 7.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringToText(""), true, false);
    gv_foodVoteTimerWindow = TimerWindowLastCreated();
    TimerWindowSetPosition(TimerWindowLastCreated(), 900, 800);
    TimerWindowSetGapWidth(TimerWindowLastCreated(), 100);
    TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(45.49, 33.33, 23.92), 0.0);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(16.86, 12.16, 8.24), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(30.20, 21.96, 15.69), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(39.22, 29.02, 20.78), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(50.20, 37.25, 26.67), 4);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(56.86, 42.35, 30.20), 5);
}

void gf_EndVoteForStartingFoodAmount () {
    // Variable Declarations
    int lv_winnerAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_foodVoteEnded == false)) {
        gv_foodVoteEnded = true;
        DialogSetVisible(gv_foodVoteDialog, PlayerGroupAll(), false);
        TimerWindowShow(gv_foodVoteTimerWindow, PlayerGroupAll(), false);
        if ((MaxI(gv_startingFoodVotesAmountfor150, gv_startingFoodVotesAmountfor350) > gv_startingFoodVotesAmountfor250)) {
            if ((gv_startingFoodVotesAmountfor150 >= gv_startingFoodVotesAmountfor350)) {
                gv_startingFoodAmountChosen = 150;
            }
            else {
                gv_startingFoodAmountChosen = 350;
            }
        }
        else {
            gv_startingFoodAmountChosen = 250;
        }
    }

}

void gf_CalculateVotesForStartingFoodAmount () {
    // Variable Declarations
    int lv_checkingPlayer;

    // Automatic Variable Declarations
    int auto3046B931_n;
    int auto3046B931_i;

    // Variable Initialization
    lv_checkingPlayer = 1;

    // Implementation
    if ((gv_calculatedFoodVotesOnceAlready == true)) {
        DialogControlSetVisible(gv_displayStartingFoodVotesAmountsForEachone[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayStartingFoodVotesAmountsForEachone[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayStartingFoodVotesAmountsForEachone[3], PlayerGroupAll(), false);
    }

    gv_calculatedFoodVotesOnceAlready = true;
    gv_startingFoodVotesAmountfor150 = 0;
    gv_startingFoodVotesAmountfor250 = 0;
    gv_startingFoodVotesAmountfor350 = 0;
    auto3046B931_n = PlayerGroupCount(PlayerGroupActive());
    for (auto3046B931_i = 1; auto3046B931_i <= auto3046B931_n; auto3046B931_i += 1) {
        if ((PlayerType(lv_checkingPlayer) != c_playerTypeComputer)) {
            if ((gv_startingFoodAmountVoteOfPlayer[lv_checkingPlayer] == "150")) {
                gv_startingFoodVotesAmountfor150 = (gv_startingFoodVotesAmountfor150 + 1);
            }
            else if ((gv_startingFoodAmountVoteOfPlayer[lv_checkingPlayer] == "250")) {
                gv_startingFoodVotesAmountfor250 = (gv_startingFoodVotesAmountfor250 + 1);
            }
            else if ((gv_startingFoodAmountVoteOfPlayer[lv_checkingPlayer] == "350")) {
                gv_startingFoodVotesAmountfor350 = (gv_startingFoodVotesAmountfor350 + 1);
            }
        }

        lv_checkingPlayer = (lv_checkingPlayer + 1);
    }
    libNtve_gf_CreateDialogItemImage(gv_foodVoteDialog, 64, 64, c_anchorCenter, -250, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_startingFoodVotesAmountfor150), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayStartingFoodVotesAmountsForEachone[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_foodVoteDialog, 64, 64, c_anchorCenter, 0, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_startingFoodVotesAmountfor250), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayStartingFoodVotesAmountsForEachone[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_foodVoteDialog, 64, 64, c_anchorCenter, 250, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_startingFoodVotesAmountfor350), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayStartingFoodVotesAmountsForEachone[3] = DialogControlLastCreated();
}

void gf_CreateandStartVoteForGameMode () {
    // Automatic Variable Declarations
    // Implementation
    gf_DialogCreateAEvo(500, 900, c_anchorCenter, 0, 0, true);
    gv_gameModeVoteDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 200, c_anchorTop, 0, 30, StringExternal("Param/Value/7BBBA9D3"), Color(62.35, 47.06, 33.33), false, 2.0);
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, -250, 0, null, null, true, "Assets\\Textures\\CTF Vote Icon.dds");
    gv_gameModeVoteButtonCTF = DialogControlLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, 0, 0, null, null, true, "Assets\\Textures\\NormalGameMode Vote Icon.dds");
    gv_gameModeVoteButtonNormal = DialogControlLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, 250, 0, null, null, true, "Assets\\Textures\\NYI Vote Icon.dds");
    gv_gameModeVoteButtonNYI = DialogControlLastCreated();
    gf_CalculateVotesForGameMode();
    TimerStart(gv_gameModeTimer, 7.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringToText(""), true, false);
    gv_gameModeTimerWindow = TimerWindowLastCreated();
    TimerWindowSetPosition(TimerWindowLastCreated(), 900, 800);
    TimerWindowSetGapWidth(TimerWindowLastCreated(), 100);
    TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(45.49, 33.33, 23.92), 0.0);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(16.86, 12.16, 8.24), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(30.20, 21.96, 15.69), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(39.22, 29.02, 20.78), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(50.20, 37.25, 26.67), 4);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(56.86, 42.35, 30.20), 5);
}

void gf_EndVoteForGameMode () {
    // Variable Declarations
    int lv_winnerAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_gameModeVoteEnded == false)) {
        gv_gameModeVoteEnded = true;
        DialogSetVisible(gv_gameModeVoteDialog, PlayerGroupAll(), false);
        TimerWindowShow(gv_gameModeTimerWindow, PlayerGroupAll(), false);
        if ((MaxI(gv_gameModeVotesAmountforCTF, gv_gameModeVotesAmountforNYI) > gv_gameModeVotesAmountforNormal)) {
            if ((gv_gameModeVotesAmountforCTF >= gv_gameModeVotesAmountforNYI)) {
                gv_gameModeChosen = "CTF";
                if (((gv_gameModeVotesAmountforCTF == gv_gameModeVotesAmountforNormal) || (gv_gameModeVotesAmountforCTF == gv_gameModeVotesAmountforNYI))) {
                    gv_gameModeVoteEndedwithTie = true;
                }

            }
            else {
                gv_gameModeChosen = "NYI";
                if (((gv_gameModeVotesAmountforNYI == gv_gameModeVotesAmountforNormal) || (gv_gameModeVotesAmountforNYI == gv_gameModeVotesAmountforCTF))) {
                    gv_gameModeVoteEndedwithTie = true;
                }

            }
        }
        else {
            gv_gameModeChosen = "Normal";
            if (((gv_gameModeVotesAmountforNormal == gv_gameModeVotesAmountforNYI) || (gv_gameModeVotesAmountforNormal == gv_gameModeVotesAmountforCTF))) {
                gv_gameModeVoteEndedwithTie = true;
            }

        }
    }

}

void gf_CalculateVotesForGameMode () {
    // Variable Declarations
    int lv_checkingPlayer;

    // Automatic Variable Declarations
    int autoD7BCC7A9_n;
    int autoD7BCC7A9_i;

    // Variable Initialization
    lv_checkingPlayer = 1;

    // Implementation
    if ((gv_calculatedGameModeVotesOnceAlready == true)) {
        DialogControlSetVisible(gv_displayGameModeVotesAmountsForEachone[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayGameModeVotesAmountsForEachone[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayGameModeVotesAmountsForEachone[3], PlayerGroupAll(), false);
    }

    gv_calculatedGameModeVotesOnceAlready = true;
    gv_gameModeVotesAmountforCTF = 0;
    gv_gameModeVotesAmountforNormal = 0;
    gv_gameModeVotesAmountforNYI = 0;
    autoD7BCC7A9_n = PlayerGroupCount(PlayerGroupActive());
    for (autoD7BCC7A9_i = 1; autoD7BCC7A9_i <= autoD7BCC7A9_n; autoD7BCC7A9_i += 1) {
        if ((PlayerType(lv_checkingPlayer) != c_playerTypeComputer)) {
            if ((gv_gameModeVoteOfPlayer[lv_checkingPlayer] == "CTF")) {
                gv_gameModeVotesAmountforCTF = (gv_gameModeVotesAmountforCTF + 1);
            }
            else if ((gv_gameModeVoteOfPlayer[lv_checkingPlayer] == "Normal")) {
                gv_gameModeVotesAmountforNormal = (gv_gameModeVotesAmountforNormal + 1);
            }
            else if ((gv_gameModeVoteOfPlayer[lv_checkingPlayer] == "NYI")) {
                gv_gameModeVotesAmountforNYI = (gv_gameModeVotesAmountforNYI + 1);
            }
        }

        lv_checkingPlayer = (lv_checkingPlayer + 1);
    }
    libNtve_gf_CreateDialogItemImage(gv_gameModeVoteDialog, 64, 64, c_anchorCenter, -250, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_gameModeVotesAmountforCTF), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayGameModeVotesAmountsForEachone[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_gameModeVoteDialog, 64, 64, c_anchorCenter, 0, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_gameModeVotesAmountforNormal), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayGameModeVotesAmountsForEachone[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_gameModeVoteDialog, 64, 64, c_anchorCenter, 250, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_gameModeVotesAmountforNYI), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayGameModeVotesAmountsForEachone[3] = DialogControlLastCreated();
}

void gf_InitiateMapGenVote () {
    // Variable Declarations
    int lv_winner;
    int lv_winnerCounter;
    int lv_max;
    int lv_index;
    int lv_repeater;
    bool[31] lv_booleanArray;

    // Automatic Variable Declarations
    const int auto3370A1CC_n = 60;
    int auto3370A1CC_i;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0026")) {
        gf_CreateMapGenvotedialog();
        TimerStart(gv_mapGenvoteTimer, 30.0, false, c_timeGame);
        TimerWindowCreate(TimerLastStarted(), StringExternal("Param/Value/5898009E"), true, false);
        gv_mapGenvoteTimerWindow = TimerWindowLastCreated();
        TimerWindowSetGapWidth(TimerWindowLastCreated(), 5);
        TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
        TimerWindowSetPosition(TimerWindowLastCreated(), 960, 800);
        TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
        TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(45.49, 33.33, 23.92), 0.0);
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(16.86, 12.16, 8.24), 1);
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(30.20, 21.96, 15.69), 2);
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(39.22, 29.02, 20.78), 3);
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(50.20, 37.25, 26.67), 4);
        TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(56.86, 42.35, 30.20), 5);
        for (auto3370A1CC_i = 1; auto3370A1CC_i <= auto3370A1CC_n; auto3370A1CC_i += 1) {
            if ((gv_mapLayoutVoteEnded == false)) {
                Wait(0.5, c_timeGame);
            }

        }
        gf_EndVoteForMapLayout();
    }

}

void gf_EndVoteForMapLayout () {
    // Variable Declarations
    int lv_winner;
    int lv_winnerCounter;
    int lv_max;
    int lv_index;
    int lv_repeater;
    bool[101] lv_booleanArray;

    // Automatic Variable Declarations
    int auto11D48051_ae;
    int auto11D48051_var;
    int autoF79496B3_ae;
    int autoF79496B3_var;
    int auto2A6A25E5_n;
    int auto2A6A25E5_i;

    // Variable Initialization

    // Implementation
    if ((gv_mapLayoutVoteEnded == false)) {
        gv_mapLayoutVoteEnded = true;
        DialogSetVisible(gv_mapGenvote, PlayerGroupActive(), false);
        TimerWindowShow(gv_mapGenvoteTimerWindow, PlayerGroupActive(), false);
        DialogSetVisible(gv_mapGenvote, PlayerGroupActive(), false);
        TimerWindowShow(gv_mapGenvoteTimerWindow, PlayerGroupActive(), false);
        gf_CalculateMapGenVoteVotes();
        gv_array[0] = gv_randomMapGenVoteVotes;
        gv_array[1] = gv_standardMapGenVoteVotes;
        gv_array[2] = gv_invertedMapGenVoteVotes;
        gv_array[3] = gv_islandsMapGenVoteVotes;
        gv_array[4] = gv_pondMapGenVoteVotes;
        gv_array[5] = gv_donutMapGenVoteVotes;
        gv_array[6] = gv_riverMapGenVoteVotes;
        gv_array[7] = gv_cavesMapGenVoteVotes;
        gv_array[8] = gv_crossMapGenVoteVotes;
        gv_array[9] = gv_streamsMapGenVoteVotes;
        gv_array[10] = gv_yinYangMapGenVoteVotes;
        gv_array[11] = gv_houseMapGenVoteVotes;
        gv_array[12] = gv_cloverleafMapGenVoteVotes;
        gv_array[13] = gv_gatesMapGenVoteVotes;
        gv_array[14] = gv_pillarsMapGenVoteVotes;
        gv_array[15] = gv_laybrinthMapGenVoteVotes;
        gv_array[16] = gv_clockMapGenVoteVotes;
        gv_array[17] = gv_pizzaMapGenVoteVotes;
        gv_array[18] = gv_radioactiveMapGenVoteVotes;
        gv_array[19] = gv_stripesMapGenVoteVotes;
        gv_array[20] = gv_hexMapGenVoteVotes;
        gv_array[21] = gv_octagonMapGenVoteVotes;
        gv_array[22] = gv_pongMapGenVoteVotes;
        gv_array[23] = gv_wheelMapGenVoteVotes;
        gv_array[24] = gv_rubberWheelMapGenVoteVotes;
        gv_array[25] = gv_chambersMapGenVoteVotes;
        gv_array[26] = gv_hourglassMapGenVoteVotes;
        gv_array[27] = gv_bunkerMapGenVoteVotes;
        gv_array[28] = gv_heartbeatMapGenVoteVotes;
        gv_array[29] = gv_cheeseMapGenVoteVotes;
        gv_array[30] = gv_chipMapGenVoteVotes;
        gv_array[31] = gv_antFarmMapGenVoteVotes;
        gv_array[32] = gv_duelCircleMapGenVoteVotes;
        gv_array[33] = gv_openWheelMapGenVoteVotes;
        gv_array[34] = gv_threatMapGenVoteVotes;
        gv_array[35] = gv_eyeMapGenVoteVotes;
        gv_array[36] = gv_compassMapGenVoteVotes;
        gv_array[37] = gv_chokeMapGenVoteVotes;
        gv_array[38] = gv_tearDropMapGenVoteVotes;
        gv_array[39] = gv_ravineMapGenVoteVotes;
        gv_array[40] = gv_twirlMapGenVoteVotes;
        gv_array[41] = gv_invertedChokeMapGenVoteVotes;
        auto11D48051_ae = gv_currentMaxMapGenValue;
        auto11D48051_var = 0;
        for ( ; auto11D48051_var <= auto11D48051_ae; auto11D48051_var += 1 ) {
            if ((gv_array[auto11D48051_var] == lv_max)) {
                lv_booleanArray[auto11D48051_var] = true;
            }
            else {
                if ((gv_array[auto11D48051_var] > lv_max)) {
                    autoF79496B3_ae = gv_currentMaxMapGenValue;
                    autoF79496B3_var = 0;
                    for ( ; autoF79496B3_var <= autoF79496B3_ae; autoF79496B3_var += 1 ) {
                        lv_booleanArray[autoF79496B3_var] = false;
                    }
                    lv_max = gv_array[auto11D48051_var];
                    lv_booleanArray[auto11D48051_var] = true;
                }

            }
        }
        auto2A6A25E5_n = (gv_currentMaxMapGenValue + 1);
        for (auto2A6A25E5_i = 1; auto2A6A25E5_i <= auto2A6A25E5_n; auto2A6A25E5_i += 1) {
            if ((lv_booleanArray[lv_repeater] == true)) {
                lv_winner = lv_repeater;
                lv_winnerCounter = (lv_winnerCounter + 1);
            }

            lv_repeater = (lv_repeater + 1);
        }
        if (((lv_winnerCounter == 1) && (lv_winner != 0))) {
            gv_MapGen = lv_winner;
        }
        else {
            gv_generateRandomMap = true;
            gv_useMapPriority = true;
            gf_DebuggingTextMessageFromString(c_messageAreaDebug, Color(100.00, 71.76, 19.22), "Tie or Random Victory! setting to random.");
        }
    }

}

void gf_CreateMapGenvotedialog () {
    // Variable Declarations
    int lv_sizeofLayoutVoteDialogH;
    int lv_sizeofLayoutVoteDialogW;
    int lv_buttonsExpectedtoappear;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sizeofLayoutVoteDialogH = 500;
    lv_sizeofLayoutVoteDialogW = 1600;
    lv_buttonsExpectedtoappear = gf_MapGenvoteReturnamountofbuttonsexpectedtoappear();

    // Implementation
    if ((lv_buttonsExpectedtoappear >= 30)) {
        gv_xOffsetlocationofChoiceButtonMapGenVote = -675;
        gv_yOffsetlocationofChoiceButtonMapGenVote = -225;
        lv_sizeofLayoutVoteDialogH = 650;
        lv_sizeofLayoutVoteDialogW = 1600;
    }
    else if ((lv_buttonsExpectedtoappear >= 20)) {
        gv_xOffsetlocationofChoiceButtonMapGenVote = -675;
        gv_yOffsetlocationofChoiceButtonMapGenVote = -150;
        lv_sizeofLayoutVoteDialogH = 500;
        lv_sizeofLayoutVoteDialogW = 1600;
    }
    else if ((lv_buttonsExpectedtoappear >= 10)) {
        gv_xOffsetlocationofChoiceButtonMapGenVote = -675;
        gv_yOffsetlocationofChoiceButtonMapGenVote = -75;
        lv_sizeofLayoutVoteDialogH = 350;
        lv_sizeofLayoutVoteDialogW = 1600;
    }
    else if ((lv_buttonsExpectedtoappear <= 9)) {
        gv_xOffsetlocationofChoiceButtonMapGenVote = ((lv_buttonsExpectedtoappear / 2) * -150);
        gv_yOffsetlocationofChoiceButtonMapGenVote = 0;
        lv_sizeofLayoutVoteDialogH = 200;
        lv_sizeofLayoutVoteDialogW = 1600;
        lv_sizeofLayoutVoteDialogW = ((lv_buttonsExpectedtoappear * 150) + 100);
    }
    gf_DialogCreateAEvo(lv_sizeofLayoutVoteDialogH, lv_sizeofLayoutVoteDialogW, c_anchorCenter, 0, -100, true);
    gv_mapGenvote = DialogLastCreated();
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Random");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Standard");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Inverted");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Islands");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Pond");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Donut");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "River");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Caves");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Cross");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Streams");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Yin Yang");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "House");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Cloverleaf");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Gates");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Pillars");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Labyrinth");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Clock");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Pizza");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Radioactive");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Stripes");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Hex");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Octagon");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Pong");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Wheel");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Rubber Wheel");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Chambers");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Hourglass");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Bunker");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Heartbeat");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Cheese");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Chip");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "AntFarm");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "DuelCircle");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Open Wheel");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Threat");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Eye");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Compass");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Choke");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Teardrop");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Ravine");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "Twirl");
    gf_CreateMapGenvoteChoiceButton(gv_xOffsetlocationofChoiceButtonMapGenVote, gv_yOffsetlocationofChoiceButtonMapGenVote, "InvertedChoke");
}

void gf_CreateMapGenvoteChoiceButton (int lp_xOffset, int lp_yOffset, string lp_mapGen) {
    // Variable Declarations
    bool lv_allowThisButtonToExist;
    int lv_votesforthisMapGen;
    string lv_imageForButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_allowThisButtonToExist = true;

    // Implementation
    gf_CalculateMapGenVoteVotes();
    if ((gv_gamehasAIinit == true)) {
        if ((gf_isthisLayoutBadforAIgames(gf_ConvertMapLayoutnameintoMapGenInt(lp_mapGen)) == true)) {
            lv_allowThisButtonToExist = false;
        }

    }

    if ((gf_isthisLayoutbadforthisTeamcase(gf_ConvertMapLayoutnameintoMapGenInt(lp_mapGen)) == true)) {
        lv_allowThisButtonToExist = false;
    }

    if ((lv_allowThisButtonToExist == true)) {
        if ((lp_mapGen == "Random")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Random.tga";
        }
        else if ((lp_mapGen == "Standard")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Standard.tga";
        }
        else if ((lp_mapGen == "Inverted")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Inverted.tga";
        }
        else if ((lp_mapGen == "Islands")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Islands.tga";
        }
        else if ((lp_mapGen == "Pond")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Pond.tga";
        }
        else if ((lp_mapGen == "Donut")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Donut.tga";
        }
        else if ((lp_mapGen == "River")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\River.tga";
        }
        else if ((lp_mapGen == "Caves")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Caves.tga";
        }
        else if ((lp_mapGen == "Cross")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Cross.tga";
        }
        else if ((lp_mapGen == "Streams")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Streams.tga";
        }
        else if ((lp_mapGen == "Yin Yang")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Yin Yang.tga";
        }
        else if ((lp_mapGen == "House")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\House.tga";
        }
        else if ((lp_mapGen == "Cloverleaf")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\CloverLeaf.tga";
        }
        else if ((lp_mapGen == "Gates")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Gates.tga";
        }
        else if ((lp_mapGen == "Pillars")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Pillars.tga";
        }
        else if ((lp_mapGen == "Labyrinth")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Labyrinth.tga";
        }
        else if ((lp_mapGen == "Clock")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Clock.tga";
        }
        else if ((lp_mapGen == "Pizza")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\pizza.tga";
        }
        else if ((lp_mapGen == "Radioactive")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\RadioActive.tga";
        }
        else if ((lp_mapGen == "Stripes")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Stripes.tga";
        }
        else if ((lp_mapGen == "Hex")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Hex.tga";
        }
        else if ((lp_mapGen == "Octagon")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Octagon.tga";
        }
        else if ((lp_mapGen == "Pong")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Pong.tga";
        }
        else if ((lp_mapGen == "Wheel")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Wheel.tga";
        }
        else if ((lp_mapGen == "Rubber Wheel")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Rubber Wheel.tga";
        }
        else if ((lp_mapGen == "Chambers")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Chambers.tga";
        }
        else if ((lp_mapGen == "Hourglass")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Hourglass.tga";
        }
        else if ((lp_mapGen == "Bunker")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Bunker.tga";
        }
        else if ((lp_mapGen == "Heartbeat")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\heartBeat.tga";
        }
        else if ((lp_mapGen == "Cheese")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Cheese.tga";
        }
        else if ((lp_mapGen == "Chip")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Chip.tga";
        }
        else if ((lp_mapGen == "AntFarm")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\AntFarm.tga";
        }
        else if ((lp_mapGen == "DuelCircle")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\DuelCircle.tga";
        }
        else if ((lp_mapGen == "Open Wheel")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Open Wheel.tga";
        }
        else if ((lp_mapGen == "Threat")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Threat.tga";
        }
        else if ((lp_mapGen == "Eye")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Eye.tga";
        }
        else if ((lp_mapGen == "Compass")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Compass.tga";
        }
        else if ((lp_mapGen == "Choke")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Choke.tga";
        }
        else if ((lp_mapGen == "Teardrop")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Teardrop.tga";
        }
        else if ((lp_mapGen == "Ravine")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Ravine.tga";
        }
        else if ((lp_mapGen == "Twirl")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\Twirl.tga";
        }
        else if ((lp_mapGen == "InvertedChoke")) {
            lv_imageForButton = "Assets\\Textures\\MapGenImages\\InvertedChoke.tga";
        }
        gf_ButtonCreateAEvo(DialogLastCreated(), 150, 150, c_anchorCenter, lp_xOffset, lp_yOffset, null, null, true, lv_imageForButton);
        if ((lp_mapGen == "Random")) {
            gv_randomMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Standard")) {
            gv_standardMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Inverted")) {
            gv_invertedMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Islands")) {
            gv_islandsMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pond")) {
            gv_pondMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Donut")) {
            gv_donutMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "River")) {
            gv_riverMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Caves")) {
            gv_cavesMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Cross")) {
            gv_crossMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Streams")) {
            gv_streamsMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Yin Yang")) {
            gv_yinYangMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "House")) {
            gv_houseMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Cloverleaf")) {
            gv_cloverleafMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Gates")) {
            gv_gatesMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pillars")) {
            gv_pillarsMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Labyrinth")) {
            gv_labyrinthMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Clock")) {
            gv_clockMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pizza")) {
            gv_pizzaMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Radioactive")) {
            gv_radioactiveMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Stripes")) {
            gv_stripesMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Hex")) {
            gv_hexMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Octagon")) {
            gv_octagonMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pong")) {
            gv_pongMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Wheel")) {
            gv_wheelMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Rubber Wheel")) {
            gv_rubberWheelMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Chambers")) {
            gv_chambersMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Hourglass")) {
            gv_hourglassMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Bunker")) {
            gv_bunkerMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Heartbeat")) {
            gv_heartbeatMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Cheese")) {
            gv_cheeseMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Chip")) {
            gv_chipMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "AntFarm")) {
            gv_antFarmMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "DuelCircle")) {
            gv_duelCircleMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Open Wheel")) {
            gv_openWheelMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Threat")) {
            gv_threatMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Eye")) {
            gv_eyeMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Compass")) {
            gv_compassMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Choke")) {
            gv_chokeMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Teardrop")) {
            gv_teardropMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Ravine")) {
            gv_ravineMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Twirl")) {
            gv_twirlMapGenVoteItem[0] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "InvertedChoke")) {
            gv_invertedChokeMapGenVoteItem[0] = DialogControlLastCreated();
        }
        if ((lp_mapGen == "Random")) {
            lv_votesforthisMapGen = gv_randomMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Standard")) {
            lv_votesforthisMapGen = gv_standardMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Inverted")) {
            lv_votesforthisMapGen = gv_invertedMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Islands")) {
            lv_votesforthisMapGen = gv_islandsMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Pond")) {
            lv_votesforthisMapGen = gv_pondMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Donut")) {
            lv_votesforthisMapGen = gv_donutMapGenVoteVotes;
        }
        else if ((lp_mapGen == "River")) {
            lv_votesforthisMapGen = gv_riverMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Caves")) {
            lv_votesforthisMapGen = gv_cavesMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Cross")) {
            lv_votesforthisMapGen = gv_crossMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Streams")) {
            lv_votesforthisMapGen = gv_streamsMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Yin Yang")) {
            lv_votesforthisMapGen = gv_yinYangMapGenVoteVotes;
        }
        else if ((lp_mapGen == "House")) {
            lv_votesforthisMapGen = gv_houseMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Cloverleaf")) {
            lv_votesforthisMapGen = gv_cloverleafMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Gates")) {
            lv_votesforthisMapGen = gv_gatesMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Pillars")) {
            lv_votesforthisMapGen = gv_pillarsMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Labyrinth")) {
            lv_votesforthisMapGen = gv_laybrinthMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Clock")) {
            lv_votesforthisMapGen = gv_clockMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Pizza")) {
            lv_votesforthisMapGen = gv_pizzaMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Radioactive")) {
            lv_votesforthisMapGen = gv_radioactiveMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Stripes")) {
            lv_votesforthisMapGen = gv_stripesMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Hex")) {
            lv_votesforthisMapGen = gv_hexMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Octagon")) {
            lv_votesforthisMapGen = gv_octagonMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Pong")) {
            lv_votesforthisMapGen = gv_pongMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Wheel")) {
            lv_votesforthisMapGen = gv_wheelMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Rubber Wheel")) {
            lv_votesforthisMapGen = gv_rubberWheelMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Chambers")) {
            lv_votesforthisMapGen = gv_chambersMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Hourglass")) {
            lv_votesforthisMapGen = gv_hourglassMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Bunker")) {
            lv_votesforthisMapGen = gv_bunkerMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Heartbeat")) {
            lv_votesforthisMapGen = gv_heartbeatMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Cheese")) {
            lv_votesforthisMapGen = gv_cheeseMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Chip")) {
            lv_votesforthisMapGen = gv_chipMapGenVoteVotes;
        }
        else if ((lp_mapGen == "AntFarm")) {
            lv_votesforthisMapGen = gv_antFarmMapGenVoteVotes;
        }
        else if ((lp_mapGen == "DuelCircle")) {
            lv_votesforthisMapGen = gv_duelCircleMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Open Wheel")) {
            lv_votesforthisMapGen = gv_openWheelMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Threat")) {
            lv_votesforthisMapGen = gv_threatMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Eye")) {
            lv_votesforthisMapGen = gv_eyeMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Compass")) {
            lv_votesforthisMapGen = gv_compassMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Choke")) {
            lv_votesforthisMapGen = gv_chokeMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Teardrop")) {
            lv_votesforthisMapGen = gv_tearDropMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Ravine")) {
            lv_votesforthisMapGen = gv_ravineMapGenVoteVotes;
        }
        else if ((lp_mapGen == "Twirl")) {
            lv_votesforthisMapGen = gv_twirlMapGenVoteVotes;
        }
        else if ((lp_mapGen == "InvertedChoke")) {
            lv_votesforthisMapGen = gv_invertedChokeMapGenVoteVotes;
        }
        libNtve_gf_CreateDialogItemImage(gv_mapGenvote, 64, 64, c_anchorCenter, (lp_xOffset - 65), (lp_yOffset - 65), StringToText(""), gf_ReturnNumberAs64x64Image(lv_votesforthisMapGen), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
        if ((lp_mapGen == "Random")) {
            gv_randomMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Standard")) {
            gv_standardMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Inverted")) {
            gv_invertedMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Islands")) {
            gv_islandsMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pond")) {
            gv_pondMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Donut")) {
            gv_donutMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "River")) {
            gv_riverMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Caves")) {
            gv_cavesMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Cross")) {
            gv_crossMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Streams")) {
            gv_streamsMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Yin Yang")) {
            gv_yinYangMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "House")) {
            gv_houseMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Cloverleaf")) {
            gv_cloverleafMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Gates")) {
            gv_gatesMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pillars")) {
            gv_pillarsMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Labyrinth")) {
            gv_labyrinthMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Clock")) {
            gv_clockMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pizza")) {
            gv_pizzaMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Radioactive")) {
            gv_radioactiveMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Stripes")) {
            gv_stripesMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Hex")) {
            gv_hexMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Octagon")) {
            gv_octagonMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Pong")) {
            gv_pongMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Wheel")) {
            gv_wheelMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Rubber Wheel")) {
            gv_rubberWheelMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Chambers")) {
            gv_chambersMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Hourglass")) {
            gv_hourglassMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Bunker")) {
            gv_bunkerMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Heartbeat")) {
            gv_heartbeatMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Cheese")) {
            gv_cheeseMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Chip")) {
            gv_chipMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "AntFarm")) {
            gv_antFarmMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "DuelCircle")) {
            gv_duelCircleMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Open Wheel")) {
            gv_openWheelMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Threat")) {
            gv_threatMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Eye")) {
            gv_eyeMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Compass")) {
            gv_compassMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Choke")) {
            gv_chokeMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Teardrop")) {
            gv_teardropMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Ravine")) {
            gv_ravineMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "Twirl")) {
            gv_twirlMapGenVoteItem[1] = DialogControlLastCreated();
        }
        else if ((lp_mapGen == "InvertedChoke")) {
            gv_invertedChokeMapGenVoteItem[1] = DialogControlLastCreated();
        }
        if (((gv_amountofChoiceButtonMapGenVoteButtonsPlaced == 10) || (gv_amountofChoiceButtonMapGenVoteButtonsPlaced == 20) || (gv_amountofChoiceButtonMapGenVoteButtonsPlaced == 30) || (gv_amountofChoiceButtonMapGenVoteButtonsPlaced == 40))) {
            gv_yOffsetlocationofChoiceButtonMapGenVote = (gv_yOffsetlocationofChoiceButtonMapGenVote + 150);
            gv_xOffsetlocationofChoiceButtonMapGenVote = -675;
        }
        else {
            gv_xOffsetlocationofChoiceButtonMapGenVote = (gv_xOffsetlocationofChoiceButtonMapGenVote + 150);
        }
        gv_amountofChoiceButtonMapGenVoteButtonsPlaced = (gv_amountofChoiceButtonMapGenVoteButtonsPlaced + 1);
        gv_mapGenVoteButtonAmount = (gv_mapGenVoteButtonAmount + 1);
    }

}

int gf_ConvertMapLayoutnameintoMapGenInt (string lp_mapLayoutname) {
    // Variable Declarations
    int lv_mapGenInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_mapLayoutname == "Standard")) {
        lv_mapGenInt = 1;
    }
    else if ((lp_mapLayoutname == "Inverted")) {
        lv_mapGenInt = 2;
    }
    else if ((lp_mapLayoutname == "Islands")) {
        lv_mapGenInt = 3;
    }
    else if ((lp_mapLayoutname == "Pond")) {
        lv_mapGenInt = 4;
    }
    else if ((lp_mapLayoutname == "Donut")) {
        lv_mapGenInt = 5;
    }
    else if ((lp_mapLayoutname == "River")) {
        lv_mapGenInt = 6;
    }
    else if ((lp_mapLayoutname == "Caves")) {
        lv_mapGenInt = 7;
    }
    else if ((lp_mapLayoutname == "Cross")) {
        lv_mapGenInt = 8;
    }
    else if ((lp_mapLayoutname == "Streams")) {
        lv_mapGenInt = 9;
    }
    else if ((lp_mapLayoutname == "Yin Yang")) {
        lv_mapGenInt = 10;
    }
    else if ((lp_mapLayoutname == "House")) {
        lv_mapGenInt = 11;
    }
    else if ((lp_mapLayoutname == "Cloverleaf")) {
        lv_mapGenInt = 12;
    }
    else if ((lp_mapLayoutname == "Gates")) {
        lv_mapGenInt = 13;
    }
    else if ((lp_mapLayoutname == "Pillars")) {
        lv_mapGenInt = 14;
    }
    else if ((lp_mapLayoutname == "Labyrinth")) {
        lv_mapGenInt = 15;
    }
    else if ((lp_mapLayoutname == "Clock")) {
        lv_mapGenInt = 16;
    }
    else if ((lp_mapLayoutname == "Pizza")) {
        lv_mapGenInt = 17;
    }
    else if ((lp_mapLayoutname == "Radioactive")) {
        lv_mapGenInt = 18;
    }
    else if ((lp_mapLayoutname == "Stripes")) {
        lv_mapGenInt = 19;
    }
    else if ((lp_mapLayoutname == "Hex")) {
        lv_mapGenInt = 20;
    }
    else if ((lp_mapLayoutname == "Octagon")) {
        lv_mapGenInt = 21;
    }
    else if ((lp_mapLayoutname == "Pong")) {
        lv_mapGenInt = 22;
    }
    else if ((lp_mapLayoutname == "Wheel")) {
        lv_mapGenInt = 23;
    }
    else if ((lp_mapLayoutname == "Rubber Wheel")) {
        lv_mapGenInt = 24;
    }
    else if ((lp_mapLayoutname == "Chambers")) {
        lv_mapGenInt = 25;
    }
    else if ((lp_mapLayoutname == "Hourglass")) {
        lv_mapGenInt = 26;
    }
    else if ((lp_mapLayoutname == "Bunker")) {
        lv_mapGenInt = 27;
    }
    else if ((lp_mapLayoutname == "Heartbeat")) {
        lv_mapGenInt = 28;
    }
    else if ((lp_mapLayoutname == "Cheese")) {
        lv_mapGenInt = 29;
    }
    else if ((lp_mapLayoutname == "Chip")) {
        lv_mapGenInt = 30;
    }
    else if ((lp_mapLayoutname == "AntFarm")) {
        lv_mapGenInt = 31;
    }
    else if ((lp_mapLayoutname == "DuelCircle")) {
        lv_mapGenInt = 32;
    }
    else if ((lp_mapLayoutname == "Open Wheel")) {
        lv_mapGenInt = 33;
    }
    else if ((lp_mapLayoutname == "Threat")) {
        lv_mapGenInt = 34;
    }
    else if ((lp_mapLayoutname == "Eye")) {
        lv_mapGenInt = 35;
    }
    else if ((lp_mapLayoutname == "Compass")) {
        lv_mapGenInt = 36;
    }
    else if ((lp_mapLayoutname == "Choke")) {
        lv_mapGenInt = 37;
    }
    else if ((lp_mapLayoutname == "Teardrop")) {
        lv_mapGenInt = 38;
    }
    else if ((lp_mapLayoutname == "Ravine")) {
        lv_mapGenInt = 39;
    }
    else if ((lp_mapLayoutname == "Twirl")) {
        lv_mapGenInt = 40;
    }
    else if ((lp_mapLayoutname == "InvertedChoke")) {
        lv_mapGenInt = 41;
    }
    return lv_mapGenInt;
}

string gf_ConvertMapMapGenInintoLayoutname (int lp_mapGenNumber) {
    // Variable Declarations
    string lv_layoutname;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_layoutname = "None Found";

    // Implementation
    if ((lp_mapGenNumber == 1)) {
        lv_layoutname = "Standard";
    }
    else if ((lp_mapGenNumber == 2)) {
        lv_layoutname = "Inverted";
    }
    else if ((lp_mapGenNumber == 3)) {
        lv_layoutname = "Islands";
    }
    else if ((lp_mapGenNumber == 4)) {
        lv_layoutname = "Pond";
    }
    else if ((lp_mapGenNumber == 5)) {
        lv_layoutname = "Donut";
    }
    else if ((lp_mapGenNumber == 6)) {
        lv_layoutname = "River";
    }
    else if ((lp_mapGenNumber == 7)) {
        lv_layoutname = "Caves";
    }
    else if ((lp_mapGenNumber == 8)) {
        lv_layoutname = "Cross";
    }
    else if ((lp_mapGenNumber == 9)) {
        lv_layoutname = "Streams";
    }
    else if ((lp_mapGenNumber == 10)) {
        lv_layoutname = "Yin Yang";
    }
    else if ((lp_mapGenNumber == 11)) {
        lv_layoutname = "House";
    }
    else if ((lp_mapGenNumber == 12)) {
        lv_layoutname = "Cloverleaf";
    }
    else if ((lp_mapGenNumber == 13)) {
        lv_layoutname = "Gates";
    }
    else if ((lp_mapGenNumber == 14)) {
        lv_layoutname = "Pillars";
    }
    else if ((lp_mapGenNumber == 15)) {
        lv_layoutname = "Labyrinth";
    }
    else if ((lp_mapGenNumber == 16)) {
        lv_layoutname = "Clock";
    }
    else if ((lp_mapGenNumber == 17)) {
        lv_layoutname = "Pizza";
    }
    else if ((lp_mapGenNumber == 18)) {
        lv_layoutname = "Radioactive";
    }
    else if ((lp_mapGenNumber == 19)) {
        lv_layoutname = "Stripes";
    }
    else if ((lp_mapGenNumber == 20)) {
        lv_layoutname = "Hex";
    }
    else if ((lp_mapGenNumber == 21)) {
        lv_layoutname = "Octagon";
    }
    else if ((lp_mapGenNumber == 22)) {
        lv_layoutname = "Pong";
    }
    else if ((lp_mapGenNumber == 23)) {
        lv_layoutname = "Wheel";
    }
    else if ((lp_mapGenNumber == 24)) {
        lv_layoutname = "Rubber Wheel";
    }
    else if ((lp_mapGenNumber == 25)) {
        lv_layoutname = "Chambers";
    }
    else if ((lp_mapGenNumber == 26)) {
        lv_layoutname = "Hourglass";
    }
    else if ((lp_mapGenNumber == 27)) {
        lv_layoutname = "Bunker";
    }
    else if ((lp_mapGenNumber == 28)) {
        lv_layoutname = "Heartbeat";
    }
    else if ((lp_mapGenNumber == 29)) {
        lv_layoutname = "Cheese";
    }
    else if ((lp_mapGenNumber == 30)) {
        lv_layoutname = "Chip";
    }
    else if ((lp_mapGenNumber == 31)) {
        lv_layoutname = "AntFarm";
    }
    else if ((lp_mapGenNumber == 32)) {
        lv_layoutname = "DuelCircle";
    }
    else if ((lp_mapGenNumber == 33)) {
        lv_layoutname = "Open Wheel";
    }
    else if ((lp_mapGenNumber == 34)) {
        lv_layoutname = "Threat";
    }
    else if ((lp_mapGenNumber == 35)) {
        lv_layoutname = "Eye";
    }
    else if ((lp_mapGenNumber == 36)) {
        lv_layoutname = "Compass";
    }
    else if ((lp_mapGenNumber == 37)) {
        lv_layoutname = "Choke";
    }
    else if ((lp_mapGenNumber == 38)) {
        lv_layoutname = "Teardrop";
    }
    else if ((lp_mapGenNumber == 39)) {
        lv_layoutname = "Ravine";
    }
    else if ((lp_mapGenNumber == 40)) {
        lv_layoutname = "Twirl";
    }
    else if ((lp_mapGenNumber == 41)) {
        lv_layoutname = "InvertedChoke";
    }
    return lv_layoutname;
}

int gf_MapGenvoteReturnamountofbuttonsexpectedtoappear () {
    int init_i;

    // Variable Declarations
    int lv_buttonsExpectedtoappear;
    int lv_repeater;
    bool[101] lv_allowThisButtonToExist;

    // Automatic Variable Declarations
    int autoAF8BEF41_n;
    int autoAF8BEF41_i;

    // Variable Initialization
    for (init_i = 0; init_i <= 100; init_i += 1) {
        lv_allowThisButtonToExist[init_i] = true;
    }

    // Implementation
    autoAF8BEF41_n = (gv_currentMaxMapGenValue + 1);
    for (autoAF8BEF41_i = 1; autoAF8BEF41_i <= autoAF8BEF41_n; autoAF8BEF41_i += 1) {
        if ((gv_gamehasAIinit == true)) {
            if ((gf_isthisLayoutBadforAIgames(lv_repeater) == true)) {
                lv_allowThisButtonToExist[lv_repeater] = false;
            }

        }

        if ((gf_isthisLayoutbadforthisTeamcase(lv_repeater) == true)) {
            lv_allowThisButtonToExist[lv_repeater] = false;
        }

        if ((lv_allowThisButtonToExist[lv_repeater] == true)) {
            lv_buttonsExpectedtoappear = (lv_buttonsExpectedtoappear + 1);
        }

        lv_repeater = (lv_repeater + 1);
    }
    return lv_buttonsExpectedtoappear;
}

void gf_CalculateMapGenVoteVotes () {
    // Automatic Variable Declarations
    playergroup auto9C634F57_g;
    int auto9C634F57_var;

    // Implementation
    gv_randomMapGenVoteVotes = 0;
    gv_standardMapGenVoteVotes = 0;
    gv_invertedMapGenVoteVotes = 0;
    gv_islandsMapGenVoteVotes = 0;
    gv_pondMapGenVoteVotes = 0;
    gv_donutMapGenVoteVotes = 0;
    gv_riverMapGenVoteVotes = 0;
    gv_cavesMapGenVoteVotes = 0;
    gv_crossMapGenVoteVotes = 0;
    gv_streamsMapGenVoteVotes = 0;
    gv_yinYangMapGenVoteVotes = 0;
    gv_houseMapGenVoteVotes = 0;
    gv_cloverleafMapGenVoteVotes = 0;
    gv_gatesMapGenVoteVotes = 0;
    gv_pillarsMapGenVoteVotes = 0;
    gv_laybrinthMapGenVoteVotes = 0;
    gv_clockMapGenVoteVotes = 0;
    gv_pizzaMapGenVoteVotes = 0;
    gv_radioactiveMapGenVoteVotes = 0;
    gv_stripesMapGenVoteVotes = 0;
    gv_hexMapGenVoteVotes = 0;
    gv_octagonMapGenVoteVotes = 0;
    gv_pongMapGenVoteVotes = 0;
    gv_wheelMapGenVoteVotes = 0;
    gv_rubberWheelMapGenVoteVotes = 0;
    gv_chambersMapGenVoteVotes = 0;
    gv_hourglassMapGenVoteVotes = 0;
    gv_bunkerMapGenVoteVotes = 0;
    gv_heartbeatMapGenVoteVotes = 0;
    gv_cheeseMapGenVoteVotes = 0;
    gv_chipMapGenVoteVotes = 0;
    gv_antFarmMapGenVoteVotes = 0;
    gv_duelCircleMapGenVoteVotes = 0;
    gv_openWheelMapGenVoteVotes = 0;
    gv_threatMapGenVoteVotes = 0;
    gv_eyeMapGenVoteVotes = 0;
    gv_compassMapGenVoteVotes = 0;
    gv_chokeMapGenVoteVotes = 0;
    gv_tearDropMapGenVoteVotes = 0;
    gv_ravineMapGenVoteVotes = 0;
    gv_twirlMapGenVoteVotes = 0;
    gv_invertedChokeMapGenVoteVotes = 0;
    auto9C634F57_g = PlayerGroupActive();
    auto9C634F57_var = -1;
    while (true) {
        auto9C634F57_var = PlayerGroupNextPlayer(auto9C634F57_g, auto9C634F57_var);
        if (auto9C634F57_var < 0) { break; }
        if ((PlayerType(auto9C634F57_var) != c_playerTypeComputer)) {
            if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Random")) {
                gv_randomMapGenVoteVotes = (gv_randomMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Standard")) {
                gv_standardMapGenVoteVotes = (gv_standardMapGenVoteVotes + 2);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Inverted")) {
                gv_invertedMapGenVoteVotes = (gv_invertedMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Islands")) {
                gv_islandsMapGenVoteVotes = (gv_islandsMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Pond")) {
                gv_pondMapGenVoteVotes = (gv_pondMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Donut")) {
                gv_donutMapGenVoteVotes = (gv_donutMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "River")) {
                gv_riverMapGenVoteVotes = (gv_riverMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Caves")) {
                gv_cavesMapGenVoteVotes = (gv_cavesMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Cross")) {
                gv_crossMapGenVoteVotes = (gv_crossMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Streams")) {
                gv_streamsMapGenVoteVotes = (gv_streamsMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Yin Yang")) {
                gv_yinYangMapGenVoteVotes = (gv_yinYangMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "House")) {
                gv_houseMapGenVoteVotes = (gv_houseMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Cloverleaf")) {
                gv_cloverleafMapGenVoteVotes = (gv_cloverleafMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Gates")) {
                gv_gatesMapGenVoteVotes = (gv_gatesMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Pillars")) {
                gv_pillarsMapGenVoteVotes = (gv_pillarsMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Labyrinth")) {
                gv_laybrinthMapGenVoteVotes = (gv_laybrinthMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Clock")) {
                gv_clockMapGenVoteVotes = (gv_clockMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Pizza")) {
                gv_pizzaMapGenVoteVotes = (gv_pizzaMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Radioactive")) {
                gv_radioactiveMapGenVoteVotes = (gv_radioactiveMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Stripes")) {
                gv_stripesMapGenVoteVotes = (gv_stripesMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Hex")) {
                gv_hexMapGenVoteVotes = (gv_hexMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Octagon")) {
                gv_octagonMapGenVoteVotes = (gv_octagonMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Pong")) {
                gv_pongMapGenVoteVotes = (gv_pongMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Wheel")) {
                gv_wheelMapGenVoteVotes = (gv_wheelMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Rubber Wheel")) {
                gv_rubberWheelMapGenVoteVotes = (gv_rubberWheelMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Chambers")) {
                gv_chambersMapGenVoteVotes = (gv_chambersMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Hourglass")) {
                gv_hourglassMapGenVoteVotes = (gv_hourglassMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Bunker")) {
                gv_bunkerMapGenVoteVotes = (gv_bunkerMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Heartbeat")) {
                gv_heartbeatMapGenVoteVotes = (gv_heartbeatMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Cheese")) {
                gv_cheeseMapGenVoteVotes = (gv_cheeseMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Chip")) {
                gv_chipMapGenVoteVotes = (gv_chipMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "AntFarm")) {
                gv_antFarmMapGenVoteVotes = (gv_antFarmMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "DuelCircle")) {
                gv_duelCircleMapGenVoteVotes = (gv_duelCircleMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Open Wheel")) {
                gv_openWheelMapGenVoteVotes = (gv_openWheelMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Threat")) {
                gv_threatMapGenVoteVotes = (gv_threatMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Eye")) {
                gv_eyeMapGenVoteVotes = (gv_eyeMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Compass")) {
                gv_compassMapGenVoteVotes = (gv_compassMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Choke")) {
                gv_chokeMapGenVoteVotes = (gv_chokeMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Teardrop")) {
                gv_tearDropMapGenVoteVotes = (gv_tearDropMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Ravine")) {
                gv_ravineMapGenVoteVotes = (gv_ravineMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "Twirl")) {
                gv_twirlMapGenVoteVotes = (gv_twirlMapGenVoteVotes + 1);
            }
            else if ((gv_voteOfPlayerInMapGenVote[auto9C634F57_var] == "InvertedChoke")) {
                gv_invertedChokeMapGenVoteVotes = (gv_invertedChokeMapGenVoteVotes + 1);
            }
        }

    }
}

void gf_StartVoteForMapPool () {
    // Automatic Variable Declarations
    // Implementation
    gf_DialogCreateAEvo(500, 600, c_anchorCenter, 0, 0, true);
    gv_mapPoolDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 200, c_anchorTop, 0, 30, StringExternal("Param/Value/86302BFC"), Color(62.35, 47.06, 33.33), false, 2.0);
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, -130, 0, null, null, true, "Include Dynamic Maps.dds");
    gv_mapPoolIncludeDynamic = DialogControlLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, 130, 0, null, null, true, "Dont Include Dynamic Maps.dds");
    gv_mapPoolDontIncludeDynamic = DialogControlLastCreated();
    gf_CalculateVotesForMapPool();
    TimerStart(gv_mapPoolTimer, 7.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringToText(""), true, false);
    gv_mapPoolTimerWindow = TimerWindowLastCreated();
    TimerWindowSetPosition(TimerWindowLastCreated(), 900, 800);
    TimerWindowSetGapWidth(TimerWindowLastCreated(), 100);
    TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(45.49, 33.33, 23.92), 0.0);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(16.86, 12.16, 8.24), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(30.20, 21.96, 15.69), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(39.22, 29.02, 20.78), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(50.20, 37.25, 26.67), 4);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(56.86, 42.35, 30.20), 5);
}

void gf_EndVoteForMapPool () {
    // Variable Declarations
    int lv_winnerAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((gv_mapPoolVoteEnded == false)) {
        gv_mapPoolVoteEnded = true;
        DialogSetVisible(gv_mapPoolDialog, PlayerGroupAll(), false);
        TimerWindowShow(gv_mapPoolTimerWindow, PlayerGroupAll(), false);
        if ((gv_mapPoolForDontIncludeDynamic > gv_mapPoolForIncludeDynamic)) {
            gv_filterOutDynamicMaps = true;
        }

    }

}

void gf_CalculateVotesForMapPool () {
    // Variable Declarations
    int lv_checkingPlayer;

    // Automatic Variable Declarations
    int auto8C8F42A6_n;
    int auto8C8F42A6_i;

    // Variable Initialization
    lv_checkingPlayer = 1;

    // Implementation
    if ((gv_calculatedMapPoolVotesOnceAlready == true)) {
        DialogControlSetVisible(gv_displayMapPoolAmountsForEachone[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayMapPoolAmountsForEachone[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayMapPoolAmountsForEachone[3], PlayerGroupAll(), false);
    }

    gv_calculatedMapPoolVotesOnceAlready = true;
    gv_mapPoolForIncludeDynamic = 0;
    gv_mapPoolForDontIncludeDynamic = 0;
    auto8C8F42A6_n = PlayerGroupCount(PlayerGroupActive());
    for (auto8C8F42A6_i = 1; auto8C8F42A6_i <= auto8C8F42A6_n; auto8C8F42A6_i += 1) {
        if ((PlayerType(lv_checkingPlayer) != c_playerTypeComputer)) {
            if ((gv_mapPoolVoteOfPlayer[lv_checkingPlayer] == "DynYes")) {
                gv_mapPoolForIncludeDynamic = (gv_mapPoolForIncludeDynamic + 1);
            }
            else if ((gv_mapPoolVoteOfPlayer[lv_checkingPlayer] == "DynNo")) {
                gv_mapPoolForDontIncludeDynamic = (gv_mapPoolForDontIncludeDynamic + 1);
            }
        }

        lv_checkingPlayer = (lv_checkingPlayer + 1);
    }
    libNtve_gf_CreateDialogItemImage(gv_mapPoolDialog, 64, 64, c_anchorCenter, -130, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_mapPoolForIncludeDynamic), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayMapPoolAmountsForEachone[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_mapPoolDialog, 64, 64, c_anchorCenter, 130, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_mapPoolForDontIncludeDynamic), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayMapPoolAmountsForEachone[2] = DialogControlLastCreated();
    gv_displayMapPoolAmountsForEachone[3] = DialogControlLastCreated();
}

void gf_StartVoteForRandomQueen () {
    // Automatic Variable Declarations
    // Implementation
    gf_DialogCreateAEvo(500, 600, c_anchorCenter, 0, 0, true);
    gv_randomQueenDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 200, c_anchorTop, 0, 30, StringExternal("Param/Value/6CAE8A50"), Color(62.35, 47.06, 33.33), false, 2.0);
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, -130, 0, null, null, true, "RandomQueenVoteRANDOM.dds");
    gv_forcePlayerstopickRandomQueen = DialogControlLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 200, 200, c_anchorCenter, 130, 0, null, null, true, "RandomQueenVotePICK.dds");
    gv_dontForceplayerstopickRandomQueen = DialogControlLastCreated();
    gf_CalculateVotesForRandomQueen();
    TimerStart(gv_randomQueenTimer, 7.0, false, c_timeGame);
    TimerWindowCreate(TimerLastStarted(), StringToText(""), true, false);
    gv_randomQueenTimerWindow = TimerWindowLastCreated();
    TimerWindowSetPosition(TimerWindowLastCreated(), 900, 800);
    TimerWindowSetGapWidth(TimerWindowLastCreated(), 100);
    TimerWindowShowProgressBar(TimerWindowLastCreated(), true);
    TimerWindowSetFormat(TimerWindowLastCreated(), StringToText("<sectotal/>"));
    TimerWindowSetColor(TimerWindowLastCreated(), c_timerWindowColorTime, Color(45.49, 33.33, 23.92), 0.0);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(16.86, 12.16, 8.24), 1);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(30.20, 21.96, 15.69), 2);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(39.22, 29.02, 20.78), 3);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(50.20, 37.25, 26.67), 4);
    TimerWindowSetProgressColor(TimerWindowLastCreated(), Color(56.86, 42.35, 30.20), 5);
}

void gf_EndVoteForRandomQueen () {
    // Variable Declarations
    int lv_winnerAmount;

    // Automatic Variable Declarations
    playergroup auto1E04360B_g;
    int auto1E04360B_var;

    // Variable Initialization

    // Implementation
    if ((gv_randomQueenVoteEnded == false)) {
        gv_randomQueenVoteEnded = true;
        DialogSetVisible(gv_randomQueenDialog, PlayerGroupAll(), false);
        TimerWindowShow(gv_randomQueenTimerWindow, PlayerGroupAll(), false);
        if ((gv_dontForceRandomQueenVotes < gv_forceRandomQueenVotes)) {
            gv_forceRandomQueen = true;
            auto1E04360B_g = PlayerGroupActive();
            auto1E04360B_var = -1;
            while (true) {
                auto1E04360B_var = PlayerGroupNextPlayer(auto1E04360B_g, auto1E04360B_var);
                if (auto1E04360B_var < 0) { break; }
                libNtve_gf_SetUpgradeLevelForPlayer(auto1E04360B_var, "VotedToForceRandomQueen", 1);
            }
        }

    }

}

void gf_CalculateVotesForRandomQueen () {
    // Variable Declarations
    int lv_checkingPlayer;

    // Automatic Variable Declarations
    int autoFEF8E4CA_n;
    int autoFEF8E4CA_i;

    // Variable Initialization
    lv_checkingPlayer = 1;

    // Implementation
    if ((gv_calculatedRandomQueenVotesOnceAlready == true)) {
        DialogControlSetVisible(gv_displayRandomQueenAmountsForEachone[1], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayRandomQueenAmountsForEachone[2], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_displayRandomQueenAmountsForEachone[3], PlayerGroupAll(), false);
    }

    gv_calculatedRandomQueenVotesOnceAlready = true;
    gv_forceRandomQueenVotes = 0;
    gv_dontForceRandomQueenVotes = 0;
    autoFEF8E4CA_n = PlayerGroupCount(PlayerGroupActive());
    for (autoFEF8E4CA_i = 1; autoFEF8E4CA_i <= autoFEF8E4CA_n; autoFEF8E4CA_i += 1) {
        if ((PlayerType(lv_checkingPlayer) != c_playerTypeComputer)) {
            if ((gv_randomQueenVoteOfPlayer[lv_checkingPlayer] == "ForceRandom")) {
                gv_forceRandomQueenVotes = (gv_forceRandomQueenVotes + 1);
            }
            else if ((gv_randomQueenVoteOfPlayer[lv_checkingPlayer] == "LetPick")) {
                gv_dontForceRandomQueenVotes = (gv_dontForceRandomQueenVotes + 1);
            }
        }

        lv_checkingPlayer = (lv_checkingPlayer + 1);
    }
    libNtve_gf_CreateDialogItemImage(gv_randomQueenDialog, 64, 64, c_anchorCenter, -130, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_forceRandomQueenVotes), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayRandomQueenAmountsForEachone[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_randomQueenDialog, 64, 64, c_anchorCenter, 130, 150, StringToText(""), gf_ReturnNumberAs64x64Image(gv_dontForceRandomQueenVotes), c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_displayRandomQueenAmountsForEachone[2] = DialogControlLastCreated();
    gv_displayRandomQueenAmountsForEachone[3] = DialogControlLastCreated();
}

void gf_CreateStartingUIBarImage () {
    // Automatic Variable Declarations
    playergroup autoBA8E4182_g;
    int autoBA8E4182_var;
    playergroup auto0E92480A_g;
    int auto0E92480A_var;
    playergroup auto01432452_g;
    int auto01432452_var;

    // Implementation
    DialogCreate(2135, 1210, c_anchorCenter, 0, 0, true);
    gv_playerUIBarDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    autoBA8E4182_g = PlayerGroupActive();
    autoBA8E4182_var = -1;
    while (true) {
        autoBA8E4182_var = PlayerGroupNextPlayer(autoBA8E4182_g, autoBA8E4182_var);
        if (autoBA8E4182_var < 0) { break; }
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 2135, 1210, c_anchorCenter, 0, 0, StringToText(""), gf_UIBarofPlayer(gv_playerUIChoice[autoBA8E4182_var]), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_playerUIImageDialog[autoBA8E4182_var] = DialogControlLastCreated();
        DialogControlSetVisible(gv_playerUIImageDialog[autoBA8E4182_var], PlayerGroupActive(), false);
    }
    auto0E92480A_g = PlayerGroupActive();
    auto0E92480A_var = -1;
    while (true) {
        auto0E92480A_var = PlayerGroupNextPlayer(auto0E92480A_g, auto0E92480A_var);
        if (auto0E92480A_var < 0) { break; }
        if ((gv_playerCustomGUIString[auto0E92480A_var] == "SC2GUI")) {
            DialogControlSetVisible(gv_playerUIImageDialog[auto0E92480A_var], PlayerGroupSingle(auto0E92480A_var), true);
        }

    }
    gf_DialogCreateAEvo(620, 300, c_anchorTopRight, 110, 80, false);
    gv_playerUIBarManuDialog = DialogLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 30, null, StringExternal("Param/Value/CE6A5D33"), false, null);
    gv_playerUIButtonManuDialogItem[1] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 110, null, StringExternal("Param/Value/17E1AEA9"), false, null);
    gv_playerUIButtonManuDialogItem[2] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 190, null, StringExternal("Param/Value/2EA0E1B6"), false, null);
    gv_playerUIButtonManuDialogItem[3] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 270, null, StringExternal("Param/Value/F8635CA4"), false, null);
    gv_playerUIButtonManuDialogItem[4] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 350, null, StringExternal("Param/Value/11F42023"), false, null);
    gv_playerUIButtonManuDialogItem[5] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 430, null, StringExternal("Param/Value/8958802C"), false, null);
    gv_playerUIButtonManuDialogItem[6] = DialogControlLastCreated();
    gf_ButtonCreateAEvo(gv_playerUIBarManuDialog, 80, 200, c_anchorTop, 0, 510, null, StringExternal("Param/Value/04B8499B"), false, null);
    gv_playerUIButtonManuDialogItem[7] = DialogControlLastCreated();
    auto01432452_g = PlayerGroupActive();
    auto01432452_var = -1;
    while (true) {
        auto01432452_var = PlayerGroupNextPlayer(auto01432452_g, auto01432452_var);
        if (auto01432452_var < 0) { break; }
        if ((gv_playerUIChoice[auto01432452_var] == "Default")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], true, PlayerGroupSingle(auto01432452_var));
        }
        else if ((gv_playerUIChoice[auto01432452_var] == "DAGGART")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], true, PlayerGroupSingle(auto01432452_var));
        }
        else if ((gv_playerUIChoice[auto01432452_var] == "CharHybrid")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], true, PlayerGroupSingle(auto01432452_var));
        }
        else if ((gv_playerUIChoice[auto01432452_var] == "Jungle")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], true, PlayerGroupSingle(auto01432452_var));
        }
        else if ((gv_playerUIChoice[auto01432452_var] == "Obsidian")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], true, PlayerGroupSingle(auto01432452_var));
        }
        else if ((gv_playerUIChoice[auto01432452_var] == "Loxley")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], true, PlayerGroupSingle(auto01432452_var));
        }
        else if ((gv_playerUIChoice[auto01432452_var] == "Acid Green")) {
            libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], true, PlayerGroupSingle(auto01432452_var));
        }
    }
    gf_DialogCreateAEvo(60, 60, c_anchorTopRight, 10, 180, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_ButtonCreateAEvo(DialogLastCreated(), 60, 60, c_anchorCenter, 0, 0, StringExternal("Param/Value/5E802194"), StringExternal("Param/Value/CCE3C7EB"), false, null);
    gv_toggleUIBarManu = DialogControlLastCreated();
}

string gf_UIBarofPlayer (string lp_uIImageofPlayer) {
    // Variable Declarations
    string lv_image;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_image = "Assets\\Textures\\UI Covers\\No Image.dds";

    // Implementation
    if ((lp_uIImageofPlayer == "Default")) {
        lv_image = "Assets\\Textures\\UI Covers\\No Image.dds";
    }
    else if ((lp_uIImageofPlayer == "DAGGART")) {
        lv_image = "Assets\\Textures\\UI Covers\\UI Cover 1.dds";
    }
    else if ((lp_uIImageofPlayer == "CharHybrid")) {
        lv_image = "Assets\\Textures\\UI Covers\\UI Cover 2.dds";
    }
    else if ((lp_uIImageofPlayer == "Jungle")) {
        lv_image = "Assets\\Textures\\UI Covers\\UI Cover 3.dds";
    }
    else if ((lp_uIImageofPlayer == "Obsidian")) {
        lv_image = "Assets\\Textures\\UI Covers\\UI Cover 4.dds";
    }
    else if ((lp_uIImageofPlayer == "Loxley")) {
        lv_image = "Assets\\Textures\\UI Covers\\UI Cover 5.dds";
    }
    else if ((lp_uIImageofPlayer == "Acid Green")) {
        lv_image = "Assets\\Textures\\UI Covers\\UI Cover 6.dds";
    }
    return lv_image;
}

void gf_CreateSkinsDialog () {
    // Automatic Variable Declarations
    playergroup auto4E17994C_g;
    int auto4E17994C_var;
    playergroup auto106451CC_g;
    int auto106451CC_var;
    playergroup auto6CD3FC15_g;
    int auto6CD3FC15_var;

    // Implementation
    gf_DialogCreateAEvo(100, 100, c_anchorTopRight, 10, 240, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_skinsDialogTogglebuttonDialog = DialogLastCreated();
    gf_ButtonCreateAEvo(DialogLastCreated(), 100, 100, c_anchorCenter, 0, 0, StringExternal("Param/Value/7648271C"), StringToText(""), true, "Assets\\Textures\\CustomAbilityIcons\\SkinsButton.dds");
    gv_skinsDialogToggleButton = DialogControlLastCreated();
    gf_DialogCreateAEvo(760, 170, c_anchorTopRight, 110, 80, false);
    gv_skinsDialog = DialogLastCreated();
    gf_ButtonCreateAEvo(gv_skinsDialog, 40, 80, c_anchorCenter, 0, -363, StringExternal("Param/Value/C2865297"), StringExternal("Param/Value/EB31EBEB"), false, null);
    gv_skinsManuButtonX = DialogControlLastCreated();
    auto4E17994C_g = PlayerGroupActive();
    auto4E17994C_var = -1;
    while (true) {
        auto4E17994C_var = PlayerGroupNextPlayer(auto4E17994C_g, auto4E17994C_var);
        if (auto4E17994C_var < 0) { break; }
        if ((gv_workerSwapModelString[auto4E17994C_var] == "Not Chosen")) {
            DialogControlCreate(gv_skinsDialog, c_triggerControlTypeUnitModel);
            gv_workerSwapModelClickMeModel[auto4E17994C_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_workerSwapModelClickMeModel[auto4E17994C_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_workerSwapModelClickMeModel[auto4E17994C_var], "WorkerDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_workerSwapModelClickMeModel[auto4E17994C_var], PlayerGroupAll(), c_anchorCenter, 0, -300);
            DialogControlSetVisible(gv_workerSwapModelClickMeModel[auto4E17994C_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelClickMeModel[auto4E17994C_var], PlayerGroupSingle(auto4E17994C_var), true);
            libNtve_gf_SetDialogItemCamera(gv_workerSwapModelClickMeModel[auto4E17994C_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, -300, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_workerSwapModelClickMeImage[auto4E17994C_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_workerSwapModelClickMeImage[auto4E17994C_var], PlayerGroupSingle(auto4E17994C_var), false);
            DialogControlSetVisible(gv_workerSwapModelClickMeImage[auto4E17994C_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateWorkerSwapModelManu();
    auto106451CC_g = PlayerGroupActive();
    auto106451CC_var = -1;
    while (true) {
        auto106451CC_var = PlayerGroupNextPlayer(auto106451CC_g, auto106451CC_var);
        if (auto106451CC_var < 0) { break; }
        if ((gv_soldierSwapModelString[auto106451CC_var] == "Not Chosen")) {
            DialogControlCreate(gv_skinsDialog, c_triggerControlTypeUnitModel);
            gv_soldierSwapModelClickMeModel[auto106451CC_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_soldierSwapModelClickMeModel[auto106451CC_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_soldierSwapModelClickMeModel[auto106451CC_var], "SoldierDefault", PlayerGroupAll());
            DialogControlSetPosition(gv_soldierSwapModelClickMeModel[auto106451CC_var], PlayerGroupAll(), c_anchorCenter, 0, -200);
            DialogControlSetVisible(gv_soldierSwapModelClickMeModel[auto106451CC_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierSwapModelClickMeModel[auto106451CC_var], PlayerGroupSingle(auto106451CC_var), true);
            libNtve_gf_SetDialogItemCamera(gv_soldierSwapModelClickMeModel[auto106451CC_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, -200, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_soldierSwapModelClickMeImage[auto106451CC_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_soldierSwapModelClickMeImage[auto106451CC_var], PlayerGroupSingle(auto106451CC_var), false);
            DialogControlSetVisible(gv_soldierSwapModelClickMeImage[auto106451CC_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateSoldierSwapModelManu();
    auto6CD3FC15_g = PlayerGroupActive();
    auto6CD3FC15_var = -1;
    while (true) {
        auto6CD3FC15_var = PlayerGroupNextPlayer(auto6CD3FC15_g, auto6CD3FC15_var);
        if (auto6CD3FC15_var < 0) { break; }
        if ((gv_queenSwapModelString[auto6CD3FC15_var] == "Not Chosen")) {
            DialogControlCreate(gv_skinsDialog, c_triggerControlTypeUnitModel);
            gv_queenSwapModelClickMeModel[auto6CD3FC15_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_queenSwapModelClickMeModel[auto6CD3FC15_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_queenSwapModelClickMeModel[auto6CD3FC15_var], "QueenDefualtModel", PlayerGroupAll());
            DialogControlSetPosition(gv_queenSwapModelClickMeModel[auto6CD3FC15_var], PlayerGroupAll(), c_anchorCenter, 0, -100);
            DialogControlSetVisible(gv_queenSwapModelClickMeModel[auto6CD3FC15_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelClickMeModel[auto6CD3FC15_var], PlayerGroupSingle(auto6CD3FC15_var), true);
            libNtve_gf_SetDialogItemCamera(gv_queenSwapModelClickMeModel[auto6CD3FC15_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, -100, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_queenSwapModelClickMeImage[auto6CD3FC15_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_queenSwapModelClickMeImage[auto6CD3FC15_var], PlayerGroupSingle(auto6CD3FC15_var), false);
            DialogControlSetVisible(gv_queenSwapModelClickMeImage[auto6CD3FC15_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateQueenSwapModelManu();
    gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, 0, null, null, false, null);
    libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, 0, StringToText(""), "Coming Soon.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, 100, null, null, false, null);
    libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, 100, StringToText(""), "Coming Soon.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateBuildingsManu();
    libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, 200, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gf_CreateSpecialtyUnitManu();
    libNtve_gf_CreateDialogItemImage(gv_skinsDialog, 128, 128, c_anchorCenter, 0, 300, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
}

void gf_IfUnitSkinSelectionManuIsOpenCloseit () {
    // Automatic Variable Declarations
    // Implementation
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_workersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_workersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_workerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_workerSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_soldiersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_soldiersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_soldierSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_soldierSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_queensSwapModelManuOpen[EventPlayer()] == true)) {
        gv_queensSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_queenSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_queenSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_buildingsSkinsManuOpen[EventPlayer()] == true)) {
        gv_buildingsSkinsManuOpen[EventPlayer()] = false;
        libNtve_gf_SetDialogItemToggled(gv_buildingsSkinsManuToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_buildingsSkinsManu, PlayerGroupSingle(EventPlayer()), false);
    }

    if ((gv_specialtyUnitSkinsManuOpen[EventPlayer()] == true)) {
        gv_specialtyUnitSkinsManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_specialtyUnitSkinsManu, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_specialtyUnitSkinsManuToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

}

void gf_CheckAllAIsdifficultyandthegamevar () {
    // Variable Declarations
    int lv_playerswhoareonHardDiff;
    int lv_playerswhoareonVeryHardDiff2;

    // Automatic Variable Declarations
    playergroup autoAF94239C_g;
    int autoAF94239C_var;

    // Variable Initialization

    // Implementation
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007"))) {
        autoAF94239C_g = PlayerGroupAll();
        autoAF94239C_var = -1;
        while (true) {
            autoAF94239C_var = PlayerGroupNextPlayer(autoAF94239C_g, autoAF94239C_var);
            if (autoAF94239C_var < 0) { break; }
            if ((PlayerType(autoAF94239C_var) == c_playerTypeComputer)) {
                PlayerSetDifficulty(autoAF94239C_var, 6);
                if (((PlayerDifficulty(autoAF94239C_var) == 4) || (PlayerDifficulty(autoAF94239C_var) == 6) || (PlayerDifficulty(autoAF94239C_var) == 7) || (PlayerDifficulty(autoAF94239C_var) == 8) || (PlayerDifficulty(autoAF94239C_var) == 9) || (PlayerDifficulty(autoAF94239C_var) == 10))) {
                    lv_playerswhoareonHardDiff = (lv_playerswhoareonHardDiff + 1);
                }

                if (((PlayerDifficulty(autoAF94239C_var) == 6) || (PlayerDifficulty(autoAF94239C_var) == 7) || (PlayerDifficulty(autoAF94239C_var) == 8) || (PlayerDifficulty(autoAF94239C_var) == 9) || (PlayerDifficulty(autoAF94239C_var) == 10))) {
                    lv_playerswhoareonVeryHardDiff2 = (lv_playerswhoareonVeryHardDiff2 + 1);
                }

            }

        }
        if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0007")) {
            if ((lv_playerswhoareonVeryHardDiff2 > 3)) {
                gv_isthisgame2v4AIvsVeryHard = true;
            }

        }
        else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0009")) {
            if ((lv_playerswhoareonHardDiff > 0)) {
                gv_isthisgame1v1AIvsHard = true;
            }

        }
    }

}

void gf_CreateWorkerSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto68C21DE6_g;
    int auto68C21DE6_var;
    playergroup auto03D17573_g;
    int auto03D17573_var;
    playergroup auto5D6FC18E_g;
    int auto5D6FC18E_var;
    playergroup auto05BD0747_g;
    int auto05BD0747_var;
    playergroup auto993D90E2_g;
    int auto993D90E2_var;
    playergroup auto2F4A9C16_g;
    int auto2F4A9C16_var;
    playergroup autoBFB9F0D7_g;
    int autoBFB9F0D7_var;
    playergroup auto9EFAFB70_g;
    int auto9EFAFB70_var;
    playergroup auto37CA2363_g;
    int auto37CA2363_var;
    playergroup auto9CAB51B6_g;
    int auto9CAB51B6_var;

    // Implementation
    auto68C21DE6_g = PlayerGroupActive();
    auto68C21DE6_var = -1;
    while (true) {
        auto68C21DE6_var = PlayerGroupNextPlayer(auto68C21DE6_g, auto68C21DE6_var);
        if (auto68C21DE6_var < 0) { break; }
        gf_UnlockWorkersIfConditionsaremet(auto68C21DE6_var);
    }
    auto03D17573_g = PlayerGroupActive();
    auto03D17573_var = -1;
    while (true) {
        auto03D17573_var = PlayerGroupNextPlayer(auto03D17573_g, auto03D17573_var);
        if (auto03D17573_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, -300, null, null, false, null);
        gv_workerSwapModelManuButtonToggle[auto03D17573_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto03D17573_var), true);
        DialogControlCreate(gv_skinsDialog, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_workerSwapModelManuButtonModel[auto03D17573_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnWorkerSwapModelStringIntoUnitEntry(gv_workerSwapModelString[auto03D17573_var]), PlayerGroupSingle(auto03D17573_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -300);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto03D17573_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(auto03D17573_var));
    }
    gf_DialogCreateAEvo(760, 1550, c_anchorTopRight, 300, 80, false);
    gv_workerSwapModelManuDialog = DialogLastCreated();
    auto5D6FC18E_g = PlayerGroupActive();
    auto5D6FC18E_var = -1;
    while (true) {
        auto5D6FC18E_var = PlayerGroupNextPlayer(auto5D6FC18E_g, auto5D6FC18E_var);
        if (auto5D6FC18E_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 800);
        gv_workerSwapModelManuLargeModel[auto5D6FC18E_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnWorkerSwapModelStringIntoUnitEntry(gv_workerSwapModelString[auto5D6FC18E_var]), PlayerGroupSingle(auto5D6FC18E_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(auto5D6FC18E_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5D6FC18E_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, -350, -250, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, -250);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto05BD0747_g = PlayerGroupActive();
    auto05BD0747_var = -1;
    while (true) {
        auto05BD0747_var = PlayerGroupNextPlayer(auto05BD0747_g, auto05BD0747_var);
        if (auto05BD0747_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, -230, StringExternal("Param/Value/1F905F9C"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextDefault[auto05BD0747_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto05BD0747_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, -350, -100, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerMacerator", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, -100);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto993D90E2_g = PlayerGroupActive();
    auto993D90E2_var = -1;
    while (true) {
        auto993D90E2_var = PlayerGroupNextPlayer(auto993D90E2_g, auto993D90E2_var);
        if (auto993D90E2_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, -80, StringExternal("Param/Value/227B2EDC"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextLongAntenas[auto993D90E2_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto993D90E2_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, -350, 50, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerRemastered", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto2F4A9C16_g = PlayerGroupActive();
    auto2F4A9C16_var = -1;
    while (true) {
        auto2F4A9C16_var = PlayerGroupNextPlayer(auto2F4A9C16_g, auto2F4A9C16_var);
        if (auto2F4A9C16_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, 70, StringExternal("Param/Value/9DF6BB73"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextThickhead[auto2F4A9C16_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto2F4A9C16_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, 350, -250, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[5] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerHologram", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -250);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    autoBFB9F0D7_g = PlayerGroupActive();
    autoBFB9F0D7_var = -1;
    while (true) {
        autoBFB9F0D7_var = PlayerGroupNextPlayer(autoBFB9F0D7_g, autoBFB9F0D7_var);
        if (autoBFB9F0D7_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, -230, StringExternal("Param/Value/2FCC8F2E"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextHologram[autoBFB9F0D7_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoBFB9F0D7_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, 350, -100, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[6] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerGray", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -100);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto9EFAFB70_g = PlayerGroupActive();
    auto9EFAFB70_var = -1;
    while (true) {
        auto9EFAFB70_var = PlayerGroupNextPlayer(auto9EFAFB70_g, auto9EFAFB70_var);
        if (auto9EFAFB70_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, -80, StringExternal("Param/Value/B98A59E8"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextGray[auto9EFAFB70_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto9EFAFB70_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, 350, 50, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[7] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto37CA2363_g = PlayerGroupActive();
    auto37CA2363_var = -1;
    while (true) {
        auto37CA2363_var = PlayerGroupNextPlayer(auto37CA2363_g, auto37CA2363_var);
        if (auto37CA2363_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, 70, StringExternal("Param/Value/CC5FEED8"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextSwarm[auto37CA2363_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto37CA2363_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerSwapModelManuDialog, 100, 100, c_anchorCenter, 350, 200, null, null, false, null);
    gv_workerSwapModelQueenChoiceButton[8] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, 200);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto9CAB51B6_g = PlayerGroupActive();
    auto9CAB51B6_var = -1;
    while (true) {
        auto9CAB51B6_var = PlayerGroupNextPlayer(auto9CAB51B6_g, auto9CAB51B6_var);
        if (auto9CAB51B6_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, 220, StringExternal("Param/Value/C79A8969"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerSwapModelUnlockingManuTextMech[auto9CAB51B6_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto9CAB51B6_var), true);
    }
}

void gf_UnlockWorkersIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(gv_queenOfPlayer[lp_forPlayer]) != "NewQueen"))) {
        gv_workerSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayed[lp_forPlayer] >= 1))) {
        gv_workerSwapModelIsUnlockedMacerator[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesWon[lp_forPlayer] >= 1))) {
        gv_workerSwapModelIsUnlockedRemastered[lp_forPlayer] = true;
    }

    if ((gv_amountOfWorkerNestsBuiltThisgamebeforeminute15byplayer[lp_forPlayer] >= 50)) {
        gv_workerSwapModelIsUnlockedHologram[lp_forPlayer] = true;
    }

    if ((gv_kills_ForagerNest[lp_forPlayer] >= 1000)) {
        gv_workerSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if ((gv_kills_ForagerNest[lp_forPlayer] >= 10000)) {
        gv_workerSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if (gf_NotYetImplemented(0)) {
        gv_workerSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnWorkerSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_workerModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_workerModel = "WorkerDefault";

    // Implementation
    if (true) {
    }

    if ((lp_queenSwapModelString == "Default")) {
        lv_workerModel = "WorkerDefault";
    }
    else if ((lp_queenSwapModelString == "Macerator")) {
        lv_workerModel = "WorkerMacerator";
    }
    else if ((lp_queenSwapModelString == "Remastered")) {
        lv_workerModel = "WorkerRemastered";
    }
    else if ((lp_queenSwapModelString == "Hologram")) {
        lv_workerModel = "WorkerHologram";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_workerModel = "WorkerGray";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_workerModel = "WorkerSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_workerModel = "WorkerMech";
    }
    return lv_workerModel;
}

string gf_TurnWorkerSwapModelStringIntoUnitEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_workerModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_workerModelUnit = "WorkerDefualt";
    }
    else if ((lp_queenSwapModelString == "Macerator")) {
        lv_workerModelUnit = "WorkerMacerator";
    }
    else if ((lp_queenSwapModelString == "Remastered")) {
        lv_workerModelUnit = "WorkerRemastered";
    }
    else if ((lp_queenSwapModelString == "Hologram")) {
        lv_workerModelUnit = "WorkerHologram";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_workerModelUnit = "WorkerGray";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_workerModelUnit = "WorkerSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_workerModelUnit = "WorkerMech";
    }
    return lv_workerModelUnit;
}

void gf_CreateSoldierSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto17723B37_g;
    int auto17723B37_var;
    playergroup auto63D9A868_g;
    int auto63D9A868_var;
    playergroup auto1089A647_g;
    int auto1089A647_var;
    playergroup auto48F49F99_g;
    int auto48F49F99_var;
    playergroup auto068E4426_g;
    int auto068E4426_var;
    playergroup autoCEA2874A_g;
    int autoCEA2874A_var;
    playergroup autoC5E2413F_g;
    int autoC5E2413F_var;

    // Implementation
    auto17723B37_g = PlayerGroupActive();
    auto17723B37_var = -1;
    while (true) {
        auto17723B37_var = PlayerGroupNextPlayer(auto17723B37_g, auto17723B37_var);
        if (auto17723B37_var < 0) { break; }
        gf_UnlockSoldiersIfConditionsaremet(auto17723B37_var);
    }
    auto63D9A868_g = PlayerGroupActive();
    auto63D9A868_var = -1;
    while (true) {
        auto63D9A868_var = PlayerGroupNextPlayer(auto63D9A868_g, auto63D9A868_var);
        if (auto63D9A868_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, -200, null, null, false, null);
        gv_soldierSwapModelManuButtonToggle[auto63D9A868_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto63D9A868_var), true);
        DialogControlCreate(gv_skinsDialog, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_soldierSwapModelManuButtonModel[auto63D9A868_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnSoldierSwapModelStringIntoUnitEntry(0, gv_soldierSwapModelString[auto63D9A868_var]), PlayerGroupSingle(auto63D9A868_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -200);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto63D9A868_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(auto63D9A868_var));
    }
    gf_DialogCreateAEvo(760, 1150, c_anchorTopRight, 300, 80, false);
    gv_soldierSwapModelManuDialog = DialogLastCreated();
    auto1089A647_g = PlayerGroupActive();
    auto1089A647_var = -1;
    while (true) {
        auto1089A647_var = PlayerGroupNextPlayer(auto1089A647_g, auto1089A647_var);
        if (auto1089A647_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_soldierSwapModelManuLargeModel[auto1089A647_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnSoldierSwapModelStringIntoUnitEntry(0, gv_soldierSwapModelString[auto1089A647_var]), PlayerGroupSingle(auto1089A647_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(auto1089A647_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto1089A647_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierSwapModelManuDialog, 100, 180, c_anchorCenter, 110, -250, null, null, false, null);
    gv_soldierSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierDefault", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, -250);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierDefaultWithWings", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, -250);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto48F49F99_g = PlayerGroupActive();
    auto48F49F99_var = -1;
    while (true) {
        auto48F49F99_var = PlayerGroupNextPlayer(auto48F49F99_g, auto48F49F99_var);
        if (auto48F49F99_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, -230, StringExternal("Param/Value/6FB6B947"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierSwapModelUnlockingManuTextDefault[auto48F49F99_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto48F49F99_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierSwapModelManuDialog, 100, 180, c_anchorCenter, 110, -100, null, null, false, null);
    gv_soldierSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierGray", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, -100);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierGrayWithWings", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, -100);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto068E4426_g = PlayerGroupActive();
    auto068E4426_var = -1;
    while (true) {
        auto068E4426_var = PlayerGroupNextPlayer(auto068E4426_g, auto068E4426_var);
        if (auto068E4426_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, -80, StringExternal("Param/Value/25A61A14"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierSwapModelUnlockingManuTextGray[auto068E4426_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto068E4426_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierSwapModelManuDialog, 100, 180, c_anchorCenter, 110, 50, null, null, false, null);
    gv_soldierSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierSwarmWithWings", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    autoCEA2874A_g = PlayerGroupActive();
    autoCEA2874A_var = -1;
    while (true) {
        autoCEA2874A_var = PlayerGroupNextPlayer(autoCEA2874A_g, autoCEA2874A_var);
        if (autoCEA2874A_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, 70, StringExternal("Param/Value/329FE0F9"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierSwapModelUnlockingManuTextSwarm[autoCEA2874A_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoCEA2874A_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierSwapModelManuDialog, 100, 180, c_anchorCenter, 110, 200, null, null, false, null);
    gv_soldierSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, 200);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierMechWithWings", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 200);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    autoC5E2413F_g = PlayerGroupActive();
    autoC5E2413F_var = -1;
    while (true) {
        autoC5E2413F_var = PlayerGroupNextPlayer(autoC5E2413F_g, autoC5E2413F_var);
        if (autoC5E2413F_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, 220, StringExternal("Param/Value/B280F1D7"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierSwapModelUnlockingManuTextMech[autoC5E2413F_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoC5E2413F_var), true);
    }
}

void gf_UnlockSoldiersIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_amountOfSoldierNestsBuiltThisgamebeforeminute20byplayer[lp_forPlayer] >= 1)) {
        gv_soldierSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayed[lp_forPlayer] >= 5)) {
        gv_soldierSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if ((gv_amountOfSoldierNestsBuiltThisgamebeforeminute20byplayer[lp_forPlayer] >= 100)) {
        gv_soldierSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if ((gv_kills_SoldierNest[lp_forPlayer] >= 25000)) {
        gv_soldierSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnSoldierSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "SoldierDefault";

    // Implementation
    if ((TechTreeUpgradeCount(EventPlayer(), "zerglingmovementspeed", c_techCountCompleteOnly) >= 1)) {
        if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
            lv_soldierModel = "SoldierDefaultWithWings";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModel = "SoldierGrayWithWings";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModel = "SoldierSwarmWithWings";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModel = "SoldierMechWithWings";
        }
    }
    else {
        if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
            lv_soldierModel = "SoldierDefault";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModel = "SoldierGray";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModel = "SoldierSwarm";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModel = "SoldierMech";
        }
    }
    return lv_soldierModel;
}

string gf_TurnSoldierSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((TechTreeUpgradeCount(lp_paramPlayer, "zerglingmovementspeed", c_techCountCompleteOnly) >= 1)) {
        if ((lp_queenSwapModelString == "Default")) {
            lv_soldierModelUnit = "SoldierDefaultWithWings";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModelUnit = "SoldierGrayWithWings";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModelUnit = "SoldierSwarmWithWings";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModelUnit = "SoldierMechWithWings";
        }
    }
    else {
        if ((lp_queenSwapModelString == "Default")) {
            lv_soldierModelUnit = "SoldierDefault";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModelUnit = "SoldierGray";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModelUnit = "SoldierSwarm";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModelUnit = "SoldierMech";
        }
    }
    return lv_soldierModelUnit;
}

void gf_CreateQueenSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto64B85008_g;
    int auto64B85008_var;
    playergroup autoCC337928_g;
    int autoCC337928_var;
    playergroup auto7551A8B1_g;
    int auto7551A8B1_var;
    playergroup autoDD36D6D7_g;
    int autoDD36D6D7_var;
    playergroup auto9B0B6A6E_g;
    int auto9B0B6A6E_var;
    playergroup autoB6181025_g;
    int autoB6181025_var;
    playergroup auto1937385B_g;
    int auto1937385B_var;
    playergroup auto41CC055D_g;
    int auto41CC055D_var;
    playergroup auto7214E824_g;
    int auto7214E824_var;
    playergroup autoA3FD482F_g;
    int autoA3FD482F_var;
    playergroup auto62211AB2_g;
    int auto62211AB2_var;

    // Implementation
    auto64B85008_g = PlayerGroupActive();
    auto64B85008_var = -1;
    while (true) {
        auto64B85008_var = PlayerGroupNextPlayer(auto64B85008_g, auto64B85008_var);
        if (auto64B85008_var < 0) { break; }
        gf_UnlockQueensIfConditionsaremet(auto64B85008_var);
    }
    autoCC337928_g = PlayerGroupActive();
    autoCC337928_var = -1;
    while (true) {
        autoCC337928_var = PlayerGroupNextPlayer(autoCC337928_g, autoCC337928_var);
        if (autoCC337928_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, -100, null, null, false, null);
        gv_queenSwapModelManuButtonToggle[autoCC337928_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoCC337928_var), true);
        DialogControlCreate(gv_skinsDialog, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_queenSwapModelManuButtonModel[autoCC337928_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnQueenSwapModelStringIntoUnitEntry(gv_queenSwapModelString[autoCC337928_var]), PlayerGroupSingle(autoCC337928_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, -100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoCC337928_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(autoCC337928_var));
    }
    gf_DialogCreateAEvo(760, 1550, c_anchorTopRight, 300, 80, false);
    gv_queenSwapModelManuDialog = DialogLastCreated();
    auto7551A8B1_g = PlayerGroupActive();
    auto7551A8B1_var = -1;
    while (true) {
        auto7551A8B1_var = PlayerGroupNextPlayer(auto7551A8B1_g, auto7551A8B1_var);
        if (auto7551A8B1_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 600, 800);
        gv_queenSwapModelManuLargeModel[auto7551A8B1_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnQueenSwapModelStringIntoUnitEntry(gv_queenSwapModelString[auto7551A8B1_var]), PlayerGroupSingle(auto7551A8B1_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(auto7551A8B1_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto7551A8B1_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, -350, -250, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenDefualtModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, -250);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    autoDD36D6D7_g = PlayerGroupActive();
    autoDD36D6D7_var = -1;
    while (true) {
        autoDD36D6D7_var = PlayerGroupNextPlayer(autoDD36D6D7_g, autoDD36D6D7_var);
        if (autoDD36D6D7_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, -230, StringExternal("Param/Value/24CEC1E0"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextDefault[autoDD36D6D7_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoDD36D6D7_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, -350, -100, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenLongAntenasModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, -100);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto9B0B6A6E_g = PlayerGroupActive();
    auto9B0B6A6E_var = -1;
    while (true) {
        auto9B0B6A6E_var = PlayerGroupNextPlayer(auto9B0B6A6E_g, auto9B0B6A6E_var);
        if (auto9B0B6A6E_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, -80, StringExternal("Param/Value/F2A68415"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextLongAntenas[auto9B0B6A6E_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto9B0B6A6E_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, -350, 50, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenThickHeadModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    autoB6181025_g = PlayerGroupActive();
    autoB6181025_var = -1;
    while (true) {
        autoB6181025_var = PlayerGroupNextPlayer(autoB6181025_g, autoB6181025_var);
        if (autoB6181025_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, 70, StringExternal("Param/Value/93B87CDE"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextThickhead[autoB6181025_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoB6181025_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, -350, 200, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenSpikeyHeadModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -350, 200);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto1937385B_g = PlayerGroupActive();
    auto1937385B_var = -1;
    while (true) {
        auto1937385B_var = PlayerGroupNextPlayer(auto1937385B_g, auto1937385B_var);
        if (auto1937385B_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, -560, 220, StringExternal("Param/Value/DE8F64F7"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextSpikeyHead[auto1937385B_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto1937385B_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, 350, -250, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[5] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenHologramModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -250);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto41CC055D_g = PlayerGroupActive();
    auto41CC055D_var = -1;
    while (true) {
        auto41CC055D_var = PlayerGroupNextPlayer(auto41CC055D_g, auto41CC055D_var);
        if (auto41CC055D_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, -230, StringExternal("Param/Value/99BB7133"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextHologram[auto41CC055D_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto41CC055D_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, 350, -100, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[6] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenGrayModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, -100);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto7214E824_g = PlayerGroupActive();
    auto7214E824_var = -1;
    while (true) {
        auto7214E824_var = PlayerGroupNextPlayer(auto7214E824_g, auto7214E824_var);
        if (auto7214E824_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, -80, StringExternal("Param/Value/58232C99"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextGray[auto7214E824_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto7214E824_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, 350, 50, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[7] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenSwarmModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    autoA3FD482F_g = PlayerGroupActive();
    autoA3FD482F_var = -1;
    while (true) {
        autoA3FD482F_var = PlayerGroupNextPlayer(autoA3FD482F_g, autoA3FD482F_var);
        if (autoA3FD482F_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, 70, StringExternal("Param/Value/EA209E72"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextSwarm[autoA3FD482F_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoA3FD482F_var), true);
    }
    gf_ButtonCreateAEvo(gv_queenSwapModelManuDialog, 100, 100, c_anchorCenter, 350, 200, null, null, false, null);
    gv_queenSwapModelQueenChoiceButton[8] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "QueenMechModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 350, 200);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto62211AB2_g = PlayerGroupActive();
    auto62211AB2_var = -1;
    while (true) {
        auto62211AB2_var = PlayerGroupNextPlayer(auto62211AB2_g, auto62211AB2_var);
        if (auto62211AB2_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 560, 220, StringExternal("Param/Value/909D2DD4"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_queenSwapModelUnlockingManuTextMech[auto62211AB2_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto62211AB2_var), true);
    }
}

void gf_UnlockQueensIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (true) {
        gv_queenSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayed[lp_forPlayer] >= 10)) {
        gv_queenSwapModelIsUnlockedLongAntenas[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesWon[lp_forPlayer] >= 50)) {
        gv_queenSwapModelIsUnlockedThickHead[lp_forPlayer] = true;
    }

    if ((gv_amountOfUpgradeChambersBuiltThisgamebeforeminute30byplayer[lp_forPlayer] >= 5)) {
        gv_queenSwapModelIsUnlockedSpikeyHead[lp_forPlayer] = true;
    }

    if ((gv_ability_Dig[lp_forPlayer] >= 2000)) {
        gv_queenSwapModelIsUnlockedHologram[lp_forPlayer] = true;
    }

    if (((gv_kills_SoldierNest[lp_forPlayer] + gv_kills_ForagerNest[lp_forPlayer]) >= 100000)) {
        gv_queenSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if ((gv_winrateOfPlayer[lp_forPlayer] >= 90.0) && (gv_amountOfGamesPlayed[lp_forPlayer] >= 10)) {
        gv_queenSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if ((gf_IsThisPlayerATester(lp_forPlayer) || gf_IsThisPlayerInEditor(lp_forPlayer) || gf_IsThisPlayerADeveloper(lp_forPlayer))) {
        gv_queenSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnQueenSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_queenModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_queenModel = "QueenDefault";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_queenModel = "QueenDefault";
    }
    else if ((lp_queenSwapModelString == "LongAntenas")) {
        lv_queenModel = "QueenLongAntenas";
    }
    else if ((lp_queenSwapModelString == "ThickHead")) {
        lv_queenModel = "QueenThickHead";
    }
    else if ((lp_queenSwapModelString == "SpikeyHead")) {
        lv_queenModel = "QueenSpikeyHead";
    }
    else if ((lp_queenSwapModelString == "Hologram")) {
        lv_queenModel = "QueenHologram";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_queenModel = "QueenGray";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_queenModel = "QueenSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_queenModel = "QueenMech";
    }
    return lv_queenModel;
}

string gf_TurnQueenSwapModelStringIntoUnitEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_queenModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_queenModelUnit = "QueenDefualtModel";
    }
    else if ((lp_queenSwapModelString == "LongAntenas")) {
        lv_queenModelUnit = "QueenLongAntenasModel";
    }
    else if ((lp_queenSwapModelString == "ThickHead")) {
        lv_queenModelUnit = "QueenThickHeadModel";
    }
    else if ((lp_queenSwapModelString == "SpikeyHead")) {
        lv_queenModelUnit = "QueenSpikeyHeadModel";
    }
    else if ((lp_queenSwapModelString == "Hologram")) {
        lv_queenModelUnit = "QueenHologramModel";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_queenModelUnit = "QueenGrayModel";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_queenModelUnit = "QueenSwarmModel";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_queenModelUnit = "QueenMechModel";
    }
    return lv_queenModelUnit;
}

void gf_CreateBuildingsManu () {
    // Automatic Variable Declarations
    playergroup autoC0E92503_g;
    int autoC0E92503_var;
    playergroup auto6558D7C1_g;
    int auto6558D7C1_var;
    playergroup auto583426F2_g;
    int auto583426F2_var;
    playergroup autoED46EF6F_g;
    int autoED46EF6F_var;
    playergroup auto44B64957_g;
    int auto44B64957_var;
    playergroup auto7DB36595_g;
    int auto7DB36595_var;

    // Implementation
    autoC0E92503_g = PlayerGroupActive();
    autoC0E92503_var = -1;
    while (true) {
        autoC0E92503_var = PlayerGroupNextPlayer(autoC0E92503_g, autoC0E92503_var);
        if (autoC0E92503_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, 200, null, null, false, null);
        gv_buildingsSkinsManuToggle[autoC0E92503_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoC0E92503_var), true);
    }
    gf_DialogCreateAEvo(150, 690, c_anchorTopRight, 300, 690, false);
    gv_buildingsSkinsManu = DialogLastCreated();
    auto6558D7C1_g = PlayerGroupActive();
    auto6558D7C1_var = -1;
    while (true) {
        auto6558D7C1_var = PlayerGroupNextPlayer(auto6558D7C1_g, auto6558D7C1_var);
        if (auto6558D7C1_var < 0) { break; }
        if ((gv_workerNestSwapModelString[auto6558D7C1_var] == "Not Chosen")) {
            DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
            gv_workerNestSwapModelClickMeModel[auto6558D7C1_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_workerNestSwapModelClickMeModel[auto6558D7C1_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_workerNestSwapModelClickMeModel[auto6558D7C1_var], "WorkerNestNormalNormalMod", PlayerGroupAll());
            DialogControlSetPosition(gv_workerNestSwapModelClickMeModel[auto6558D7C1_var], PlayerGroupAll(), c_anchorCenter, 250, 0);
            DialogControlSetVisible(gv_workerNestSwapModelClickMeModel[auto6558D7C1_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerNestSwapModelClickMeModel[auto6558D7C1_var], PlayerGroupSingle(auto6558D7C1_var), true);
            libNtve_gf_SetDialogItemCamera(gv_workerNestSwapModelClickMeModel[auto6558D7C1_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_buildingsSkinsManu, 128, 128, c_anchorCenter, 250, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_workerNestSwapModelClickMeImage[auto6558D7C1_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_workerNestSwapModelClickMeImage[auto6558D7C1_var], PlayerGroupSingle(auto6558D7C1_var), false);
            DialogControlSetVisible(gv_workerNestSwapModelClickMeImage[auto6558D7C1_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateWorkerNestSwapModelManu();
    auto583426F2_g = PlayerGroupActive();
    auto583426F2_var = -1;
    while (true) {
        auto583426F2_var = PlayerGroupNextPlayer(auto583426F2_g, auto583426F2_var);
        if (auto583426F2_var < 0) { break; }
        if ((gv_soldierNestSwapModelString[auto583426F2_var] == "Not Chosen")) {
            DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
            gv_soldierNestSwapModelClickMeModel[auto583426F2_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_soldierNestSwapModelClickMeModel[auto583426F2_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_soldierNestSwapModelClickMeModel[auto583426F2_var], "SoldierNestNormal", PlayerGroupAll());
            DialogControlSetPosition(gv_soldierNestSwapModelClickMeModel[auto583426F2_var], PlayerGroupAll(), c_anchorCenter, 150, 0);
            DialogControlSetVisible(gv_soldierNestSwapModelClickMeModel[auto583426F2_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierNestSwapModelClickMeModel[auto583426F2_var], PlayerGroupSingle(auto583426F2_var), true);
            libNtve_gf_SetDialogItemCamera(gv_soldierNestSwapModelClickMeModel[auto583426F2_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_buildingsSkinsManu, 128, 128, c_anchorCenter, 150, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_soldierNestSwapModelClickMeImage[auto583426F2_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_soldierNestSwapModelClickMeImage[auto583426F2_var], PlayerGroupSingle(auto583426F2_var), false);
            DialogControlSetVisible(gv_soldierNestSwapModelClickMeImage[auto583426F2_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateSoldierNestSwapModelManu();
    gf_ButtonCreateAEvo(gv_buildingsSkinsManu, 100, 100, c_anchorCenter, 50, 0, null, null, false, null);
    libNtve_gf_CreateDialogItemImage(gv_buildingsSkinsManu, 128, 128, c_anchorCenter, 50, 0, StringToText(""), "Coming Soon.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    autoED46EF6F_g = PlayerGroupActive();
    autoED46EF6F_var = -1;
    while (true) {
        autoED46EF6F_var = PlayerGroupNextPlayer(autoED46EF6F_g, autoED46EF6F_var);
        if (autoED46EF6F_var < 0) { break; }
        if ((gv_bulkBuilderSwapModelString[autoED46EF6F_var] == "Not Chosen")) {
            DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
            gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var], PlayerGroupAll(), 100, 190);
            libNtve_gf_SetDialogItemUnitLink(gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var], "BulkBuilderBodyDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var], PlayerGroupAll(), c_anchorCenter, -50, 25);
            DialogControlSetVisible(gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var], PlayerGroupSingle(autoED46EF6F_var), true);
            libNtve_gf_SetDialogItemCamera(gv_bulkBuilderSwapModelClickMeModel[autoED46EF6F_var], "Star2CameraMid03", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_buildingsSkinsManu, 128, 128, c_anchorCenter, -50, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_bulkBuilderSwapModelClickMeImage[autoED46EF6F_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_bulkBuilderSwapModelClickMeImage[autoED46EF6F_var], PlayerGroupSingle(autoED46EF6F_var), false);
            DialogControlSetVisible(gv_bulkBuilderSwapModelClickMeImage[autoED46EF6F_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateBulkBuilderSwapModelManu();
    auto44B64957_g = PlayerGroupActive();
    auto44B64957_var = -1;
    while (true) {
        auto44B64957_var = PlayerGroupNextPlayer(auto44B64957_g, auto44B64957_var);
        if (auto44B64957_var < 0) { break; }
        if ((gv_spikesNestSwapModelString[auto44B64957_var] == "Not Chosen")) {
            DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
            gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var], PlayerGroupAll(), 100, 170);
            libNtve_gf_SetDialogItemUnitLink(gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var], "UpgradeChamberDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var], PlayerGroupAll(), c_anchorCenter, -150, 0);
            DialogControlSetVisible(gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var], PlayerGroupSingle(auto44B64957_var), true);
            libNtve_gf_SetDialogItemCamera(gv_upgradeChamberSwapModelClickMeModel[auto44B64957_var], "Star2CameraMid04", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_buildingsSkinsManu, 128, 128, c_anchorCenter, -150, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_upgradeChamberSwapModelClickMeImage[auto44B64957_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_upgradeChamberSwapModelClickMeImage[auto44B64957_var], PlayerGroupSingle(auto44B64957_var), false);
            DialogControlSetVisible(gv_upgradeChamberSwapModelClickMeImage[auto44B64957_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateUpgradeChamberSwapModelManu();
    auto7DB36595_g = PlayerGroupActive();
    auto7DB36595_var = -1;
    while (true) {
        auto7DB36595_var = PlayerGroupNextPlayer(auto7DB36595_g, auto7DB36595_var);
        if (auto7DB36595_var < 0) { break; }
        if ((gv_spikesNestSwapModelString[auto7DB36595_var] == "Not Chosen")) {
            DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
            gv_spikesNestSwapModelClickMeModel[auto7DB36595_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_spikesNestSwapModelClickMeModel[auto7DB36595_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_spikesNestSwapModelClickMeModel[auto7DB36595_var], "SpikesNestModelDefault", PlayerGroupAll());
            DialogControlSetPosition(gv_spikesNestSwapModelClickMeModel[auto7DB36595_var], PlayerGroupAll(), c_anchorCenter, -250, 0);
            DialogControlSetVisible(gv_spikesNestSwapModelClickMeModel[auto7DB36595_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_spikesNestSwapModelClickMeModel[auto7DB36595_var], PlayerGroupSingle(auto7DB36595_var), true);
            libNtve_gf_SetDialogItemCamera(gv_spikesNestSwapModelClickMeModel[auto7DB36595_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_buildingsSkinsManu, 128, 128, c_anchorCenter, -250, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_spikesNestSwapModelClickMeImage[auto7DB36595_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_spikesNestSwapModelClickMeImage[auto7DB36595_var], PlayerGroupSingle(auto7DB36595_var), false);
            DialogControlSetVisible(gv_spikesNestSwapModelClickMeImage[auto7DB36595_var], PlayerGroupAll(), true);
        }

    }
    gf_CreateSpikesNestSwapModelManu();
}

void gf_IfBuildingsSkinSelectionManuIsOpenCloseit () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_workerNestsSwapModelManuOpen[EventPlayer()] == true)) {
        gv_workerNestsSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_workerNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_workerNestSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_soldierNestSwapModelManuOpen[EventPlayer()] == true)) {
        gv_soldierNestSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_soldierNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_soldierNestSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_bulkBuilderSwapModelManuOpen[EventPlayer()] == true)) {
        gv_bulkBuilderSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_bulkBuilderSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_bulkBuilderSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_upgradeChamberSwapModelManuOpen[EventPlayer()] == true)) {
        gv_upgradeChamberSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_upgradeChamberSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_upgradeChamberSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_spikesNestsSwapModelManuOpen[EventPlayer()] == true)) {
        gv_spikesNestsSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_spikesNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_spikesNestSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

}

void gf_CreateWorkerNestSwapModelManu () {
    // Automatic Variable Declarations
    playergroup autoE52F8B1E_g;
    int autoE52F8B1E_var;
    playergroup autoE0AD6AF3_g;
    int autoE0AD6AF3_var;
    playergroup auto09C4A142_g;
    int auto09C4A142_var;
    playergroup auto5A96061D_g;
    int auto5A96061D_var;
    playergroup auto880EF6E7_g;
    int auto880EF6E7_var;
    playergroup auto0F59797F_g;
    int auto0F59797F_var;
    playergroup autoE1472144_g;
    int autoE1472144_var;
    playergroup auto75C78F26_g;
    int auto75C78F26_var;

    // Implementation
    autoE52F8B1E_g = PlayerGroupActive();
    autoE52F8B1E_var = -1;
    while (true) {
        autoE52F8B1E_var = PlayerGroupNextPlayer(autoE52F8B1E_g, autoE52F8B1E_var);
        if (autoE52F8B1E_var < 0) { break; }
        gf_UnlockWorkerNestIfConditionsaremet(autoE52F8B1E_var);
    }
    autoE0AD6AF3_g = PlayerGroupActive();
    autoE0AD6AF3_var = -1;
    while (true) {
        autoE0AD6AF3_var = PlayerGroupNextPlayer(autoE0AD6AF3_g, autoE0AD6AF3_var);
        if (autoE0AD6AF3_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_buildingsSkinsManu, 100, 100, c_anchorCenter, 250, 0, null, null, false, null);
        gv_workerNestSwapModelManuButtonToggle[autoE0AD6AF3_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoE0AD6AF3_var), true);
        DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_workerNestSwapModelManuButtonModel[autoE0AD6AF3_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Normal", 0, gv_workerNestSwapModelString[autoE0AD6AF3_var]), PlayerGroupSingle(autoE0AD6AF3_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 250, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoE0AD6AF3_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(autoE0AD6AF3_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_workerNestSwapModelManuDialog = DialogLastCreated();
    auto09C4A142_g = PlayerGroupActive();
    auto09C4A142_var = -1;
    while (true) {
        auto09C4A142_var = PlayerGroupNextPlayer(auto09C4A142_g, auto09C4A142_var);
        if (auto09C4A142_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_workerNestSwapModelManuLargeModelSubtrail[auto09C4A142_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Subtrail", 0, gv_workerNestSwapModelString[auto09C4A142_var]), PlayerGroupSingle(auto09C4A142_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -400, -100);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto09C4A142_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto09C4A142_var), true);
    }
    auto5A96061D_g = PlayerGroupActive();
    auto5A96061D_var = -1;
    while (true) {
        auto5A96061D_var = PlayerGroupNextPlayer(auto5A96061D_g, auto5A96061D_var);
        if (auto5A96061D_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_workerNestSwapModelManuLargeModelFarm[auto5A96061D_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Farm", 0, gv_workerNestSwapModelString[auto5A96061D_var]), PlayerGroupSingle(auto5A96061D_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -120, -100);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto5A96061D_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5A96061D_var), true);
    }
    auto880EF6E7_g = PlayerGroupActive();
    auto880EF6E7_var = -1;
    while (true) {
        auto880EF6E7_var = PlayerGroupNextPlayer(auto880EF6E7_g, auto880EF6E7_var);
        if (auto880EF6E7_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 800, 800);
        gv_workerNestSwapModelManuLargeModelNormal[auto880EF6E7_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Normal", 0, gv_workerNestSwapModelString[auto880EF6E7_var]), PlayerGroupSingle(auto880EF6E7_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 100);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto880EF6E7_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto880EF6E7_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, -150, null, null, false, null);
    gv_workerNestSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerNestNormalNormalMod", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, -150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto0F59797F_g = PlayerGroupActive();
    auto0F59797F_var = -1;
    while (true) {
        auto0F59797F_var = PlayerGroupNextPlayer(auto0F59797F_g, auto0F59797F_var);
        if (auto0F59797F_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, -130, StringExternal("Param/Value/DDF40EC4"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerNestSwapModelUnlockingManuTextDefault[auto0F59797F_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0F59797F_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 0, null, null, false, null);
    gv_workerNestSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "WorkerNestNormalWebMod", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    autoE1472144_g = PlayerGroupActive();
    autoE1472144_var = -1;
    while (true) {
        autoE1472144_var = PlayerGroupNextPlayer(autoE1472144_g, autoE1472144_var);
        if (autoE1472144_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 20, StringExternal("Param/Value/DF35CAD1"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerNestSwapModelUnlockingManuTextWebMod[autoE1472144_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoE1472144_var), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorCenter, 260, 27, (IntToText(gv__1v1AIvsHardGamesWon[autoE1472144_var]) + StringToText("\\3")), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerNestSwapModelSwarmWinrate[autoE1472144_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoE1472144_var), true);
    }
    gf_ButtonCreateAEvo(gv_workerNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 150, null, null, false, null);
    gv_workerNestSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "UnknownUnit", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto75C78F26_g = PlayerGroupActive();
    auto75C78F26_var = -1;
    while (true) {
        auto75C78F26_var = PlayerGroupNextPlayer(auto75C78F26_g, auto75C78F26_var);
        if (auto75C78F26_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 170, StringExternal("Param/Value/4CA6F019"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerNestSwapModelUnlockingManuTextMech[auto75C78F26_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto75C78F26_var), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorCenter, 260, 177, (IntToText(gv__2v4AIvsVeryHardGamesWon[auto75C78F26_var]) + StringToText("\\3")), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_workerNestSwapModelMechWinrate[auto75C78F26_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto75C78F26_var), true);
    }
}

void gf_UnlockWorkerNestIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("NewWorkerNest", lp_forPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        gv_workerNestSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv__1v1AIvsHardGamesWon[lp_forPlayer] >= 3)) {
        gv_workerNestSwapModelIsUnlockedWebMod[lp_forPlayer] = true;
    }

    if ((gv__2v4AIvsVeryHardGamesWon[lp_forPlayer] >= 3)) {
        gv_workerNestSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnWorkerNestSwapModelStringIntoModelEntry (string lp_normalSubtrailFarm, string lp_workerNestSwapModelString) {
    // Variable Declarations
    string lv_workerNestModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_workerNestModel = "WorkerNestNormalNormalMod";

    // Implementation
    if (((lp_workerNestSwapModelString == "Default") || (lp_workerNestSwapModelString == "Not Chosen"))) {
        if ((lp_normalSubtrailFarm == "Normal")) {
            lv_workerNestModel = "WorkerNestNormalNormalMod";
        }
        else if ((lp_normalSubtrailFarm == "Subtrail")) {
            lv_workerNestModel = "WorkerNestSubtrailNormalMod";
        }
        else if ((lp_normalSubtrailFarm == "Farm")) {
            lv_workerNestModel = "WorkerNestFarmNormalMod";
        }
    }
    else if ((lp_workerNestSwapModelString == "WebMod")) {
        if ((lp_normalSubtrailFarm == "Normal")) {
            lv_workerNestModel = "WorkerNestNormalWebMod";
        }
        else if ((lp_normalSubtrailFarm == "Subtrail")) {
            lv_workerNestModel = "WorkerNestSubtrailWebMod";
        }
        else if ((lp_normalSubtrailFarm == "Farm")) {
            lv_workerNestModel = "WorkerNestFarmWebMod";
        }
    }
    else if ((lp_workerNestSwapModelString == "Mech")) {
        if ((lp_normalSubtrailFarm == "Normal")) {
            lv_workerNestModel = "WorkerNestNormalMech";
        }
        else if ((lp_normalSubtrailFarm == "Subtrail")) {
            lv_workerNestModel = "WorkerNestSubtrailMech";
        }
        else if ((lp_normalSubtrailFarm == "Farm")) {
            lv_workerNestModel = "WorkerNestFarmMech";
        }
    }
    return lv_workerNestModel;
}

string gf_TurnWorkerNestSwapModelStringIntoUnitEntry (string lp_normalSubtrailFarm, int lp_paramPlayer, string lp_workerNestSwapModelString) {
    // Variable Declarations
    string lv_workerNestModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_workerNestSwapModelString == "Default")) {
        if ((lp_normalSubtrailFarm == "Normal")) {
            lv_workerNestModelUnit = "WorkerNestNormalNormalMod";
        }
        else if ((lp_normalSubtrailFarm == "Subtrail")) {
            lv_workerNestModelUnit = "WorkerNestSubtrailNormalMod";
        }
        else if ((lp_normalSubtrailFarm == "Farm")) {
            lv_workerNestModelUnit = "WorkerNestFarmNormalMod";
        }
    }
    else if ((lp_workerNestSwapModelString == "WebMod")) {
        if ((lp_normalSubtrailFarm == "Normal")) {
            lv_workerNestModelUnit = "WorkerNestNormalWebMod";
        }
        else if ((lp_normalSubtrailFarm == "Subtrail")) {
            lv_workerNestModelUnit = "WorkerNestSubtrailWebMod";
        }
        else if ((lp_normalSubtrailFarm == "Farm")) {
            lv_workerNestModelUnit = "WorkerNestFarmWebMod";
        }
    }
    else if ((lp_workerNestSwapModelString == "Mech")) {
        if ((lp_normalSubtrailFarm == "Normal")) {
            lv_workerNestModelUnit = "UnknownUnit";
        }
        else if ((lp_normalSubtrailFarm == "Subtrail")) {
            lv_workerNestModelUnit = "WorkerNestSubtrailMech";
        }
        else if ((lp_normalSubtrailFarm == "Farm")) {
            lv_workerNestModelUnit = "WorkerNestFarmMech";
        }
    }
    return lv_workerNestModelUnit;
}

void gf_CreateSoldierNestSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto6770E46B_g;
    int auto6770E46B_var;
    playergroup auto0C97A908_g;
    int auto0C97A908_var;
    playergroup auto4D7D1F6F_g;
    int auto4D7D1F6F_var;
    playergroup auto2DE4B445_g;
    int auto2DE4B445_var;
    playergroup auto5D4E06E7_g;
    int auto5D4E06E7_var;
    playergroup autoB0D294F4_g;
    int autoB0D294F4_var;

    // Implementation
    auto6770E46B_g = PlayerGroupActive();
    auto6770E46B_var = -1;
    while (true) {
        auto6770E46B_var = PlayerGroupNextPlayer(auto6770E46B_g, auto6770E46B_var);
        if (auto6770E46B_var < 0) { break; }
        gf_UnlockSoldierNestIfConditionsaremet(auto6770E46B_var);
    }
    auto0C97A908_g = PlayerGroupActive();
    auto0C97A908_var = -1;
    while (true) {
        auto0C97A908_var = PlayerGroupNextPlayer(auto0C97A908_g, auto0C97A908_var);
        if (auto0C97A908_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_buildingsSkinsManu, 100, 100, c_anchorCenter, 150, 0, null, null, false, null);
        gv_soldierNestSwapModelManuButtonToggle[auto0C97A908_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0C97A908_var), true);
        DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_soldierNestSwapModelManuButtonModel[auto0C97A908_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnSoldierNestSwapModelStringIntoUnitEntry(0, gv_soldierNestSwapModelString[auto0C97A908_var]), PlayerGroupSingle(auto0C97A908_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0C97A908_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(auto0C97A908_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_soldierNestSwapModelManuDialog = DialogLastCreated();
    auto4D7D1F6F_g = PlayerGroupActive();
    auto4D7D1F6F_var = -1;
    while (true) {
        auto4D7D1F6F_var = PlayerGroupNextPlayer(auto4D7D1F6F_g, auto4D7D1F6F_var);
        if (auto4D7D1F6F_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_soldierNestSwapModelManuLargeModel[auto4D7D1F6F_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnSoldierNestSwapModelStringIntoUnitEntry(0, gv_soldierNestSwapModelString[auto4D7D1F6F_var]), PlayerGroupSingle(auto4D7D1F6F_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto4D7D1F6F_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto4D7D1F6F_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, -150, null, null, false, null);
    gv_soldierNestSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierNestNormal", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, -150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto2DE4B445_g = PlayerGroupActive();
    auto2DE4B445_var = -1;
    while (true) {
        auto2DE4B445_var = PlayerGroupNextPlayer(auto2DE4B445_g, auto2DE4B445_var);
        if (auto2DE4B445_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, -130, StringExternal("Param/Value/C982F30C"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierNestSwapModelUnlockingManuTextDefault[auto2DE4B445_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto2DE4B445_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 0, null, null, false, null);
    gv_soldierNestSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierNestWebMod", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto5D4E06E7_g = PlayerGroupActive();
    auto5D4E06E7_var = -1;
    while (true) {
        auto5D4E06E7_var = PlayerGroupNextPlayer(auto5D4E06E7_g, auto5D4E06E7_var);
        if (auto5D4E06E7_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 20, StringExternal("Param/Value/9621956A"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierNestSwapModelUnlockingManuTextWebMod[auto5D4E06E7_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5D4E06E7_var), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorCenter, 260, 27, (IntToText(gv__1v1AIvsHardGamesWon[auto5D4E06E7_var]) + StringToText("\\10")), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierNestSwapModelSwarmWinrate[auto5D4E06E7_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5D4E06E7_var), true);
    }
    gf_ButtonCreateAEvo(gv_soldierNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 150, null, null, false, null);
    gv_soldierNestSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SoldierNestMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    autoB0D294F4_g = PlayerGroupActive();
    autoB0D294F4_var = -1;
    while (true) {
        autoB0D294F4_var = PlayerGroupNextPlayer(autoB0D294F4_g, autoB0D294F4_var);
        if (autoB0D294F4_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 170, StringExternal("Param/Value/458AD269"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierNestSwapModelUnlockingManuTextMech[autoB0D294F4_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoB0D294F4_var), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorCenter, 260, 177, (IntToText(gv__2v4AIvsVeryHardGamesWon[autoB0D294F4_var]) + StringToText("\\10")), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_soldierNestSwapModelMechWinrate[autoB0D294F4_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoB0D294F4_var), true);
    }
}

void gf_UnlockSoldierNestIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("NewSoldierNest", lp_forPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        gv_soldierNestSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv__1v1AIvsHardGamesWon[lp_forPlayer] >= 10)) {
        gv_soldierNestSwapModelIsUnlockedWebMod[lp_forPlayer] = true;
    }

    if ((gv__2v4AIvsVeryHardGamesWon[lp_forPlayer] >= 10)) {
        gv_soldierNestSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnSoldierNestSwapModelStringIntoModelEntry (string lp_workerNestSwapModelString) {
    // Variable Declarations
    string lv_soldierNestModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierNestModel = "SoldierNestNormalMod";

    // Implementation
    if ((lp_workerNestSwapModelString == "Default")) {
        lv_soldierNestModel = "SoldierNestNormalMod";
    }
    else if ((lp_workerNestSwapModelString == "WebMod")) {
        lv_soldierNestModel = "SoldierNestWebMod";
    }
    else if ((lp_workerNestSwapModelString == "Mech")) {
        lv_soldierNestModel = "SoldierNestMech";
    }
    return lv_soldierNestModel;
}

string gf_TurnSoldierNestSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_workerNestSwapModelString) {
    // Variable Declarations
    string lv_soldierNestModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_workerNestSwapModelString == "Default")) {
        lv_soldierNestModelUnit = "SoldierNestNormal";
    }
    else if ((lp_workerNestSwapModelString == "WebMod")) {
        lv_soldierNestModelUnit = "SoldierNestWebMod";
    }
    else if ((lp_workerNestSwapModelString == "Mech")) {
        lv_soldierNestModelUnit = "SoldierNestMech";
    }
    return lv_soldierNestModelUnit;
}

void gf_CreateBulkBuilderSwapModelManu () {
    // Automatic Variable Declarations
    playergroup autoA2E7BF85_g;
    int autoA2E7BF85_var;
    playergroup auto3B0AEBC2_g;
    int auto3B0AEBC2_var;
    playergroup autoDA65E73D_g;
    int autoDA65E73D_var;
    playergroup autoD5CD196C_g;
    int autoD5CD196C_var;
    playergroup auto90A3974A_g;
    int auto90A3974A_var;
    playergroup auto92511874_g;
    int auto92511874_var;

    // Implementation
    autoA2E7BF85_g = PlayerGroupActive();
    autoA2E7BF85_var = -1;
    while (true) {
        autoA2E7BF85_var = PlayerGroupNextPlayer(autoA2E7BF85_g, autoA2E7BF85_var);
        if (autoA2E7BF85_var < 0) { break; }
        gf_UnlockBulkBuilderIfConditionsaremet(autoA2E7BF85_var);
    }
    auto3B0AEBC2_g = PlayerGroupActive();
    auto3B0AEBC2_var = -1;
    while (true) {
        auto3B0AEBC2_var = PlayerGroupNextPlayer(auto3B0AEBC2_g, auto3B0AEBC2_var);
        if (auto3B0AEBC2_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_buildingsSkinsManu, 100, 100, c_anchorCenter, -50, 0, null, null, false, null);
        gv_bulkBuilderSwapModelManuButtonToggle[auto3B0AEBC2_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto3B0AEBC2_var), true);
        DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_bulkBuilderSwapModelManuButtonModel[auto3B0AEBC2_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(0, gv_bulkBuilderSwapModelString[auto3B0AEBC2_var], "Body"), PlayerGroupSingle(auto3B0AEBC2_var));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 190);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -50, 25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto3B0AEBC2_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto3B0AEBC2_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_bulkBuilderSwapModelManuDialog = DialogLastCreated();
    autoDA65E73D_g = PlayerGroupActive();
    autoDA65E73D_var = -1;
    while (true) {
        autoDA65E73D_var = PlayerGroupNextPlayer(autoDA65E73D_g, autoDA65E73D_var);
        if (autoDA65E73D_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 800);
        gv_bulkBuilderSwapModelManuLargeModelBody[autoDA65E73D_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(0, gv_bulkBuilderSwapModelString[autoDA65E73D_var], "Body"), PlayerGroupSingle(autoDA65E73D_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -100, 120);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(autoDA65E73D_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoDA65E73D_var), true);
    }
    autoD5CD196C_g = PlayerGroupActive();
    autoD5CD196C_var = -1;
    while (true) {
        autoD5CD196C_var = PlayerGroupNextPlayer(autoD5CD196C_g, autoD5CD196C_var);
        if (autoD5CD196C_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 400, 800);
        gv_bulkBuilderSwapModelManuLargeModelTentecle[autoD5CD196C_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(0, gv_bulkBuilderSwapModelString[autoD5CD196C_var], "Tentecle"), PlayerGroupSingle(autoD5CD196C_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -360, 100);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(autoD5CD196C_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoD5CD196C_var), true);
    }
    gf_ButtonCreateAEvo(gv_bulkBuilderSwapModelManuDialog, 100, 100, c_anchorCenter, 110, -150, null, null, false, null);
    gv_bulkBuilderSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 190);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "BulkBuilderBodyDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, -125);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    auto90A3974A_g = PlayerGroupActive();
    auto90A3974A_var = -1;
    while (true) {
        auto90A3974A_var = PlayerGroupNextPlayer(auto90A3974A_g, auto90A3974A_var);
        if (auto90A3974A_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, -130, StringExternal("Param/Value/00FC3E14"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_bulkBuilderSwapModelUnlockingManuTextDefault[auto90A3974A_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto90A3974A_var), true);
    }
    gf_ButtonCreateAEvo(gv_bulkBuilderSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 150, null, null, false, null);
    gv_bulkBuilderSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 190);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "BulkBuilderBodyMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 175);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    auto92511874_g = PlayerGroupActive();
    auto92511874_var = -1;
    while (true) {
        auto92511874_var = PlayerGroupNextPlayer(auto92511874_g, auto92511874_var);
        if (auto92511874_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 170, StringExternal("Param/Value/C2230C6A"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_bulkBuilderSwapModelUnlockingManuTextMech[auto92511874_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto92511874_var), true);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 100, 100, c_anchorCenter, 260, 177, (IntToText(gv_bulkBuildersBuiltbyplayer[auto92511874_var]) + StringToText("\\30")), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_bulkBuilderSwapModelMechWinrate[auto92511874_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto92511874_var), true);
    }
}

void gf_UnlockBulkBuilderIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_bulkBuildersBuiltbyplayer[lp_forPlayer] != 0)) {
        gv_bulkBuilderSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_bulkBuildersBuiltbyplayer[lp_forPlayer] >= 30)) {
        gv_bulkBuilderSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnBulkBuilderSwapModelStringIntoModelEntry (string lp_bulkBuilderSwapModelString, string lp_tentecleorBody) {
    // Variable Declarations
    string lv_bulkBuilderModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bulkBuilderModel = "DebugNumber";

    // Implementation
    gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 100.00, 100.00), ("SwapModel String is " + lp_bulkBuilderSwapModelString));
    if ((lp_tentecleorBody == "Body")) {
        if ((lp_bulkBuilderSwapModelString == "Default")) {
            lv_bulkBuilderModel = "BulkBuilderBodyDefualt";
        }
        else if ((lp_bulkBuilderSwapModelString == "Mech")) {
            lv_bulkBuilderModel = "BulkBuilderBodyMech";
        }
    }
    else if ((lp_tentecleorBody == "Tentecle")) {
        if ((lp_bulkBuilderSwapModelString == "Default")) {
            lv_bulkBuilderModel = "BulkBuilderTentacleDefualt";
        }
        else if ((lp_bulkBuilderSwapModelString == "Mech")) {
            lv_bulkBuilderModel = "BulkBuilderTentacleMech";
        }
    }
    return lv_bulkBuilderModel;
}

string gf_TurnBulkBuilderSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_bulkBuilderSwapModelString, string lp_tentecleorBody) {
    // Variable Declarations
    string lv_bulkBuilderModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_tentecleorBody == "Body")) {
        if ((lp_bulkBuilderSwapModelString == "Default")) {
            lv_bulkBuilderModelUnit = "BulkBuilderBodyDefualt";
        }
        else if ((lp_bulkBuilderSwapModelString == "Mech")) {
            lv_bulkBuilderModelUnit = "BulkBuilderBodyMech";
        }
    }
    else if ((lp_tentecleorBody == "Tentecle")) {
        if ((lp_bulkBuilderSwapModelString == "Default")) {
            lv_bulkBuilderModelUnit = "BulkBuilderTentecleDefualt";
        }
        else if ((lp_bulkBuilderSwapModelString == "Mech")) {
            lv_bulkBuilderModelUnit = "BulkBuilderTentecleMech";
        }
    }
    return lv_bulkBuilderModelUnit;
}

void gf_CreateUpgradeChamberSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto61DB0421_g;
    int auto61DB0421_var;
    playergroup autoEA86B487_g;
    int autoEA86B487_var;
    playergroup auto430517FE_g;
    int auto430517FE_var;
    playergroup auto47D5F99C_g;
    int auto47D5F99C_var;
    playergroup autoFB237B01_g;
    int autoFB237B01_var;
    playergroup auto5E651649_g;
    int auto5E651649_var;

    // Implementation
    auto61DB0421_g = PlayerGroupActive();
    auto61DB0421_var = -1;
    while (true) {
        auto61DB0421_var = PlayerGroupNextPlayer(auto61DB0421_g, auto61DB0421_var);
        if (auto61DB0421_var < 0) { break; }
        gf_UnlockUpgradeChamberIfConditionsaremet(auto61DB0421_var);
    }
    autoEA86B487_g = PlayerGroupActive();
    autoEA86B487_var = -1;
    while (true) {
        autoEA86B487_var = PlayerGroupNextPlayer(autoEA86B487_g, autoEA86B487_var);
        if (autoEA86B487_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_buildingsSkinsManu, 100, 100, c_anchorCenter, -150, 0, null, null, false, null);
        gv_upgradeChamberSwapModelManuButtonToggle[autoEA86B487_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoEA86B487_var), true);
        DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_upgradeChamberSwapModelManuButtonModel[autoEA86B487_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry(0, gv_upgradeChamberSwapModelString[autoEA86B487_var]), PlayerGroupSingle(autoEA86B487_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -150, 0);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 170);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoEA86B487_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(autoEA86B487_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_upgradeChamberSwapModelManuDialog = DialogLastCreated();
    auto430517FE_g = PlayerGroupActive();
    auto430517FE_var = -1;
    while (true) {
        auto430517FE_var = PlayerGroupNextPlayer(auto430517FE_g, auto430517FE_var);
        if (auto430517FE_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 750);
        gv_upgradeChamberSwapModelManuLargeModel[auto430517FE_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry(0, gv_upgradeChamberSwapModelString[auto430517FE_var]), PlayerGroupSingle(auto430517FE_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid04", PlayerGroupSingle(auto430517FE_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto430517FE_var), true);
    }
    gf_ButtonCreateAEvo(gv_upgradeChamberSwapModelManuDialog, 100, 100, c_anchorCenter, 110, -150, null, null, false, null);
    gv_upgradeChamberSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "UpgradeChamberDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, -150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid04", PlayerGroupAll());
    auto47D5F99C_g = PlayerGroupActive();
    auto47D5F99C_var = -1;
    while (true) {
        auto47D5F99C_var = PlayerGroupNextPlayer(auto47D5F99C_g, auto47D5F99C_var);
        if (auto47D5F99C_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, -130, StringExternal("Param/Value/5D58A5C7"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_upgradeChamberSwapModelUnlockingManuTextDefault[auto47D5F99C_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto47D5F99C_var), true);
    }
    gf_ButtonCreateAEvo(gv_upgradeChamberSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 0, null, null, false, null);
    gv_upgradeChamberSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "UpgradeChamberSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid04", PlayerGroupAll());
    autoFB237B01_g = PlayerGroupActive();
    autoFB237B01_var = -1;
    while (true) {
        autoFB237B01_var = PlayerGroupNextPlayer(autoFB237B01_g, autoFB237B01_var);
        if (autoFB237B01_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 20, StringExternal("Param/Value/20FDF579"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_upgradeChamberSwapModelUnlockingManuTextSwarm[autoFB237B01_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoFB237B01_var), true);
    }
    gf_ButtonCreateAEvo(gv_upgradeChamberSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 150, null, null, false, null);
    gv_upgradeChamberSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "UpgradeChamberMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid04", PlayerGroupAll());
    auto5E651649_g = PlayerGroupActive();
    auto5E651649_var = -1;
    while (true) {
        auto5E651649_var = PlayerGroupNextPlayer(auto5E651649_g, auto5E651649_var);
        if (auto5E651649_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 170, StringExternal("Param/Value/197B1BBE"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_upgradeChamberSwapModelUnlockingManuTextMech[auto5E651649_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5E651649_var), true);
    }
}

void gf_UnlockUpgradeChamberIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("UpgradeChamber", lp_forPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        gv_upgradeChamberSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[lp_forPlayer] >= 10)) {
        gv_upgradeChamberSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if ((gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[lp_forPlayer] >= 50)) {
        gv_upgradeChamberSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnUpgradeChamberSwapModelStringIntoModelEntry (string lp_upgradeChamberSwapModelString) {
    // Variable Declarations
    string lv_upgradeChamberModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgradeChamberModel = "UpgradeChamberDefualt";

    // Implementation
    if ((lp_upgradeChamberSwapModelString == "Default")) {
        lv_upgradeChamberModel = "UpgradeChamberDefualt";
    }
    else if ((lp_upgradeChamberSwapModelString == "Swarm")) {
        lv_upgradeChamberModel = "UpgradeChamberSwarm";
    }
    else if ((lp_upgradeChamberSwapModelString == "Mech")) {
        lv_upgradeChamberModel = "UpgradeChamberMech";
    }
    return lv_upgradeChamberModel;
}

string gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_upgradeChamberSwapModelString) {
    // Variable Declarations
    string lv_upgradeChamberModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_upgradeChamberSwapModelString == "Default")) {
        lv_upgradeChamberModelUnit = "UpgradeChamberDefualt";
    }
    else if ((lp_upgradeChamberSwapModelString == "Swarm")) {
        lv_upgradeChamberModelUnit = "UpgradeChamberSwarm";
    }
    else if ((lp_upgradeChamberSwapModelString == "Mech")) {
        lv_upgradeChamberModelUnit = "UpgradeChamberMech";
    }
    return lv_upgradeChamberModelUnit;
}

void gf_CreateSpikesNestSwapModelManu () {
    // Automatic Variable Declarations
    playergroup autoFFF6487A_g;
    int autoFFF6487A_var;
    playergroup autoFC7EA5C1_g;
    int autoFC7EA5C1_var;
    playergroup auto097AD081_g;
    int auto097AD081_var;
    playergroup auto0F05588C_g;
    int auto0F05588C_var;
    playergroup autoCF6CF84C_g;
    int autoCF6CF84C_var;
    playergroup auto011D8D3A_g;
    int auto011D8D3A_var;

    // Implementation
    autoFFF6487A_g = PlayerGroupActive();
    autoFFF6487A_var = -1;
    while (true) {
        autoFFF6487A_var = PlayerGroupNextPlayer(autoFFF6487A_g, autoFFF6487A_var);
        if (autoFFF6487A_var < 0) { break; }
        gf_UnlockSpikesNestIfConditionsaremet(autoFFF6487A_var);
    }
    autoFC7EA5C1_g = PlayerGroupActive();
    autoFC7EA5C1_var = -1;
    while (true) {
        autoFC7EA5C1_var = PlayerGroupNextPlayer(autoFC7EA5C1_g, autoFC7EA5C1_var);
        if (autoFC7EA5C1_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_buildingsSkinsManu, 100, 100, c_anchorCenter, -250, 0, null, null, false, null);
        gv_spikesNestSwapModelManuButtonToggle[autoFC7EA5C1_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoFC7EA5C1_var), true);
        DialogControlCreate(gv_buildingsSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_spikesNestSwapModelManuButtonModel[autoFC7EA5C1_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnSpikesNestSwapModelStringIntoUnitEntry(0, gv_spikesNestSwapModelString[autoFC7EA5C1_var]), PlayerGroupSingle(autoFC7EA5C1_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoFC7EA5C1_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(autoFC7EA5C1_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_spikesNestSwapModelManuDialog = DialogLastCreated();
    auto097AD081_g = PlayerGroupActive();
    auto097AD081_var = -1;
    while (true) {
        auto097AD081_var = PlayerGroupNextPlayer(auto097AD081_g, auto097AD081_var);
        if (auto097AD081_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_spikesNestSwapModelManuLargeModel[auto097AD081_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnSpikesNestSwapModelStringIntoUnitEntry(0, gv_spikesNestSwapModelString[auto097AD081_var]), PlayerGroupSingle(auto097AD081_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto097AD081_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto097AD081_var), true);
    }
    gf_ButtonCreateAEvo(gv_spikesNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, -150, null, null, false, null);
    gv_spikesNestSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SpikesNestModelDefault", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, -150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    auto0F05588C_g = PlayerGroupActive();
    auto0F05588C_var = -1;
    while (true) {
        auto0F05588C_var = PlayerGroupNextPlayer(auto0F05588C_g, auto0F05588C_var);
        if (auto0F05588C_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, -130, StringExternal("Param/Value/88447FC6"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_spikesNestSwapModelUnlockingManuTextDefault[auto0F05588C_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0F05588C_var), true);
    }
    gf_ButtonCreateAEvo(gv_spikesNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 0, null, null, false, null);
    gv_spikesNestSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SpikesNestModelFAT", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 0);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    autoCF6CF84C_g = PlayerGroupActive();
    autoCF6CF84C_var = -1;
    while (true) {
        autoCF6CF84C_var = PlayerGroupNextPlayer(autoCF6CF84C_g, autoCF6CF84C_var);
        if (autoCF6CF84C_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 20, StringExternal("Param/Value/C32F1A00"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_spikesNestSwapModelUnlockingManuTextFAT[autoCF6CF84C_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoCF6CF84C_var), true);
    }
    gf_ButtonCreateAEvo(gv_spikesNestSwapModelManuDialog, 100, 100, c_anchorCenter, 110, 150, null, null, false, null);
    gv_spikesNestSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "SpikesNestModelFATWebMod", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 110, 150);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    auto011D8D3A_g = PlayerGroupActive();
    auto011D8D3A_var = -1;
    while (true) {
        auto011D8D3A_var = PlayerGroupNextPlayer(auto011D8D3A_g, auto011D8D3A_var);
        if (auto011D8D3A_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 320, 170, StringExternal("Param/Value/CE987B42"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_spikesNestSwapModelUnlockingManuTextFATWebMod[auto011D8D3A_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto011D8D3A_var), true);
    }
}

void gf_UnlockSpikesNestIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup("SmallSpikeNest", lp_forPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        gv_spikesNestSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayed[lp_forPlayer] >= 50)) {
        gv_spikesNestSwapModelIsUnlockedFAT[lp_forPlayer] = true;
    }

    if ((gv_kills_BroodlingSpawner[lp_forPlayer] >= 5000)) {
        gv_spikesNestSwapModelIsUnlockedFATWebMod[lp_forPlayer] = true;
    }

}

string gf_TurnSpikesNestSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_spikesNestModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spikesNestModel = "SpikesNestModelDefault";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_spikesNestModel = "SpikesNestModelDefault";
    }
    else if ((lp_queenSwapModelString == "FAT")) {
        lv_spikesNestModel = "SpikesNestModelFAT";
    }
    else if ((lp_queenSwapModelString == "FAT WebMod")) {
        lv_spikesNestModel = "SpikesNestModelFATWebMod";
    }
    return lv_spikesNestModel;
}

string gf_TurnSpikesNestSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_spineNestSwapModelString) {
    // Variable Declarations
    string lv_spikesNestModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_spineNestSwapModelString == "Default")) {
        lv_spikesNestModelUnit = "SpikesNestModelDefault";
    }
    else if ((lp_spineNestSwapModelString == "FAT")) {
        lv_spikesNestModelUnit = "SpikesNestModelFAT";
    }
    else if ((lp_spineNestSwapModelString == "FAT WebMod")) {
        lv_spikesNestModelUnit = "SpikesNestModelFATWebMod";
    }
    return lv_spikesNestModelUnit;
}

void gf_CreateSpecialtyUnitManu () {
    // Automatic Variable Declarations
    playergroup autoF4BB2B0F_g;
    int autoF4BB2B0F_var;
    playergroup autoF43C4DF3_g;
    int autoF43C4DF3_var;
    playergroup auto312E6E57_g;
    int auto312E6E57_var;
    playergroup autoF3025DA5_g;
    int autoF3025DA5_var;
    playergroup auto54F5476C_g;
    int auto54F5476C_var;
    playergroup autoED4F35A5_g;
    int autoED4F35A5_var;
    playergroup auto355FDDE9_g;
    int auto355FDDE9_var;

    // Implementation
    autoF4BB2B0F_g = PlayerGroupActive();
    autoF4BB2B0F_var = -1;
    while (true) {
        autoF4BB2B0F_var = PlayerGroupNextPlayer(autoF4BB2B0F_g, autoF4BB2B0F_var);
        if (autoF4BB2B0F_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_skinsDialog, 100, 100, c_anchorCenter, 0, 300, null, null, false, null);
        gv_specialtyUnitSkinsManuToggle[autoF4BB2B0F_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF4BB2B0F_var), true);
    }
    gf_DialogCreateAEvo(150, 690, c_anchorTopRight, 300, 690, false);
    gv_specialtyUnitSkinsManu = DialogLastCreated();
    autoF43C4DF3_g = PlayerGroupActive();
    autoF43C4DF3_var = -1;
    while (true) {
        autoF43C4DF3_var = PlayerGroupNextPlayer(autoF43C4DF3_g, autoF43C4DF3_var);
        if (autoF43C4DF3_var < 0) { break; }
        if ((gv_majorSwapModelString[autoF43C4DF3_var] == "Not Chosen")) {
            DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
            gv_majorSwapModelClickMeModel[autoF43C4DF3_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_majorSwapModelClickMeModel[autoF43C4DF3_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_majorSwapModelClickMeModel[autoF43C4DF3_var], "MajorDefualtModel", PlayerGroupAll());
            DialogControlSetPosition(gv_majorSwapModelClickMeModel[autoF43C4DF3_var], PlayerGroupAll(), c_anchorCenter, -250, 0);
            DialogControlSetVisible(gv_majorSwapModelClickMeModel[autoF43C4DF3_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_majorSwapModelClickMeModel[autoF43C4DF3_var], PlayerGroupSingle(autoF43C4DF3_var), true);
            libNtve_gf_SetDialogItemCamera(gv_majorSwapModelClickMeModel[autoF43C4DF3_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_specialtyUnitSkinsManu, 128, 128, c_anchorCenter, -250, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_majorSwapModelClickMeImage[autoF43C4DF3_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_majorSwapModelClickMeImage[autoF43C4DF3_var], PlayerGroupSingle(autoF43C4DF3_var), false);
            DialogControlSetVisible(gv_majorSwapModelClickMeImage[autoF43C4DF3_var], PlayerGroupAll(), true);
        }

        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, -250, 50, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_blackWinrateOfPlayer[autoF43C4DF3_var])), c_fixedPrecisionAny) + StringExternal("Param/Value/2FA7632E")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF43C4DF3_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, -225, 100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF43C4DF3_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, -250, 50, TextWithColor((IntToText(gv_amountOfGamesWonAsBlackant[autoF43C4DF3_var]) + (StringExternal("Param/Value/493B43FB") + IntToText(gv_amountOfGamesPlayedAsBlackant[autoF43C4DF3_var]))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF43C4DF3_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, -225, -25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF43C4DF3_var), true);
    }
    gf_CreateMajorSwapModelManu();
    auto312E6E57_g = PlayerGroupActive();
    auto312E6E57_var = -1;
    while (true) {
        auto312E6E57_var = PlayerGroupNextPlayer(auto312E6E57_g, auto312E6E57_var);
        if (auto312E6E57_var < 0) { break; }
        if ((gv_stingerSwapModelString[auto312E6E57_var] == "Not Chosen")) {
            DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
            gv_stingerSwapModelClickMeModel[auto312E6E57_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_stingerSwapModelClickMeModel[auto312E6E57_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_stingerSwapModelClickMeModel[auto312E6E57_var], "StingerDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_stingerSwapModelClickMeModel[auto312E6E57_var], PlayerGroupAll(), c_anchorCenter, -150, 0);
            DialogControlSetVisible(gv_stingerSwapModelClickMeModel[auto312E6E57_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_stingerSwapModelClickMeModel[auto312E6E57_var], PlayerGroupSingle(auto312E6E57_var), true);
            libNtve_gf_SetDialogItemCamera(gv_stingerSwapModelClickMeModel[auto312E6E57_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_specialtyUnitSkinsManu, 128, 128, c_anchorCenter, -150, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_stingerSwapModelClickMeImage[auto312E6E57_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_stingerSwapModelClickMeImage[auto312E6E57_var], PlayerGroupSingle(auto312E6E57_var), false);
            DialogControlSetVisible(gv_stingerSwapModelClickMeImage[auto312E6E57_var], PlayerGroupAll(), true);
        }

        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, -150, 50, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_fireWinrateOfPlayer[auto312E6E57_var])), c_fixedPrecisionAny) + StringExternal("Param/Value/402761EC")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto312E6E57_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, -125, 100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto312E6E57_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, -150, 50, TextWithColor((IntToText(gv_amountOfGamesWonAsFireAnt[auto312E6E57_var]) + (StringExternal("Param/Value/B9A04B23") + IntToText(gv_amountOfGamesPlayedAsFireAnt[auto312E6E57_var]))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto312E6E57_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, -125, -25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto312E6E57_var), true);
    }
    gf_CreateStingerSwapModelManu();
    autoF3025DA5_g = PlayerGroupActive();
    autoF3025DA5_var = -1;
    while (true) {
        autoF3025DA5_var = PlayerGroupNextPlayer(autoF3025DA5_g, autoF3025DA5_var);
        if (autoF3025DA5_var < 0) { break; }
        if ((gv_acidSprayerSwapModelString[autoF3025DA5_var] == "Not Chosen")) {
            DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
            gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var], "AcidSprayerDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var], PlayerGroupAll(), c_anchorCenter, -50, 0);
            DialogControlSetVisible(gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var], PlayerGroupSingle(autoF3025DA5_var), true);
            libNtve_gf_SetDialogItemCamera(gv_acidSprayerSwapModelClickMeModel[autoF3025DA5_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_specialtyUnitSkinsManu, 128, 128, c_anchorCenter, -50, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_acidSprayerSwapModelClickMeImage[autoF3025DA5_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_acidSprayerSwapModelClickMeImage[autoF3025DA5_var], PlayerGroupSingle(autoF3025DA5_var), false);
            DialogControlSetVisible(gv_acidSprayerSwapModelClickMeImage[autoF3025DA5_var], PlayerGroupAll(), true);
        }

        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, -50, 50, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_woodWinrateOfPlayer[autoF3025DA5_var])), c_fixedPrecisionAny) + StringExternal("Param/Value/045AABA1")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF3025DA5_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, -25, 100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF3025DA5_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, -50, 50, TextWithColor((IntToText(gv_amountOfGamesWonAsWoodAnt[autoF3025DA5_var]) + (StringExternal("Param/Value/F19D2802") + IntToText(gv_amountOfGamesPlayedAsWoodAnt[autoF3025DA5_var]))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoF3025DA5_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, -25, -25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF3025DA5_var), true);
    }
    gf_CreateAcidSprayerSwapModelManu();
    auto54F5476C_g = PlayerGroupActive();
    auto54F5476C_var = -1;
    while (true) {
        auto54F5476C_var = PlayerGroupNextPlayer(auto54F5476C_g, auto54F5476C_var);
        if (auto54F5476C_var < 0) { break; }
        if ((gv_tunnelTremblerSwapModelString[auto54F5476C_var] == "Not Chosen")) {
            DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
            gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var], "TunnelTremblerDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var], PlayerGroupAll(), c_anchorCenter, 50, 0);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var], PlayerGroupSingle(auto54F5476C_var), true);
            libNtve_gf_SetDialogItemCamera(gv_tunnelTremblerSwapModelClickMeModel[auto54F5476C_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_specialtyUnitSkinsManu, 128, 128, c_anchorCenter, 50, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_tunnelTremblerSwapModelClickMeImage[auto54F5476C_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_tunnelTremblerSwapModelClickMeImage[auto54F5476C_var], PlayerGroupSingle(auto54F5476C_var), false);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelClickMeImage[auto54F5476C_var], PlayerGroupAll(), true);
        }

        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, 50, 50, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_leafCutterWinrateOfPlayer[auto54F5476C_var])), c_fixedPrecisionAny) + StringExternal("Param/Value/A5842081")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto54F5476C_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, 75, 100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto54F5476C_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, 50, 50, TextWithColor((IntToText(gv_amountOfGamesWonAsLeafCutterAnt[auto54F5476C_var]) + (StringExternal("Param/Value/7028FF72") + IntToText(gv_amountOfGamesPlayedAsLeafCutterAnt[auto54F5476C_var]))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto54F5476C_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, 75, -25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto54F5476C_var), true);
    }
    gf_CreateTunnelTremblerSwapModelManu();
    autoED4F35A5_g = PlayerGroupActive();
    autoED4F35A5_var = -1;
    while (true) {
        autoED4F35A5_var = PlayerGroupNextPlayer(autoED4F35A5_g, autoED4F35A5_var);
        if (autoED4F35A5_var < 0) { break; }
        if ((gv_khepriSwapModelString[autoED4F35A5_var] == "Not Chosen")) {
            DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
            gv_khepriSwapModelClickMeModel[autoED4F35A5_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_khepriSwapModelClickMeModel[autoED4F35A5_var], PlayerGroupAll(), 100, 120);
            libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelClickMeModel[autoED4F35A5_var], "KhepriDefualt", PlayerGroupAll());
            DialogControlSetPosition(gv_khepriSwapModelClickMeModel[autoED4F35A5_var], PlayerGroupAll(), c_anchorCenter, 150, 0);
            DialogControlSetVisible(gv_khepriSwapModelClickMeModel[autoED4F35A5_var], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_khepriSwapModelClickMeModel[autoED4F35A5_var], PlayerGroupSingle(autoED4F35A5_var), true);
            libNtve_gf_SetDialogItemCamera(gv_khepriSwapModelClickMeModel[autoED4F35A5_var], "Star2CameraMid02", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_specialtyUnitSkinsManu, 128, 128, c_anchorCenter, 150, 0, StringToText(""), "Click me.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            gv_khepriSwapModelClickMeImage[autoED4F35A5_var] = DialogControlLastCreated();
            DialogControlSetVisible(gv_khepriSwapModelClickMeImage[autoED4F35A5_var], PlayerGroupSingle(autoED4F35A5_var), false);
            DialogControlSetVisible(gv_khepriSwapModelClickMeImage[autoED4F35A5_var], PlayerGroupAll(), true);
        }

        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, 150, 50, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_pharaohWinrateOfPlayer[autoED4F35A5_var])), c_fixedPrecisionAny) + StringExternal("Param/Value/0847690A")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoED4F35A5_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, 175, 100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoED4F35A5_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, 150, 50, TextWithColor((IntToText(gv_amountOfGamesWonAsPharaohAnt[autoED4F35A5_var]) + (StringExternal("Param/Value/4F3EFDA4") + IntToText(gv_amountOfGamesPlayedAsPharaohAnt[autoED4F35A5_var]))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoED4F35A5_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, 175, -25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoED4F35A5_var), true);
    }
    gf_CreateKhepriSwapModelManu();
    auto355FDDE9_g = PlayerGroupActive();
    auto355FDDE9_var = -1;
    while (true) {
        auto355FDDE9_var = PlayerGroupNextPlayer(auto355FDDE9_g, auto355FDDE9_var);
        if (auto355FDDE9_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, 250, 50, TextWithColor((FixedToText(IntToFixed(FixedToInt(gv_ghostWinrateOfPlayer[auto355FDDE9_var])), c_fixedPrecisionAny) + StringExternal("Param/Value/8D3720C5")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto355FDDE9_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, 275, 100);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto355FDDE9_var), true);
        libNtve_gf_CreateDialogItemLabel(gv_specialtyUnitSkinsManu, 100, 100, c_anchorTopLeft, 250, 50, TextWithColor((IntToText(gv_amountOfGamesWonAsGhostAnt[auto355FDDE9_var]) + (StringExternal("Param/Value/B0984EF0") + IntToText(gv_amountOfGamesPlayedAsGhostAnt[auto355FDDE9_var]))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto355FDDE9_var, false))), ColorWithAlpha(0,0,0,0), false, 2.0);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupActive(), c_anchorCenter, 275, -25);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto355FDDE9_var), true);
    }
    gf_ButtonCreateAEvo(gv_specialtyUnitSkinsManu, 100, 100, c_anchorCenter, 250, 0, null, null, false, null);
    libNtve_gf_CreateDialogItemImage(gv_specialtyUnitSkinsManu, 128, 128, c_anchorCenter, 250, 0, StringToText(""), "Coming Soon.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
}

void gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_majorsSwapModelManuOpen[EventPlayer()] == true)) {
        gv_majorsSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_majorSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_majorSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_stingersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_stingersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_stingerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_stingerSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_acidSprayersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_acidSprayersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_acidSprayerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_acidSprayerSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_tunnelTremblerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_tunnelTremblerSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    if ((gv_kheprisSwapModelManuOpen[EventPlayer()] == true)) {
        gv_kheprisSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_khepriSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_khepriSwapModelManuButtonToggle[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

}

void gf_CreateMajorSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto65F426F0_g;
    int auto65F426F0_var;
    playergroup auto2B143DF4_g;
    int auto2B143DF4_var;
    playergroup autoE49A2A34_g;
    int autoE49A2A34_var;
    playergroup auto5679A7AE_g;
    int auto5679A7AE_var;
    playergroup autoACB4A092_g;
    int autoACB4A092_var;
    playergroup auto4A8DC735_g;
    int auto4A8DC735_var;
    playergroup autoFF2CC2A4_g;
    int autoFF2CC2A4_var;

    // Implementation
    auto65F426F0_g = PlayerGroupActive();
    auto65F426F0_var = -1;
    while (true) {
        auto65F426F0_var = PlayerGroupNextPlayer(auto65F426F0_g, auto65F426F0_var);
        if (auto65F426F0_var < 0) { break; }
        gf_UnlockMajorIfConditionsaremet(auto65F426F0_var);
    }
    auto2B143DF4_g = PlayerGroupActive();
    auto2B143DF4_var = -1;
    while (true) {
        auto2B143DF4_var = PlayerGroupNextPlayer(auto2B143DF4_g, auto2B143DF4_var);
        if (auto2B143DF4_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_specialtyUnitSkinsManu, 100, 100, c_anchorCenter, -250, 0, null, null, false, null);
        gv_majorSwapModelManuButtonToggle[auto2B143DF4_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto2B143DF4_var), true);
        DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_majorSwapModelManuButtonModel[auto2B143DF4_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnMajorSwapModelStringIntoUnitEntry(0, gv_majorSwapModelString[auto2B143DF4_var]), PlayerGroupSingle(auto2B143DF4_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -250, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto2B143DF4_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto2B143DF4_var));
    }
    gf_DialogCreateAEvo(600, 1050, c_anchorTopRight, 300, 80, false);
    gv_majorSwapModelManuDialog = DialogLastCreated();
    autoE49A2A34_g = PlayerGroupActive();
    autoE49A2A34_var = -1;
    while (true) {
        autoE49A2A34_var = PlayerGroupNextPlayer(autoE49A2A34_g, autoE49A2A34_var);
        if (autoE49A2A34_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_majorSwapModelManuLargeModel[autoE49A2A34_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnMajorSwapModelStringIntoUnitEntry(0, gv_majorSwapModelString[autoE49A2A34_var]), PlayerGroupSingle(autoE49A2A34_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -200, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(autoE49A2A34_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoE49A2A34_var), true);
    }
    gf_ButtonCreateAEvo(gv_majorSwapModelManuDialog, 100, 100, c_anchorCenter, 130, -210, null, null, false, null);
    gv_majorSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "MajorDefualtModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    auto5679A7AE_g = PlayerGroupActive();
    auto5679A7AE_var = -1;
    while (true) {
        auto5679A7AE_var = PlayerGroupNextPlayer(auto5679A7AE_g, auto5679A7AE_var);
        if (auto5679A7AE_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, -190, StringExternal("Param/Value/E67831B8"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_majorSwapModelUnlockingManuTextDefault[auto5679A7AE_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5679A7AE_var), true);
    }
    gf_ButtonCreateAEvo(gv_majorSwapModelManuDialog, 100, 100, c_anchorCenter, 130, -80, null, null, false, null);
    gv_majorSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "MajorPrimalModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    autoACB4A092_g = PlayerGroupActive();
    autoACB4A092_var = -1;
    while (true) {
        autoACB4A092_var = PlayerGroupNextPlayer(autoACB4A092_g, autoACB4A092_var);
        if (autoACB4A092_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, -60, StringExternal("Param/Value/86ECC0BC"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_majorSwapModelUnlockingManuTextGray[autoACB4A092_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoACB4A092_var), true);
    }
    gf_ButtonCreateAEvo(gv_majorSwapModelManuDialog, 100, 100, c_anchorCenter, 130, 50, null, null, false, null);
    gv_majorSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "MajorSwarmModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    auto4A8DC735_g = PlayerGroupActive();
    auto4A8DC735_var = -1;
    while (true) {
        auto4A8DC735_var = PlayerGroupNextPlayer(auto4A8DC735_g, auto4A8DC735_var);
        if (auto4A8DC735_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, 70, StringExternal("Param/Value/B93A824A"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_majorSwapModelUnlockingManuTextSwarm[auto4A8DC735_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto4A8DC735_var), true);
    }
    gf_ButtonCreateAEvo(gv_majorSwapModelManuDialog, 100, 100, c_anchorCenter, 130, 180, null, null, false, null);
    gv_majorSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "MajorMechModel", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    autoFF2CC2A4_g = PlayerGroupActive();
    autoFF2CC2A4_var = -1;
    while (true) {
        autoFF2CC2A4_var = PlayerGroupNextPlayer(autoFF2CC2A4_g, autoFF2CC2A4_var);
        if (autoFF2CC2A4_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, 200, StringExternal("Param/Value/FD1BD601"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_majorSwapModelUnlockingManuTextMech[autoFF2CC2A4_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoFF2CC2A4_var), true);
    }
}

void gf_UnlockMajorIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(lp_forPlayer, "BlackAnt", c_techCountCompleteOnly) == 1) || (gv_amountOfGamesPlayedAsBlackant[lp_forPlayer] > 1))) {
        gv_majorSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayedAsBlackant[lp_forPlayer] >= 5)) {
        gv_majorSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsBlackant[lp_forPlayer] >= 10) && (gv_blackWinrateOfPlayer[lp_forPlayer] >= 80.0))) {
        gv_majorSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsBlackant[lp_forPlayer] >= 10) && (gv_blackWinrateOfPlayer[lp_forPlayer] >= 95.0))) {
        gv_majorSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnMajorSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "MajorDefault";

    // Implementation
    if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
        lv_soldierModel = "MajorDefault";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModel = "MajorPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModel = "MajorSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModel = "MajorMech";
    }
    return lv_soldierModel;
}

string gf_TurnMajorSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModelUnit = "MajorDefualtModel";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_soldierModelUnit = "MajorDefualtModel";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModelUnit = "MajorPrimalModel";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModelUnit = "MajorSwarmModel";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModelUnit = "MajorMechModel";
    }
    return lv_soldierModelUnit;
}

void gf_CreateStingerSwapModelManu () {
    // Automatic Variable Declarations
    playergroup autoA19B46FD_g;
    int autoA19B46FD_var;
    playergroup auto0DA31451_g;
    int auto0DA31451_var;
    playergroup auto9516E885_g;
    int auto9516E885_var;
    playergroup auto65E8AC58_g;
    int auto65E8AC58_var;
    playergroup auto657CC831_g;
    int auto657CC831_var;
    playergroup auto364915CC_g;
    int auto364915CC_var;
    playergroup auto66B228AF_g;
    int auto66B228AF_var;

    // Implementation
    autoA19B46FD_g = PlayerGroupActive();
    autoA19B46FD_var = -1;
    while (true) {
        autoA19B46FD_var = PlayerGroupNextPlayer(autoA19B46FD_g, autoA19B46FD_var);
        if (autoA19B46FD_var < 0) { break; }
        gf_UnlockStingerIfConditionsaremet(autoA19B46FD_var);
    }
    auto0DA31451_g = PlayerGroupActive();
    auto0DA31451_var = -1;
    while (true) {
        auto0DA31451_var = PlayerGroupNextPlayer(auto0DA31451_g, auto0DA31451_var);
        if (auto0DA31451_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_specialtyUnitSkinsManu, 100, 100, c_anchorCenter, -150, 0, null, null, false, null);
        gv_stingerSwapModelManuButtonToggle[auto0DA31451_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0DA31451_var), true);
        DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_stingerSwapModelManuButtonModel[auto0DA31451_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnStingerSwapModelStringIntoUnitEntry(0, gv_stingerSwapModelString[auto0DA31451_var]), PlayerGroupSingle(auto0DA31451_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -150, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0DA31451_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(auto0DA31451_var));
    }
    gf_DialogCreateAEvo(600, 1050, c_anchorTopRight, 300, 80, false);
    gv_stingerSwapModelManuDialog = DialogLastCreated();
    auto9516E885_g = PlayerGroupActive();
    auto9516E885_var = -1;
    while (true) {
        auto9516E885_var = PlayerGroupNextPlayer(auto9516E885_g, auto9516E885_var);
        if (auto9516E885_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_stingerSwapModelManuLargeModel[auto9516E885_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnStingerSwapModelStringIntoUnitEntry(0, gv_stingerSwapModelString[auto9516E885_var]), PlayerGroupSingle(auto9516E885_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -200, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(auto9516E885_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto9516E885_var), true);
    }
    gf_ButtonCreateAEvo(gv_stingerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, -210, null, null, false, null);
    gv_stingerSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "StingerDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto65E8AC58_g = PlayerGroupActive();
    auto65E8AC58_var = -1;
    while (true) {
        auto65E8AC58_var = PlayerGroupNextPlayer(auto65E8AC58_g, auto65E8AC58_var);
        if (auto65E8AC58_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, -190, StringExternal("Param/Value/02A6CE87"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_stingerSwapModelUnlockingManuTextDefault[auto65E8AC58_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65E8AC58_var), true);
    }
    gf_ButtonCreateAEvo(gv_stingerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, -80, null, null, false, null);
    gv_stingerSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "StingerPrimal", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto657CC831_g = PlayerGroupActive();
    auto657CC831_var = -1;
    while (true) {
        auto657CC831_var = PlayerGroupNextPlayer(auto657CC831_g, auto657CC831_var);
        if (auto657CC831_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, -60, StringExternal("Param/Value/DA27E4F5"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_stingerSwapModelUnlockingManuTextGray[auto657CC831_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto657CC831_var), true);
    }
    gf_ButtonCreateAEvo(gv_stingerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, 50, null, null, false, null);
    gv_stingerSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "StingerSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto364915CC_g = PlayerGroupActive();
    auto364915CC_var = -1;
    while (true) {
        auto364915CC_var = PlayerGroupNextPlayer(auto364915CC_g, auto364915CC_var);
        if (auto364915CC_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, 70, StringExternal("Param/Value/E4FC52FB"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_stingerSwapModelUnlockingManuTextSwarm[auto364915CC_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto364915CC_var), true);
    }
    gf_ButtonCreateAEvo(gv_stingerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, 180, null, null, false, null);
    gv_stingerSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "StingerMecha", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto66B228AF_g = PlayerGroupActive();
    auto66B228AF_var = -1;
    while (true) {
        auto66B228AF_var = PlayerGroupNextPlayer(auto66B228AF_g, auto66B228AF_var);
        if (auto66B228AF_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, 200, StringExternal("Param/Value/735DF96E"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_stingerSwapModelUnlockingManuTextMech[auto66B228AF_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto66B228AF_var), true);
    }
}

void gf_UnlockStingerIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(lp_forPlayer, "FireAnt", c_techCountCompleteOnly) == 1) || (gv_amountOfGamesPlayedAsFireAnt[lp_forPlayer] > 1))) {
        gv_stingerSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayedAsFireAnt[lp_forPlayer] >= 5)) {
        gv_stingerSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsFireAnt[lp_forPlayer] >= 10) && (gv_fireWinrateOfPlayer[lp_forPlayer] >= 80.0))) {
        gv_stingerSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsFireAnt[lp_forPlayer] >= 10) && (gv_fireWinrateOfPlayer[lp_forPlayer] >= 95.0))) {
        gv_stingerSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnStingerSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "StingerDefualt";

    // Implementation
    if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
        lv_soldierModel = "StingerDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModel = "StingerPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModel = "StingerSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModel = "StingerMecha";
    }
    return lv_soldierModel;
}

string gf_TurnStingerSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModelUnit = "StingerDefualt";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_soldierModelUnit = "StingerDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModelUnit = "StingerPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModelUnit = "StingerSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModelUnit = "StingerMecha";
    }
    return lv_soldierModelUnit;
}

void gf_CreateAcidSprayerSwapModelManu () {
    // Automatic Variable Declarations
    playergroup autoF54C76DE_g;
    int autoF54C76DE_var;
    playergroup auto0E94F52B_g;
    int auto0E94F52B_var;
    playergroup autoAE5048ED_g;
    int autoAE5048ED_var;
    playergroup auto418D2E2A_g;
    int auto418D2E2A_var;
    playergroup auto98DAF741_g;
    int auto98DAF741_var;
    playergroup auto7ADD0A80_g;
    int auto7ADD0A80_var;
    playergroup auto72982B6D_g;
    int auto72982B6D_var;

    // Implementation
    autoF54C76DE_g = PlayerGroupActive();
    autoF54C76DE_var = -1;
    while (true) {
        autoF54C76DE_var = PlayerGroupNextPlayer(autoF54C76DE_g, autoF54C76DE_var);
        if (autoF54C76DE_var < 0) { break; }
        gf_UnlockAcidSprayerIfConditionsaremet(autoF54C76DE_var);
    }
    auto0E94F52B_g = PlayerGroupActive();
    auto0E94F52B_var = -1;
    while (true) {
        auto0E94F52B_var = PlayerGroupNextPlayer(auto0E94F52B_g, auto0E94F52B_var);
        if (auto0E94F52B_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_specialtyUnitSkinsManu, 100, 100, c_anchorCenter, -50, 0, null, null, false, null);
        gv_acidSprayerSwapModelManuButtonToggle[auto0E94F52B_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0E94F52B_var), true);
        DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_acidSprayerSwapModelManuButtonModel[auto0E94F52B_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnAcidSprayerSwapModelStringIntoUnitEntry(0, gv_acidSprayerSwapModelString[auto0E94F52B_var]), PlayerGroupSingle(auto0E94F52B_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -50, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto0E94F52B_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(auto0E94F52B_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_acidSprayerSwapModelManuDialog = DialogLastCreated();
    autoAE5048ED_g = PlayerGroupActive();
    autoAE5048ED_var = -1;
    while (true) {
        autoAE5048ED_var = PlayerGroupNextPlayer(autoAE5048ED_g, autoAE5048ED_var);
        if (autoAE5048ED_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_acidSprayerSwapModelManuLargeModel[autoAE5048ED_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnAcidSprayerSwapModelStringIntoUnitEntry(0, gv_acidSprayerSwapModelString[autoAE5048ED_var]), PlayerGroupSingle(autoAE5048ED_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(autoAE5048ED_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoAE5048ED_var), true);
    }
    gf_ButtonCreateAEvo(gv_acidSprayerSwapModelManuDialog, 100, 180, c_anchorCenter, 110, -210, null, null, false, null);
    gv_acidSprayerSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerDefualtFast", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto418D2E2A_g = PlayerGroupActive();
    auto418D2E2A_var = -1;
    while (true) {
        auto418D2E2A_var = PlayerGroupNextPlayer(auto418D2E2A_g, auto418D2E2A_var);
        if (auto418D2E2A_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, -190, StringExternal("Param/Value/22386AC3"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_acidSprayerSwapModelUnlockingManuTextDefault[auto418D2E2A_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto418D2E2A_var), true);
    }
    gf_ButtonCreateAEvo(gv_acidSprayerSwapModelManuDialog, 100, 180, c_anchorCenter, 110, -80, null, null, false, null);
    gv_acidSprayerSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerPrimal", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerPrimalFast", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto98DAF741_g = PlayerGroupActive();
    auto98DAF741_var = -1;
    while (true) {
        auto98DAF741_var = PlayerGroupNextPlayer(auto98DAF741_g, auto98DAF741_var);
        if (auto98DAF741_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, -60, StringExternal("Param/Value/0EA4912A"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_acidSprayerSwapModelUnlockingManuTextGray[auto98DAF741_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto98DAF741_var), true);
    }
    gf_ButtonCreateAEvo(gv_acidSprayerSwapModelManuDialog, 100, 180, c_anchorCenter, 110, 50, null, null, false, null);
    gv_acidSprayerSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerSwarmFast", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto7ADD0A80_g = PlayerGroupActive();
    auto7ADD0A80_var = -1;
    while (true) {
        auto7ADD0A80_var = PlayerGroupNextPlayer(auto7ADD0A80_g, auto7ADD0A80_var);
        if (auto7ADD0A80_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, 70, StringExternal("Param/Value/1FD382E0"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_acidSprayerSwapModelUnlockingManuTextSwarm[auto7ADD0A80_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto7ADD0A80_var), true);
    }
    gf_ButtonCreateAEvo(gv_acidSprayerSwapModelManuDialog, 100, 180, c_anchorCenter, 110, 180, null, null, false, null);
    gv_acidSprayerSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "AcidSprayerMechFast", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto72982B6D_g = PlayerGroupActive();
    auto72982B6D_var = -1;
    while (true) {
        auto72982B6D_var = PlayerGroupNextPlayer(auto72982B6D_g, auto72982B6D_var);
        if (auto72982B6D_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, 200, StringExternal("Param/Value/2110C23B"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_acidSprayerSwapModelUnlockingManuTextMech[auto72982B6D_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto72982B6D_var), true);
    }
}

void gf_UnlockAcidSprayerIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(lp_forPlayer, "WoodAnt", c_techCountCompleteOnly) == 1) || (gv_amountOfGamesPlayedAsWoodAnt[lp_forPlayer] > 1))) {
        gv_acidSprayerSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayedAsWoodAnt[lp_forPlayer] >= 5)) {
        gv_acidSprayerSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsWoodAnt[lp_forPlayer] >= 10) && (gv_woodWinrateOfPlayer[lp_forPlayer] >= 80.0))) {
        gv_acidSprayerSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsWoodAnt[lp_forPlayer] >= 10) && (gv_woodWinrateOfPlayer[lp_forPlayer] >= 95.0))) {
        gv_acidSprayerSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnAcidSprayerSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "AcidSprayerDefualt";

    // Implementation
    if ((TechTreeUpgradeCount(EventPlayer(), "zerglingmovementspeed", c_techCountCompleteOnly) >= 1)) {
        if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
            lv_soldierModel = "AcidSprayerDefualtFast";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModel = "AcidSprayerPrimalFast";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModel = "AcidSprayerSwarmFast";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModel = "AcidSprayerMechFast";
        }
    }
    else {
        if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
            lv_soldierModel = "AcidSprayerDefualt";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModel = "AcidSprayerPrimal";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModel = "AcidSprayerSwarm";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModel = "AcidSprayerMech";
        }
    }
    return lv_soldierModel;
}

string gf_TurnAcidSprayerSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModelUnit = "AcidSprayerDefualt";

    // Implementation
    if ((TechTreeUpgradeCount(lp_paramPlayer, "zerglingmovementspeed", c_techCountCompleteOnly) >= 1)) {
        if ((lp_queenSwapModelString == "Default")) {
            lv_soldierModelUnit = "AcidSprayerDefualtFast";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModelUnit = "AcidSprayerPrimalFast";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModelUnit = "AcidSprayerSwarmFast";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModelUnit = "AcidSprayerMechFast";
        }
    }
    else {
        if ((lp_queenSwapModelString == "Default")) {
            lv_soldierModelUnit = "AcidSprayerDefualt";
        }
        else if ((lp_queenSwapModelString == "Gray")) {
            lv_soldierModelUnit = "AcidSprayerPrimal";
        }
        else if ((lp_queenSwapModelString == "Swarm")) {
            lv_soldierModelUnit = "AcidSprayerSwarm";
        }
        else if ((lp_queenSwapModelString == "Mech")) {
            lv_soldierModelUnit = "AcidSprayerMech";
        }
    }
    return lv_soldierModelUnit;
}

void gf_CreateTunnelTremblerSwapModelManu () {
    // Automatic Variable Declarations
    playergroup autoADF4BF69_g;
    int autoADF4BF69_var;
    playergroup auto5DAAD72C_g;
    int auto5DAAD72C_var;
    playergroup auto2169FC16_g;
    int auto2169FC16_var;
    playergroup autoA52C36A5_g;
    int autoA52C36A5_var;
    playergroup auto79B7DC77_g;
    int auto79B7DC77_var;
    playergroup auto047F8F27_g;
    int auto047F8F27_var;
    playergroup auto21471D05_g;
    int auto21471D05_var;

    // Implementation
    autoADF4BF69_g = PlayerGroupActive();
    autoADF4BF69_var = -1;
    while (true) {
        autoADF4BF69_var = PlayerGroupNextPlayer(autoADF4BF69_g, autoADF4BF69_var);
        if (autoADF4BF69_var < 0) { break; }
        gf_UnlockTunnelTremblerIfConditionsaremet(autoADF4BF69_var);
    }
    auto5DAAD72C_g = PlayerGroupActive();
    auto5DAAD72C_var = -1;
    while (true) {
        auto5DAAD72C_var = PlayerGroupNextPlayer(auto5DAAD72C_g, auto5DAAD72C_var);
        if (auto5DAAD72C_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_specialtyUnitSkinsManu, 100, 100, c_anchorCenter, 50, 0, null, null, false, null);
        gv_tunnelTremblerSwapModelManuButtonToggle[auto5DAAD72C_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5DAAD72C_var), true);
        DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_tunnelTremblerSwapModelManuButtonModel[auto5DAAD72C_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry(0, gv_tunnelTremblerSwapModelString[auto5DAAD72C_var]), PlayerGroupSingle(auto5DAAD72C_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 50, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto5DAAD72C_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(auto5DAAD72C_var));
    }
    gf_DialogCreateAEvo(600, 1050, c_anchorTopRight, 300, 80, false);
    gv_tunnelTremblerSwapModelManuDialog = DialogLastCreated();
    auto2169FC16_g = PlayerGroupActive();
    auto2169FC16_var = -1;
    while (true) {
        auto2169FC16_var = PlayerGroupNextPlayer(auto2169FC16_g, auto2169FC16_var);
        if (auto2169FC16_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_tunnelTremblerSwapModelManuLargeModel[auto2169FC16_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry(0, gv_tunnelTremblerSwapModelString[auto2169FC16_var]), PlayerGroupSingle(auto2169FC16_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -200, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupSingle(auto2169FC16_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto2169FC16_var), true);
    }
    gf_ButtonCreateAEvo(gv_tunnelTremblerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, -210, null, null, false, null);
    gv_tunnelTremblerSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "TunnelTremblerDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    autoA52C36A5_g = PlayerGroupActive();
    autoA52C36A5_var = -1;
    while (true) {
        autoA52C36A5_var = PlayerGroupNextPlayer(autoA52C36A5_g, autoA52C36A5_var);
        if (autoA52C36A5_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, -190, StringExternal("Param/Value/7820E0D7"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_tunnelTremblerSwapModelUnlockingManuTextDefault[autoA52C36A5_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoA52C36A5_var), true);
    }
    gf_ButtonCreateAEvo(gv_tunnelTremblerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, -80, null, null, false, null);
    gv_tunnelTremblerSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "TunnelTremblerPrimal", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto79B7DC77_g = PlayerGroupActive();
    auto79B7DC77_var = -1;
    while (true) {
        auto79B7DC77_var = PlayerGroupNextPlayer(auto79B7DC77_g, auto79B7DC77_var);
        if (auto79B7DC77_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, -60, StringExternal("Param/Value/6D802124"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_tunnelTremblerSwapModelUnlockingManuTextGray[auto79B7DC77_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto79B7DC77_var), true);
    }
    gf_ButtonCreateAEvo(gv_tunnelTremblerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, 50, null, null, false, null);
    gv_tunnelTremblerSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "TunnelTremblerSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto047F8F27_g = PlayerGroupActive();
    auto047F8F27_var = -1;
    while (true) {
        auto047F8F27_var = PlayerGroupNextPlayer(auto047F8F27_g, auto047F8F27_var);
        if (auto047F8F27_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, 70, StringExternal("Param/Value/90EEC176"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[auto047F8F27_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto047F8F27_var), true);
    }
    gf_ButtonCreateAEvo(gv_tunnelTremblerSwapModelManuDialog, 100, 100, c_anchorCenter, 130, 180, null, null, false, null);
    gv_tunnelTremblerSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "TunnelTremblerMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 130, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid02", PlayerGroupAll());
    auto21471D05_g = PlayerGroupActive();
    auto21471D05_var = -1;
    while (true) {
        auto21471D05_var = PlayerGroupNextPlayer(auto21471D05_g, auto21471D05_var);
        if (auto21471D05_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 340, 200, StringExternal("Param/Value/B288391D"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_tunnelTremblerSwapModelUnlockingManuTextMech[auto21471D05_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto21471D05_var), true);
    }
}

void gf_UnlockTunnelTremblerIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(lp_forPlayer, "LeafCutterAnt", c_techCountCompleteOnly) == 1) || (gv_amountOfGamesPlayedAsLeafCutterAnt[lp_forPlayer] > 1))) {
        gv_tunnelTremblerSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayedAsLeafCutterAnt[lp_forPlayer] >= 5)) {
        gv_tunnelTremblerSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsLeafCutterAnt[lp_forPlayer] >= 10) && (gv_leafCutterWinrateOfPlayer[lp_forPlayer] >= 80.0))) {
        gv_tunnelTremblerSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsLeafCutterAnt[lp_forPlayer] >= 10) && (gv_leafCutterWinrateOfPlayer[lp_forPlayer] >= 95.0))) {
        gv_tunnelTremblerSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnTunnelTremblerSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "TunnelTremblerDefualt";

    // Implementation
    if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
        lv_soldierModel = "TunnelTremblerDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModel = "TunnelTremblerPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModel = "TunnelTremblerSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModel = "TunnelTremblerMech";
    }
    return lv_soldierModel;
}

string gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModelUnit = "TunnelTremblerDefualt";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_soldierModelUnit = "TunnelTremblerDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModelUnit = "TunnelTremblerPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModelUnit = "TunnelTremblerSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModelUnit = "TunnelTremblerMech";
    }
    return lv_soldierModelUnit;
}

void gf_CreateKhepriSwapModelManu () {
    // Automatic Variable Declarations
    playergroup auto2B0030D0_g;
    int auto2B0030D0_var;
    playergroup auto45167FA3_g;
    int auto45167FA3_var;
    playergroup auto74407D66_g;
    int auto74407D66_var;
    playergroup autoF444FD9D_g;
    int autoF444FD9D_var;
    playergroup auto09A1EDE1_g;
    int auto09A1EDE1_var;
    playergroup autoDE7452E5_g;
    int autoDE7452E5_var;
    playergroup auto204171AE_g;
    int auto204171AE_var;
    playergroup auto51668F34_g;
    int auto51668F34_var;

    // Implementation
    auto2B0030D0_g = PlayerGroupActive();
    auto2B0030D0_var = -1;
    while (true) {
        auto2B0030D0_var = PlayerGroupNextPlayer(auto2B0030D0_g, auto2B0030D0_var);
        if (auto2B0030D0_var < 0) { break; }
        gf_UnlockKhepriIfConditionsaremet(auto2B0030D0_var);
    }
    auto45167FA3_g = PlayerGroupActive();
    auto45167FA3_var = -1;
    while (true) {
        auto45167FA3_var = PlayerGroupNextPlayer(auto45167FA3_g, auto45167FA3_var);
        if (auto45167FA3_var < 0) { break; }
        gf_ButtonCreateAEvo(gv_specialtyUnitSkinsManu, 100, 100, c_anchorCenter, 150, 0, null, null, false, null);
        gv_khepriSwapModelManuButtonToggle[auto45167FA3_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto45167FA3_var), true);
        DialogControlCreate(gv_specialtyUnitSkinsManu, c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 100);
        gv_khepriSwapModelManuButtonModel[auto45167FA3_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnKhepriSwapModelStringIntoUnitEntry(0, gv_khepriSwapModelString[auto45167FA3_var]), PlayerGroupSingle(auto45167FA3_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 0);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto45167FA3_var), true);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto45167FA3_var));
    }
    gf_DialogCreateAEvo(600, 1150, c_anchorTopRight, 300, 80, false);
    gv_khepriSwapModelManuDialog = DialogLastCreated();
    auto74407D66_g = PlayerGroupActive();
    auto74407D66_var = -1;
    while (true) {
        auto74407D66_var = PlayerGroupNextPlayer(auto74407D66_g, auto74407D66_var);
        if (auto74407D66_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 550, 680);
        gv_khepriSwapModelManuLargeModel[auto74407D66_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnKhepriSwapModelStringIntoUnitEntry(0, gv_khepriSwapModelString[auto74407D66_var]), PlayerGroupSingle(auto74407D66_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -260, 0);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupSingle(auto74407D66_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto74407D66_var), true);
    }
    autoF444FD9D_g = PlayerGroupActive();
    autoF444FD9D_var = -1;
    while (true) {
        autoF444FD9D_var = PlayerGroupNextPlayer(autoF444FD9D_g, autoF444FD9D_var);
        if (autoF444FD9D_var < 0) { break; }
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 340, 340);
        gv_khepriSwapModelManuMid1Model[autoF444FD9D_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnKhepriBettleSwapModelStringIntoUnitEntry(autoF444FD9D_var, gv_khepriSwapModelString[autoF444FD9D_var]), PlayerGroupSingle(autoF444FD9D_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -140, 150);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(autoF444FD9D_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF444FD9D_var), true);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 340, 340);
        gv_khepriSwapModelManuMid2Model[autoF444FD9D_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), gf_TurnKhepriBettleSwapModelStringIntoUnitEntry(autoF444FD9D_var, gv_khepriSwapModelString[autoF444FD9D_var]), PlayerGroupSingle(autoF444FD9D_var));
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, -380, 150);
        libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupSingle(autoF444FD9D_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoF444FD9D_var), true);
    }
    gf_ButtonCreateAEvo(gv_khepriSwapModelManuDialog, 100, 180, c_anchorCenter, 110, -210, null, null, false, null);
    gv_khepriSwapModelQueenChoiceButton[1] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriDefualt", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriDefualtBet", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, -210);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto09A1EDE1_g = PlayerGroupActive();
    auto09A1EDE1_var = -1;
    while (true) {
        auto09A1EDE1_var = PlayerGroupNextPlayer(auto09A1EDE1_g, auto09A1EDE1_var);
        if (auto09A1EDE1_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, -190, StringExternal("Param/Value/D5F617D7"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_khepriSwapModelUnlockingManuTextDefault[auto09A1EDE1_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto09A1EDE1_var), true);
    }
    gf_ButtonCreateAEvo(gv_khepriSwapModelManuDialog, 100, 180, c_anchorCenter, 110, -80, null, null, false, null);
    gv_khepriSwapModelQueenChoiceButton[2] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriPrimal", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriPrimalBet", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, -80);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    autoDE7452E5_g = PlayerGroupActive();
    autoDE7452E5_var = -1;
    while (true) {
        autoDE7452E5_var = PlayerGroupNextPlayer(autoDE7452E5_g, autoDE7452E5_var);
        if (autoDE7452E5_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, -60, StringExternal("Param/Value/DEE0C642"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_khepriSwapModelUnlockingManuTextGray[autoDE7452E5_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoDE7452E5_var), true);
    }
    gf_ButtonCreateAEvo(gv_khepriSwapModelManuDialog, 100, 180, c_anchorCenter, 110, 50, null, null, false, null);
    gv_khepriSwapModelQueenChoiceButton[3] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriSwarm", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriSwarmBet", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 50);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto204171AE_g = PlayerGroupActive();
    auto204171AE_var = -1;
    while (true) {
        auto204171AE_var = PlayerGroupNextPlayer(auto204171AE_g, auto204171AE_var);
        if (auto204171AE_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, 70, StringExternal("Param/Value/AED397B7"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_khepriSwapModelUnlockingManuTextSwarm[auto204171AE_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto204171AE_var), true);
    }
    gf_ButtonCreateAEvo(gv_khepriSwapModelManuDialog, 100, 180, c_anchorCenter, 110, 180, null, null, false, null);
    gv_khepriSwapModelQueenChoiceButton[4] = DialogControlLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriMech", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 70, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid03", PlayerGroupAll());
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeUnitModel);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 100, 120);
    libNtve_gf_SetDialogItemUnitLink(DialogControlLastCreated(), "KhepriMechBet", PlayerGroupAll());
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 150, 180);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemCamera(DialogControlLastCreated(), "Star2CameraMid01", PlayerGroupAll());
    auto51668F34_g = PlayerGroupActive();
    auto51668F34_var = -1;
    while (true) {
        auto51668F34_var = PlayerGroupNextPlayer(auto51668F34_g, auto51668F34_var);
        if (auto51668F34_var < 0) { break; }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 150, c_anchorCenter, 360, 200, StringExternal("Param/Value/1BBAC17C"), Color(100.00, 0.00, 0.00), false, 2.0);
        gv_khepriSwapModelUnlockingManuTextMech[auto51668F34_var] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupActive(), false);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto51668F34_var), true);
    }
}

void gf_UnlockKhepriIfConditionsaremet (int lp_forPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((TechTreeUpgradeCount(lp_forPlayer, "PharaohAnt", c_techCountCompleteOnly) == 1) || (gv_amountOfGamesPlayedAsPharaohAnt[lp_forPlayer] > 1))) {
        gv_khepriSwapModelIsUnlockedDefault[lp_forPlayer] = true;
    }

    if ((gv_amountOfGamesPlayedAsPharaohAnt[lp_forPlayer] >= 5)) {
        gv_khepriSwapModelIsUnlockedGray[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsPharaohAnt[lp_forPlayer] >= 10) && (gv_pharaohWinrateOfPlayer[lp_forPlayer] >= 80.0))) {
        gv_khepriSwapModelIsUnlockedSwarm[lp_forPlayer] = true;
    }

    if (((gv_amountOfGamesPlayedAsPharaohAnt[lp_forPlayer] >= 10) && (gv_pharaohWinrateOfPlayer[lp_forPlayer] >= 95.0))) {
        gv_khepriSwapModelIsUnlockedMech[lp_forPlayer] = true;
    }

}

string gf_TurnKhepriSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "KhepriDefualt";

    // Implementation
    if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
        lv_soldierModel = "KhepriDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModel = "KhepriPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModel = "KhepriSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModel = "KhepriMech";
    }
    return lv_soldierModel;
}

string gf_TurnKhepriSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModelUnit = "KhepriDefualt";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_soldierModelUnit = "KhepriDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModelUnit = "KhepriPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModelUnit = "KhepriSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModelUnit = "KhepriMech";
    }
    return lv_soldierModelUnit;
}

string gf_TurnKhepriBettleSwapModelStringIntoModelEntry (string lp_queenSwapModelString) {
    // Variable Declarations
    string lv_soldierModel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModel = "KhepriBetDefualt";

    // Implementation
    if (((lp_queenSwapModelString == "Default") || (lp_queenSwapModelString == "Not Chosen"))) {
        lv_soldierModel = "KhepriBetDefualt";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModel = "KhepriBetPrimal";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModel = "KhepriBetSwarm";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModel = "KhepriBetMech";
    }
    return lv_soldierModel;
}

string gf_TurnKhepriBettleSwapModelStringIntoUnitEntry (int lp_paramPlayer, string lp_queenSwapModelString) {
    // Variable Declarations
    int lv_goon1;
    string lv_soldierModelUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierModelUnit = "KhepriDefualtBet";

    // Implementation
    if ((lp_queenSwapModelString == "Default")) {
        lv_soldierModelUnit = "KhepriDefualtBet";
    }
    else if ((lp_queenSwapModelString == "Gray")) {
        lv_soldierModelUnit = "KhepriPrimalBet";
    }
    else if ((lp_queenSwapModelString == "Swarm")) {
        lv_soldierModelUnit = "KhepriSwarmBet";
    }
    else if ((lp_queenSwapModelString == "Mech")) {
        lv_soldierModelUnit = "KhepriMechBet";
    }
    return lv_soldierModelUnit;
}

void gf_SetTutorialPlayers () {
    // Automatic Variable Declarations
    playergroup auto994643E8_g;
    int auto994643E8_var;

    // Implementation
    auto994643E8_g = PlayerGroupActive();
    auto994643E8_var = -1;
    while (true) {
        auto994643E8_var = PlayerGroupNextPlayer(auto994643E8_g, auto994643E8_var);
        if (auto994643E8_var < 0) { break; }
        if ((gv_amountOfGamesPlayed[auto994643E8_var] < 10)) {
            PlayerGroupAdd(gv_tutorialPlayers, auto994643E8_var);
        }

    }
    if ((PlayerGroupCount(gv_tutorialPlayers) != 0)) {
        TriggerEnable(gt_TutorialTIp1Digandpickqueen, true);
        TriggerEnable(gt_TutorialTip2Build5ForagerNests, true);
        TriggerEnable(gt_TutorialTip3BuildmoreSoldierNests, true);
        TriggerEnable(gt_TutorialTip4Getspeedupgrade, true);
    }

}

void gf_SetVisualTheme () {
    // Automatic Variable Declarations
    // Implementation
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]3") == "0002")) {
        gv_meatFoodModelOption1 = "AEvoDog";
        gv_meatFoodModelOption2 = "AEvoDog";
        gv_meatFoodModelOption3 = "AEvoDog";
        gv_meatFoodModelOption4 = "AEvoDog";
        libNtve_gf_SetUpgradeLevelForPlayer(0, "TurnAllAnimalNamesIntoWolves", 1);
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]3") == "0003")) {
        TriggerEnable(gt_ModelSwapFoodtoGift, true);
        TriggerEnable(gt_SetCarryFoodBasedOnFoodType, false);
        TriggerEnable(gt_SetCarryFoodBasedOnFoodTypeChristmas, true);
        TriggerEnable(gt_GiveCreatedUnitsChristmashats, true);
        TriggerEnable(gt_ReplacePingSoundWithChristmasPingSound, true);
    }

}

string gf_ReturnRandomGiftColorbasedonFoodType (bool lp_meat) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_meat == true)) {
        if ((RandomInt(1, 2) == 1)) {
            lv_model = "GiftBoxRed";
        }
        else {
            lv_model = "GiftBoxPink";
        }
    }
    else {
        if ((RandomInt(1, 2) == 1)) {
            lv_model = "GiftBoxGreen";
        }
        else {
            lv_model = "GiftBoxAltGreen";
        }
    }
    return lv_model;
}

trigger auto_gf_Rankedmatchresults_Trigger = null;
int auto_gf_Rankedmatchresults_lp_winningTeam;

void gf_Rankedmatchresults (int lp_winningTeam) {
    auto_gf_Rankedmatchresults_lp_winningTeam = lp_winningTeam;

    if (auto_gf_Rankedmatchresults_Trigger == null) {
        auto_gf_Rankedmatchresults_Trigger = TriggerCreate("auto_gf_Rankedmatchresults_TriggerFunc");
    }

    TriggerExecute(auto_gf_Rankedmatchresults_Trigger, false, false);
}

bool auto_gf_Rankedmatchresults_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_gf_Rankedmatchresults_lp_winningTeam;

    // Variable Declarations
    int lv_losers;
    int lv_winners;
    text lv_victoryText;
    text lv_defeatText;
    int lv_p;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto14C7D463_g;
    int auto14C7D463_var;

    // Variable Initialization

    // Implementation
    if ((gv_rankedResultsShown == true)) {
        return true;
    }
    else {
        gv_rankedResultsShown = true;
    }
    lv_winners = lp_winningTeam;
    lv_losers = gf_OtherTeam(lv_winners);
    gv_rankedEndWinningTeam = lp_winningTeam;
    TriggerSendEvent("rate");
    SoundPlayForPlayer(SoundLink("UI_LeaguePromotion_Silver_ImpactPretty", -1), c_maxPlayers, GameAttributePlayersForTeam(lv_winners), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_LeaguePromotion_Diamond_Impact", -1), c_maxPlayers, GameAttributePlayersForTeam(lv_losers), 100.0, 0.0);
    GameSetLighting("EndGameRankedLight", 0.6);
    UnitPauseAll(true);
    auto14C7D463_g = PlayerGroupActive();
    auto14C7D463_var = -1;
    while (true) {
        auto14C7D463_var = PlayerGroupNextPlayer(auto14C7D463_g, auto14C7D463_var);
        if (auto14C7D463_var < 0) { break; }
        libNtve_gf_SwooshCamera(auto14C7D463_var, 10.0, 220.0, PlayerStartLocation(1), 5.0);
        CameraPan(auto14C7D463_var, RegionGetCenter(RegionEntireMap()), 0.0, -1, 10.0, false);
        CameraLockInput(auto14C7D463_var, true);
    }
    gf_Endmatchafterrankedresults(GameAttributePlayersForTeam(lv_winners), GameAttributePlayersForTeam(lv_losers));
    return true;
}

trigger auto_gf_Endmatchafterrankedresults_Trigger = null;
playergroup auto_gf_Endmatchafterrankedresults_lp_winners;
playergroup auto_gf_Endmatchafterrankedresults_lp_losers;

void gf_Endmatchafterrankedresults (playergroup lp_winners, playergroup lp_losers) {
    auto_gf_Endmatchafterrankedresults_lp_winners = lp_winners;
    auto_gf_Endmatchafterrankedresults_lp_losers = lp_losers;

    if (auto_gf_Endmatchafterrankedresults_Trigger == null) {
        auto_gf_Endmatchafterrankedresults_Trigger = TriggerCreate("auto_gf_Endmatchafterrankedresults_TriggerFunc");
    }

    TriggerExecute(auto_gf_Endmatchafterrankedresults_Trigger, false, false);
}

bool auto_gf_Endmatchafterrankedresults_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_winners = auto_gf_Endmatchafterrankedresults_lp_winners;
    playergroup lp_losers = auto_gf_Endmatchafterrankedresults_lp_losers;

    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto879F9404_g;
    playergroup autoCD863C70_g;

    // Variable Initialization

    // Implementation
    Wait(7.0, c_timeGame);
    auto879F9404_g = lp_winners;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto879F9404_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        GameOver(lv_currentPlayer, c_gameOverVictory, true, true);
    }
    autoCD863C70_g = lp_losers;
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoCD863C70_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        GameOver(lv_currentPlayer, c_gameOverDefeat, true, true);
    }
    return true;
}

void gf_Modifyratingofplayer (int lp_player, bool lp_won) {
    // Variable Declarations
    int lv_currentPlayer;
    fixed lv_playerRating;
    fixed lv_opposingRating;
    fixed[3] lv_r;
    fixed[3] lv_e;
    fixed[3] lv_s;
    fixed lv_k;
    fixed[3] lv_delta;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_k = 25.0;

    // Implementation
    if ((gf_MatchIsRanked() == false)) {
        return ;
    }

    lv_currentPlayer = lp_player;
    if ((PlayerType(lv_currentPlayer) == c_playerTypeUser) && (gv_playerRatingModified[lv_currentPlayer] == 0.0)) {
        lv_playerRating = gv_playerRatingOriginal[lv_currentPlayer];
        lv_opposingRating = gv_teamAverageRating[gf_OtherTeam(gf_TeamOfPlayer(lv_currentPlayer))];
        lv_playerRating -= 1000.0;
        lv_opposingRating -= 1000.0;
        lv_playerRating = libNtve_gf_ArithmeticRealClamp(lv_playerRating, 100.0, 2200.0);
        lv_opposingRating = libNtve_gf_ArithmeticRealClamp(lv_opposingRating, 100.0, 2200.0);
        lv_r[1] = Pow(10.0, (lv_playerRating / 400.0));
        lv_r[2] = Pow(10.0, (lv_opposingRating / 400.0));
        lv_r[1] /= 2.0;
        lv_r[2] /= 2.0;
        lv_e[1] = (lv_r[1] / (lv_r[1] + lv_r[2]));
        lv_e[2] = (lv_r[2] / (lv_r[2] + lv_r[1]));
        if ((lp_won == true)) {
            lv_s[1] = 1.0;
            lv_s[2] = 0.0;
        }
        else {
            lv_s[1] = 0.0;
            lv_s[2] = 1.0;
        }
        lv_delta[1] = (lv_k * (lv_s[1] - lv_e[1]));
        lv_delta[1] = IntToFixed(CeilingI(lv_delta[1]));
        lv_playerRating += 1000.0;
        gv_playerRatingModified[lv_currentPlayer] = (lv_playerRating + lv_delta[1]);
        gv_storedRatingDelta[lv_currentPlayer] = lv_delta[1];
    }

}

void gf_Calculateaverageteamratings () {
    // Variable Declarations
    int lv_t;
    int lv_currentPlayer;
    fixed lv_r;

    // Automatic Variable Declarations
    const int auto1C9AEBA9_ae = 2;
    const int auto1C9AEBA9_ai = 1;
    playergroup auto65A3F6A7_g;

    // Variable Initialization

    // Implementation
    if ((gf_MatchIsRanked() == true)) {
        gv_team[1] = GameAttributePlayersForTeam(1);
        gv_team[2] = GameAttributePlayersForTeam(2);
        lv_t = 1;
        for ( ; ( (auto1C9AEBA9_ai >= 0 && lv_t <= auto1C9AEBA9_ae) || (auto1C9AEBA9_ai < 0 && lv_t >= auto1C9AEBA9_ae) ) ; lv_t += auto1C9AEBA9_ai ) {
            if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_t)) == 0)) {
                continue;
            }

            lv_r = 0.0;
            auto65A3F6A7_g = GameAttributePlayersForTeam(lv_t);
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto65A3F6A7_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                lv_r += gv_playerRatingOriginal[lv_currentPlayer];
            }
            lv_r /= IntToFixed(PlayerGroupCount(GameAttributePlayersForTeam(lv_t)));
            gv_teamAverageRating[lv_t] = lv_r;
        }
    }

}

trigger auto_gf_Endrankednostats_Trigger = null;

void gf_Endrankednostats () {
    if (auto_gf_Endrankednostats_Trigger == null) {
        auto_gf_Endrankednostats_Trigger = TriggerCreate("auto_gf_Endrankednostats_TriggerFunc");
    }

    TriggerExecute(auto_gf_Endrankednostats_Trigger, false, false);
}

bool auto_gf_Endrankednostats_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto01A38FBF_g;

    // Variable Initialization

    // Implementation
    Wait(5.0, c_timeGame);
    auto01A38FBF_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto01A38FBF_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        GameOver(lv_currentPlayer, c_gameOverTie, true, true);
    }
    return true;
}

bool gf_MatchIsRanked () {
    // Automatic Variable Declarations
    // Implementation
    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        return true;
    }
    else {
        return false;
    }
}

string gf_TeamID (playergroup lp_teamMembers) {
    // Variable Declarations
    int lv_i;
    int[4] lv_numericHandles;
    int lv_currentPlayer;
    int lv_temp;

    // Automatic Variable Declarations
    int auto78091AC4_ae;
    const int auto78091AC4_ai = 1;

    // Variable Initialization

    // Implementation
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") && (PlayerGroupCount(lp_teamMembers) != 3)) {
        return "";
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006") && (PlayerGroupCount(lp_teamMembers) != 2)) {
        return "";
    }

    auto78091AC4_ae = PlayerGroupCount(lp_teamMembers);
    lv_i = 1;
    for ( ; ( (auto78091AC4_ai >= 0 && lv_i <= auto78091AC4_ae) || (auto78091AC4_ai < 0 && lv_i >= auto78091AC4_ae) ) ; lv_i += auto78091AC4_ai ) {
        lv_currentPlayer = PlayerGroupPlayer(lp_teamMembers, lv_i);
        lv_numericHandles[lv_i] = StringToInt(StringReplace(PlayerHandle(lv_currentPlayer), "", 1, 7));
    }
    if ((lv_numericHandles[1] > lv_numericHandles[2])) {
        lv_temp = lv_numericHandles[1];
        lv_numericHandles[1] = lv_numericHandles[2];
        lv_numericHandles[2] = lv_temp;
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") && (lv_numericHandles[2] > lv_numericHandles[3])) {
        lv_temp = lv_numericHandles[2];
        lv_numericHandles[2] = lv_numericHandles[3];
        lv_numericHandles[3] = lv_temp;
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") && (lv_numericHandles[1] > lv_numericHandles[2])) {
        lv_temp = lv_numericHandles[1];
        lv_numericHandles[1] = lv_numericHandles[2];
        lv_numericHandles[2] = lv_temp;
    }

    return (IntToString(lv_numericHandles[1]) + IntToString(lv_numericHandles[2]) + IntToString(lv_numericHandles[3]));
}

int gf_TeamOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_currentTeam;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = lp_player;

    // Implementation
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lv_currentPlayer) == true)) {
        lv_currentTeam = 1;
    }
    else if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), lv_currentPlayer) == true)) {
        lv_currentTeam = 2;
    }
    return lv_currentTeam;
}

int gf_OtherTeam (int lp_currentTeam) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_currentTeam == 1)) {
        return 2;
    }
    else {
        return 1;
    }
}

int gf_TeamQueenCount (int lp_player) {
    // Variable Declarations
    int lv_teamOfPlayer;
    unit lv_currentUnit;
    int lv_friendlyQueenCount;

    // Automatic Variable Declarations
    unitgroup autoB1FB8B04_g;
    int autoB1FB8B04_u;
    unitgroup auto8423851F_g;
    int auto8423851F_u;
    unitgroup auto80BA5EF6_g;
    int auto80BA5EF6_u;

    // Variable Initialization

    // Implementation
    lv_teamOfPlayer = gf_TeamOfPlayer(lp_player);
    autoB1FB8B04_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewQueen", "RavagerCocoon", "Queen", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB1FB8B04_u = UnitGroupCount(autoB1FB8B04_g, c_unitCountAll);
    for (;; autoB1FB8B04_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoB1FB8B04_g, autoB1FB8B04_u);
        if (lv_currentUnit == null) { break; }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(lv_teamOfPlayer), UnitGetOwner(lv_currentUnit)) == true)) {
            lv_friendlyQueenCount += 1;
        }

    }
    auto8423851F_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8423851F_u = UnitGroupCount(auto8423851F_g, c_unitCountAll);
    for (;; auto8423851F_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto8423851F_g, auto8423851F_u);
        if (lv_currentUnit == null) { break; }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(lv_teamOfPlayer), UnitGetOwner(lv_currentUnit)) == true)) {
            lv_friendlyQueenCount += 1;
        }

    }
    auto80BA5EF6_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenPharaohAnt", "QueenLeafCutterAnt", "QueenGhostAnt", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80BA5EF6_u = UnitGroupCount(auto80BA5EF6_g, c_unitCountAll);
    for (;; auto80BA5EF6_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto80BA5EF6_g, auto80BA5EF6_u);
        if (lv_currentUnit == null) { break; }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(lv_teamOfPlayer), UnitGetOwner(lv_currentUnit)) == true)) {
            lv_friendlyQueenCount += 1;
        }

    }
    return lv_friendlyQueenCount;
}

int gf_EnemyQueenCount (int lp_player) {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_enemyQueenCount;

    // Automatic Variable Declarations
    unitgroup auto87A16904_g;
    int auto87A16904_u;
    unitgroup auto43B6B136_g;
    int auto43B6B136_u;
    unitgroup auto0DD03454_g;
    int auto0DD03454_u;

    // Variable Initialization

    // Implementation
    auto87A16904_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewQueen", "RavagerCocoon", "Queen", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto87A16904_u = UnitGroupCount(auto87A16904_g, c_unitCountAll);
    for (;; auto87A16904_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto87A16904_g, auto87A16904_u);
        if (lv_currentUnit == null) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, lp_player), UnitGetOwner(lv_currentUnit)) == true)) {
            lv_enemyQueenCount += 1;
        }

    }
    auto43B6B136_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto43B6B136_u = UnitGroupCount(auto43B6B136_g, c_unitCountAll);
    for (;; auto43B6B136_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto43B6B136_g, auto43B6B136_u);
        if (lv_currentUnit == null) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, lp_player), UnitGetOwner(lv_currentUnit)) == true)) {
            lv_enemyQueenCount += 1;
        }

    }
    auto0DD03454_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenPharaohAnt", "QueenLeafCutterAnt", "QueenGhostAnt", c_playerAny, c_unitAllianceAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0DD03454_u = UnitGroupCount(auto0DD03454_g, c_unitCountAll);
    for (;; auto0DD03454_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto0DD03454_g, auto0DD03454_u);
        if (lv_currentUnit == null) { break; }
        if ((PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupEnemy, lp_player), UnitGetOwner(lv_currentUnit)) == true)) {
            lv_enemyQueenCount += 1;
        }

    }
    return lv_enemyQueenCount;
}

void gf_Startqueenmorphforplayer (unit lp_queenUnit, string lp_queenToMorphTo) {
    // Variable Declarations
    string lv_queenTypeUpgradeToUnlockForPlayer;
    order lv_morphIntoQueenAbilityActual;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_queenToMorphTo == "QueenBlackAnt")) {
        lv_queenTypeUpgradeToUnlockForPlayer = "BlackAnt";
        lv_morphIntoQueenAbilityActual = Order(AbilityCommand("MorphToQueen", 0));
    }
    else if ((lp_queenToMorphTo == "QueenFireAnt")) {
        lv_queenTypeUpgradeToUnlockForPlayer = "FireAnt";
        lv_morphIntoQueenAbilityActual = Order(AbilityCommand("MorphToQueenFire", 0));
    }
    else if ((lp_queenToMorphTo == "QueenWoodAnt")) {
        lv_queenTypeUpgradeToUnlockForPlayer = "WoodAnt";
        lv_morphIntoQueenAbilityActual = Order(AbilityCommand("MorphToQueenWood", 0));
    }
    else if ((lp_queenToMorphTo == "QueenLeafCutterAnt")) {
        lv_queenTypeUpgradeToUnlockForPlayer = "LeafCutterAnt";
        lv_morphIntoQueenAbilityActual = Order(AbilityCommand("MorphToQueenLeafCutter", 0));
    }
    else if ((lp_queenToMorphTo == "QueenPharaohAnt")) {
        lv_queenTypeUpgradeToUnlockForPlayer = "PharaohAnt";
        lv_morphIntoQueenAbilityActual = Order(AbilityCommand("MorphToQueenPharaoh", 0));
    }
    else if ((lp_queenToMorphTo == "QueenGhostAnt")) {
        lv_queenTypeUpgradeToUnlockForPlayer = "GhostAnt";
        lv_morphIntoQueenAbilityActual = Order(AbilityCommand("MorphToQueenGhost", 0));
    }
    UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), "BlackAnt", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), "FireAnt", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), "WoodAnt", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), "PharaohAnt", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), "LeafCutterAnt", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), "GhostAnt", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(lp_queenUnit), lv_queenTypeUpgradeToUnlockForPlayer, 1);
    UnitIssueOrder(EventUnit(), lv_morphIntoQueenAbilityActual, c_orderQueueReplace);
    if ((lp_queenToMorphTo == "QueenBlackAnt")) {
    }
    else if ((lp_queenToMorphTo == "QueenFireAnt")) {
    }
    else if ((lp_queenToMorphTo == "QueenWoodAnt")) {
    }
    else if ((lp_queenToMorphTo == "QueenLeafCutterAnt")) {
    }
    else if ((lp_queenToMorphTo == "QueenPharaohAnt")) {
    }
    else if ((lp_queenToMorphTo == "QueenGhostAnt")) {
    }
}

void gf_Endqueenmorphforplayer (unit lp_queenUnit, string lp_queenToMorphTo) {
    // Variable Declarations
    string lv_queenTypeUpgradeToUnlockForPlayer;
    string lv_queenTypeToCreate;
    unit lv_losePreventUnit;
    point lv_pointOfQueen;
    int lv_ownerOfQueenUnit;
    bool lv_queenWasSelectedByItsOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pointOfQueen = UnitGetPosition(lp_queenUnit);
    lv_ownerOfQueenUnit = UnitGetOwner(lp_queenUnit);

    // Implementation
    UnitCreate(1, "LoseDenier", 0, UnitGetOwner(EventUnit()), Point(5.0, 5.0), 270.0);
    lv_losePreventUnit = UnitLastCreated();
    if ((lp_queenToMorphTo == "QueenBlackAnt")) {
        lv_queenTypeToCreate = "QueenBlackAnt";
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = true;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = false;
    }
    else if ((lp_queenToMorphTo == "QueenFireAnt")) {
        lv_queenTypeToCreate = "QueenFireAnt";
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = true;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = false;
    }
    else if ((lp_queenToMorphTo == "QueenWoodAnt")) {
        lv_queenTypeToCreate = "QueenWoodAnt";
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = false;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = true;
    }
    else if ((lp_queenToMorphTo == "QueenLeafCutterAnt")) {
        lv_queenTypeToCreate = "QueenLeafCutterAnt";
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = false;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = true;
    }
    else if ((lp_queenToMorphTo == "QueenPharaohAnt")) {
        lv_queenTypeToCreate = "QueenPharaohAnt";
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = true;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = true;
    }
    else if ((lp_queenToMorphTo == "QueenGhostAnt")) {
        lv_queenTypeToCreate = "QueenGhostAnt";
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = true;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = true;
    }
    else if (true) {
    }
    if (((PlayerType(lv_ownerOfQueenUnit) == c_playerTypeComputer) && ((PlayerDifficulty(lv_ownerOfQueenUnit) == 4) || (PlayerDifficulty(lv_ownerOfQueenUnit) == 5) || (PlayerDifficulty(lv_ownerOfQueenUnit) == 6) || (PlayerDifficulty(lv_ownerOfQueenUnit) == 7) || (PlayerDifficulty(lv_ownerOfQueenUnit) == 8) || (PlayerDifficulty(lv_ownerOfQueenUnit) == 9) || (PlayerDifficulty(lv_ownerOfQueenUnit) == 10)))) {
        gv_canCollectMeatFood[UnitGetOwner(EventUnit())] = true;
        gv_canCollectPlantFood[UnitGetOwner(EventUnit())] = true;
    }

    lv_pointOfQueen = UnitGetPosition(lp_queenUnit);
    if ((UnitIsSelected(lp_queenUnit, UnitGetOwner(lp_queenUnit)) == true)) {
        lv_queenWasSelectedByItsOwner = true;
    }

    UnitRemove(lp_queenUnit);
    Wait(0.1, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_queenTypeToCreate, 0, EventPlayer(), lv_pointOfQueen);
    if ((lv_queenWasSelectedByItsOwner == true)) {
        UnitSelect(UnitLastCreated(), UnitGetOwner(UnitLastCreated()), true);
    }

    gv_queenOfPlayer[UnitGetOwner(EventUnit())] = UnitLastCreated();
    gf_AddUnitToCustomCtrlGroup(0, UnitLastCreated(), gv_ctrlGroup_Queen[UnitGetOwner(UnitLastCreated())]);
    Wait(0.1, c_timeGame);
    UnitRemove(lv_losePreventUnit);
    if ((gv_queenSwapModelString[UnitGetOwner(lp_queenUnit)] != "Not Chosen")) {
        libNtve_gf_SendActorMessageToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], libNtve_gf_ModelSwap(gf_TurnQueenSwapModelStringIntoModelEntry(gv_queenSwapModelString[UnitGetOwner(gv_queenOfPlayer[lv_ownerOfQueenUnit])]), 1));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], libNtve_gf_ModelSwap("QueenDefault", 1));
    }
    if ((lp_queenToMorphTo == "QueenBlackAnt")) {
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "CharTree", "Ref_Target");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.01, 0.01, 0.01, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.2, 0.2, 0.2, 3.0));
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "HybridZergBlackDeath", "Ref_Target 01");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.01, 0.01, 0.01, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 5.0));
    }
    else if ((lp_queenToMorphTo == "QueenFireAnt")) {
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "FireMedium", "Ref_Target 01");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.8, 0.8, 0.8, 5.0));
    }
    else if ((lp_queenToMorphTo == "QueenWoodAnt")) {
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "WallLog", "Ref_Target 01");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.35, 0.35, 0.35, 5.0));
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "WallLog2", "Ref_Target 01");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(69.02, 51.76, 40.39), 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 0.5, 5.0));
    }
    else if ((lp_queenToMorphTo == "QueenLeafCutterAnt")) {
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "ZerusTree", "Ref_Target 01");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.01, 0.01, 0.01, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 0.1, 5.0));
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "Bush", "Ref_Target 01");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.01, 0.01, 0.01, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 5.0));
    }
    else if ((lp_queenToMorphTo == "QueenPharaohAnt")) {
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "Aiur_Pyramid_Tower_Large", "Ref_Target");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.01, 0.01, 0.01, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.05, 0.05, 0.05, 3.0));
        libNtve_gf_AttachModelToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "Aiur_PowerCrystal", "Ref_Target 02");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_ownerOfQueenUnit, false)), 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.01, 0.01, 0.01, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 3.0));
    }
    else if ((lp_queenToMorphTo == "QueenGhostAnt")) {
        libNtve_gf_SendActorMessageToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], libNtve_gf_SetOpacity(0.5, 5.0));
    }
    libNtve_gf_SendActorMessageToUnit(gv_queenOfPlayer[lv_ownerOfQueenUnit], "AnimPlay Unburrow Unburrow");
}

void gf_StartAIplayers () {
    // Variable Declarations
    int lv_profile;

    // Automatic Variable Declarations
    playergroup auto57FA9456_g;
    int auto57FA9456_var;

    // Variable Initialization

    // Implementation
    Wait(1.5, c_timeGame);
    auto57FA9456_g = PlayerGroupActive();
    auto57FA9456_var = -1;
    while (true) {
        auto57FA9456_var = PlayerGroupNextPlayer(auto57FA9456_g, auto57FA9456_var);
        if (auto57FA9456_var < 0) { break; }
        if ((PlayerType(auto57FA9456_var) == c_playerTypeComputer)) {
            if (((PlayerDifficulty(auto57FA9456_var) == 1) || (PlayerDifficulty(auto57FA9456_var) == 2))) {
                lv_profile = 1;
                gv_aIdifficultyFoodMultiplier[auto57FA9456_var] = 0;
            }
            else if (((PlayerDifficulty(auto57FA9456_var) == 3))) {
                lv_profile = 2;
                gv_aIdifficultyFoodMultiplier[auto57FA9456_var] = 5;
            }
            else if (((PlayerDifficulty(auto57FA9456_var) == 4) || (PlayerDifficulty(auto57FA9456_var) == 5))) {
                lv_profile = 3;
                gv_aIdifficultyFoodMultiplier[auto57FA9456_var] = 10;
            }
            else if (((PlayerDifficulty(auto57FA9456_var) == 6) || (PlayerDifficulty(auto57FA9456_var) == 7) || (PlayerDifficulty(auto57FA9456_var) == 8) || (PlayerDifficulty(auto57FA9456_var) == 9) || (PlayerDifficulty(auto57FA9456_var) == 10))) {
                lv_profile = 4;
                gv_aIdifficultyFoodMultiplier[auto57FA9456_var] = 15;
                libNtve_gf_SetUpgradeLevelForPlayer(auto57FA9456_var, "CheatProfileElite", 1);
            }
            if ((PlayerDifficulty(auto57FA9456_var) == 1)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 2)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 3)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 4)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 5)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 6)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 7)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 8)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 9)) {
            }
            else if ((PlayerDifficulty(auto57FA9456_var) == 10)) {
            }
            libNtve_gf_SetUpgradeLevelForPlayer(auto57FA9456_var, "AIQueenBoost", (lv_profile * 2));
            gf_StartAI(auto57FA9456_var, UnitGroupUnit(UnitGroup("NewQueen", auto57FA9456_var, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1), lv_profile);
        }

    }
}

trigger auto_gf_StartAI_Trigger = null;
int auto_gf_StartAI_lp_bOTID;
unit auto_gf_StartAI_lp_queenToAutomate;
int auto_gf_StartAI_lp_aIProfileToUse;

void gf_StartAI (int lp_bOTID, unit lp_queenToAutomate, int lp_aIProfileToUse) {
    auto_gf_StartAI_lp_bOTID = lp_bOTID;
    auto_gf_StartAI_lp_queenToAutomate = lp_queenToAutomate;
    auto_gf_StartAI_lp_aIProfileToUse = lp_aIProfileToUse;

    if (auto_gf_StartAI_Trigger == null) {
        auto_gf_StartAI_Trigger = TriggerCreate("auto_gf_StartAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartAI_Trigger, false, false);
}

bool auto_gf_StartAI_TriggerFunc (bool testConds, bool runActions) {
    int lp_bOTID = auto_gf_StartAI_lp_bOTID;
    unit lp_queenToAutomate = auto_gf_StartAI_lp_queenToAutomate;
    int lp_aIProfileToUse = auto_gf_StartAI_lp_aIProfileToUse;

    // Variable Declarations
    int lv_currentPlayer;
    unit lv_queen;
    int lv_profile;
    fixed lv_randomAction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(lp_queenToAutomate);
    lv_queen = lp_queenToAutomate;
    lv_profile = lp_aIProfileToUse;

    // Implementation
    gv_aI_Active[lv_currentPlayer] = true;
    gv_aI_Profile[lv_currentPlayer] = lv_profile;
    gf_AIcheat(lp_queenToAutomate);
    while (true) {
        lv_randomAction = libNtve_gf_RandomPercent();
        if ((lv_randomAction <= 90.0)) {
            Wait((gv_aIProfile_ActionCooldown[lv_profile] * RandomFixed(0.9, 1.1)), c_timeGame);
        }
        else {
            Wait((gv_aIProfile_ActionCooldown[lv_profile] * RandomFixed(0.5, 1.5)), c_timeGame);
        }
        if ((UnitIsValid(gv_queenOfPlayer[lv_currentPlayer]) == true) && (UnitIsAlive(gv_queenOfPlayer[lv_currentPlayer]) == true)) {
            if ((UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "NewQueen")) {
                gf_Choosecolonystartposition(gv_queenOfPlayer[lv_currentPlayer]);
                gf_Digstartingtunnel(gv_queenOfPlayer[lv_currentPlayer]);
            }
            else if (((UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "QueenBlackAnt") || (UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "QueenFireAnt") || (UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "QueenWoodAnt") || (UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "QueenPharaohAnt") || (UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "QueenLeafCutterAnt") || (UnitGetType(gv_queenOfPlayer[lv_currentPlayer]) == "QueenGhostAnt"))) {
                gf_Queenactions(gv_queenOfPlayer[lv_currentPlayer]);
                gf_Soldieractions(lv_currentPlayer);
                gf_Structureactions(lv_currentPlayer);
            }
        }

    }
    return true;
}

void gf_Choosecolonystartposition (unit lp_currentQueen) {
    // Variable Declarations
    int lv_currentPlayer;
    unit lv_queen;
    region lv_dirtScanRegion;
    fixed lv_dirtScanOffset;
    unitgroup lv_dirtScanUnits;

    // Automatic Variable Declarations
    const int autoB94E6AA0_n = 30;
    int autoB94E6AA0_i;

    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(lp_currentQueen);
    lv_queen = lp_currentQueen;
    lv_dirtScanOffset = 2.0;
    lv_dirtScanUnits = UnitGroupEmpty();

    // Implementation
    if ((gv_aI_ColonyStartPoint[lv_currentPlayer] != null)) {
        return ;
    }

    if ((gv_usingInvertedMapLayout == false)) {
        gv_aI_TunnelAngle[lv_currentPlayer] = AngleBetweenPoints(RegionGetCenter(RegionFromId(2)), UnitGetPosition(lv_queen));
    }
    else {
        gv_aI_TunnelAngle[lv_currentPlayer] = AngleBetweenPoints(UnitGetPosition(lv_queen), RegionGetCenter(RegionFromId(2)));
    }
    lv_dirtScanRegion = RegionCircle(UnitGetPosition(lv_queen), 2.0);
    for (autoB94E6AA0_i = 1; autoB94E6AA0_i <= autoB94E6AA0_n; autoB94E6AA0_i += 1) {
        lv_dirtScanUnits = UnitGroup("Dirt", c_playerAny, lv_dirtScanRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_dirtScanUnits, c_unitCountAlive) >= 1)) {
            break;
        }
        else {
            RegionSetCenter(lv_dirtScanRegion, PointWithOffsetPolar(RegionGetCenter(lv_dirtScanRegion), lv_dirtScanOffset, gv_aI_TunnelAngle[lv_currentPlayer]));
        }
    }
    gv_aI_ColonyStartPoint[lv_currentPlayer] = UnitGetPosition(UnitGroupClosestToPoint(lv_dirtScanUnits, UnitGetPosition(lv_queen)));
    gv_aI_CurrentBuildPoint[lv_currentPlayer] = gv_aI_ColonyStartPoint[lv_currentPlayer];
}

void gf_Digstartingtunnel (unit lp_currentQueen) {
    // Variable Declarations
    int lv_currentPlayer;
    unit lv_queen;
    fixed lv_tunnelAngle;
    unitgroup lv_dirtScanUnits;
    unitgroup lv_dirtTunnelGroup;
    point lv_currentDigPosition;
    unit lv_currentDigUnit;
    fixed lv_randomAction;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(lp_currentQueen);
    lv_queen = lp_currentQueen;
    lv_dirtScanUnits = UnitGroupEmpty();
    lv_dirtTunnelGroup = UnitGroupEmpty();

    // Implementation
    lv_currentDigPosition = gv_aI_CurrentDigPoint[lv_currentPlayer];
    lv_tunnelAngle = gv_aI_TunnelAngle[lv_currentPlayer];
    if ((gv_aI_ColonyFirstCreepPoint[lv_currentPlayer] == null) && (CreepIsPresent(UnitGetPosition(lv_queen)) == true)) {
        gv_aI_ColonyFirstCreepPoint[lv_currentPlayer] = UnitGetPosition(lv_queen);
    }

    if ((lv_currentDigPosition == null)) {
        lv_currentDigPosition = UnitGetPosition(lv_queen);
    }

    if ((OrderGetAbilityCommand(UnitOrder(lv_queen, 0)) != AbilityCommand("Dig", 0))) {
        if (((UnitGetPropertyFixed(lv_queen, c_unitPropEnergy, c_unitPropCurrent) >= 20.0) || (gv_aI_ColonyFirstCreepPoint[lv_currentPlayer] == null))) {
            UnitGroupAddUnitGroup(lv_dirtTunnelGroup, UnitGroup("Dirt", c_playerAny, RegionRect((PointGetX(lv_currentDigPosition) - 2.5), (PointGetY(lv_currentDigPosition) - 0.5), (PointGetX(lv_currentDigPosition) + 2.5), (PointGetY(lv_currentDigPosition) + 0.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_dirtTunnelGroup, UnitGroup("Dirt", c_playerAny, RegionRect((PointGetX(lv_currentDigPosition) - 0.5), (PointGetY(lv_currentDigPosition) - 2.5), (PointGetX(lv_currentDigPosition) + 0.5), (PointGetY(lv_currentDigPosition) + 2.5)), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            if ((UnitGroupCount(lv_dirtTunnelGroup, c_unitCountAlive) == 0)) {
                lv_randomAction = libNtve_gf_RandomPercent();
                lv_currentDigUnit = UnitGroupClosestToPoint(UnitGroup("Dirt", c_playerAny, RegionCircle(gv_aI_ColonyStartPoint[lv_currentPlayer], 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), gv_aI_ColonyStartPoint[lv_currentPlayer]);
                if ((lv_randomAction <= 97.0) && (UnitIsValid(lv_currentDigUnit) == true) && (gf_DigIsDiagonal(UnitGetPosition(lv_currentDigUnit)) == false)) {
                    UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_currentDigUnit), c_orderQueueReplace);
                    lv_currentDigPosition = UnitGetPosition(lv_currentDigUnit);
                }
                else if ((lv_randomAction <= 100.0)) {
                    lv_currentDigUnit = UnitGroupRandomUnit(UnitGroup("Dirt", c_playerAny, RegionCircle(UnitGetPosition(lv_queen), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if ((UnitIsValid(lv_currentDigUnit) == true) && (gf_DigIsDiagonal(UnitGetPosition(lv_currentDigUnit)) == false)) {
                        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_currentDigUnit), c_orderQueueReplace);
                        lv_currentDigPosition = UnitGetPosition(lv_currentDigUnit);
                    }

                }
            }
            else {
                lv_currentDigUnit = UnitGroupClosestToPoint(lv_dirtTunnelGroup, PointWithOffsetPolar(lv_currentDigPosition, 5.0, gv_aI_TunnelAngle[lv_currentPlayer]));
                if ((UnitIsValid(lv_currentDigUnit) == true) && (gf_DigIsDiagonal(UnitGetPosition(lv_currentDigUnit)) == false)) {
                    UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_currentDigUnit), c_orderQueueReplace);
                    lv_currentDigPosition = UnitGetPosition(lv_currentDigUnit);
                }
                else if (true) {
                    lv_currentDigUnit = UnitGroupRandomUnit(UnitGroup("Dirt", c_playerAny, RegionCircle(PointWithOffsetPolar(UnitGetPosition(lv_queen), RandomFixed(3.5, 5.5), lv_tunnelAngle), 2.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if ((UnitIsValid(lv_currentDigUnit) == true) && (gf_DigIsDiagonal(UnitGetPosition(lv_currentDigUnit)) == false)) {
                        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_currentDigUnit), c_orderQueueReplace);
                        lv_currentDigPosition = UnitGetPosition(lv_currentDigUnit);
                    }

                }
            }
        }
        else {
            lv_randomAction = libNtve_gf_RandomPercent();
            libNtve_gf_SendActorMessageToUnit(lv_queen, libNtve_gf_SetScale(3.0, 3.0, 3.0, 3.0));
            if ((lv_randomAction <= 16.5)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("MorphToQueen", 0)), c_orderQueueReplace);
            }
            else if ((lv_randomAction <= 33.3)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("MorphToQueenFire", 0)), c_orderQueueReplace);
            }
            else if ((lv_randomAction <= 49.5)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("MorphToQueenWood", 0)), c_orderQueueReplace);
            }
            else if ((lv_randomAction <= 66.0)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("MorphToQueenWood", 0)), c_orderQueueReplace);
            }
            else if ((lv_randomAction <= 82.5)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("MorphToQueenFire", 0)), c_orderQueueReplace);
            }
            else if (true) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("MorphToQueen", 0)), c_orderQueueReplace);
            }
        }
    }

    gv_aI_CurrentDigPoint[lv_currentPlayer] = lv_currentDigPosition;
    gv_aI_TunnelAngle[lv_currentPlayer] = lv_tunnelAngle;
}

void gf_Queenactions (unit lp_currentQueen) {
    // Variable Declarations
    int lv_currentPlayer;
    unit lv_queen;
    fixed lv_randomAction;
    point lv_buildPoint;
    point lv_startingForagerBuildPoint;
    point lv_entranceBroodlingBuildPoint;
    region lv_buildRegion;
    unitgroup lv_dirtGroup;
    unitgroup lv_enemyUnitGroup;
    unitgroup lv_soldierGroup;
    point lv_enemyTargetPoint;
    unit lv_digTarget;
    int lv_currentForagerNestCount;
    int lv_currentSoldierNestCount;
    int lv_currentSpecialNestCount;
    int lv_soldierNestCountPadding;
    int lv_forgaerNestCountPadding;
    int lv_broodlingCountPadding;
    int lv_currentBroodlingSpawnerCount;
    fixed lv_currentForagerToSoldierRatio;
    fixed lv_currentBroodlingToSoldierRatio;
    int lv_profile;
    int lv_foragerNextMax;
    int lv_broodlingSpawnerMax;
    fixed lv_targetForagerToSoldierRatio;
    fixed lv_targetBroodlingToSoldierRatio;
    bool lv_tryingToBuildSpecialNest;
    unitgroup lv_unitGroupEmpty;
    unitgroup lv_tempUnitgroup;

    // Automatic Variable Declarations
    const int auto34EB0940_n = 10;
    int auto34EB0940_i;
    const int auto225298EC_n = 3;
    int auto225298EC_i;
    const int auto9EA6A1F9_n = 3;
    int auto9EA6A1F9_i;

    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(lp_currentQueen);
    lv_queen = lp_currentQueen;
    lv_dirtGroup = UnitGroupEmpty();
    lv_enemyUnitGroup = UnitGroupEmpty();
    lv_soldierGroup = UnitGroupEmpty();
    lv_soldierNestCountPadding = 4;
    lv_forgaerNestCountPadding = 1;
    lv_broodlingCountPadding = 1;
    lv_unitGroupEmpty = UnitGroupEmpty();
    lv_tempUnitgroup = UnitGroupEmpty();

    // Implementation
    if (((UnitIsValid(lv_queen) == false) || (UnitIsAlive(lv_queen) == false))) {
        return ;
    }

    lv_profile = gv_aI_Profile[lv_currentPlayer];
    lv_foragerNextMax = gv_aIProfile_ForagerMax[lv_profile];
    lv_broodlingSpawnerMax = gv_aIProfile_BroodlingMax[lv_profile];
    lv_targetForagerToSoldierRatio = gv_aIProfile_ForagerToSoldierRatio[lv_profile];
    lv_targetBroodlingToSoldierRatio = gv_aIProfile_BroodlingToSoldierRatio[lv_profile];
    lv_currentForagerNestCount = UnitGroupCount(UnitGroup("NewWorkerNest", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_currentSoldierNestCount = UnitGroupCount(UnitGroup("NewSoldierNest", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TunnelTremblerNest", "KhepriNest", "GraveDiggerNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    lv_currentSpecialNestCount = UnitGroupCount(lv_tempUnitgroup, c_unitCountAlive);
    lv_tempUnitgroup = lv_unitGroupEmpty;
    lv_currentBroodlingSpawnerCount = UnitGroupCount(UnitGroup("SmallSpikeNest", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_currentForagerToSoldierRatio = (IntToFixed(lv_currentForagerNestCount) / IntToFixed((lv_currentSoldierNestCount + lv_soldierNestCountPadding)));
    if ((lv_currentSoldierNestCount >= 1)) {
        lv_currentBroodlingToSoldierRatio = (IntToFixed((lv_currentBroodlingSpawnerCount + lv_broodlingCountPadding)) / IntToFixed((lv_currentSoldierNestCount + 0)));
    }
    else {
        lv_currentBroodlingToSoldierRatio = 1.0;
    }
    lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "Zergling", "Queen", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_queen), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) >= 4)) {
        lv_enemyTargetPoint = UnitGetPosition(UnitGroupRandomUnit(lv_enemyUnitGroup, c_unitCountAlive));
        if ((VisIsVisibleForPlayer(lv_currentPlayer, lv_enemyTargetPoint) == true)) {
            UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("PsiStorm", 0), lv_enemyTargetPoint), c_orderQueueReplace);
            UnitIssueOrder(lv_queen, Order(AbilityCommand("AcidicStrikes", 0)), c_orderQueueReplace);
            lv_soldierGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "Hydralisk", "Locust", lv_currentPlayer, -1, RegionCircle(UnitGetPosition(lv_queen), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupIssueOrder(lv_soldierGroup, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_queen)), c_orderQueueReplace);
        }

    }

    for (auto34EB0940_i = 1; auto34EB0940_i <= auto34EB0940_n; auto34EB0940_i += 1) {
        if ((lv_buildPoint == null)) {
            lv_randomAction = libNtve_gf_RandomPercent();
            if ((lv_randomAction <= 70.0)) {
                lv_buildPoint = UnitTypePlacementTestsFromPoint("NewWorkerNest", lv_currentPlayer, PointWithOffsetPolar(gv_aI_CurrentDigPoint[lv_currentPlayer], 1.0, gv_aI_TunnelAngle[lv_currentPlayer]), 8.0, c_placementTestCreepMask);
            }
            else if ((lv_randomAction <= 85.0)) {
                lv_buildPoint = UnitTypePlacementTestsFromPoint("NewWorkerNest", lv_currentPlayer, PointWithOffsetPolar(gv_aI_CurrentBuildPoint[lv_currentPlayer], 2.0, gv_aI_TunnelAngle[lv_currentPlayer]), 8.0, c_placementTestCreepMask);
            }
            else if ((lv_randomAction <= 100.0)) {
                UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "SmallSpikeNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                lv_buildPoint = UnitTypePlacementTestsFromPoint("NewWorkerNest", lv_currentPlayer, UnitGetPosition(UnitGroupRandomUnit(lv_tempUnitgroup, c_unitCountAlive)), 8.0, c_placementTestCreepMask);
                lv_tempUnitgroup = lv_unitGroupEmpty;
            }
            if ((lv_buildPoint != null) && ((ModF(PointGetX(lv_buildPoint), 2.0) != 0.0) || (ModF(PointGetY(lv_buildPoint), 2.0) != 0.0) || (PointPathingCost(UnitGetPosition(lv_queen), lv_buildPoint) > 100))) {
                lv_buildPoint = null;
            }

            if ((lv_buildPoint != null) && (gv_aI_SpecialNestReserveRegion[lv_currentPlayer] != null) && (RegionContainsPoint(gv_aI_SpecialNestReserveRegion[lv_currentPlayer], lv_buildPoint) == true)) {
                lv_buildPoint = null;
                lv_tryingToBuildSpecialNest = true;
            }

            lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "", "", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(lv_buildPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) >= 1)) {
                lv_buildPoint = null;
            }

        }

    }
    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (lv_currentSoldierNestCount >= 10)) {
        lv_buildPoint = null;
        lv_tryingToBuildSpecialNest = true;
    }

    if ((lv_currentSoldierNestCount >= 2) && (lv_currentSpecialNestCount == 0)) {
        gv_aI_SpecialNestReserveRegion[lv_currentPlayer] = gf_FindSpecialNestReserveRegion(lv_queen, gv_aI_SpecialNestReserveRegion[lv_currentPlayer]);
    }
    else {
        gv_aI_SpecialNestReserveRegion[lv_currentPlayer] = null;
    }
    lv_dirtGroup = UnitGroup("Wall", c_playerAny, RegionCircle(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1) && (PointPathingCost(UnitGetPosition(lv_queen), PointWithOffsetPolar(gv_aI_ColonyStartPoint[lv_currentPlayer], -5.0, gv_aI_TunnelAngle[lv_currentPlayer])) >= 5000) && (UnitGetPropertyFixed(lv_queen, c_unitPropEnergy, c_unitPropCurrent) >= 20.0)) {
        lv_randomAction = libNtve_gf_RandomPercent();
        if ((lv_randomAction <= 33.0)) {
            lv_digTarget = UnitGroupClosestToPoint(lv_dirtGroup, UnitGetPosition(lv_queen));
        }
        else if ((lv_randomAction <= 66.0)) {
            lv_digTarget = UnitGroupClosestToPoint(lv_dirtGroup, gv_aI_ColonyFirstCreepPoint[lv_currentPlayer]);
        }
        else if (true) {
            lv_digTarget = UnitGroupRandomUnit(lv_dirtGroup, c_unitCountAlive);
        }
        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_digTarget), c_orderQueueReplace);
        return ;
    }

    lv_randomAction = libNtve_gf_RandomPercent();
    if ((lv_buildPoint != null) && (lv_randomAction <= 80.0) && ((((lv_currentForagerNestCount + lv_currentSoldierNestCount) <= 12) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 50)) || (((lv_currentForagerNestCount + lv_currentSoldierNestCount) <= 15) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 125)) || (((lv_currentForagerNestCount + lv_currentSoldierNestCount) <= 18) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 175)) || (((lv_currentForagerNestCount + lv_currentSoldierNestCount) <= 21) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 200)) || ((PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 300))) && (UnitGroupHasUnit(UnitGroupIdle(lv_currentPlayer, false), lv_queen) == true)) {
        if ((UnitGroupCount(UnitGroup("NewWorkerNest", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 4)) {
            lv_startingForagerBuildPoint = null;
            for (auto9EA6A1F9_i = 1; auto9EA6A1F9_i <= auto9EA6A1F9_n; auto9EA6A1F9_i += 1) {
                if ((lv_startingForagerBuildPoint == null)) {
                    lv_startingForagerBuildPoint = UnitTypePlacementTestsFromPoint("NewWorkerNest", lv_currentPlayer, PointWithOffsetPolar(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], RandomFixed(0.0, 3.0), libNtve_gf_RandomAngle()), 7.0, c_placementTestCreepMask);
                    if ((lv_startingForagerBuildPoint != null) && ((ModF(PointGetX(lv_startingForagerBuildPoint), 2.0) != 0.0) || (ModF(PointGetY(lv_startingForagerBuildPoint), 2.0) != 0.0) || (PointPathingCost(UnitGetPosition(lv_queen), lv_startingForagerBuildPoint) > 100))) {
                        lv_startingForagerBuildPoint = null;
                    }

                }

            }
            if ((lv_startingForagerBuildPoint != null)) {
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 2), lv_startingForagerBuildPoint), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 2), lv_buildPoint), c_orderQueueReplace);
            }
        }
        else {
            lv_randomAction = libNtve_gf_RandomPercent();
            if ((lv_randomAction <= 33.0) && (lv_currentForagerNestCount < lv_foragerNextMax) && ((lv_currentForagerToSoldierRatio + RandomFixed(-0.1, 0.1)) <= lv_targetForagerToSoldierRatio)) {
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 2), lv_buildPoint), c_orderQueueReplace);
                gv_aI_CurrentBuildPoint[lv_currentPlayer] = lv_buildPoint;
            }
            else if ((lv_randomAction <= 66.0) && ((lv_currentForagerNestCount >= lv_foragerNextMax) || ((lv_currentForagerToSoldierRatio + RandomFixed(-0.1, 0.1)) >= lv_targetForagerToSoldierRatio))) {
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 1), lv_buildPoint), c_orderQueueReplace);
                gv_aI_CurrentBuildPoint[lv_currentPlayer] = lv_buildPoint;
            }
            else if ((lv_randomAction <= 100.0) && (lv_currentBroodlingSpawnerCount < lv_broodlingSpawnerMax) && (lv_currentBroodlingToSoldierRatio < lv_targetBroodlingToSoldierRatio)) {
                lv_entranceBroodlingBuildPoint = null;
                for (auto225298EC_i = 1; auto225298EC_i <= auto225298EC_n; auto225298EC_i += 1) {
                    if ((lv_startingForagerBuildPoint == null)) {
                        lv_entranceBroodlingBuildPoint = UnitTypePlacementTestsFromPoint("NewWorkerNest", lv_currentPlayer, PointWithOffsetPolar(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], RandomFixed(0.0, 3.0), libNtve_gf_RandomAngle()), 10.0, c_placementTestCreepMask);
                        if ((lv_entranceBroodlingBuildPoint != null) && ((ModF(PointGetX(lv_entranceBroodlingBuildPoint), 2.0) != 0.0) || (ModF(PointGetY(lv_entranceBroodlingBuildPoint), 2.0) != 0.0) || (PointPathingCost(UnitGetPosition(lv_queen), lv_entranceBroodlingBuildPoint) > 100))) {
                            lv_entranceBroodlingBuildPoint = null;
                        }

                    }

                }
                if ((lv_entranceBroodlingBuildPoint != null)) {
                    lv_buildPoint = lv_entranceBroodlingBuildPoint;
                }

                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 23), lv_buildPoint), c_orderQueueReplace);
                gv_aI_CurrentBuildPoint[lv_currentPlayer] = lv_buildPoint;
            }
        }
    }
    else {
        lv_randomAction = libNtve_gf_RandomPercent();
        if ((lv_tryingToBuildSpecialNest == true) && ((lv_currentForagerNestCount + lv_currentSoldierNestCount) > 15) && (lv_randomAction <= 25.0) && (UnitGroupHasUnit(UnitGroupIdle(lv_currentPlayer, false), lv_queen) == true) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 200) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
            lv_buildPoint = UnitTypePlacementTestsFromPoint("UltraliskCavern", lv_currentPlayer, RegionGetCenter(gv_aI_SpecialNestReserveRegion[lv_currentPlayer]), 8.0, c_placementTestCreepMask);
            if ((lv_buildPoint != null)) {
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 3), lv_buildPoint), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 4), lv_buildPoint), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("QueenBuild2", 6), lv_buildPoint), c_orderQueueReplace);
            }

        }
        else if ((lv_randomAction <= 85.0) && (UnitGroupHasUnit(UnitGroupIdle(lv_currentPlayer, false), lv_queen) == true) && (UnitGetPropertyFixed(lv_queen, c_unitPropEnergy, c_unitPropCurrent) >= 20.0)) {
            if ((UnitGetPropertyFixed(lv_queen, c_unitPropEnergy, c_unitPropCurrent) <= 100.0) && (lv_currentSoldierNestCount >= 3)) {
                return ;
            }

            lv_randomAction = libNtve_gf_RandomPercent();
            lv_randomAction += MinF((GameGetMissionTime() / 8.0), 50.0);
            if ((lv_randomAction <= 66.0)) {
                lv_dirtGroup = UnitGroup("Dirt", c_playerAny, RegionCircle(gv_aI_CurrentDigPoint[lv_currentPlayer], 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1)) {
                    lv_digTarget = UnitGroupClosestToPoint(lv_dirtGroup, PointWithOffsetPolar(gv_aI_CurrentDigPoint[lv_currentPlayer], RandomFixed(0.5, 3.0), (gv_aI_TunnelAngle[lv_currentPlayer] + RandomFixed(-60.0, 60.0))));
                    lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "SmallSpikeNest", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_digTarget), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((gf_DigIsDiagonal(UnitGetPosition(lv_digTarget)) == false) && (RegionContainsPoint(RegionCircle(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], 2.0), UnitGetPosition(lv_digTarget)) == false) && (RegionContainsPoint(RegionCircle(gv_aI_ColonyStartPoint[lv_currentPlayer], 2.0), UnitGetPosition(lv_digTarget)) == false) && (UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) == 0)) {
                        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_digTarget), c_orderQueueReplace);
                        gv_aI_CurrentDigPoint[lv_currentPlayer] = UnitGetPosition(lv_digTarget);
                    }

                }

            }
            else if ((lv_randomAction <= 100.0)) {
                lv_dirtGroup = UnitGroup("Dirt", c_playerAny, RegionCircle(gv_aI_CurrentDigPoint[lv_currentPlayer], 7.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1)) {
                    lv_digTarget = UnitGroupRandomUnit(lv_dirtGroup, c_unitCountAlive);
                    lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "SmallSpikeNest", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_digTarget), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((gf_DigIsDiagonal(UnitGetPosition(lv_digTarget)) == false) && (RegionContainsPoint(RegionCircle(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], 5.0), UnitGetPosition(lv_digTarget)) == false) && (RegionContainsPoint(RegionCircle(gv_aI_ColonyStartPoint[lv_currentPlayer], 5.0), UnitGetPosition(lv_digTarget)) == false) && (UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) == 0)) {
                        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_digTarget), c_orderQueueReplace);
                        if (((lv_currentForagerNestCount + lv_currentSoldierNestCount) >= 25)) {
                            gv_aI_CurrentDigPoint[lv_currentPlayer] = UnitGetPosition(lv_digTarget);
                        }

                    }

                }

            }
            else if (true) {
                lv_dirtGroup = UnitGroup("Dirt", c_playerAny, gv_aI_SpecialNestReserveRegion[lv_currentPlayer], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((gv_aI_SpecialNestReserveRegion[lv_currentPlayer] != null) && (UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1) && (lv_currentSoldierNestCount >= 8)) {
                }
                else {
                    UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SmallSpikeNest", "NewSoldierNest", "", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                    lv_dirtGroup = UnitGroup("Dirt", c_playerAny, RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_tempUnitgroup, c_unitCountAlive)), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_tempUnitgroup = lv_unitGroupEmpty;
                }
                if ((UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1)) {
                    lv_digTarget = UnitGroupClosestToPoint(lv_dirtGroup, PointWithOffsetPolar(gv_aI_CurrentBuildPoint[lv_currentPlayer], RandomFixed(1.0, 4.0), (gv_aI_TunnelAngle[lv_currentPlayer] + RandomFixed(-60.0, 60.0))));
                    lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "SmallSpikeNest", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_digTarget), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((gf_DigIsDiagonal(UnitGetPosition(lv_digTarget)) == false) && (RegionContainsPoint(RegionCircle(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], 5.0), UnitGetPosition(lv_digTarget)) == false) && (RegionContainsPoint(RegionCircle(gv_aI_ColonyStartPoint[lv_currentPlayer], 5.0), UnitGetPosition(lv_digTarget)) == false) && (UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) == 0)) {
                        UnitIssueOrder(lv_queen, OrderTargetingUnit(AbilityCommand("Dig", 0), lv_digTarget), c_orderQueueReplace);
                        if (((lv_currentForagerNestCount + lv_currentSoldierNestCount) >= 25)) {
                            gv_aI_CurrentDigPoint[lv_currentPlayer] = UnitGetPosition(lv_digTarget);
                        }

                    }

                }

            }
        }
        else if ((lv_randomAction <= 90.0) && ((UnitGroupHasUnit(UnitGroupIdle(lv_currentPlayer, false), lv_queen) == true) || (OrderGetAbilityCommand(UnitOrder(lv_queen, 0)) == AbilityCommand("attack", 0)))) {
            UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_tempUnitgroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "SmallSpikeNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitIssueOrder(lv_queen, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(UnitGroupRandomUnit(lv_tempUnitgroup, c_unitCountAlive))), c_orderQueueReplace);
            lv_tempUnitgroup = lv_unitGroupEmpty;
        }
        else if ((GameGetMissionTime() >= 200.0) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 175) && (UnitGroupHasUnit(UnitGroupIdle(lv_currentPlayer, false), lv_queen) == true) && (UnitQueueItemCount(lv_queen, 1) == 0) && (lv_tryingToBuildSpecialNest == false)) {
            lv_randomAction = libNtve_gf_RandomPercent();
            if ((lv_randomAction <= 33.0)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 1)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 2)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 9)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 10)), c_orderQueueReplace);
            }
            else if ((lv_randomAction <= 66.0)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 3)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 4)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 5)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 11)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 12)), c_orderQueueReplace);
            }
            else if ((lv_randomAction <= 99.0)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("SpawningPoolResearch", 1)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("SpawningPoolResearch", 4)), c_orderQueueReplace);
            }
            if ((UnitQueueItemCount(lv_queen, 1) == 0)) {
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("SpawningPoolResearch", 1)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 3)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 4)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 1)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 2)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 9)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 5)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("SpawningPoolResearch", 4)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 10)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 11)), c_orderQueueReplace);
                UnitIssueOrder(lv_queen, Order(AbilityCommand("evolutionchamberresearch", 12)), c_orderQueueReplace);
            }

        }
    }
}

trigger auto_gf_Soldieractions_Trigger = null;
int auto_gf_Soldieractions_lp_aIPlayer;

void gf_Soldieractions (int lp_aIPlayer) {
    auto_gf_Soldieractions_lp_aIPlayer = lp_aIPlayer;

    if (auto_gf_Soldieractions_Trigger == null) {
        auto_gf_Soldieractions_Trigger = TriggerCreate("auto_gf_Soldieractions_TriggerFunc");
    }

    TriggerExecute(auto_gf_Soldieractions_Trigger, false, false);
}

bool auto_gf_Soldieractions_TriggerFunc (bool testConds, bool runActions) {
    int lp_aIPlayer = auto_gf_Soldieractions_lp_aIPlayer;

    // Variable Declarations
    int lv_currentPlayer;
    unitgroup lv_soldiers;
    unit lv_targetUnit;
    unit lv_currentUnit;
    fixed lv_randomAction;
    unitgroup lv_dirtGroup;
    unitgroup lv_enemySoldierGroup;
    unitgroup lv_enemyStructureGroup;
    unitgroup lv_alliedStructureGroup;
    unitgroup lv_queenUnits;
    int lv_profile;

    // Automatic Variable Declarations
    unitgroup autoD3AF3D9E_g;
    int autoD3AF3D9E_u;
    unitgroup auto8DC7F2E3_g;
    int auto8DC7F2E3_u;
    unitgroup autoB5D7C088_g;
    int autoB5D7C088_u;
    unitgroup auto7CE6463B_g;
    int auto7CE6463B_u;
    unitgroup auto7CEDF0AB_g;
    int auto7CEDF0AB_u;

    // Variable Initialization
    lv_currentPlayer = lp_aIPlayer;
    lv_soldiers = UnitGroupEmpty();
    lv_dirtGroup = UnitGroupEmpty();
    lv_enemySoldierGroup = UnitGroupEmpty();
    lv_enemyStructureGroup = UnitGroupEmpty();
    lv_alliedStructureGroup = UnitGroupEmpty();
    lv_queenUnits = UnitGroupEmpty();

    // Implementation
    lv_profile = gv_aI_Profile[lv_currentPlayer];
    if (((GameGetMissionTime() - gv_aI_LastAttackTime[lv_currentPlayer]) >= gv_aIProfile_AttackWavePeriod[gv_aI_Profile[lv_currentPlayer]])) {
        gv_aI_LastAttackTime[lv_currentPlayer] = (GameGetMissionTime() + RandomFixed(-5.0, 5.0));
        lv_soldiers = UnitGroup("Zergling", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_soldiers, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Ultralisk", "Hydralisk", "Locust", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitGroupCount(lv_soldiers, c_unitCountAlive) == 0)) {
            return true;
        }

        autoD3AF3D9E_g = lv_soldiers;
        autoD3AF3D9E_u = UnitGroupCount(autoD3AF3D9E_g, c_unitCountAll);
        for (;; autoD3AF3D9E_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoD3AF3D9E_g, autoD3AF3D9E_u);
            if (lv_currentUnit == null) { break; }
            if ((OrderGetAbilityCommand(UnitOrder(lv_currentUnit, 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetUnit(UnitOrder(lv_currentUnit, 0)) != null)) {
                UnitGroupRemove(lv_soldiers, lv_currentUnit);
            }

        }
        UnitGroupIssueOrder(lv_soldiers, OrderTargetingPoint(AbilityCommand("move", 3), gv_aI_ColonyStartPoint[lv_currentPlayer]), c_orderQueueReplace);
        Wait(8.0, c_timeGame);
        lv_enemyStructureGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "BroodlingSpawnerXXREMOVALXX", lv_currentPlayer, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyStructureGroup, c_unitCountAlive) == 0)) {
            lv_enemyStructureGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Queen", "NewQueen", "", lv_currentPlayer, c_unitAllianceEnemy, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

        lv_targetUnit = UnitGroupRandomUnit(lv_enemyStructureGroup, c_unitCountAlive);
        if ((UnitIsValid(lv_targetUnit) == true) && (UnitIsAlive(lv_targetUnit) == true)) {
            UnitGroupIssueOrder(lv_soldiers, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_targetUnit)), c_orderQueueReplace);
            if ((PointPathingCost(gv_aI_ColonyStartPoint[lv_currentPlayer], UnitGetPosition(lv_targetUnit)) >= 5000)) {
                gv_aI_LastOffensiveDigTime[lv_currentPlayer] = GameGetMissionTime();
                lv_targetUnit = UnitGroupRandomUnit(lv_enemyStructureGroup, c_unitCountAlive);
                UnitGroupIssueOrder(lv_soldiers, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_targetUnit)), c_orderQueueReplace);
            }

            UnitGroupAddUnitGroup(lv_queenUnits, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", UnitGetOwner(lv_targetUnit), c_unitAllianceAlly, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            UnitGroupAddUnitGroup(lv_queenUnits, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", UnitGetOwner(lv_targetUnit), c_unitAllianceAlly, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            lv_targetUnit = UnitGroupRandomUnit(lv_queenUnits, c_unitCountAlive);
            if ((UnitIsValid(lv_targetUnit) == true) && (UnitIsAlive(lv_targetUnit) == true)) {
                UnitGroupIssueOrder(lv_soldiers, OrderTargetingPoint(AbilityCommand("move", 3), UnitGetPosition(lv_targetUnit)), c_orderQueueAddToEnd);
                if ((PointPathingCost(gv_aI_ColonyStartPoint[lv_currentPlayer], UnitGetPosition(lv_targetUnit)) >= 5000)) {
                    gv_aI_LastOffensiveDigTime[lv_currentPlayer] = GameGetMissionTime();
                }

            }

        }

    }

    if (((GameGetMissionTime() - gv_aI_LastTargetTime[lv_currentPlayer]) >= gv_aIProfile_SoliderTargetPeriod[gv_aI_Profile[lv_currentPlayer]])) {
        gv_aI_LastTargetTime[lv_currentPlayer] = (GameGetMissionTime() + RandomFixed(-1.0, 1.0));
        lv_soldiers = UnitGroup("Zergling", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_soldiers, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Ultralisk", "Hydralisk", "Locust", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_soldiers, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TunnelTrembler", "SwarmHostMP", "InfestedAbomination", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_soldiers, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("LocustMP", "", "", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitGroupCount(lv_soldiers, c_unitCountAlive) == 0)) {
            return true;
        }

        auto8DC7F2E3_g = lv_soldiers;
        auto8DC7F2E3_u = UnitGroupCount(auto8DC7F2E3_g, c_unitCountAll);
        for (;; auto8DC7F2E3_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto8DC7F2E3_g, auto8DC7F2E3_u);
            if (lv_currentUnit == null) { break; }
            lv_randomAction = libNtve_gf_RandomPercent();
            if ((lv_randomAction <= 25.0)) {
                lv_enemyStructureGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_enemyStructureGroup, c_unitCountAlive) >= 1)) {
                    UnitIssueOrder(lv_currentUnit, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_enemyStructureGroup, UnitGetPosition(lv_currentUnit))), c_orderQueueReplace);
                }

            }

        }
        autoB5D7C088_g = lv_soldiers;
        autoB5D7C088_u = UnitGroupCount(autoB5D7C088_g, c_unitCountAll);
        for (;; autoB5D7C088_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoB5D7C088_g, autoB5D7C088_u);
            if (lv_currentUnit == null) { break; }
            if ((OrderGetAbilityCommand(UnitOrder(lv_currentUnit, 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetUnit(UnitOrder(lv_currentUnit, 0)) != null)) {
                UnitGroupRemove(lv_soldiers, lv_currentUnit);
            }

        }
        auto7CE6463B_g = lv_soldiers;
        auto7CE6463B_u = UnitGroupCount(auto7CE6463B_g, c_unitCountAll);
        for (;; auto7CE6463B_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto7CE6463B_g, auto7CE6463B_u);
            if (lv_currentUnit == null) { break; }
            lv_randomAction = libNtve_gf_RandomPercent();
            if ((lv_randomAction <= 12.0)) {
                lv_dirtGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "Wall", "", c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(lv_currentUnit), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_enemySoldierGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "BroodlingSpawnerXXREMOVALXX", "NewWorkerNest", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                lv_alliedStructureGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "BroodlingSpawnerXXREMOVALXX", lv_currentPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_currentUnit), 13.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lv_alliedStructureGroup, c_unitCountAlive) == 0) && (UnitGroupCount(lv_enemySoldierGroup, c_unitCountAlive) >= 4)) {
                    UnitIssueOrder(lv_currentUnit, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_dirtGroup, UnitGetPosition(lv_currentUnit))), c_orderQueueReplace);
                }

            }

        }
        if (((GameGetMissionTime() - gv_aI_LastOffensiveDigTime[lv_currentPlayer]) <= gv_aIProfile_OffensiveDigDuration[lv_profile])) {
            auto7CEDF0AB_g = lv_soldiers;
            auto7CEDF0AB_u = UnitGroupCount(auto7CEDF0AB_g, c_unitCountAll);
            for (;; auto7CEDF0AB_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto7CEDF0AB_g, auto7CEDF0AB_u);
                if (lv_currentUnit == null) { break; }
                lv_randomAction = libNtve_gf_RandomPercent();
                if ((lv_randomAction <= 80.0)) {
                    lv_dirtGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "Wall", "DirtMoved", c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(lv_currentUnit), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_enemySoldierGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "NewWorkerNest", "BroodlingSpawnerXXREMOVALXX", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_currentUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    lv_alliedStructureGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "BroodlingSpawnerXXREMOVALXX", lv_currentPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_currentUnit), 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((UnitGroupCount(lv_dirtGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lv_alliedStructureGroup, c_unitCountAlive) <= 1) && (UnitGroupCount(lv_enemySoldierGroup, c_unitCountAlive) >= 1)) {
                        lv_randomAction = libNtve_gf_RandomPercent();
                        if ((lv_randomAction <= 50.0)) {
                            UnitIssueOrder(lv_currentUnit, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(lv_dirtGroup, UnitGetPosition(lv_currentUnit))), c_orderQueueAddToFront);
                        }
                        else {
                            UnitIssueOrder(lv_currentUnit, OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupRandomUnit(lv_dirtGroup, c_unitCountAlive)), c_orderQueueAddToFront);
                        }
                    }

                }

            }
        }

    }

    return true;
}

trigger auto_gf_Structureactions_Trigger = null;
int auto_gf_Structureactions_lp_aIPlayer;

void gf_Structureactions (int lp_aIPlayer) {
    auto_gf_Structureactions_lp_aIPlayer = lp_aIPlayer;

    if (auto_gf_Structureactions_Trigger == null) {
        auto_gf_Structureactions_Trigger = TriggerCreate("auto_gf_Structureactions_TriggerFunc");
    }

    TriggerExecute(auto_gf_Structureactions_Trigger, false, false);
}

bool auto_gf_Structureactions_TriggerFunc (bool testConds, bool runActions) {
    int lp_aIPlayer = auto_gf_Structureactions_lp_aIPlayer;

    // Variable Declarations
    int lv_currentPlayer;
    unitgroup lv_structures;
    unitgroup lv_enemyUnitGroup;
    unitgroup lv_nearbyUnits;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = lp_aIPlayer;
    lv_structures = UnitGroupEmpty();
    lv_enemyUnitGroup = UnitGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();

    // Implementation
    lv_structures = UnitGroup("NewSoldierNest", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_structures, c_unitCountAlive) >= 1) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 600)) {
        UnitIssueOrder(UnitGroupRandomUnit(lv_structures, c_unitCountAlive), Order(AbilityCommand("UpgradeSoldierCount", 0)), c_orderQueueReplace);
    }

    lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "Zergling", "Queen", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(gv_aI_CurrentDamagePoint[lv_currentPlayer], 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_nearbyUnits = UnitGroup("NewSoldierNest", lv_currentPlayer, RegionCircle(gv_aI_CurrentDamagePoint[lv_currentPlayer], 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) >= 5) && (UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) >= 1) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 200)) {
        UnitGroupIssueOrder(lv_nearbyUnits, Order(AbilityCommand("UpgradeSoldierCount", 0)), c_orderQueueReplace);
        Wait(2.0, c_timeGame);
        lv_nearbyUnits = UnitGroup("Zergling", lv_currentPlayer, RegionCircle(gv_aI_CurrentDamagePoint[lv_currentPlayer], 12.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyUnits, c_unitCountAlive) >= 1)) {
            UnitGroupIssueOrder(lv_nearbyUnits, OrderTargetingPoint(AbilityCommand("move", 3), gv_aI_CurrentDamagePoint[lv_currentPlayer]), c_orderQueueReplace);
        }

    }

    lv_structures = UnitGroup("BroodlingSpawnerXXREMOVALXX", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_structures, c_unitCountAlive) >= 1) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 200)) {
        UnitGroupIssueOrder(lv_structures, Order(AbilityCommand("UpgradeSlowingAura", 0)), c_orderQueueReplace);
    }

    lv_structures = UnitGroup("NewWorkerNest", lv_currentPlayer, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_structures, c_unitCountAlive) >= 1)) {
        lv_currentUnit = UnitGroupRandomUnit(lv_structures, c_unitCountAlive);
        if ((UnitGetCustomValue(lv_currentUnit, gv_nestRespawnCount) >= 3.0)) {
            UnitIssueOrder(lv_currentUnit, Order(AbilityCommand("UpgradeToFoodGenerator", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_currentUnit, Order(AbilityCommand("UpgradeToSubterraneanTrail", 0)), c_orderQueueReplace);
        }

    }

    lv_structures = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerNest", lv_currentPlayer, -1, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_structures, c_unitCountAlive) >= 1) && (PlayerGetPropertyInt(lv_currentPlayer, c_playerPropMinerals) >= 300) && ((PlayerGetPropertyInt(lv_currentPlayer, c_playerPropSuppliesMade) - PlayerGetPropertyInt(lv_currentPlayer, c_playerPropSuppliesUsed)) >= 10)) {
        lv_currentUnit = UnitGroupRandomUnit(lv_structures, c_unitCountAlive);
        if ((UnitQueueItemCount(lv_currentUnit, 1) == 0)) {
            UnitIssueOrder(lv_currentUnit, Order(AbilityCommand("MajorNestTrain", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_currentUnit, Order(AbilityCommand("StingerNestTrain", 0)), c_orderQueueReplace);
            UnitIssueOrder(lv_currentUnit, Order(AbilityCommand("AcidSprayerNestTrain", 0)), c_orderQueueReplace);
        }

    }

    return true;
}

trigger auto_gf_AIcheat_Trigger = null;
unit auto_gf_AIcheat_lp_currentQueen;

void gf_AIcheat (unit lp_currentQueen) {
    auto_gf_AIcheat_lp_currentQueen = lp_currentQueen;

    if (auto_gf_AIcheat_Trigger == null) {
        auto_gf_AIcheat_Trigger = TriggerCreate("auto_gf_AIcheat_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIcheat_Trigger, false, false);
}

bool auto_gf_AIcheat_TriggerFunc (bool testConds, bool runActions) {
    unit lp_currentQueen = auto_gf_AIcheat_lp_currentQueen;

    // Variable Declarations
    int lv_currentPlayer;
    unit lv_queen;
    int lv_profile;
    fixed lv_foodRate;
    fixed lv_energyRate;
    fixed lv_foodAccumulator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(lp_currentQueen);
    lv_queen = lp_currentQueen;

    // Implementation
    lv_profile = gv_aI_Profile[lv_currentPlayer];
    lv_foodRate = gv_aIProfile_CheatFoodRate[lv_profile];
    lv_energyRate = gv_aIProfile_CheatEnergyRate[lv_profile];
    if ((lv_profile == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "CheatProfile1", 1);
    }

    if ((lv_profile == 3)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_currentPlayer, "CheatProfile3", 1);
    }

    while (true) {
        Wait(1.0, c_timeGame);
        lv_foodAccumulator += lv_foodRate;
        PlayerModifyPropertyInt(lv_currentPlayer, c_playerPropMinerals, c_playerPropOperAdd, FloorI(lv_foodAccumulator));
        lv_foodAccumulator -= Floor(lv_foodAccumulator);
        if ((UnitIsValid(lv_queen) == true) && (UnitIsAlive(lv_queen) == true) && (UnitGetPropertyFixed(lv_queen, c_unitPropEnergyPercent, c_unitPropCurrent) <= 99.0)) {
            if ((UnitGetType(lv_queen) == "NewQueen") && (lv_energyRate > 0.0)) {
                UnitSetPropertyFixed(lv_queen, c_unitPropEnergy, (UnitGetPropertyFixed(lv_queen, c_unitPropEnergy, c_unitPropCurrent) + (lv_energyRate * 2.0)));
            }

            if (((UnitGetType(lv_queen) == "QueenBlackAnt") || (UnitGetType(lv_queen) == "QueenFireAnt") || (UnitGetType(lv_queen) == "QueenWoodAnt") || (UnitGetType(lv_queen) == "QueenLeafCutterAnt") || (UnitGetType(lv_queen) == "QueenPharaohAnt") || (UnitGetType(lv_queen) == "QueenGhostAnt"))) {
                UnitSetPropertyFixed(lv_queen, c_unitPropEnergy, (UnitGetPropertyFixed(lv_queen, c_unitPropEnergy, c_unitPropCurrent) + lv_energyRate));
            }

        }

    }
    return true;
}

region gf_FindSpecialNestReserveRegion (unit lp_currentQueen, region lp_currentRegion) {
    // Variable Declarations
    unit lv_queen;
    int lv_currentPlayer;
    fixed lv_x;
    fixed lv_y;
    point lv_pointCheck;
    unitgroup lv_neabyStructures;
    unitgroup lv_neabyDirt;
    region lv_reserveRegion;
    int lv_dirtCount;
    int lv_ix;
    int lv_iy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_queen = lp_currentQueen;
    lv_currentPlayer = UnitGetOwner(lp_currentQueen);
    lv_neabyStructures = UnitGroupEmpty();
    lv_neabyDirt = UnitGroupEmpty();
    lv_reserveRegion = lp_currentRegion;

    // Implementation
    if ((lv_reserveRegion != null)) {
        lv_neabyStructures = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "BroodlingSpawnerXXREMOVALXX", c_playerAny, c_unitAllianceAny, lv_reserveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_neabyStructures, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerEgg", c_playerAny, c_unitAllianceAny, lv_reserveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if ((UnitGroupCount(lv_neabyStructures, c_unitCountAlive) >= 1)) {
            lv_reserveRegion = null;
        }

    }

    if ((lv_reserveRegion != null)) {
        lv_neabyDirt = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "", "", c_playerAny, c_unitAllianceAny, lv_reserveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_neabyDirt, c_unitCountAlive) == 0)) {
            if (((CreepIsPresent(PointWithOffset(RegionGetCenter(lv_reserveRegion), -1.0, -1.0)) == false) || (CreepIsPresent(PointWithOffset(RegionGetCenter(lv_reserveRegion), 1.0, -1.0)) == false) || (CreepIsPresent(PointWithOffset(RegionGetCenter(lv_reserveRegion), -1.0, 1.0)) == false) || (CreepIsPresent(PointWithOffset(RegionGetCenter(lv_reserveRegion), 1.0, 1.0)) == false))) {
                lv_reserveRegion = null;
            }

        }

    }

    if ((lv_reserveRegion == null)) {
        lv_pointCheck = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_queen), 5.0));
        lv_x = Floor(PointGetX(lv_pointCheck));
        lv_y = Floor(PointGetY(lv_pointCheck));
        if ((ModF(lv_x, 2.0) == 0.0)) {
            lv_x = (lv_x + 1.0);
        }

        if ((ModF(lv_y, 2.0) == 0.0)) {
            lv_y = (lv_y + 1.0);
        }

        lv_ix = TruncI((lv_x / 2.0));
        lv_iy = TruncI((lv_y / 2.0));
        lv_pointCheck = Point(lv_x, lv_y);
        lv_reserveRegion = RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0));
        lv_neabyDirt = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "", "", c_playerAny, c_unitAllianceAny, lv_reserveRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_dirtCount = UnitGroupCount(lv_neabyDirt, c_unitCountAlive);
        lv_dirtCount += gv_dirtMap[(lv_ix + 0)][(lv_iy + 0)];
        lv_dirtCount += gv_dirtMap[(lv_ix + 1)][(lv_iy + 0)];
        lv_dirtCount += gv_dirtMap[(lv_ix + 0)][(lv_iy + 1)];
        lv_dirtCount += gv_dirtMap[(lv_ix + 1)][(lv_iy + 1)];
        if (((lv_dirtCount != 4) || (UnitGroupCount(lv_neabyDirt, c_unitCountAlive) < 1) || (RegionContainsPoint(RegionCircle(gv_aI_ColonyFirstCreepPoint[lv_currentPlayer], 6.5), RegionGetCenter(lv_reserveRegion)) == true) || (RegionContainsPoint(RegionFromId(3), RegionGetCenter(lv_reserveRegion)) == false))) {
            lv_reserveRegion = null;
        }

    }

    return lv_reserveRegion;
}

bool gf_DigIsDiagonal (point lp_digPosition) {
    // Variable Declarations
    int lv_dirtCount;
    point lv_currentPoint;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_currentPoint = PointWithOffset(lp_digPosition, -2.0, 0.0);
    lv_dirtCount += UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(lv_currentPoint, 0.25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_x = FixedToInt((PointGetX(lv_currentPoint) * 0.5));
    lv_y = FixedToInt((PointGetY(lv_currentPoint) * 0.5));
    if ((lv_x >= 0) && (lv_y >= 0) && (lv_x < gv_mapSize) && (lv_y < gv_mapSize)) {
        lv_dirtCount += gv_dirtMap[lv_x][lv_y];
    }

    lv_currentPoint = PointWithOffset(lp_digPosition, 2.0, 0.0);
    lv_dirtCount += UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(lv_currentPoint, 0.25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_x = FixedToInt((PointGetX(lv_currentPoint) * 0.5));
    lv_y = FixedToInt((PointGetY(lv_currentPoint) * 0.5));
    if ((lv_x >= 0) && (lv_y >= 0) && (lv_x < gv_mapSize) && (lv_y < gv_mapSize)) {
        lv_dirtCount += gv_dirtMap[lv_x][lv_y];
    }

    lv_currentPoint = PointWithOffset(lp_digPosition, 0.0, -2.0);
    lv_dirtCount += UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(lv_currentPoint, 0.25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_x = FixedToInt((PointGetX(lv_currentPoint) * 0.5));
    lv_y = FixedToInt((PointGetY(lv_currentPoint) * 0.5));
    if ((lv_x >= 0) && (lv_y >= 0) && (lv_x < gv_mapSize) && (lv_y < gv_mapSize)) {
        lv_dirtCount += gv_dirtMap[lv_x][lv_y];
    }

    lv_currentPoint = PointWithOffset(lp_digPosition, 0.0, 2.0);
    lv_dirtCount += UnitGroupCount(UnitGroup("Dirt", c_playerAny, RegionCircle(lv_currentPoint, 0.25), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    lv_x = FixedToInt((PointGetX(lv_currentPoint) * 0.5));
    lv_y = FixedToInt((PointGetY(lv_currentPoint) * 0.5));
    if ((lv_x >= 0) && (lv_y >= 0) && (lv_x < gv_mapSize) && (lv_y < gv_mapSize)) {
        lv_dirtCount += gv_dirtMap[lv_x][lv_y];
    }

    if ((lv_dirtCount == 4)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_Soldiereggsetup (unit lp_egg, unit lp_nest, bool lp_fastHatch) {
    // Variable Declarations
    fixed lv_scaleDuration;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleDuration = 30.0;

    // Implementation
    UnitSetCustomValue(lp_egg, gv_x, PointGetX(UnitGetPosition(lp_nest)));
    UnitSetCustomValue(lp_egg, gv_y, PointGetY(UnitGetPosition(lp_nest)));
    UnitSetCustomValue(lp_egg, gv_iD, UnitGetCustomValue(lp_nest, gv_iD));
    UnitSetPosition(lp_egg, PointWithOffsetPolar(UnitGetPosition(lp_nest), 0.9, libNtve_gf_RandomAngle()), false);
    libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(0.3, 0.3, 0.3, 0.0));
    if ((lp_fastHatch == true)) {
        UnitIssueOrder(lp_egg, Order(AbilityCommand("MorphToSoldierFast", 0)), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(1.0, 1.0, 1.0, 0.75));
    }
    else {
        UnitIssueOrder(lp_egg, Order(AbilityCommand("MorphToSoldier", 0)), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(1.0, 1.0, 1.0, lv_scaleDuration));
    }
    lv_rallyPoint = UnitRallyPointTargetPoint(lp_nest, 1, 1);
    if ((lv_rallyPoint != null)) {
        UnitIssueOrder(lp_egg, OrderTargetingPoint(AbilityCommand("Rally", 0), lv_rallyPoint), c_orderQueueAddToEnd);
    }

}

void gf_Assassineggsetup (unit lp_egg, unit lp_nest, bool lp_fastHatch) {
    // Variable Declarations
    fixed lv_scaleDuration;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleDuration = 30.0;

    // Implementation
    UnitSetCustomValue(lp_egg, gv_x, PointGetX(UnitGetPosition(lp_nest)));
    UnitSetCustomValue(lp_egg, gv_y, PointGetY(UnitGetPosition(lp_nest)));
    UnitSetCustomValue(lp_egg, gv_iD, UnitGetCustomValue(lp_nest, gv_iD));
    UnitSetPosition(lp_egg, PointWithOffsetPolar(UnitGetPosition(lp_nest), 0.9, libNtve_gf_RandomAngle()), false);
    libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(0.3, 0.3, 0.3, 0.0));
    libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(0.3, 0.3, 0.3, 0.0));
    if ((lp_fastHatch == true)) {
        UnitIssueOrder(lp_egg, Order(AbilityCommand("MorphAssassinEggintoAssassinFast", 0)), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(1.0, 1.0, 1.0, 0.75));
    }
    else {
        UnitIssueOrder(lp_egg, Order(AbilityCommand("MorphToAssassin", 0)), c_orderQueueReplace);
        libNtve_gf_SendActorMessageToUnit(lp_egg, libNtve_gf_SetScale(1.0, 1.0, 1.0, lv_scaleDuration));
    }
    lv_rallyPoint = UnitRallyPointTargetPoint(lp_nest, 1, 1);
    if ((lv_rallyPoint != null)) {
        UnitIssueOrder(lp_egg, OrderTargetingPoint(AbilityCommand("Rally", 0), lv_rallyPoint), c_orderQueueAddToEnd);
    }

}

void gf_Activatedirt (int lp_dirtX, int lp_dirtY) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    int auto1EE00CF7_ae;
    const int auto1EE00CF7_ai = 1;
    int autoCB5F57B0_ae;
    const int autoCB5F57B0_ai = 1;

    // Variable Initialization

    // Implementation
    auto1EE00CF7_ae = (lp_dirtX + 1);
    lv_x = (lp_dirtX - 1);
    for ( ; ( (auto1EE00CF7_ai >= 0 && lv_x <= auto1EE00CF7_ae) || (auto1EE00CF7_ai < 0 && lv_x >= auto1EE00CF7_ae) ) ; lv_x += auto1EE00CF7_ai ) {
        autoCB5F57B0_ae = (lp_dirtY + 1);
        lv_y = (lp_dirtY - 1);
        for ( ; ( (autoCB5F57B0_ai >= 0 && lv_y <= autoCB5F57B0_ae) || (autoCB5F57B0_ai < 0 && lv_y >= autoCB5F57B0_ae) ) ; lv_y += autoCB5F57B0_ai ) {
            if ((lv_x >= 2) && (lv_y >= 2) && (lv_x <= (gv_mapSize - 2)) && (lv_y <= (gv_mapSize - 2)) && (gv_dirtMap[lv_x][lv_y] == 1)) {
                gv_dirtMap[lv_x][lv_y] = 0;
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Dirt", c_unitCreateIgnorePlacement, 15, Point((lv_x * 2.0), (lv_y * 2.0)));
                ActorSend(ActorFromScope(ActorScopeFromUnit(UnitLastCreated()), "DirtRockModel"), libNtve_gf_SetTintColor(ColorWithAlpha(RandomFixed((gv_groundTextureRed + 20.0), (gv_groundTextureRed + 30.0)), RandomFixed((gv_groundTextureGreen + 20.0), (gv_groundTextureGreen + 30.0)), RandomFixed((gv_groundTextureBlue + 20.0), (gv_groundTextureBlue + 30.0)), 90.0), 1.0, 2.0));
                UnitSetFacing(UnitLastCreated(), libNtve_gf_RandomAngle(), 0.0);
                UnitSetCustomValue(UnitLastCreated(), gv_activeDirt, 1.0);
            }

        }
    }
}

void gf_Cloakforager (unit lp_forager) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAdd(lp_forager, "SubterraneanTrail2", lp_forager, 1);
    UnitWeaponRemove(lp_forager, "Spines");
    UnitWeaponAdd(lp_forager, "SubterraneanTrailClaws", null);
    UnitSetHeight(lp_forager, 0.22, 1.0);
}

void gf_Uncloakforager (unit lp_forager) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_forager, "SubterraneanTrail2", 1);
    UnitWeaponRemove(lp_forager, "SubterraneanTrailClaws");
    UnitWeaponAdd(lp_forager, "Spines", null);
    UnitSetHeight(lp_forager, 0.0, 1.0);
}

void gf_DetermineModelOptionsforMeatFoodbasedonmapgen () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_mapPool == "Inside")) {
        gv_meatFoodModelOptionAmount = 4;
        gv_meatFoodModelOption1 = "UrsadakFemale2";
        gv_meatFoodModelOption2 = "SpaceCowBrown";
        gv_meatFoodModelOption3 = "UrsadakFemalerare";
        gv_meatFoodModelOption4 = "UrsadakMalerare";
    }
    else if ((gv_mapPool == "Outside")) {
        gv_meatFoodModelOptionAmount = 2;
        gv_meatFoodModelOption1 = "Spaceparasaurolophusfemale";
        gv_meatFoodModelOption2 = "Spaceparasaurolophusmale";
    }
    else if ((gv_mapPool == "Unnatural")) {
        gv_meatFoodModelOptionAmount = 2;
        gv_meatFoodModelOption1 = "SpaceCow";
        gv_meatFoodModelOption2 = "SpaceDog";
    }
}

string gf_FoodModelForMapgen () {
    // Variable Declarations
    int lv_foodModelNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_foodModelNumber = RandomInt(1, gv_meatFoodModelOptionAmount);

    // Implementation
    if ((lv_foodModelNumber == 1)) {
        return gv_meatFoodModelOption1;
    }
    else {
        if ((lv_foodModelNumber == 2)) {
            return gv_meatFoodModelOption2;
        }
        else {
            if ((lv_foodModelNumber == 3)) {
                return gv_meatFoodModelOption3;
            }
            else {
                if ((lv_foodModelNumber == 4)) {
                    return gv_meatFoodModelOption4;
                }
                else {
                    return "DebugNumber";
                }
            }
        }
    }
}

text gf_ReturnTextColorIdecOfPlayersAlliesForPlayer (int lp_player) {
    // Variable Declarations
    text[7] lv_textOfPlayer;
    int lv_index;

    // Automatic Variable Declarations
    const int autoBA6EFEA6_ae = 6;
    const int autoBA6EFEA6_ai = 1;

    // Variable Initialization

    // Implementation
    lv_index = 1;
    for ( ; ( (autoBA6EFEA6_ai >= 0 && lv_index <= autoBA6EFEA6_ae) || (autoBA6EFEA6_ai < 0 && lv_index >= autoBA6EFEA6_ae) ) ; lv_index += autoBA6EFEA6_ai ) {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), lv_index) == true) && (PlayerGroupHasPlayer(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_index) == true) && (lp_player != lv_index)) {
            lv_textOfPlayer[lv_index] = TextWithColor(StringExternal("Param/Value/AD6439B7"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_index, false)));
        }

    }
    return (lv_textOfPlayer[1] + lv_textOfPlayer[2] + lv_textOfPlayer[3] + lv_textOfPlayer[4] + lv_textOfPlayer[5] + lv_textOfPlayer[6]);
    return (StringExternal("Param/Value/0205160B") + lv_textOfPlayer[1] + lv_textOfPlayer[2] + lv_textOfPlayer[3] + lv_textOfPlayer[4] + lv_textOfPlayer[5] + lv_textOfPlayer[6] + StringExternal("Param/Value/CBCDF1F4"));
}

void gf_LoadbankFromAntEvoForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("AntEvolution", lp_player);
    gv_antEvolutionBank = BankLastCreated();
    BankWait(gv_antEvolutionBank);
    BankOptionSet(gv_originalAntColoBank, c_bankOptionSignature, true);
    if ((BankVerify(gv_antEvolutionBank) == true)) {
        gv_amountOfGamesPlayed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_TotalGames_Beta_B");
        gv_amountOfGamesWon[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_TotalWins_Beta_B");
        gv__1v1AIvsHardGamesWon[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_1v1_HardAIWins");
        gv__2v4AIvsVeryHardGamesWon[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_2v4_VeryHardAIWins");
        gv_amountOfGamesPlayedAsBlackant[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Black_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsFireAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Fire_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsWoodAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Wood_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsLeafCutterAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Leaf_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsPharaohAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Pharaoh_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsGhostAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ghost_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsRandomAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Random_Record_TotalGames_Beta_B");
        gv_amountOfGamesWonAsBlackant[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Black_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsFireAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Fire_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsWoodAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Wood_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsLeafCutterAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Leaf_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsPharaohAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Pharaoh_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsGhostAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ghost_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsRandomAnt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Random_Record_TotalWins_Beta_B");
        gv_record_DirtDestroyed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_DirtDestroyed");
        gv_record_FoodSpent[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_FoodSpent");
        gv_record_UnitsKilled[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_UnitsKilled");
        gv_record_UnitsProduced[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_UnitsProduced");
        gv_record_WallsBuilt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_WallsBuilt");
        gv_record_LongestMatch[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Record_LongestMatch");
        gv_openAlliances_DurationPlayed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "OpenAlliances_DurationPlayed");
        gv_openAlliances_Losses[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "OpenAlliances_Losses");
        gv_openAlliances_Wins[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "OpenAlliances_Wins");
        gv_freeForAll_DurationPlayed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "FreeForAll_DurationPlayed");
        gv_freeForAll_Losses[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "FreeForAll_Losses");
        gv_freeForAll_Wins[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "FreeForAll_Wins");
        gv__2v2v2_DurationPlayed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "2v2v2_DurationPlayed");
        gv__2v2v2_Losses[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "2v2v2_Losses");
        gv__2v2v2_Wins[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "2v2v2_Wins");
        gv__3v3_DurationPlayed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "3v3_DurationPlayed");
        gv__3v3_Losses[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "3v3_Losses");
        gv__3v3_Wins[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "3v3_Wins");
        gv_ranked_DurationPlayed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ranked_DurationPlayed");
        gv_ranked_Losses[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ranked_Losses");
        gv_ranked_Wins[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ranked_Wins");
        gv_ranked_Version[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ranked_Version");
        gv_playerRatingOriginal[lp_player] = BankValueGetAsFixed(gv_antEvolutionBank, gv_playerStats, "Rating");
        if ((BankSectionExists(gv_originalAntColoBank, gv_controlGroupConfig) == true)) {
            gv_ctrlGroup_AcidSprayer[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "AcidSprayer");
            gv_ctrlGroup_AcidSprayerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "AcidSprayerNest");
            gv_ctrlGroup_BroodlingSpawner[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "BroodlingSpawner");
            gv_ctrlGroup_Forager[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "Forager");
            gv_ctrlGroup_ForagerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "ForagerNest");
            gv_ctrlGroup_Major[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "Major");
            gv_ctrlGroup_MajorNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "MajorNest");
            gv_ctrlGroup_Queen[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "Queen");
            gv_ctrlGroup_Soldier[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "Soldier");
            gv_ctrlGroup_SoldierNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "SoldierNest");
            gv_ctrlGroup_Stinger[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "Stinger");
            gv_ctrlGroup_StingerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_controlGroupConfig, "StingerNest");
        }

        if ((gv_playerRatingOriginal[lp_player] <= 0.0)) {
            gv_playerRatingOriginal[lp_player] = 1500.0;
        }

        if ((gv_ranked_Version[lp_player] != gv_currentRankedVersion)) {
            if ((gv_playerRatingOriginal[lp_player] <= 500.0)) {
                gv_playerRatingOriginal[lp_player] = 1500.0;
            }
            else if ((gv_playerRatingOriginal[lp_player] <= 1000.0)) {
                gv_playerRatingOriginal[lp_player] += 1000.0;
            }
        }

        gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "UpgradeChamberUpgradesDone");
        gv_bulkBuildersBuiltbyplayer[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "BulkBuildersBuilt");
        gv_ability_AcidicStrikes[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_AcidicStrikes");
        gv_ability_Dig[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_Dig");
        gv_ability_UpgradeBroodlingSpawner[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeBroodlingSpawner");
        gv_ability_UpgradeForagerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeForagerNest");
        gv_ability_UpgradeSubterraneanTrail[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeSubterraneanTrail");
        gv_ability_UpgradeSoldierNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeSoldierNest");
        gv_ability_UpgradeSoldierSpeed[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeSoldierSpeed");
        gv_ability_UpgradeUnitArmor[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeUnitArmor");
        gv_ability_UpgradeUnitDamage[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeUnitDamage");
        gv_ability_VenomSpray[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_VenomSpray");
        gv_ability_BuildWall[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Ability_BuildWall");
        gv_produced_BroodlingSpawner[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_BroodlingSpawner");
        gv_produced_Forager[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_Forager");
        gv_produced_ForagerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_ForagerNest");
        gv_produced_Major[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_Major");
        gv_produced_MajorNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_MajorNest");
        gv_produced_QueenBlack[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_QueenBlack");
        gv_produced_QueenFire[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_QueenFire");
        gv_produced_Soldier[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_Soldier");
        gv_produced_SoldierNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_SoldierNest");
        gv_produced_Stinger[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_Stinger");
        gv_produced_StingerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_StingerNest");
        gv_produced_AcidSprayer[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_AcidSprayer");
        gv_produced_AcidSprayerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_AcidSprayerNest");
        gv_produced_Wall[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_Wall");
        gv_produced_QueenWood[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_QueenWood");
        gv_produced_Misaligned[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Produced_Misaligned");
        gv_kills_BroodlingSpawner[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_BroodlingSpawner");
        gv_kills_Dirt[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Dirt");
        gv_kills_Forager[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Forager");
        gv_kills_ForagerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_ForagerNest");
        gv_kills_Major[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Major");
        gv_kills_MajorNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_MajorNest");
        gv_kills_QueenBlack[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_QueenBlack");
        gv_kills_QueenFire[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_QueenFire");
        gv_kills_Quillgor[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Quillgor");
        gv_kills_Soldier[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Soldier");
        gv_kills_SoldierNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_SoldierNest");
        gv_kills_Stinger[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Stinger");
        gv_kills_StingerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_StingerNest");
        gv_kills_AcidSprayer[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_AcidSprayer");
        gv_kills_AcidSprayerNest[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_AcidSprayerNest");
        gv_kills_QueenWood[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_QueenWood");
        gv_kills_Wall[lp_player] = BankValueGetAsInt(gv_antEvolutionBank, gv_playerStats, "Kills_Wall");
        gv_workerSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "WorkerSkin_B");
        gv_soldierSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "SoldierSkin_B");
        gv_queenSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "QueenSkin_B");
        gv_majorSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "MajorSkin_B");
        gv_stingerSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "StingerSkin_B");
        gv_acidSprayerSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "AcidSprayerSkin_B");
        gv_tunnelTremblerSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "TunnelTremblerSkin_B");
        gv_khepriSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "KhepriSkin_B");
        gv_workerNestSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "WorkerNestSkin_B");
        gv_soldierNestSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "SoldierNestSkin_B");
        gv_bulkBuilderSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "BulkBuilderSkin_B");
        gv_spikesNestSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "SpikesNestSkin_B");
        gv_upgradeChamberSwapModelString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "UpgradeChamberSkin_B");
        gv_playerUIChoice[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "UIChoice_B");
        gv_playerCustomGUIString[lp_player] = BankValueGetAsString(gv_antEvolutionBank, gv_playerStats, "CustomGUIChoice");
        gv_settingsMenuHideRightSideButtonsHiddenForPlayer[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "HasHiddenRightSideButtons");
        gv_workerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerDef");
        gv_workerSwapModelIsUnlockedMacerator[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerMac");
        gv_workerSwapModelIsUnlockedRemastered[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerRemas");
        gv_workerSwapModelIsUnlockedHologram[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerHolo");
        gv_workerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerGray");
        gv_workerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerSwarm");
        gv_workerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerMech");
        gv_soldierSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierDef");
        gv_soldierSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierGray");
        gv_soldierSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierSwarm");
        gv_soldierSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierMech");
        gv_queenSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenDef_B");
        gv_queenSwapModelIsUnlockedLongAntenas[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenLong_B");
        gv_queenSwapModelIsUnlockedThickHead[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenThick_B");
        gv_queenSwapModelIsUnlockedSpikeyHead[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenSpikey_B");
        gv_queenSwapModelIsUnlockedHologram[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenHolo_B");
        gv_queenSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenGray_B");
        gv_queenSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenSwarm_B");
        gv_queenSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenMech_B");
        gv_majorSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorDef");
        gv_majorSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorGray");
        gv_majorSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorSwarm");
        gv_majorSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorMech");
        gv_stingerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerDef");
        gv_stingerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerGray");
        gv_stingerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerSwarm");
        gv_stingerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerMech");
        gv_acidSprayerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerDef");
        gv_acidSprayerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerGray");
        gv_acidSprayerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerSwarm");
        gv_acidSprayerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerMech");
        gv_tunnelTremblerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerDef");
        gv_tunnelTremblerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerGray");
        gv_tunnelTremblerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerSwarm");
        gv_tunnelTremblerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerMech");
        gv_khepriSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriDef");
        gv_khepriSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriGray");
        gv_khepriSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriSwarm");
        gv_khepriSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriMech");
        gv_workerNestSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerNestDef");
        gv_workerNestSwapModelIsUnlockedWebMod[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerNestWebMod");
        gv_workerNestSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerNestMech");
        gv_soldierNestSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierNestDef");
        gv_soldierNestSwapModelIsUnlockedWebMod[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierNestWebMod");
        gv_soldierNestSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierNestMech");
        gv_bulkBuilderSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedBulkBuilderDef");
        gv_bulkBuilderSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedBulkBuilderMech");
        gv_upgradeChamberSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedUpgradeChamberDef");
        gv_upgradeChamberSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedUpgradeChamberSwarm");
        gv_upgradeChamberSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedUpgradeChamberMech");
        gv_spikesNestSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSpikesNestDef");
        gv_spikesNestSwapModelIsUnlockedFAT[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSpikesNestDomination");
        gv_spikesNestSwapModelIsUnlockedFATWebMod[lp_player] = BankValueGetAsFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSpikesNestSwarm");
        gv_playerBankTransferedToAntEvo[lp_player] = BankValueGetAsString(BankLastCreated(), gv_playerStats, "AntEvoTrans");
    }
    else {
        BankSectionRemove(gv_antEvolutionBank, gv_playerStats);
    }
}

void gf_DONOTEDITLoadbankFromAntColoForPlayerDONOTEDIT (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    BankLoad("AntColonies", lp_player);
    gv_originalAntColoBank = BankLastCreated();
    BankWait(gv_originalAntColoBank);
    BankOptionSet(gv_originalAntColoBank, c_bankOptionSignature, true);
    if ((BankVerify(gv_originalAntColoBank) == true)) {
        gv_amountOfGamesPlayed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_TotalGames_Beta_B");
        gv_amountOfGamesWon[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_TotalWins_Beta_B");
        gv__1v1AIvsHardGamesWon[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_1v1_HardAIWins");
        gv__2v4AIvsVeryHardGamesWon[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_2v4_VeryHardAIWins");
        gv_amountOfGamesPlayedAsBlackant[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Black_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsFireAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Fire_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsWoodAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Wood_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsLeafCutterAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Leaf_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsPharaohAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Pharaoh_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsGhostAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ghost_Record_TotalGames_Beta_B");
        gv_amountOfGamesPlayedAsRandomAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Random_Record_TotalGames_Beta_B");
        gv_amountOfGamesWonAsBlackant[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Black_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsFireAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Fire_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsWoodAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Wood_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsLeafCutterAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Leaf_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsPharaohAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Pharaoh_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsGhostAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ghost_Record_TotalWins_Beta_B");
        gv_amountOfGamesWonAsRandomAnt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Random_Record_TotalWins_Beta_B");
        gv_record_DirtDestroyed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_DirtDestroyed");
        gv_record_FoodSpent[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_FoodSpent");
        gv_record_UnitsKilled[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_UnitsKilled");
        gv_record_UnitsProduced[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_UnitsProduced");
        gv_record_WallsBuilt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_WallsBuilt");
        gv_record_LongestMatch[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Record_LongestMatch");
        gv_openAlliances_DurationPlayed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "OpenAlliances_DurationPlayed");
        gv_openAlliances_Losses[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "OpenAlliances_Losses");
        gv_openAlliances_Wins[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "OpenAlliances_Wins");
        gv_freeForAll_DurationPlayed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "FreeForAll_DurationPlayed");
        gv_freeForAll_Losses[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "FreeForAll_Losses");
        gv_freeForAll_Wins[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "FreeForAll_Wins");
        gv__2v2v2_DurationPlayed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "2v2v2_DurationPlayed");
        gv__2v2v2_Losses[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "2v2v2_Losses");
        gv__2v2v2_Wins[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "2v2v2_Wins");
        gv__3v3_DurationPlayed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "3v3_DurationPlayed");
        gv__3v3_Losses[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "3v3_Losses");
        gv__3v3_Wins[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "3v3_Wins");
        gv_ranked_DurationPlayed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ranked_DurationPlayed");
        gv_ranked_Losses[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ranked_Losses");
        gv_ranked_Wins[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ranked_Wins");
        gv_ranked_Version[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ranked_Version");
        gv_playerRatingOriginal[lp_player] = BankValueGetAsFixed(gv_originalAntColoBank, gv_playerStats, "Rating");
        if ((BankSectionExists(gv_originalAntColoBank, gv_controlGroupConfig) == true)) {
            gv_ctrlGroup_AcidSprayer[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "AcidSprayer");
            gv_ctrlGroup_AcidSprayerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "AcidSprayerNest");
            gv_ctrlGroup_BroodlingSpawner[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "BroodlingSpawner");
            gv_ctrlGroup_Forager[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "Forager");
            gv_ctrlGroup_ForagerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "ForagerNest");
            gv_ctrlGroup_Major[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "Major");
            gv_ctrlGroup_MajorNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "MajorNest");
            gv_ctrlGroup_Queen[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "Queen");
            gv_ctrlGroup_Soldier[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "Soldier");
            gv_ctrlGroup_SoldierNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "SoldierNest");
            gv_ctrlGroup_Stinger[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "Stinger");
            gv_ctrlGroup_StingerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_controlGroupConfig, "StingerNest");
        }

        if ((gv_playerRatingOriginal[lp_player] <= 0.0)) {
            gv_playerRatingOriginal[lp_player] = 1500.0;
        }

        if ((gv_ranked_Version[lp_player] != gv_currentRankedVersion)) {
            if ((gv_playerRatingOriginal[lp_player] <= 500.0)) {
                gv_playerRatingOriginal[lp_player] = 1500.0;
            }
            else if ((gv_playerRatingOriginal[lp_player] <= 1000.0)) {
                gv_playerRatingOriginal[lp_player] += 1000.0;
            }
        }

        gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "UpgradeChamberUpgradesDone");
        gv_ability_AcidicStrikes[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_AcidicStrikes");
        gv_ability_Dig[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_Dig");
        gv_ability_UpgradeBroodlingSpawner[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeBroodlingSpawner");
        gv_ability_UpgradeForagerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeForagerNest");
        gv_ability_UpgradeSubterraneanTrail[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeSubterraneanTrail");
        gv_ability_UpgradeSoldierNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeSoldierNest");
        gv_ability_UpgradeSoldierSpeed[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeSoldierSpeed");
        gv_ability_UpgradeUnitArmor[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeUnitArmor");
        gv_ability_UpgradeUnitDamage[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_UpgradeUnitDamage");
        gv_ability_VenomSpray[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_VenomSpray");
        gv_ability_BuildWall[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Ability_BuildWall");
        gv_produced_BroodlingSpawner[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_BroodlingSpawner");
        gv_produced_Forager[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_Forager");
        gv_produced_ForagerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_ForagerNest");
        gv_produced_Major[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_Major");
        gv_produced_MajorNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_MajorNest");
        gv_produced_QueenBlack[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_QueenBlack");
        gv_produced_QueenFire[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_QueenFire");
        gv_produced_Soldier[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_Soldier");
        gv_produced_SoldierNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_SoldierNest");
        gv_produced_Stinger[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_Stinger");
        gv_produced_StingerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_StingerNest");
        gv_produced_AcidSprayer[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_AcidSprayer");
        gv_produced_AcidSprayerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_AcidSprayerNest");
        gv_produced_Wall[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_Wall");
        gv_produced_QueenWood[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_QueenWood");
        gv_produced_Misaligned[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Produced_Misaligned");
        gv_kills_BroodlingSpawner[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_BroodlingSpawner");
        gv_kills_Dirt[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Dirt");
        gv_kills_Forager[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Forager");
        gv_kills_ForagerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_ForagerNest");
        gv_kills_Major[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Major");
        gv_kills_MajorNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_MajorNest");
        gv_kills_QueenBlack[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_QueenBlack");
        gv_kills_QueenFire[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_QueenFire");
        gv_kills_Quillgor[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Quillgor");
        gv_kills_Soldier[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Soldier");
        gv_kills_SoldierNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_SoldierNest");
        gv_kills_Stinger[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Stinger");
        gv_kills_StingerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_StingerNest");
        gv_kills_AcidSprayer[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_AcidSprayer");
        gv_kills_AcidSprayerNest[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_AcidSprayerNest");
        gv_kills_QueenWood[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_QueenWood");
        gv_kills_Wall[lp_player] = BankValueGetAsInt(gv_originalAntColoBank, gv_playerStats, "Kills_Wall");
        gv_workerSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "WorkerSkin_B");
        gv_soldierSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "SoldierSkin_B");
        gv_queenSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "QueenSkin_B");
        gv_majorSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "MajorSkin_B");
        gv_stingerSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "StingerSkin_B");
        gv_acidSprayerSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "AcidSprayerSkin_B");
        gv_tunnelTremblerSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "TunnelTremblerSkin_B");
        gv_khepriSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "KhepriSkin_B");
        gv_workerNestSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "WorkerNestSkin_B");
        gv_soldierNestSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "SoldierNestSkin_B");
        gv_bulkBuilderSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "BulkBuilderSkin_B");
        gv_spikesNestSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "SpikesNestSkin_B");
        gv_upgradeChamberSwapModelString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "UpgradeChamberSkin_B");
        gv_playerUIChoice[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "UIChoice_B");
        gv_playerCustomGUIString[lp_player] = BankValueGetAsString(gv_originalAntColoBank, gv_playerStats, "SC2GUI");
        gv_settingsMenuHideRightSideButtonsHiddenForPlayer[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "HasHiddenRightSideButtons");
        gv_workerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerDef");
        gv_workerSwapModelIsUnlockedMacerator[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerMac");
        gv_workerSwapModelIsUnlockedRemastered[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerRemas");
        gv_workerSwapModelIsUnlockedHologram[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerHolo");
        gv_workerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerGray");
        gv_workerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerSwarm");
        gv_workerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerMech");
        gv_soldierSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierDef");
        gv_soldierSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierGray");
        gv_soldierSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierSwarm");
        gv_soldierSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierMech");
        gv_queenSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenDef_B");
        gv_queenSwapModelIsUnlockedLongAntenas[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenLong_B");
        gv_queenSwapModelIsUnlockedThickHead[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenThick_B");
        gv_queenSwapModelIsUnlockedSpikeyHead[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenSpikey_B");
        gv_queenSwapModelIsUnlockedHologram[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenHolo_B");
        gv_queenSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenGray_B");
        gv_queenSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenSwarm_B");
        gv_queenSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedQueenMech_B");
        gv_majorSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedMajorDef");
        gv_majorSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedMajorGray");
        gv_majorSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedMajorSwarm");
        gv_majorSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedMajorMech");
        gv_stingerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedStingerDef");
        gv_stingerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedStingerGray");
        gv_stingerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedStingerSwarm");
        gv_stingerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedStingerMech");
        gv_acidSprayerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedAcidSprayerDef");
        gv_acidSprayerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedAcidSprayerGray");
        gv_acidSprayerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedAcidSprayerSwarm");
        gv_acidSprayerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedAcidSprayerMech");
        gv_tunnelTremblerSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedTunnelTremblerDef");
        gv_tunnelTremblerSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedTunnelTremblerGray");
        gv_tunnelTremblerSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedTunnelTremblerSwarm");
        gv_tunnelTremblerSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedTunnelTremblerMech");
        gv_khepriSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedKhepriDef");
        gv_khepriSwapModelIsUnlockedGray[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedKhepriGray");
        gv_khepriSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedKhepriSwarm");
        gv_khepriSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedKhepriMech");
        gv_workerNestSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerNestDef");
        gv_workerNestSwapModelIsUnlockedWebMod[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerNestWebMod");
        gv_workerNestSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedWorkerNestMech");
        gv_soldierNestSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierNestDef");
        gv_soldierNestSwapModelIsUnlockedWebMod[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierNestWebMod");
        gv_soldierNestSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSoldierNestMech");
        gv_bulkBuilderSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedBulkBuilderDef");
        gv_bulkBuilderSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedBulkBuilderMech");
        gv_upgradeChamberSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedUpgradeChamberDef");
        gv_upgradeChamberSwapModelIsUnlockedSwarm[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedUpgradeChamberSwarm");
        gv_upgradeChamberSwapModelIsUnlockedMech[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedUpgradeChamberMech");
        gv_spikesNestSwapModelIsUnlockedDefault[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSpikesNestDef");
        gv_spikesNestSwapModelIsUnlockedFAT[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSpikesNestDomination");
        gv_spikesNestSwapModelIsUnlockedFATWebMod[lp_player] = BankValueGetAsFlag(gv_originalAntColoBank, gv_playerStats, "UnlockedSpikesNestSwarm");
    }
    else {
        BankSectionRemove(gv_originalAntColoBank, gv_playerStats);
    }
}

void gf_Savebankforplayer (int lp_player) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_enemyQueenCount;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = lp_player;

    // Implementation
    if ((gv_playerExitProcessed[lv_currentPlayer] == true)) {
        return ;
    }

    gv_playerBankTransferedToAntEvo[lv_currentPlayer] = "DidTrans";
    gv_playerExitProcessed[lv_currentPlayer] = true;
    BankLoad("AntEvolution", lv_currentPlayer);
    gv_antEvolutionBank = BankLastCreated();
    BankSectionCreate(gv_antEvolutionBank, gv_playerStats);
    BankOptionSet(gv_antEvolutionBank, c_bankOptionSignature, true);
    if ((gf_MatchIsRanked() == true)) {
        BankSectionRemove(gv_antEvolutionBank, gf_TeamID(GameAttributePlayersForTeam(1)));
        BankSectionRemove(gv_antEvolutionBank, gf_TeamID(GameAttributePlayersForTeam(2)));
    }

    lv_enemyQueenCount = gf_EnemyQueenCount(lv_currentPlayer);
    if ((gv_statRecordingEnabled == true)) {
        if ((gv_currentMatch_UnitsProduced[lv_currentPlayer] > gv_record_UnitsProduced[lv_currentPlayer])) {
            gv_record_UnitsProduced[lv_currentPlayer] = gv_currentMatch_UnitsProduced[lv_currentPlayer];
        }

        if ((gv_currentMatch_UnitsKilled[lv_currentPlayer] > gv_record_UnitsKilled[lv_currentPlayer])) {
            gv_record_UnitsKilled[lv_currentPlayer] = gv_currentMatch_UnitsKilled[lv_currentPlayer];
        }

        if ((gv_currentMatch_FoodSpent[lv_currentPlayer] > gv_record_FoodSpent[lv_currentPlayer])) {
            gv_record_FoodSpent[lv_currentPlayer] = gv_currentMatch_FoodSpent[lv_currentPlayer];
        }

        if ((gv_currentMatch_DirtDestroyed[lv_currentPlayer] > gv_record_DirtDestroyed[lv_currentPlayer])) {
            gv_record_DirtDestroyed[lv_currentPlayer] = gv_currentMatch_DirtDestroyed[lv_currentPlayer];
        }

        if ((gv_currentMatch_WallsBuilt[lv_currentPlayer] > gv_record_WallsBuilt[lv_currentPlayer])) {
            gv_record_WallsBuilt[lv_currentPlayer] = gv_currentMatch_WallsBuilt[lv_currentPlayer];
        }

        if ((GameGetMissionTime() > gv_record_LongestMatch[lv_currentPlayer])) {
            gv_record_LongestMatch[lv_currentPlayer] = CeilingI(GameGetMissionTime());
        }

        if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002")) {
            gv_openAlliances_DurationPlayed[lv_currentPlayer] += CeilingI(GameGetMissionTime());
            if ((lv_enemyQueenCount == 0)) {
                gv_openAlliances_Wins[lv_currentPlayer] += 1;
            }
            else {
                gv_openAlliances_Losses[lv_currentPlayer] += 1;
            }
        }
        else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0001")) {
            gv_freeForAll_DurationPlayed[lv_currentPlayer] += CeilingI(GameGetMissionTime());
            if ((lv_enemyQueenCount == 0)) {
                gv_freeForAll_Wins[lv_currentPlayer] += 1;
            }
            else {
                gv_freeForAll_Losses[lv_currentPlayer] += 1;
            }
        }
        else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0004")) {
            gv__2v2v2_DurationPlayed[lv_currentPlayer] += CeilingI(GameGetMissionTime());
            if ((lv_enemyQueenCount == 0)) {
                gv__2v2v2_Wins[lv_currentPlayer] += 1;
            }
            else {
                gv__2v2v2_Losses[lv_currentPlayer] += 1;
            }
        }
        else if ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0003")) {
            gv__3v3_DurationPlayed[lv_currentPlayer] += CeilingI(GameGetMissionTime());
            if ((lv_enemyQueenCount == 0)) {
                gv__3v3_Wins[lv_currentPlayer] += 1;
            }
            else {
                gv__3v3_Losses[lv_currentPlayer] += 1;
            }
        }
        else if ((gf_MatchIsRanked() == true)) {
            gv_ranked_DurationPlayed[lv_currentPlayer] += CeilingI(GameGetMissionTime());
            if ((lv_enemyQueenCount == 0)) {
                gv_ranked_Wins[lv_currentPlayer] += 1;
            }
            else {
                gv_ranked_Losses[lv_currentPlayer] += 1;
            }
        }
    }

    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_TotalGames_Beta_B", gv_amountOfGamesPlayed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_TotalWins_Beta_B", gv_amountOfGamesWon[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_1v1_HardAIWins", gv__1v1AIvsHardGamesWon[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_2v4_VeryHardAIWins", gv__2v4AIvsVeryHardGamesWon[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Black_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsBlackant[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Fire_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsFireAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Wood_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsWoodAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Leaf_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsLeafCutterAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Pharaoh_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsPharaohAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ghost_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsGhostAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Random_Record_TotalGames_Beta_B", gv_amountOfGamesPlayedAsRandomAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Black_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsBlackant[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Fire_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsFireAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Wood_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsWoodAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Leaf_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsLeafCutterAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Pharaoh_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsPharaohAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ghost_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsGhostAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Random_Record_TotalWins_Beta_B", gv_amountOfGamesWonAsRandomAnt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_DirtDestroyed", gv_record_DirtDestroyed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_FoodSpent", gv_record_FoodSpent[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_UnitsKilled", gv_record_UnitsKilled[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_UnitsProduced", gv_record_UnitsProduced[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_WallsBuilt", gv_record_WallsBuilt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Record_LongestMatch", gv_record_LongestMatch[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "OpenAlliances_DurationPlayed", gv_openAlliances_DurationPlayed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "OpenAlliances_Losses", gv_openAlliances_Losses[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "OpenAlliances_Wins", gv_openAlliances_Wins[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "FreeForAll_DurationPlayed", gv_freeForAll_DurationPlayed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "FreeForAll_Losses", gv_freeForAll_Losses[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "FreeForAll_Wins", gv_freeForAll_Wins[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "2v2v2_DurationPlayed", gv__2v2v2_DurationPlayed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "2v2v2_Losses", gv__2v2v2_Losses[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "2v2v2_Wins", gv__2v2v2_Wins[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "3v3_DurationPlayed", gv__3v3_DurationPlayed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "3v3_Losses", gv__3v3_Losses[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "3v3_Wins", gv__3v3_Wins[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ranked_DurationPlayed", gv_ranked_DurationPlayed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ranked_Losses", gv_ranked_Losses[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ranked_Wins", gv_ranked_Wins[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ranked_Version", gv_currentRankedVersion);
    if ((gv_playerRatingModified[lv_currentPlayer] > 0.0)) {
        BankValueSetFromFixed(gv_antEvolutionBank, gv_playerStats, "Rating", gv_playerRatingModified[lv_currentPlayer]);
    }
    else {
        BankValueSetFromFixed(gv_antEvolutionBank, gv_playerStats, "Rating", gv_playerRatingOriginal[lv_currentPlayer]);
    }
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "UpgradeChamberUpgradesDone", gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "BulkBuildersBuilt", gv_bulkBuildersBuiltbyplayer[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_AcidicStrikes", gv_ability_AcidicStrikes[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_Dig", gv_ability_Dig[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeBroodlingSpawner", gv_ability_UpgradeBroodlingSpawner[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeForagerNest", gv_ability_UpgradeForagerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeSubterraneanTrail", gv_ability_UpgradeSubterraneanTrail[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeSoldierNest", gv_ability_UpgradeSoldierNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeSoldierSpeed", gv_ability_UpgradeSoldierSpeed[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeUnitArmor", gv_ability_UpgradeUnitArmor[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_UpgradeUnitDamage", gv_ability_UpgradeUnitDamage[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_VenomSpray", gv_ability_VenomSpray[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Ability_BuildWall", gv_ability_BuildWall[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_BroodlingSpawner", gv_produced_BroodlingSpawner[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_Forager", gv_produced_Forager[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_ForagerNest", gv_produced_ForagerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_Major", gv_produced_Major[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_MajorNest", gv_produced_MajorNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_QueenFire", gv_produced_QueenFire[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_QueenBlack", gv_produced_QueenBlack[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_Soldier", gv_produced_Soldier[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_SoldierNest", gv_produced_SoldierNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_Stinger", gv_produced_Stinger[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_StingerNest", gv_produced_StingerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_AcidSprayer", gv_produced_AcidSprayer[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_AcidSprayerNest", gv_produced_AcidSprayerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_Wall", gv_produced_Wall[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_QueenWood", gv_produced_QueenWood[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Produced_Misaligned", gv_produced_Misaligned[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_BroodlingSpawner", gv_kills_BroodlingSpawner[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Dirt", gv_kills_Dirt[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Forager", gv_kills_Forager[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_ForagerNest", gv_kills_ForagerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Major", gv_kills_Major[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_MajorNest", gv_kills_MajorNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_QueenBlack", gv_kills_QueenBlack[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_QueenFire", gv_kills_QueenFire[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Quillgor", gv_kills_Quillgor[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Soldier", gv_kills_Soldier[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_SoldierNest", gv_kills_SoldierNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Stinger", gv_kills_Stinger[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_StingerNest", gv_kills_StingerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_AcidSprayer", gv_kills_AcidSprayer[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_AcidSprayerNest", gv_kills_AcidSprayerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_Wall", gv_kills_Wall[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_playerStats, "Kills_QueenWood", gv_kills_QueenWood[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "AcidSprayer", gv_ctrlGroup_AcidSprayer[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "AcidSprayerNest", gv_ctrlGroup_AcidSprayerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "BroodlingSpawner", gv_ctrlGroup_BroodlingSpawner[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "Forager", gv_ctrlGroup_Forager[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "ForagerNest", gv_ctrlGroup_ForagerNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "Major", gv_ctrlGroup_Major[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "MajorNest", gv_ctrlGroup_MajorNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "Queen", gv_ctrlGroup_Queen[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "Soldier", gv_ctrlGroup_Soldier[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "SoldierNest", gv_ctrlGroup_SoldierNest[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "Stinger", gv_ctrlGroup_Stinger[lv_currentPlayer]);
    BankValueSetFromInt(gv_antEvolutionBank, gv_controlGroupConfig, "StingerNest", gv_ctrlGroup_StingerNest[lv_currentPlayer]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "WorkerSkin_B", gv_workerSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "SoldierSkin_B", gv_soldierSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "QueenSkin_B", gv_queenSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "MajorSkin_B", gv_majorSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "StingerSkin_B", gv_stingerSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "AcidSprayerSkin_B", gv_acidSprayerSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "TunnelTremblerSkin_B", gv_tunnelTremblerSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "KhepriSkin_B", gv_khepriSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "WorkerNestSkin_B", gv_workerNestSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "SoldierNestSkin_B", gv_soldierNestSwapModelString[lv_currentPlayer]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "BulkBuilderSkin_B", gv_bulkBuilderSwapModelString[lv_currentPlayer]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "UpgradeChamberSkin_B", gv_upgradeChamberSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "SpikesNestSkin_B", gv_spikesNestSwapModelString[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "UIChoice_B", gv_playerUIChoice[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "CustomGUIChoice", gv_playerCustomGUIString[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "HasHiddenRightSideButtons", gv_settingsMenuHideRightSideButtonsHiddenForPlayer[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerDef", gv_workerSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerMac", gv_workerSwapModelIsUnlockedMacerator[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerRemas", gv_workerSwapModelIsUnlockedRemastered[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerHolo", gv_workerSwapModelIsUnlockedHologram[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerGray", gv_workerSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerSwarm", gv_workerSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerMech", gv_workerSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierDef", gv_soldierSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierGray", gv_soldierSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierSwarm", gv_soldierSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierMech", gv_soldierSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenDef_B", gv_queenSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenLong_B", gv_queenSwapModelIsUnlockedLongAntenas[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenThick_B", gv_queenSwapModelIsUnlockedThickHead[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenSpikey_B", gv_queenSwapModelIsUnlockedSpikeyHead[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenHolo_B", gv_queenSwapModelIsUnlockedHologram[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenGray_B", gv_queenSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenSwarm_B", gv_queenSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedQueenMech_B", gv_queenSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorDef", gv_majorSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorGray", gv_majorSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorSwarm", gv_majorSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedMajorMech", gv_majorSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerDef", gv_stingerSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerGray", gv_stingerSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerSwarm", gv_stingerSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedStingerMech", gv_stingerSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerDef", gv_acidSprayerSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerGray", gv_acidSprayerSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerSwarm", gv_acidSprayerSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedAcidSprayerMech", gv_acidSprayerSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerDef", gv_tunnelTremblerSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerGray", gv_tunnelTremblerSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerSwarm", gv_tunnelTremblerSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedTunnelTremblerMech", gv_tunnelTremblerSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriDef", gv_khepriSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriGray", gv_khepriSwapModelIsUnlockedGray[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriSwarm", gv_khepriSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedKhepriMech", gv_khepriSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerNestDef", gv_workerNestSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerNestWebMod", gv_workerNestSwapModelIsUnlockedWebMod[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedWorkerNestMech", gv_workerNestSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierNestDef", gv_soldierNestSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierNestWebMod", gv_soldierNestSwapModelIsUnlockedWebMod[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSoldierNestMech", gv_soldierNestSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedBulkBuilderDef", gv_bulkBuilderSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedBulkBuilderMech", gv_bulkBuilderSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedUpgradeChamberDef", gv_upgradeChamberSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedUpgradeChamberSwarm", gv_upgradeChamberSwapModelIsUnlockedSwarm[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedUpgradeChamberMech", gv_upgradeChamberSwapModelIsUnlockedMech[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSpikesNestDef", gv_spikesNestSwapModelIsUnlockedDefault[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSpikesNestDomination", gv_spikesNestSwapModelIsUnlockedFAT[lp_player]);
    BankValueSetFromFlag(gv_antEvolutionBank, gv_playerStats, "UnlockedSpikesNestSwarm", gv_spikesNestSwapModelIsUnlockedFATWebMod[lp_player]);
    BankValueSetFromString(gv_antEvolutionBank, gv_playerStats, "AntEvoTrans", gv_playerBankTransferedToAntEvo[lp_player]);
    BankSave(gv_antEvolutionBank);
}

void gf_Checkformisaligned2x2 (point lp_unitPosition, int lp_currentPlayer) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = PointGetX(lp_unitPosition);
    lv_y = PointGetY(lp_unitPosition);
    if (((ModF(lv_x, 2.0) == 1.0) || (ModF(lv_y, 2.0) == 1.0))) {
        gv_produced_Misaligned[lp_currentPlayer] += 1;
    }

}

void gf_Checkformisaligned3x3 (point lp_unitPosition, int lp_currentPlayer) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_x = PointGetX(lp_unitPosition);
    lv_y = PointGetY(lp_unitPosition);
    if (((ModF(lv_x, 2.0) == 0.0) || (ModF(lv_y, 2.0) == 0.0))) {
        gv_produced_Misaligned[lp_currentPlayer] += 1;
    }

}

int gf_PulldownIndexToCtrlGroup (int lp_pulldownIndex) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pulldownIndex >= 1) && (lp_pulldownIndex <= 9)) {
        return lp_pulldownIndex;
    }
    else if ((lp_pulldownIndex == 10)) {
        return 0;
    }
    return -1;
}

int gf_CtrlGroupToPulldownIndex (int lp_ctrlGroup) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_ctrlGroup >= 1) && (lp_ctrlGroup <= 9)) {
        return lp_ctrlGroup;
    }
    else if ((lp_ctrlGroup == 0)) {
        return 10;
    }
    return 11;
}

void gf_AddUnitToCustomCtrlGroup (int lp_setItToplayerwillbeOwnerofUnitParamifleftunchanged, unit lp_unit, int lp_ctrlGroup) {
    // Variable Declarations
    int lv_setItTothecontrolgroupofplayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_setItTothecontrolgroupofplayer = UnitGetOwner(lp_unit);

    // Implementation
    if ((lp_setItToplayerwillbeOwnerofUnitParamifleftunchanged != 0)) {
        lv_setItTothecontrolgroupofplayer = lp_setItToplayerwillbeOwnerofUnitParamifleftunchanged;
    }

    if ((lp_ctrlGroup >= 0) && (lp_ctrlGroup <= 9)) {
        UnitControlGroupAddUnit(lv_setItTothecontrolgroupofplayer, lp_ctrlGroup, lp_unit);
    }

}

void gf_Addpatchnotepage (text lp_patchNoteText) {
    // Automatic Variable Declarations
    // Implementation
    gv_patchNotes_PageCount += 1;
    gv_patchNotes_PageText[gv_patchNotes_PageCount] = lp_patchNoteText;
}

void gf_Updatepatchnotelabels (int lp_currentPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_patchNotes_Label, gv_patchNotes_PageText[gv_patchNotes_CurrentPage[lp_currentPlayer]], PlayerGroupSingle(lp_currentPlayer));
    libNtve_gf_SetDialogItemText(gv_patchNotes_PageLabel, (StringExternal("Param/Value/502A0AF2") + IntToText(gv_patchNotes_CurrentPage[lp_currentPlayer]) + StringExternal("Param/Value/9FA94085") + IntToText(gv_patchNotes_PageCount) + StringExternal("Param/Value/C8D92EA0")), PlayerGroupSingle(lp_currentPlayer));
    if ((gv_patchNotes_CurrentPage[lp_currentPlayer] == 1)) {
        DialogControlSetEnabled(gv_patchNotes_PreviousButton, PlayerGroupSingle(lp_currentPlayer), false);
    }
    else {
        DialogControlSetEnabled(gv_patchNotes_PreviousButton, PlayerGroupSingle(lp_currentPlayer), true);
    }
    if ((gv_patchNotes_CurrentPage[lp_currentPlayer] == gv_patchNotes_PageCount)) {
        DialogControlSetEnabled(gv_patchNotes_NextButton, PlayerGroupSingle(lp_currentPlayer), false);
    }
    else {
        DialogControlSetEnabled(gv_patchNotes_NextButton, PlayerGroupSingle(lp_currentPlayer), true);
    }
}

text gf_GetCompDifficultyName (int lp_player) {
    // Variable Declarations
    text lv_name;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerDifficulty(lp_player) == 1)) {
        lv_name = StringExternal("Param/Value/7796B486");
    }
    else if ((PlayerDifficulty(lp_player) == 2)) {
        lv_name = StringExternal("Param/Value/18B117EB");
    }
    else if ((PlayerDifficulty(lp_player) == 3)) {
        lv_name = StringExternal("Param/Value/83837070");
    }
    else if ((PlayerDifficulty(lp_player) == 4)) {
        lv_name = StringExternal("Param/Value/5C4AC792");
    }
    else if ((PlayerDifficulty(lp_player) == 5)) {
        lv_name = StringExternal("Param/Value/71C786B6");
    }
    else if ((PlayerDifficulty(lp_player) == 6)) {
        lv_name = StringExternal("Param/Value/916CA748");
    }
    else if ((PlayerDifficulty(lp_player) == 7)) {
        lv_name = StringExternal("Param/Value/68C88ACA");
    }
    else if (((PlayerDifficulty(lp_player) == 8) || (PlayerDifficulty(lp_player) == 9) || (PlayerDifficulty(lp_player) == 10))) {
        lv_name = StringExternal("Param/Value/DE504662");
    }
    else if (true) {
        lv_name = StringExternal("Param/Value/8110C93D");
    }
    return lv_name;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoABCAAB1B_g;
    int autoABCAAB1B_var;
    playergroup auto56809F27_g;
    int auto56809F27_var;
    playergroup autoBD012A64_g;
    int autoBD012A64_var;
    playergroup autoAA4C2348_g;
    int autoAA4C2348_var;
    playergroup autoB6B7742B_g;
    int autoB6B7742B_var;
    playergroup auto2F4447DE_g;
    int auto2F4447DE_var;
    unitgroup auto208518E3_g;
    int auto208518E3_u;
    unit auto208518E3_var;
    playergroup autoE457330A_g;
    int autoE457330A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]3") == "0003")) {
        TriggerExecute(gt_RunSnowdownthescreenofallplayers, true, false);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryAmbience, true, true);
        SoundPlayForPlayer(SoundLink("GameMusicChristmasIntro", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    autoABCAAB1B_g = PlayerGroupAll();
    autoABCAAB1B_var = -1;
    while (true) {
        autoABCAAB1B_var = PlayerGroupNextPlayer(autoABCAAB1B_g, autoABCAAB1B_var);
        if (autoABCAAB1B_var < 0) { break; }
        if ((PlayerType(autoABCAAB1B_var) == c_playerTypeComputer)) {
            gv_gamehasAIinit = true;
            gv_thisPlayerIsAnAI[autoABCAAB1B_var] = true;
            gv_workerSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_soldierSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_majorSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_stingerSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_acidSprayerSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_queenSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_khepriSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_tunnelTremblerSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_workerNestSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_soldierNestSwapModelString[autoABCAAB1B_var] = "Mech";
            gv_spikesNestSwapModelString[autoABCAAB1B_var] = "FAT";
        }

    }
    gf_CreateIngameLoadingBar();
    Wait(0.2, c_timeGame);
    gv_initializationStage = StringExternal("Param/Value/9FA6ADFF");
    gf_DisplayLoadingMessage(StringExternal("Param/Value/8500AEBD"));
    gf_Overridedefaults();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/0B52B576"));
    auto56809F27_g = PlayerGroupActive();
    auto56809F27_var = -1;
    while (true) {
        auto56809F27_var = PlayerGroupNextPlayer(auto56809F27_g, auto56809F27_var);
        if (auto56809F27_var < 0) { break; }
        gf_LoadbankFromAntEvoForPlayer(auto56809F27_var);
        if ((gv_playerBankTransferedToAntEvo[auto56809F27_var] != "DidTrans")) {
            gf_DONOTEDITLoadbankFromAntColoForPlayerDONOTEDIT(auto56809F27_var);
        }

    }
    gf_DisplayLoadingMessage(StringExternal("Param/Value/B79A19E9"));
    TriggerExecute(gt_UnlockBlockAllyingButton, true, false);
    gf_ShowOnScreenImages();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/8F9C43B1"));
    gf_Calculateaverageteamratings();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/F0AB95F6"));
    autoBD012A64_g = PlayerGroupActive();
    autoBD012A64_var = -1;
    while (true) {
        autoBD012A64_var = PlayerGroupNextPlayer(autoBD012A64_g, autoBD012A64_var);
        if (autoBD012A64_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoBD012A64_var, 10.0, 220.0, gv_absoluteCenterpoint, 0.0);
        CameraPan(autoBD012A64_var, RegionGetCenter(RegionEntireMap()), 0.0, -1, 10.0, false);
        CameraLockInput(autoBD012A64_var, true);
    }
    gf_DisplayLoadingMessage(StringExternal("Param/Value/643C5C93"));
    TriggerExecute(gt_MakePlayersVoteForStartingFoodAmount, true, true);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/E6EB1542"));
    TriggerExecute(gt_MakePlayersVoteForGameMode, true, true);
    gf_MakeChangesbasedongamemode();
    Wait(0.2, c_timeGame);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/731E8F3F"));
    gf_InitiateMapGenVote();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/21E13C3F"));
    TriggerExecute(gt_MakePlayersVoteForMapPool, true, true);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/16CCEB36"));
    TriggerExecute(gt_MakePlayersVoteForRandomQueen, true, true);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/4AB750B3"));
    gf_PlayerPicksMapGen();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/A1672861"));
    gf_PlayerPicksMapGen3();
    gf_PlayerPicksMapGen2();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/99438AEE"));
    gf_PickPlayerRegen2();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/15D715C8"));
    gf_SetTheOverallTintBasedOnTheGroundTexture();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/60D54CB5"));
    Wait(0.2, c_timeGame);
    gf_SetMapPriorities();
    gf_GenerateMapGen();
    gf_SetOriginalDirtMapGrassMapRegions();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/36C97E83"));
    gf_DetermineModelOptionsforMeatFoodbasedonmapgen();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/E9A99CE2"));
    gf_SetVisualTheme();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/B6DE9642"));
    gf_Createstartingcritters();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/BFE177A8"));
    gf_CreatestartingPlants();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/C9E5F810"));
    gf_ScatterDirt();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/BA66C3DC"));
    gf_FixMapGenVision();
    Wait(1.0, c_timeGame);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/6FACD89E"));
    gf_Announcegamevariant();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/B8EDE0F5"));
    gf_CTFCreateGiveAllyFlagDialog();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/981A2966"));
    Wait(0.2, c_timeGame);
    gf_SetAllPlayersinthematchintoowndedicatedteams();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/0A3AB513"));
    gf_GenerateMapGen2();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/9FF8E2DB"));
    gf_EndGameVisionCreateEndgamevision();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/0A6CE2D6"));
    gf_SetTutorialPlayers();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/E55E216D"));
    gf_MakesureplayersareenemiesonOpenalliance();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/9CFD21CE"));
    gf_DeleteInactivePlayers();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/E44C4BEE"));
    gf_CreatePlayerVisionRequestDialogs();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/2AAADB2F"));
    gf_CreateUGUIBar();
    Wait(1.0, c_timeGame);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/5BE213F3"));
    gf_CreateWinchanceDialog();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/F230C2B2"));
    gf_CreateStartingUIBarImage();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/C63ECAE2"));
    gf_CreateDiscordLinkDialog();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/6629BCD9"));
    gf_CreateSkinsDialog();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/12885CAF"));
    Wait(1.0, c_timeGame);
    autoAA4C2348_g = PlayerGroupActive();
    autoAA4C2348_var = -1;
    while (true) {
        autoAA4C2348_var = PlayerGroupNextPlayer(autoAA4C2348_g, autoAA4C2348_var);
        if (autoAA4C2348_var < 0) { break; }
        libNtve_gf_SwooshCamera(autoAA4C2348_var, 220.0, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointWithOffset(UnitGetPosition(gv_queenOfPlayer[autoAA4C2348_var]), 0.0, -2.0), 1.5);
        CameraLockInput(autoAA4C2348_var, false);
    }
    gf_DisplayLoadingMessage(StringExternal("Param/Value/148A411C"));
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]3") == "0003")) {
        autoB6B7742B_g = PlayerGroupActive();
        autoB6B7742B_var = -1;
        while (true) {
            autoB6B7742B_var = PlayerGroupNextPlayer(autoB6B7742B_g, autoB6B7742B_var);
            if (autoB6B7742B_var < 0) { break; }
            if ((GameAttributePlayerValue("[bnet:local/0.0/273101]4", autoB6B7742B_var) == "0002")) {
                SoundtrackPause(PlayerGroupSingle(autoB6B7742B_var), c_soundtrackCategoryMusic, false, true);
                SoundtrackPause(PlayerGroupSingle(autoB6B7742B_var), c_soundtrackCategoryAmbience, false, true);
                SoundtrackPlay(PlayerGroupSingle(autoB6B7742B_var), c_soundtrackCategoryMusic, "GameMusicChristmasMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
            }

        }
    }

    gv_initializationDone = true;
    gv_amountofplayersthegamestartedwith = PlayerGroupCount(PlayerGroupActive());
    Wait(2.0, c_timeGame);
    gf_DisplayLoadingMessage(StringExternal("Param/Value/BF1C65DA"));
    auto2F4447DE_g = PlayerGroupActive();
    auto2F4447DE_var = -1;
    while (true) {
        auto2F4447DE_var = PlayerGroupNextPlayer(auto2F4447DE_g, auto2F4447DE_var);
        if (auto2F4447DE_var < 0) { break; }
        auto208518E3_g = UnitGroup("NewQueen", auto2F4447DE_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        auto208518E3_u = UnitGroupCount(auto208518E3_g, c_unitCountAll);
        for (;; auto208518E3_u -= 1) {
            auto208518E3_var = UnitGroupUnitFromEnd(auto208518E3_g, auto208518E3_u);
            if (auto208518E3_var == null) { break; }
            UnitSetPropertyFixed(auto208518E3_var, c_unitPropBaseMovementSpeed, 5.0);
            libNtve_gf_MakeUnitUncommandable(auto208518E3_var, false);
        }
    }
    gf_CheckAllAIsdifficultyandthegamevar();
    gf_DisplayLoadingMessage(StringExternal("Param/Value/62C1054D"));
    gf_CreateSettingsDialog();
    autoE457330A_g = PlayerGroupActive();
    autoE457330A_var = -1;
    while (true) {
        autoE457330A_var = PlayerGroupNextPlayer(autoE457330A_g, autoE457330A_var);
        if (autoE457330A_var < 0) { break; }
        gf_MoveGUIItemstolocationsbasedontheplayerschoice(autoE457330A_var);
    }
    gf_DisplayLoadingMessage(StringExternal("Param/Value/2B1B94DE"));
    gf_StartAIplayers();
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/53F9845C"));
    SoundPlayForPlayer(SoundLink("ChallengescombinedQueen00136", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogSetVisible(gv_ingameLoadingBarDialog, PlayerGroupAll(), false);
    Wait(3.0, c_timeGame);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerExecute(gt_SpeedCycle, true, false);
    TriggerExecute(gt_CTFCreateAFlagoneachqueen, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EndGameVision A Queen Died. So Check if player should lose.
//--------------------------------------------------------------------------------------------------
bool gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "NewQueen") || (UnitGetType(EventUnit()) == "RavagerCocoon") || (UnitGetType(EventUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnit()) == "QueenFireAnt") || (UnitGetType(EventUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnit()) == "QueenGhostAnt")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EndGameVisionCheckifplayerorhisallieshavequeens(UnitGetOwner(EventUnit()));
    gf_EndGameVisionUpdateWinningCase();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose_Init () {
    gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose = TriggerCreate("gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose_Func");
    TriggerAddEventUnitDied(gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Send Alert if Initialization Failed
//--------------------------------------------------------------------------------------------------
bool gt_SendAlertifInitializationFailed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_erroredStage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_erroredStage = gv_initializationStage;

    // Conditions
    if (testConds) {
        if (!((gv_initializationDone != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, ((StringExternal("Param/Value/43122BBC") + lv_erroredStage) + StringExternal("Param/Value/D834E386")));
        Wait(150.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SendAlertifInitializationFailed_Init () {
    gt_SendAlertifInitializationFailed = TriggerCreate("gt_SendAlertifInitializationFailed_Func");
    TriggerAddEventTimeElapsed(gt_SendAlertifInitializationFailed, 100.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: When food is created. tint it
//--------------------------------------------------------------------------------------------------
bool gt_Whenfoodiscreatedtintit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "MineralField") || (UnitGetType(EventUnitCreatedUnit()) == "PlantFood") || (UnitGetType(EventUnitCreatedUnit()) == "SpaceCowSmall") || (UnitGetType(EventUnitCreatedUnit()) == "Plantation")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnitCreatedUnit()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 6.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Whenfoodiscreatedtintit_Init () {
    gt_Whenfoodiscreatedtintit = TriggerCreate("gt_Whenfoodiscreatedtintit_Func");
    TriggerAddEventUnitCreated(gt_Whenfoodiscreatedtintit, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gates Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_GatesTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto6AE6D2E8_n;
    int auto6AE6D2E8_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6AE6D2E8_n = RandomInt(1, 2);
    for (auto6AE6D2E8_i = 1; auto6AE6D2E8_i <= auto6AE6D2E8_n; auto6AE6D2E8_i += 1) {
        gf_IfTheGateisOpencloseitifthegateisclosedopenit(RandomInt(1, 3));
    }
    gf_GatesTimerRepeater();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GatesTimerExpires_Init () {
    gt_GatesTimerExpires = TriggerCreate("gt_GatesTimerExpires_Func");
    TriggerAddEventTimer(gt_GatesTimerExpires, gv_gatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PillersGen Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_PillersGenTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gateNumber;
    int lv_gateCloseingCheck;
    int lv_open1gateor2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_gateNumber = 1;

    // Conditions
    if (testConds) {
        if (!((gv_pillersGenTimer == EventTimer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_lastOnewasHorizontal == false)) {
        gf_RaiseAllPillers(true);
        gf_LowerAllPillers(false);
        gv_lastOnewasHorizontal = true;
    }
    else {
        gf_RaiseAllPillers(false);
        gf_LowerAllPillers(true);
        gv_lastOnewasHorizontal = false;
    }
    TimerWindowDestroy(gv_pillersGenTimerWindow);
    Wait(2.0, c_timeGame);
    gf_PillersCloseAndOpen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PillersGenTimerExpires_Init () {
    gt_PillersGenTimerExpires = TriggerCreate("gt_PillersGenTimerExpires_Func");
    TriggerAddEventTimer(gt_PillersGenTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Generate Clock
//--------------------------------------------------------------------------------------------------
bool gt_GenerateClock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_originalAngle;
    int lv_angle;

    // Automatic Variable Declarations
    const int auto30D41A7C_n = 120;
    int auto30D41A7C_i;

    // Variable Initialization
    lv_originalAngle = RandomInt(0, 360);
    lv_angle = lv_originalAngle;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        for (auto30D41A7C_i = 1; auto30D41A7C_i <= auto30D41A7C_n; auto30D41A7C_i += 1) {
            gf_GenerateClockHandLine(lv_angle);
            lv_angle = (lv_angle - 3);
            Wait(2.0, c_timeGame);
        }
    }
    lv_angle = lv_originalAngle;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GenerateClock_Init () {
    gt_GenerateClock = TriggerCreate("gt_GenerateClock_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner Of OctaPillar Controller
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerOfOctaPillarController_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PillarController") && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (!((UnitGroupCount(UnitGroup("InfestedAbomination", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_deselectedPillarController[EventPlayer()] = false;
    UnitSetOwner(EventUnit(), EventPlayer(), false);
    if ((RegionContainsPoint(RegionCircle(Point(10.0, 10.0), 5.0), UnitGetPosition(EventUnit())) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledSW", 1);
    }
    else if ((RegionContainsPoint(RegionCircle(Point(10.0, 142.0), 5.0), UnitGetPosition(EventUnit())) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledNW", 1);
    }
    else if ((RegionContainsPoint(RegionCircle(Point(142.0, 142.0), 5.0), UnitGetPosition(EventUnit())) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledNE", 1);
    }
    else if ((RegionContainsPoint(RegionCircle(Point(142.0, 10.0), 5.0), UnitGetPosition(EventUnit())) == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledSE", 1);
    }
    Wait(24.0, c_timeGame);
    if ((UnitIsSelected(EventUnit(), EventPlayer()) == true)) {
        if ((gv_deselectedPillarController[EventPlayer()] == false)) {
            UnitSetOwner(EventUnit(), 0, false);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledSW", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledNW", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledNE", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledSE", 0);
            gv_deselectedPillarController[EventPlayer()] = true;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerOfOctaPillarController_Init () {
    gt_ChangeOwnerOfOctaPillarController = TriggerCreate("gt_ChangeOwnerOfOctaPillarController_Func");
    TriggerEnable(gt_ChangeOwnerOfOctaPillarController, false);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarController, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 1)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarController, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 2)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarController, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 3)), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarController, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 4)), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Owner Of OctaPillar Controller Back
//--------------------------------------------------------------------------------------------------
bool gt_ChangeOwnerOfOctaPillarControllerBack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "PillarController") && (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, (1 << (c_targetFilterHasEnergy - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1) && (!((UnitGroupCount(UnitGroup("InfestedAbomination", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 1)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), 0, false);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledSW", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledNW", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledNE", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "OctaPillerControllerControlledSE", 0);
    gv_deselectedPillarController[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChangeOwnerOfOctaPillarControllerBack_Init () {
    gt_ChangeOwnerOfOctaPillarControllerBack = TriggerCreate("gt_ChangeOwnerOfOctaPillarControllerBack_Func");
    TriggerEnable(gt_ChangeOwnerOfOctaPillarControllerBack, false);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarControllerBack, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 1)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarControllerBack, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 2)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarControllerBack, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 3)), c_playerAny, false);
    TriggerAddEventUnitSelected(gt_ChangeOwnerOfOctaPillarControllerBack, UnitRefFromUnit(UnitGroupUnit(gv_octaPillarControllersUnitGroup, 4)), c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lower Or Rise Pillers
//--------------------------------------------------------------------------------------------------
bool gt_LowerOrRisePillers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pillar;
    int lv_pillarMax;
    int lv_randomNumber;
    point[15] lv_pillarPoint;
    unitgroup lv_unitGroupTomove;

    // Automatic Variable Declarations
    playergroup auto115DA113_g;
    int auto115DA113_var;
    unitgroup auto83217193_g;
    int auto83217193_u;
    unit auto83217193_var;
    unitgroup autoA0436AC2_g;
    int autoA0436AC2_u;
    unit autoA0436AC2_var;
    unitgroup auto37DDA816_g;
    int auto37DDA816_u;
    unit auto37DDA816_var;
    int auto43BF568C_n;
    int auto43BF568C_i;
    unitgroup auto778B4287_g;
    int auto778B4287_u;
    unit auto778B4287_var;
    unitgroup autoC47100AE_g;
    int autoC47100AE_u;
    unit autoC47100AE_var;
    playergroup autoD7490F9B_g;
    int autoD7490F9B_var;
    unitgroup auto7D1AEFB9_g;
    int auto7D1AEFB9_u;
    unit auto7D1AEFB9_var;
    unitgroup autoDFDEE9A4_g;
    int autoDFDEE9A4_u;
    unit autoDFDEE9A4_var;
    unitgroup auto9324D1BD_g;
    int auto9324D1BD_u;
    unit auto9324D1BD_var;
    int autoD55AC3A3_n;
    int autoD55AC3A3_i;
    unitgroup auto9B744CC8_g;
    int auto9B744CC8_u;
    unit auto9B744CC8_var;
    unitgroup autoA987A1D8_g;
    int autoA987A1D8_u;
    unit autoA987A1D8_var;
    playergroup autoC35163C0_g;
    int autoC35163C0_var;
    unitgroup auto116DBA2D_g;
    int auto116DBA2D_u;
    unit auto116DBA2D_var;
    unitgroup auto9E2A1E7F_g;
    int auto9E2A1E7F_u;
    unit auto9E2A1E7F_var;
    unitgroup auto166AFB17_g;
    int auto166AFB17_u;
    unit auto166AFB17_var;
    int auto0770C54C_n;
    int auto0770C54C_i;
    unitgroup auto8DB8FB6C_g;
    int auto8DB8FB6C_u;
    unit auto8DB8FB6C_var;
    unitgroup auto71FC4DC8_g;
    int auto71FC4DC8_u;
    unit auto71FC4DC8_var;
    playergroup autoB49BC939_g;
    int autoB49BC939_var;
    unitgroup autoA30D2DCA_g;
    int autoA30D2DCA_u;
    unit autoA30D2DCA_var;
    unitgroup autoE458C151_g;
    int autoE458C151_u;
    unit autoE458C151_var;
    unitgroup auto10FA5611_g;
    int auto10FA5611_u;
    unit auto10FA5611_var;
    int auto4B46BB80_n;
    int auto4B46BB80_i;
    unitgroup auto89991B76_g;
    int auto89991B76_u;
    unit auto89991B76_var;
    unitgroup autoEC522B3B_g;
    int autoEC522B3B_u;
    unit autoEC522B3B_var;
    playergroup auto522414DE_g;
    int auto522414DE_var;
    unitgroup autoB19A447A_g;
    int autoB19A447A_u;
    unit autoB19A447A_var;
    unitgroup auto7CAADA27_g;
    int auto7CAADA27_u;
    unit auto7CAADA27_var;
    unitgroup auto24E9BD76_g;
    int auto24E9BD76_u;
    unit auto24E9BD76_var;
    int autoA194B117_n;
    int autoA194B117_i;
    playergroup auto8A8D1604_g;
    int auto8A8D1604_var;
    unitgroup auto0E6D8302_g;
    int auto0E6D8302_u;
    unit auto0E6D8302_var;
    unitgroup auto97B545EA_g;
    int auto97B545EA_u;
    unit auto97B545EA_var;
    unitgroup autoEA6AD9D8_g;
    int autoEA6AD9D8_u;
    unit autoEA6AD9D8_var;
    int auto3AABB726_n;
    int auto3AABB726_i;
    playergroup autoF3789093_g;
    int autoF3789093_var;
    unitgroup autoA806E42F_g;
    int autoA806E42F_u;
    unit autoA806E42F_var;
    unitgroup autoF86A59AF_g;
    int autoF86A59AF_u;
    unit autoF86A59AF_var;
    unitgroup auto2C445E33_g;
    int auto2C445E33_u;
    unit auto2C445E33_var;
    int auto699B575A_n;
    int auto699B575A_i;
    playergroup auto1513AF60_g;
    int auto1513AF60_var;
    unitgroup auto622E56E1_g;
    int auto622E56E1_u;
    unit auto622E56E1_var;
    unitgroup autoA279D22D_g;
    int autoA279D22D_u;
    unit autoA279D22D_var;
    unitgroup auto2BC9E5E7_g;
    int auto2BC9E5E7_u;
    unit auto2BC9E5E7_var;
    int autoA6B95B00_n;
    int autoA6B95B00_i;

    // Variable Initialization
    lv_unitGroupTomove = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("RiseEastPillers", 0))) {
        auto115DA113_g = PlayerGroupActive();
        auto115DA113_var = -1;
        while (true) {
            auto115DA113_var = PlayerGroupNextPlayer(auto115DA113_g, auto115DA113_var);
            if (auto115DA113_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto115DA113_var, "OctaPillarsEastUp", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(auto115DA113_var, "OctaPillarsEastDown", 0);
        }
        auto83217193_g = gv_octaPillersEast;
        auto83217193_u = UnitGroupCount(auto83217193_g, c_unitCountAll);
        for (;; auto83217193_u -= 1) {
            auto83217193_var = UnitGroupUnitFromEnd(auto83217193_g, auto83217193_u);
            if (auto83217193_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(auto83217193_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(auto83217193_var), libNtve_gf_SetScale(1.0, 1.0, 0.8, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        autoA0436AC2_g = gv_octaPillersEast;
        autoA0436AC2_u = UnitGroupCount(autoA0436AC2_g, c_unitCountAll);
        for (;; autoA0436AC2_u -= 1) {
            autoA0436AC2_var = UnitGroupUnitFromEnd(autoA0436AC2_g, autoA0436AC2_u);
            if (autoA0436AC2_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoA0436AC2_var), libNtve_gf_SetScale(1.0, 1.0, 1.0, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto37DDA816_g = gv_octaPillersEast;
        auto37DDA816_u = UnitGroupCount(auto37DDA816_g, c_unitCountAll);
        for (;; auto37DDA816_u -= 1) {
            auto37DDA816_var = UnitGroupUnitFromEnd(auto37DDA816_g, auto37DDA816_u);
            if (auto37DDA816_var == null) { break; }
            UnitRemove(auto37DDA816_var);
        }
        Wait(0.01, c_timeGame);
        auto43BF568C_n = lv_pillarMax;
        for (auto43BF568C_i = 1; auto43BF568C_i <= auto43BF568C_n; auto43BF568C_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerUp", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            UnitGroupAdd(gv_octaPillersEast, UnitLastCreated());
            lv_pillar = (lv_pillar + 1);
            auto778B4287_g = UnitGroup(null, c_playerAny, RegionCircle(lv_pillarPoint[lv_pillar], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto778B4287_u = UnitGroupCount(auto778B4287_g, c_unitCountAll);
            for (;; auto778B4287_u -= 1) {
                auto778B4287_var = UnitGroupUnitFromEnd(auto778B4287_g, auto778B4287_u);
                if (auto778B4287_var == null) { break; }
                UnitGroupAdd(lv_unitGroupTomove, auto778B4287_var);
            }
        }
        autoC47100AE_g = lv_unitGroupTomove;
        autoC47100AE_u = UnitGroupCount(autoC47100AE_g, c_unitCountAll);
        for (;; autoC47100AE_u -= 1) {
            autoC47100AE_var = UnitGroupUnitFromEnd(autoC47100AE_g, autoC47100AE_u);
            if (autoC47100AE_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(autoC47100AE_var, true);
            Wait(1.0, c_timeGame);
            lv_randomNumber = RandomInt(0, 1);
            if ((lv_randomNumber == 1)) {
                UnitIssueOrder(autoC47100AE_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoC47100AE_var), 5.0, -90.0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoC47100AE_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoC47100AE_var), 5.0, 90)), c_orderQueueReplace);
            }
            libNtve_gf_MakeUnitUncommandable(autoC47100AE_var, false);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("RiseNorthPillers", 0))) {
        autoD7490F9B_g = PlayerGroupActive();
        autoD7490F9B_var = -1;
        while (true) {
            autoD7490F9B_var = PlayerGroupNextPlayer(autoD7490F9B_g, autoD7490F9B_var);
            if (autoD7490F9B_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoD7490F9B_var, "OctaPillarsNorthUp", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(autoD7490F9B_var, "OctaPillarsNorthDown", 0);
        }
        auto7D1AEFB9_g = gv_octaPillersNorth;
        auto7D1AEFB9_u = UnitGroupCount(auto7D1AEFB9_g, c_unitCountAll);
        for (;; auto7D1AEFB9_u -= 1) {
            auto7D1AEFB9_var = UnitGroupUnitFromEnd(auto7D1AEFB9_g, auto7D1AEFB9_u);
            if (auto7D1AEFB9_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(auto7D1AEFB9_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(auto7D1AEFB9_var), libNtve_gf_SetScale(1.0, 1.0, 0.8, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        autoDFDEE9A4_g = gv_octaPillersNorth;
        autoDFDEE9A4_u = UnitGroupCount(autoDFDEE9A4_g, c_unitCountAll);
        for (;; autoDFDEE9A4_u -= 1) {
            autoDFDEE9A4_var = UnitGroupUnitFromEnd(autoDFDEE9A4_g, autoDFDEE9A4_u);
            if (autoDFDEE9A4_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoDFDEE9A4_var), libNtve_gf_SetScale(1.0, 1.0, 1.0, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto9324D1BD_g = gv_octaPillersNorth;
        auto9324D1BD_u = UnitGroupCount(auto9324D1BD_g, c_unitCountAll);
        for (;; auto9324D1BD_u -= 1) {
            auto9324D1BD_var = UnitGroupUnitFromEnd(auto9324D1BD_g, auto9324D1BD_u);
            if (auto9324D1BD_var == null) { break; }
            UnitRemove(auto9324D1BD_var);
        }
        Wait(0.01, c_timeGame);
        autoD55AC3A3_n = lv_pillarMax;
        for (autoD55AC3A3_i = 1; autoD55AC3A3_i <= autoD55AC3A3_n; autoD55AC3A3_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerUp", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            UnitGroupAdd(gv_octaPillersNorth, UnitLastCreated());
            lv_pillar = (lv_pillar + 1);
            auto9B744CC8_g = UnitGroup(null, c_playerAny, RegionCircle(lv_pillarPoint[lv_pillar], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto9B744CC8_u = UnitGroupCount(auto9B744CC8_g, c_unitCountAll);
            for (;; auto9B744CC8_u -= 1) {
                auto9B744CC8_var = UnitGroupUnitFromEnd(auto9B744CC8_g, auto9B744CC8_u);
                if (auto9B744CC8_var == null) { break; }
                UnitGroupAdd(lv_unitGroupTomove, auto9B744CC8_var);
            }
        }
        autoA987A1D8_g = lv_unitGroupTomove;
        autoA987A1D8_u = UnitGroupCount(autoA987A1D8_g, c_unitCountAll);
        for (;; autoA987A1D8_u -= 1) {
            autoA987A1D8_var = UnitGroupUnitFromEnd(autoA987A1D8_g, autoA987A1D8_u);
            if (autoA987A1D8_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(autoA987A1D8_var, true);
            Wait(1.0, c_timeGame);
            lv_randomNumber = RandomInt(0, 1);
            if ((lv_randomNumber == 1)) {
                UnitIssueOrder(autoA987A1D8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoA987A1D8_var), 5.0, 180.0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoA987A1D8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoA987A1D8_var), 5.0, 0.0)), c_orderQueueReplace);
            }
            libNtve_gf_MakeUnitUncommandable(autoA987A1D8_var, false);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("RiseSouthPillers", 0))) {
        autoC35163C0_g = PlayerGroupActive();
        autoC35163C0_var = -1;
        while (true) {
            autoC35163C0_var = PlayerGroupNextPlayer(autoC35163C0_g, autoC35163C0_var);
            if (autoC35163C0_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoC35163C0_var, "OctaPillarsSouthUp", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(autoC35163C0_var, "OctaPillarsSouthDown", 0);
        }
        auto116DBA2D_g = gv_octaPillersSouth;
        auto116DBA2D_u = UnitGroupCount(auto116DBA2D_g, c_unitCountAll);
        for (;; auto116DBA2D_u -= 1) {
            auto116DBA2D_var = UnitGroupUnitFromEnd(auto116DBA2D_g, auto116DBA2D_u);
            if (auto116DBA2D_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(auto116DBA2D_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(auto116DBA2D_var), libNtve_gf_SetScale(1.0, 1.0, 0.8, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        auto9E2A1E7F_g = gv_octaPillersSouth;
        auto9E2A1E7F_u = UnitGroupCount(auto9E2A1E7F_g, c_unitCountAll);
        for (;; auto9E2A1E7F_u -= 1) {
            auto9E2A1E7F_var = UnitGroupUnitFromEnd(auto9E2A1E7F_g, auto9E2A1E7F_u);
            if (auto9E2A1E7F_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto9E2A1E7F_var), libNtve_gf_SetScale(1.0, 1.0, 1.0, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto166AFB17_g = gv_octaPillersSouth;
        auto166AFB17_u = UnitGroupCount(auto166AFB17_g, c_unitCountAll);
        for (;; auto166AFB17_u -= 1) {
            auto166AFB17_var = UnitGroupUnitFromEnd(auto166AFB17_g, auto166AFB17_u);
            if (auto166AFB17_var == null) { break; }
            UnitRemove(auto166AFB17_var);
        }
        Wait(0.01, c_timeGame);
        auto0770C54C_n = lv_pillarMax;
        for (auto0770C54C_i = 1; auto0770C54C_i <= auto0770C54C_n; auto0770C54C_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerUp", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            UnitGroupAdd(gv_octaPillersSouth, UnitLastCreated());
            lv_pillar = (lv_pillar + 1);
            auto8DB8FB6C_g = UnitGroup(null, c_playerAny, RegionCircle(lv_pillarPoint[lv_pillar], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto8DB8FB6C_u = UnitGroupCount(auto8DB8FB6C_g, c_unitCountAll);
            for (;; auto8DB8FB6C_u -= 1) {
                auto8DB8FB6C_var = UnitGroupUnitFromEnd(auto8DB8FB6C_g, auto8DB8FB6C_u);
                if (auto8DB8FB6C_var == null) { break; }
                UnitGroupAdd(lv_unitGroupTomove, auto8DB8FB6C_var);
            }
        }
        auto71FC4DC8_g = lv_unitGroupTomove;
        auto71FC4DC8_u = UnitGroupCount(auto71FC4DC8_g, c_unitCountAll);
        for (;; auto71FC4DC8_u -= 1) {
            auto71FC4DC8_var = UnitGroupUnitFromEnd(auto71FC4DC8_g, auto71FC4DC8_u);
            if (auto71FC4DC8_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(auto71FC4DC8_var, true);
            Wait(1.0, c_timeGame);
            lv_randomNumber = RandomInt(0, 1);
            if ((lv_randomNumber == 1)) {
                UnitIssueOrder(auto71FC4DC8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto71FC4DC8_var), 5.0, 180.0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(auto71FC4DC8_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(auto71FC4DC8_var), 5.0, 0.0)), c_orderQueueReplace);
            }
            libNtve_gf_MakeUnitUncommandable(auto71FC4DC8_var, false);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("RiseWestPillers", 0))) {
        autoB49BC939_g = PlayerGroupActive();
        autoB49BC939_var = -1;
        while (true) {
            autoB49BC939_var = PlayerGroupNextPlayer(autoB49BC939_g, autoB49BC939_var);
            if (autoB49BC939_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoB49BC939_var, "OctaPillarsWestUp", 1);
            libNtve_gf_SetUpgradeLevelForPlayer(autoB49BC939_var, "OctaPillarsWestDown", 0);
        }
        autoA30D2DCA_g = gv_octaPillersWest;
        autoA30D2DCA_u = UnitGroupCount(autoA30D2DCA_g, c_unitCountAll);
        for (;; autoA30D2DCA_u -= 1) {
            autoA30D2DCA_var = UnitGroupUnitFromEnd(autoA30D2DCA_g, autoA30D2DCA_u);
            if (autoA30D2DCA_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(autoA30D2DCA_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(autoA30D2DCA_var), libNtve_gf_SetScale(1.0, 1.0, 0.8, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        autoE458C151_g = gv_octaPillersWest;
        autoE458C151_u = UnitGroupCount(autoE458C151_g, c_unitCountAll);
        for (;; autoE458C151_u -= 1) {
            autoE458C151_var = UnitGroupUnitFromEnd(autoE458C151_g, autoE458C151_u);
            if (autoE458C151_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoE458C151_var), libNtve_gf_SetScale(1.0, 1.0, 1.0, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto10FA5611_g = gv_octaPillersWest;
        auto10FA5611_u = UnitGroupCount(auto10FA5611_g, c_unitCountAll);
        for (;; auto10FA5611_u -= 1) {
            auto10FA5611_var = UnitGroupUnitFromEnd(auto10FA5611_g, auto10FA5611_u);
            if (auto10FA5611_var == null) { break; }
            UnitRemove(auto10FA5611_var);
        }
        Wait(0.01, c_timeGame);
        auto4B46BB80_n = lv_pillarMax;
        for (auto4B46BB80_i = 1; auto4B46BB80_i <= auto4B46BB80_n; auto4B46BB80_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerUp", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            UnitGroupAdd(gv_octaPillersWest, UnitLastCreated());
            lv_pillar = (lv_pillar + 1);
            auto89991B76_g = UnitGroup(null, c_playerAny, RegionCircle(lv_pillarPoint[lv_pillar], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto89991B76_u = UnitGroupCount(auto89991B76_g, c_unitCountAll);
            for (;; auto89991B76_u -= 1) {
                auto89991B76_var = UnitGroupUnitFromEnd(auto89991B76_g, auto89991B76_u);
                if (auto89991B76_var == null) { break; }
                UnitGroupAdd(lv_unitGroupTomove, auto89991B76_var);
            }
        }
        autoEC522B3B_g = lv_unitGroupTomove;
        autoEC522B3B_u = UnitGroupCount(autoEC522B3B_g, c_unitCountAll);
        for (;; autoEC522B3B_u -= 1) {
            autoEC522B3B_var = UnitGroupUnitFromEnd(autoEC522B3B_g, autoEC522B3B_u);
            if (autoEC522B3B_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(autoEC522B3B_var, true);
            Wait(1.0, c_timeGame);
            lv_randomNumber = RandomInt(0, 1);
            if ((lv_randomNumber == 1)) {
                UnitIssueOrder(autoEC522B3B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoEC522B3B_var), 5.0, -90.0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(autoEC522B3B_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(autoEC522B3B_var), 5.0, 90)), c_orderQueueReplace);
            }
            libNtve_gf_MakeUnitUncommandable(autoEC522B3B_var, false);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LowerEastPillers", 0))) {
        auto522414DE_g = PlayerGroupActive();
        auto522414DE_var = -1;
        while (true) {
            auto522414DE_var = PlayerGroupNextPlayer(auto522414DE_g, auto522414DE_var);
            if (auto522414DE_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto522414DE_var, "OctaPillarsEastUp", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(auto522414DE_var, "OctaPillarsEastDown", 1);
        }
        autoB19A447A_g = gv_octaPillersEast;
        autoB19A447A_u = UnitGroupCount(autoB19A447A_g, c_unitCountAll);
        for (;; autoB19A447A_u -= 1) {
            autoB19A447A_var = UnitGroupUnitFromEnd(autoB19A447A_g, autoB19A447A_u);
            if (autoB19A447A_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(autoB19A447A_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(autoB19A447A_var), libNtve_gf_SetScale(1.0, 1.0, 0.2, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        auto7CAADA27_g = gv_octaPillersEast;
        auto7CAADA27_u = UnitGroupCount(auto7CAADA27_g, c_unitCountAll);
        for (;; auto7CAADA27_u -= 1) {
            auto7CAADA27_var = UnitGroupUnitFromEnd(auto7CAADA27_g, auto7CAADA27_u);
            if (auto7CAADA27_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto7CAADA27_var), libNtve_gf_SetScale(1.0, 1.0, 0.01, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto24E9BD76_g = gv_octaPillersEast;
        auto24E9BD76_u = UnitGroupCount(auto24E9BD76_g, c_unitCountAll);
        for (;; auto24E9BD76_u -= 1) {
            auto24E9BD76_var = UnitGroupUnitFromEnd(auto24E9BD76_g, auto24E9BD76_u);
            if (auto24E9BD76_var == null) { break; }
            UnitRemove(auto24E9BD76_var);
        }
        autoA194B117_n = lv_pillarMax;
        for (autoA194B117_i = 1; autoA194B117_i <= autoA194B117_n; autoA194B117_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerDown", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(1.0, 1.0, 0.01, 0.0));
            UnitGroupAdd(gv_octaPillersEast, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            lv_pillar = (lv_pillar + 1);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LowerNorthPillers", 0))) {
        auto8A8D1604_g = PlayerGroupActive();
        auto8A8D1604_var = -1;
        while (true) {
            auto8A8D1604_var = PlayerGroupNextPlayer(auto8A8D1604_g, auto8A8D1604_var);
            if (auto8A8D1604_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto8A8D1604_var, "OctaPillarsNorthUp", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(auto8A8D1604_var, "OctaPillarsNorthDown", 1);
        }
        auto0E6D8302_g = gv_octaPillersNorth;
        auto0E6D8302_u = UnitGroupCount(auto0E6D8302_g, c_unitCountAll);
        for (;; auto0E6D8302_u -= 1) {
            auto0E6D8302_var = UnitGroupUnitFromEnd(auto0E6D8302_g, auto0E6D8302_u);
            if (auto0E6D8302_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(auto0E6D8302_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(auto0E6D8302_var), libNtve_gf_SetScale(1.0, 1.0, 0.2, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        auto97B545EA_g = gv_octaPillersNorth;
        auto97B545EA_u = UnitGroupCount(auto97B545EA_g, c_unitCountAll);
        for (;; auto97B545EA_u -= 1) {
            auto97B545EA_var = UnitGroupUnitFromEnd(auto97B545EA_g, auto97B545EA_u);
            if (auto97B545EA_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(auto97B545EA_var), libNtve_gf_SetScale(1.0, 1.0, 0.01, 1.0));
        }
        Wait(1.0, c_timeGame);
        autoEA6AD9D8_g = gv_octaPillersNorth;
        autoEA6AD9D8_u = UnitGroupCount(autoEA6AD9D8_g, c_unitCountAll);
        for (;; autoEA6AD9D8_u -= 1) {
            autoEA6AD9D8_var = UnitGroupUnitFromEnd(autoEA6AD9D8_g, autoEA6AD9D8_u);
            if (autoEA6AD9D8_var == null) { break; }
            UnitRemove(autoEA6AD9D8_var);
        }
        auto3AABB726_n = lv_pillarMax;
        for (auto3AABB726_i = 1; auto3AABB726_i <= auto3AABB726_n; auto3AABB726_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerDown", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(1.0, 1.0, 0.01, 0.0));
            UnitGroupAdd(gv_octaPillersNorth, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            lv_pillar = (lv_pillar + 1);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LowerSouthPillers", 0))) {
        autoF3789093_g = PlayerGroupActive();
        autoF3789093_var = -1;
        while (true) {
            autoF3789093_var = PlayerGroupNextPlayer(autoF3789093_g, autoF3789093_var);
            if (autoF3789093_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(autoF3789093_var, "OctaPillarsSouthUp", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(autoF3789093_var, "OctaPillarsSouthDown", 1);
        }
        autoA806E42F_g = gv_octaPillersSouth;
        autoA806E42F_u = UnitGroupCount(autoA806E42F_g, c_unitCountAll);
        for (;; autoA806E42F_u -= 1) {
            autoA806E42F_var = UnitGroupUnitFromEnd(autoA806E42F_g, autoA806E42F_u);
            if (autoA806E42F_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(autoA806E42F_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(autoA806E42F_var), libNtve_gf_SetScale(1.0, 1.0, 0.2, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        autoF86A59AF_g = gv_octaPillersSouth;
        autoF86A59AF_u = UnitGroupCount(autoF86A59AF_g, c_unitCountAll);
        for (;; autoF86A59AF_u -= 1) {
            autoF86A59AF_var = UnitGroupUnitFromEnd(autoF86A59AF_g, autoF86A59AF_u);
            if (autoF86A59AF_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoF86A59AF_var), libNtve_gf_SetScale(1.0, 1.0, 0.01, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto2C445E33_g = gv_octaPillersSouth;
        auto2C445E33_u = UnitGroupCount(auto2C445E33_g, c_unitCountAll);
        for (;; auto2C445E33_u -= 1) {
            auto2C445E33_var = UnitGroupUnitFromEnd(auto2C445E33_g, auto2C445E33_u);
            if (auto2C445E33_var == null) { break; }
            UnitRemove(auto2C445E33_var);
        }
        auto699B575A_n = lv_pillarMax;
        for (auto699B575A_i = 1; auto699B575A_i <= auto699B575A_n; auto699B575A_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerDown", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(1.0, 1.0, 0.01, 0.0));
            UnitGroupAdd(gv_octaPillersSouth, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            lv_pillar = (lv_pillar + 1);
        }
    }
    else if ((EventUnitAbility() == AbilityCommand("LowerWestPillers", 0))) {
        auto1513AF60_g = PlayerGroupActive();
        auto1513AF60_var = -1;
        while (true) {
            auto1513AF60_var = PlayerGroupNextPlayer(auto1513AF60_g, auto1513AF60_var);
            if (auto1513AF60_var < 0) { break; }
            libNtve_gf_SetUpgradeLevelForPlayer(auto1513AF60_var, "OctaPillarsWestUp", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(auto1513AF60_var, "OctaPillarsWestDown", 1);
        }
        auto622E56E1_g = gv_octaPillersWest;
        auto622E56E1_u = UnitGroupCount(auto622E56E1_g, c_unitCountAll);
        for (;; auto622E56E1_u -= 1) {
            auto622E56E1_var = UnitGroupUnitFromEnd(auto622E56E1_g, auto622E56E1_u);
            if (auto622E56E1_var == null) { break; }
            lv_pillarPoint[lv_pillar] = UnitGetPosition(auto622E56E1_var);
            lv_pillar = (lv_pillar + 1);
            ActorSend(libNtve_gf_MainActorofUnit(auto622E56E1_var), libNtve_gf_SetScale(1.0, 1.0, 0.2, 1.0));
        }
        lv_pillarMax = lv_pillar;
        lv_pillar = 0;
        Wait(1.0, c_timeGame);
        autoA279D22D_g = gv_octaPillersWest;
        autoA279D22D_u = UnitGroupCount(autoA279D22D_g, c_unitCountAll);
        for (;; autoA279D22D_u -= 1) {
            autoA279D22D_var = UnitGroupUnitFromEnd(autoA279D22D_g, autoA279D22D_u);
            if (autoA279D22D_var == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(autoA279D22D_var), libNtve_gf_SetScale(1.0, 1.0, 0.01, 1.0));
        }
        Wait(1.0, c_timeGame);
        auto2BC9E5E7_g = gv_octaPillersWest;
        auto2BC9E5E7_u = UnitGroupCount(auto2BC9E5E7_g, c_unitCountAll);
        for (;; auto2BC9E5E7_u -= 1) {
            auto2BC9E5E7_var = UnitGroupUnitFromEnd(auto2BC9E5E7_g, auto2BC9E5E7_u);
            if (auto2BC9E5E7_var == null) { break; }
            UnitRemove(auto2BC9E5E7_var);
        }
        autoA6B95B00_n = lv_pillarMax;
        for (autoA6B95B00_i = 1; autoA6B95B00_i <= autoA6B95B00_n; autoA6B95B00_i += 1) {
            libNtve_gf_CreateUnitsAtPoint2(1, "OctaPillerDown", c_unitCreateIgnorePlacement, 0, lv_pillarPoint[lv_pillar]);
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(1.0, 1.0, 0.01, 0.0));
            UnitGroupAdd(gv_octaPillersWest, UnitLastCreated());
            ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 1.0, 0.0));
            lv_pillar = (lv_pillar + 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LowerOrRisePillers_Init () {
    gt_LowerOrRisePillers = TriggerCreate("gt_LowerOrRisePillers_Func");
    TriggerEnable(gt_LowerOrRisePillers, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("LowerEastPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("LowerNorthPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("LowerSouthPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("LowerWestPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("RiseEastPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("RiseNorthPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("RiseSouthPillers", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_LowerOrRisePillers, null, AbilityCommand("RiseWestPillers", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Pong Bounce
//--------------------------------------------------------------------------------------------------
bool gt_MakePongBounce_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_sendtheunitto;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PointSet(gv_nextPointOfPongtogotoscan, PointWithOffsetPolar(UnitGetPosition(gv_pongUnit), 4.0, gv_angleOfPong));
    RegionSetCenter(gv_nextPointOfPongtogotoscanRegion, gv_nextPointOfPongtogotoscan);
    if ((RegionContainsPoint(gv_dirtEdgesRegion, gv_nextPointOfPongtogotoscan) == false)) {
        UnitIssueOrder(gv_pongUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_nextPointOfPongtogotoscan), c_orderQueueReplace);
        PointSet(gv_nextPointOfPongtogotoscan, PointWithOffsetPolar(UnitGetPosition(gv_pongUnit), 4.0, gv_angleOfPong));
        RegionSetCenter(gv_nextPointOfPongtogotoscanRegion, gv_nextPointOfPongtogotoscan);
    }
    else {
        gv_angleOfPong = ((gv_angleOfPong + 180) + RandomInt(-80, 80));
        PointSet(gv_nextPointOfPongtogotoscan, PointWithOffsetPolar(UnitGetPosition(gv_pongUnit), 4.0, gv_angleOfPong));
        RegionSetCenter(gv_nextPointOfPongtogotoscanRegion, gv_nextPointOfPongtogotoscan);
        UnitIssueOrder(gv_pongUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_nextPointOfPongtogotoscan), c_orderQueueReplace);
        gv_lastPositionOfPong = RegionCircle(UnitGetPosition(gv_pongUnit), 5.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakePongBounce_Init () {
    gt_MakePongBounce = TriggerCreate("gt_MakePongBounce_Func");
    TriggerEnable(gt_MakePongBounce, false);
    TriggerAddEventUnitRegion(gt_MakePongBounce, null, gv_nextPointOfPongtogotoscanRegion, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Sure Pong Does not stop
//--------------------------------------------------------------------------------------------------
bool gt_MakeSurePongDoesnotstop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(gv_lastPositionOfPong, UnitGetPosition(gv_pongUnit)) == true)) {
        PointSet(gv_nextPointOfPongtogotoscan, RegionRandomPoint(RegionCircle(gv_absoluteCenterpoint, 10.0)));
        RegionSetCenter(gv_nextPointOfPongtogotoscanRegion, gv_nextPointOfPongtogotoscan);
        UnitIssueOrder(gv_pongUnit, OrderTargetingPoint(AbilityCommand("move", 0), gv_nextPointOfPongtogotoscan), c_orderQueueReplace);
        gv_lastPositionOfPong = RegionCircle(UnitGetPosition(gv_pongUnit), 5.0);
    }

    gv_lastPositionOfPong = RegionCircle(UnitGetPosition(gv_pongUnit), 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakeSurePongDoesnotstop_Init () {
    gt_MakeSurePongDoesnotstop = TriggerCreate("gt_MakeSurePongDoesnotstop_Func");
    TriggerEnable(gt_MakeSurePongDoesnotstop, false);
    TriggerAddEventTimePeriodic(gt_MakeSurePongDoesnotstop, 10.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move camara Set selection and spawn unit
//--------------------------------------------------------------------------------------------------
bool gt_MovecamaraSetselectionandspawnunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewQueen"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_MovecamaraSetselectionandspawnunit(EventUnitCreatedUnit(), UnitGetOwner(EventUnitCreatedUnit()));
    Wait(0.2, c_timeGame);
    if ((UnitGroupCount(UnitGroup("NewQueen", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == PlayerGroupCount(PlayerGroupActive()))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MovecamaraSetselectionandspawnunit_Init () {
    gt_MovecamaraSetselectionandspawnunit = TriggerCreate("gt_MovecamaraSetselectionandspawnunit_Func");
    TriggerAddEventUnitCreated(gt_MovecamaraSetselectionandspawnunit, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Create A Flag on each queen
//--------------------------------------------------------------------------------------------------
bool gt_CTFCreateAFlagoneachqueen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto635E1769_g;
    int auto635E1769_var;

    // Conditions
    if (testConds) {
        if (!((gv_gameModeChosen == "CTF"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeGame);
    auto635E1769_g = PlayerGroupActive();
    auto635E1769_var = -1;
    while (true) {
        auto635E1769_var = PlayerGroupNextPlayer(auto635E1769_g, auto635E1769_var);
        if (auto635E1769_var < 0) { break; }
        libNtve_gf_CreateUnitsAtPoint2(1, "CTFFlag", c_unitCreateIgnorePlacement, auto635E1769_var, UnitGetPosition(gv_queenOfPlayer[auto635E1769_var]));
        UnitSetCustomValue(UnitLastCreated(), gv_cTFOldXPositionOfFlag, PointGetX(UnitGetPosition(UnitLastCreated())));
        UnitSetCustomValue(UnitLastCreated(), gv_cTFOldYPositionOfFlag, PointGetY(UnitGetPosition(UnitLastCreated())));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetOpacity(0.0, 0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(3.0, 3.0, 3.0, 0.1));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetOpacity(1.0, 3.0));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
        libNtve_gf_AttachModelToUnitInheritVisibility(UnitLastCreated(), "CTFFlagChainModel", "Ref_Hardpoint 05");
        libNtve_gf_AttachModelToUnitInheritVisibility(UnitLastCreated(), "CTFFlagChainModel", "Ref_Hardpoint 04");
        libNtve_gf_AttachModelToUnitInheritVisibility(UnitLastCreated(), "CTFFlagChainModel", "Ref_Hardpoint 03");
        libNtve_gf_AttachModelToUnitInheritVisibility(UnitLastCreated(), "CTFFlagChainModel", "Ref_Hardpoint");
        libNtve_gf_AttachModelToUnitInheritVisibility(UnitLastCreated(), "CTFFlagClothFabricBackModel", "Ref_Hardpoint 02");
        libNtve_gf_AttachModelToUnitInheritVisibility(UnitLastCreated(), "CTFFlagClothFabricFrontModel", "Ref_Hardpoint 01");
        SoundPlayAtPointForPlayer(SoundLink("Core_SpinDown", -1), c_maxPlayers, PlayerGroupSingle(auto635E1769_var), UnitGetPosition(gv_queenOfPlayer[auto635E1769_var]), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFCreateAFlagoneachqueen_Init () {
    gt_CTFCreateAFlagoneachqueen = TriggerCreate("gt_CTFCreateAFlagoneachqueen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Picking Up A Flag
//--------------------------------------------------------------------------------------------------
bool gt_CTFPickingUpAFlag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_originalFlagLocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalFlagLocation = Point(gv_cTFOldXPositionOfFlag, gv_cTFOldYPositionOfFlag);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 3.0), UnitGetPosition(EventUnit())) == true)) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Spell Spell");
        libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(EventUnit()), "ModelOfFlagBeingCarried"));
        gv_cTFFlagUnitBeingCarriedBy[UnitGetOwner(EventUnit())] = EventUnitTargetUnit();
        libNtve_gf_AttachModelToUnit(EventUnit(), "CTFFlagPoleModel", "Ref_Target 08");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.1));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.3, 0.3, 0.5, 1.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_AliasAdd("ModelOfFlagBeingCarried"));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitTargetUnit()), false)), Color(80.39, 95.69, 22.75)));
        UnitBehaviorAdd(EventUnit(), "CarryingAFlag", EventUnit(), 1);
        if ((PlayerGetAlliance(UnitGetOwner(EventUnitTargetUnit()), c_allianceIdChat, UnitGetOwner(EventUnit())) == false)) {
            UnitBehaviorAdd(EventUnit(), "CarryingEnemyFlag", EventUnit(), 1);
        }

        if ((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitTargetUnit())) && (PlayerGetAlliance(UnitGetOwner(EventUnitTargetUnit()), c_allianceIdChat, UnitGetOwner(EventUnit())) == true)) {
            if ((UnitHasBehavior2(EventUnitTargetUnit(), "OwnerOfThisFlagHasPermissionToMoveIt") == false)) {
                UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                gf_DisplayErrorForPlayer(StringExternal("Param/Value/D5E8C2E9"), EventPlayer());
                gv_cTFFlagUnitBeingCarriedBy[UnitGetOwner(EventUnit())] = null;
            }

        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFPickingUpAFlag_Init () {
    gt_CTFPickingUpAFlag = TriggerCreate("gt_CTFPickingUpAFlag_Func");
    TriggerAddEventUnitAbility(gt_CTFPickingUpAFlag, null, AbilityCommand("CTFFlagAbilities", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Picking Up A Flag Pickup anim
//--------------------------------------------------------------------------------------------------
bool gt_CTFPickingUpAFlagPickupanim_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "AnimPlay Pickup Pickup");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFPickingUpAFlagPickupanim_Init () {
    gt_CTFPickingUpAFlagPickupanim = TriggerCreate("gt_CTFPickingUpAFlagPickupanim_Func");
    TriggerAddEventUnitAbility(gt_CTFPickingUpAFlagPickupanim, null, AbilityCommand("CTFFlagAbilities", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Dropping Flag (On Ground Anywhere)
//--------------------------------------------------------------------------------------------------
bool gt_CTFDroppingFlagOnGroundAnywhere_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_flagBeingDropped;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flagBeingDropped = EventUnitAbilityOtherUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "CarryingAFlag", 1);
    libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(EventUnit()), "ModelOfFlagBeingCarried"));
    if ((PlayerGetAlliance(UnitGetOwner(lv_flagBeingDropped), c_allianceIdChat, UnitGetOwner(EventUnit())) == false)) {
        UnitBehaviorRemove(EventUnit(), "CarryingEnemyFlag", 1);
    }

    gv_cTFFlagUnitBeingCarriedBy[UnitGetOwner(EventUnit())] = null;
    UnitSetCustomValue(lv_flagBeingDropped, gv_cTFOldXPositionOfFlag, PointGetX(UnitGetPosition(lv_flagBeingDropped)));
    UnitSetCustomValue(lv_flagBeingDropped, gv_cTFOldYPositionOfFlag, PointGetY(UnitGetPosition(lv_flagBeingDropped)));
    libNtve_gf_SendActorMessageToUnit(lv_flagBeingDropped, "AnimPlay Birth Birth");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Spell Spell");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFDroppingFlagOnGroundAnywhere_Init () {
    gt_CTFDroppingFlagOnGroundAnywhere = TriggerCreate("gt_CTFDroppingFlagOnGroundAnywhere_Func");
    TriggerAddEventUnitAbility(gt_CTFDroppingFlagOnGroundAnywhere, null, AbilityCommand("CTFFlagAbilities", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Claim Flag (On Own friendly flag)
//--------------------------------------------------------------------------------------------------
bool gt_CTFClaimFlagOnOwnfriendlyflag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_flagBeingDropped;
    int lv_originalFlagOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_flagBeingDropped = gv_cTFFlagUnitBeingCarriedBy[UnitGetOwner(EventUnit())];
    lv_originalFlagOwner = UnitGetOwner(lv_flagBeingDropped);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "CarryingAFlag", 1);
    gv_cTFFlagUnitBeingCarriedBy[UnitGetOwner(EventUnit())] = null;
    libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(EventUnit()), "ModelOfFlagBeingCarried"));
    libNtve_gf_SendActorMessageToUnit(lv_flagBeingDropped, "AnimPlay Dance Dance");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Spell Spell,C");
    if ((PlayerGetAlliance(UnitGetOwner(lv_flagBeingDropped), c_allianceIdChat, UnitGetOwner(EventUnit())) == false)) {
        while (true) {
            if ((UnitHasBehavior2(EventUnit(), "CarryingEnemyFlag") == true)) {
                UnitBehaviorRemove(EventUnit(), "CarryingEnemyFlag", 1);
            }
            else {
                break;
            }
        }
        UnitSetOwner(lv_flagBeingDropped, UnitGetOwner(EventUnit()), true);
        Wait(1.0, c_timeGame);
        UnitSetOwner(lv_flagBeingDropped, lv_originalFlagOwner, true);
        Wait(1.0, c_timeGame);
        UnitSetOwner(lv_flagBeingDropped, UnitGetOwner(EventUnit()), true);
        Wait(1.0, c_timeGame);
        UnitSetOwner(lv_flagBeingDropped, lv_originalFlagOwner, true);
        Wait(1.0, c_timeGame);
        UnitSetOwner(lv_flagBeingDropped, UnitGetOwner(EventUnit()), true);
    }

    UnitBehaviorAdd(lv_flagBeingDropped, "AllowKillLastOwnerButton", lv_flagBeingDropped, 1);
    UnitSetCustomValue(lv_flagBeingDropped, gv_cTFLastOwnerOfFlagCustomValue, lv_originalFlagOwner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFClaimFlagOnOwnfriendlyflag_Init () {
    gt_CTFClaimFlagOnOwnfriendlyflag = TriggerCreate("gt_CTFClaimFlagOnOwnfriendlyflag_Func");
    TriggerAddEventUnitAbility(gt_CTFClaimFlagOnOwnfriendlyflag, null, AbilityCommand("CTFFlagAbilities", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Allow\Disaalow Ally To Carry Flag
//--------------------------------------------------------------------------------------------------
bool gt_CTFAllowDisaalowAllyToCarryFlag_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("AllowAlliestomovethisflag", 0))) {
        UnitBehaviorAdd(EventUnit(), "OwnerOfThisFlagHasPermissionToMoveIt", EventUnit(), 1);
        UnitBehaviorRemove(EventUnit(), "OwnerOfThisFlagHasNotGivenPermissionToMoveItAura", 1);
    }
    else if ((EventUnitAbility() == AbilityCommand("DisallowAlliestomovethisflag", 0))) {
        UnitBehaviorAdd(EventUnit(), "OwnerOfThisFlagHasNotGivenPermissionToMoveItAura", EventUnit(), 1);
        UnitBehaviorRemove(EventUnit(), "OwnerOfThisFlagHasPermissionToMoveIt", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFAllowDisaalowAllyToCarryFlag_Init () {
    gt_CTFAllowDisaalowAllyToCarryFlag = TriggerCreate("gt_CTFAllowDisaalowAllyToCarryFlag_Func");
    TriggerAddEventUnitAbility(gt_CTFAllowDisaalowAllyToCarryFlag, null, AbilityCommand("AllowAlliestomovethisflag", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CTFAllowDisaalowAllyToCarryFlag, null, AbilityCommand("DisallowAlliestomovethisflag", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Queen Respawn
//--------------------------------------------------------------------------------------------------
bool gt_CTFQueenRespawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto51D9C795_n = 2;
    int auto51D9C795_i;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenFireAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenGhostAnt")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_alreadyHad1queenspawn[UnitGetOwner(EventUnit())] != true)) {
        gv_alreadyHad1queenspawn[UnitGetOwner(EventUnit())] = true;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnitCreatedUnit())), c_messageAreaSubtitle, TextWithColor(StringToText("Your Queen has respawned"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitCreatedUnit()), false))));
        gv_queenOfPlayer[UnitGetOwner(EventUnitCreatedUnit())] = EventUnitCreatedUnit();
        gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_Queen[UnitGetOwner(EventUnitCreatedUnit())]);
        libNtve_gf_SetUpgradeLevelForPlayer(1, "ZergMeleeWeaponsLevel1", 1);
        for (auto51D9C795_i = 1; auto51D9C795_i <= auto51D9C795_n; auto51D9C795_i += 1) {
            if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel5", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel5", 0);
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel4", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel4", 0);
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel3", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel3", 0);
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel2", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel2", 0);
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel1", c_techCountCompleteOnly) == 1)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergMeleeWeaponsLevel1", 0);
                            }

                        }
                    }
                }
            }
            if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel5", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel5", 0);
            }
            else {
                if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel4", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel4", 0);
                }
                else {
                    if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel3", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel3", 0);
                    }
                    else {
                        if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel2", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel2", 0);
                        }
                        else {
                            if ((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel1", c_techCountCompleteOnly) == 1)) {
                                libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ZergGroundArmorsLevel1", 0);
                            }

                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFQueenRespawn_Init () {
    gt_CTFQueenRespawn = TriggerCreate("gt_CTFQueenRespawn_Func");
    TriggerAddEventUnitCreated(gt_CTFQueenRespawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF KIll last owner of flag
//--------------------------------------------------------------------------------------------------
bool gt_CTFKIlllastownerofflag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_alertedPlayers;
    int lv_previousFlagOwner;

    // Automatic Variable Declarations
    playergroup autoB27D1E50_g;
    int autoB27D1E50_var;

    // Variable Initialization
    lv_alertedPlayers = PlayerGroupEmpty();
    lv_previousFlagOwner = FixedToInt(UnitGetCustomValue(EventUnit(), gv_cTFLastOwnerOfFlagCustomValue));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroup("CTFFlag", lv_previousFlagOwner, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        if ((UnitIsAlive(gv_queenOfPlayer[lv_previousFlagOwner]) == true)) {
            UnitBehaviorRemove(EventUnit(), "AllowKillLastOwnerButton", 1);
            MinimapPing(PlayerGroupAll(), UnitGetPosition(gv_queenOfPlayer[lv_previousFlagOwner]), 10.0, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_previousFlagOwner, false)));
            UnitKill(gv_queenOfPlayer[lv_previousFlagOwner]);
            autoB27D1E50_g = PlayerGroupActive();
            autoB27D1E50_var = -1;
            while (true) {
                autoB27D1E50_var = PlayerGroupNextPlayer(autoB27D1E50_g, autoB27D1E50_var);
                if (autoB27D1E50_var < 0) { break; }
                if (((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, autoB27D1E50_var) == true) || (PlayerGetAlliance(lv_previousFlagOwner, c_allianceIdPassive, autoB27D1E50_var) == true))) {
                    PlayerGroupAdd(lv_alertedPlayers, autoB27D1E50_var);
                }

                PlayerGroupAdd(lv_alertedPlayers, UnitGetOwner(EventUnit()));
                PlayerGroupAdd(lv_alertedPlayers, lv_previousFlagOwner);
            }
            UIDisplayMessage(lv_alertedPlayers, c_messageAreaDirective, (((TextWithColor(PlayerName(UnitGetOwner(EventUnit())), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnit()), false))) + StringToText(" Used \"Kill Last Flag Owner\" to kill ")) + TextWithColor(PlayerName(lv_previousFlagOwner), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_previousFlagOwner, false)))) + StringToText("'s Queen!")));
            Wait(5.0, c_timeGame);
            UIClearMessages(lv_alertedPlayers, c_messageAreaDirective);
        }
        else {
            gf_DisplayErrorForPlayer(StringExternal("Param/Value/87644455"), EventPlayer());
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/E6FF4B84"), EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFKIlllastownerofflag_Init () {
    gt_CTFKIlllastownerofflag = TriggerCreate("gt_CTFKIlllastownerofflag_Func");
    TriggerAddEventUnitAbility(gt_CTFKIlllastownerofflag, null, AbilityCommand("KillLastOwnerOfflag", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Toggle Give Ally Flag Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CTFToggleGiveAllyFlagDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] == false)) {
        DialogSetVisible(gv_cTFGiveAllyFlagDialog, PlayerGroupSingle(EventPlayer()), true);
        gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] = true;
    }
    else {
        DialogSetVisible(gv_cTFGiveAllyFlagDialog, PlayerGroupSingle(EventPlayer()), false);
        gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFToggleGiveAllyFlagDialog_Init () {
    gt_CTFToggleGiveAllyFlagDialog = TriggerCreate("gt_CTFToggleGiveAllyFlagDialog_Func");
    TriggerAddEventUnitAbility(gt_CTFToggleGiveAllyFlagDialog, null, AbilityCommand("GiveThisFlagToYourAlly", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Toggle Give Ally Flag Dialog Red X
//--------------------------------------------------------------------------------------------------
bool gt_CTFToggleGiveAllyFlagDialogRedX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_cTFGiveAllyButtonCloseRedX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] == false)) {
    }
    else {
        DialogSetVisible(gv_cTFGiveAllyFlagDialog, PlayerGroupSingle(EventPlayer()), false);
        gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFToggleGiveAllyFlagDialogRedX_Init () {
    gt_CTFToggleGiveAllyFlagDialogRedX = TriggerCreate("gt_CTFToggleGiveAllyFlagDialogRedX_Func");
    TriggerAddEventDialogControl(gt_CTFToggleGiveAllyFlagDialogRedX, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Toggle Give Ally Flag Dialog Esc
//--------------------------------------------------------------------------------------------------
bool gt_CTFToggleGiveAllyFlagDialogEsc_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] == false)) {
    }
    else {
        DialogSetVisible(gv_cTFGiveAllyFlagDialog, PlayerGroupSingle(EventPlayer()), false);
        gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFToggleGiveAllyFlagDialogEsc_Init () {
    gt_CTFToggleGiveAllyFlagDialogEsc = TriggerCreate("gt_CTFToggleGiveAllyFlagDialogEsc_Func");
    TriggerAddEventKeyPressed(gt_CTFToggleGiveAllyFlagDialogEsc, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CTF Toggle Give Ally Flag Button Clicked <------
//--------------------------------------------------------------------------------------------------
bool gt_CTFToggleGiveAllyFlagButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_flagUnit;
    unitgroup lv_selectedunits;
    int lv_targetPlayerRepeater;
    int lv_targetPlayer;

    // Automatic Variable Declarations
    const int auto6A98A1AF_n = 6;
    int auto6A98A1AF_i;
    unitgroup auto18139D70_g;
    int auto18139D70_u;
    unit auto18139D70_var;

    // Variable Initialization
    lv_selectedunits = UnitGroupEmpty();
    lv_targetPlayerRepeater = 1;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[1]) || (EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[2]) || (EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[3]) || (EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[4]) || (EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[5]) || (EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] == false)) {
    }
    else {
        DialogSetVisible(gv_cTFGiveAllyFlagDialog, PlayerGroupSingle(EventPlayer()), false);
        gv_cTFGiveAllyFlagDialogToogleIsOpen[EventPlayer()] = false;
    }
    for (auto6A98A1AF_i = 1; auto6A98A1AF_i <= auto6A98A1AF_n; auto6A98A1AF_i += 1) {
        if ((EventDialogControl() == gv_cTFGiveAllyButtonToAllyPlayer[lv_targetPlayerRepeater])) {
            lv_targetPlayer = lv_targetPlayerRepeater;
        }

        lv_targetPlayerRepeater = (lv_targetPlayerRepeater + 1);
    }
    lv_selectedunits = UnitGroupSelected(EventPlayer());
    auto18139D70_g = lv_selectedunits;
    auto18139D70_u = UnitGroupCount(auto18139D70_g, c_unitCountAll);
    for (;; auto18139D70_u -= 1) {
        auto18139D70_var = UnitGroupUnitFromEnd(auto18139D70_g, auto18139D70_u);
        if (auto18139D70_var == null) { break; }
        if (((UnitGetOwner(auto18139D70_var) == EventPlayer()) && (UnitGetType(auto18139D70_var) == "CTFFlag"))) {
            lv_flagUnit = auto18139D70_var;
        }
        else {
            gf_DisplayErrorForPlayer(StringExternal("Param/Value/F2ACD7BA"), EventPlayer());
        }
    }
    if (((PlayerGetAlliance(EventPlayer(), c_allianceIdChat, lv_targetPlayer) == true) && (PlayerGetAlliance(lv_targetPlayer, c_allianceIdChat, EventPlayer()) == true))) {
        if ((lv_targetPlayer != EventPlayer())) {
            UnitSetOwner(lv_flagUnit, lv_targetPlayer, true);
        }
        else {
            gf_DisplayErrorForPlayer(StringExternal("Param/Value/F5E4D513"), EventPlayer());
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/48A7F731"), EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CTFToggleGiveAllyFlagButtonClicked_Init () {
    gt_CTFToggleGiveAllyFlagButtonClicked = TriggerCreate("gt_CTFToggleGiveAllyFlagButtonClicked_Func");
    TriggerAddEventDialogControl(gt_CTFToggleGiveAllyFlagButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock\Block Allying Button
//--------------------------------------------------------------------------------------------------
bool gt_UnlockBlockAllyingButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_blockerforAllyingButtonDialog;
    int lv_blockerforAllyingButtonDialogButton;
    int lv_blockingTimeInIngameSeconds;
    int lv_blockerforAllyingButtonTimer;

    // Automatic Variable Declarations
    int auto202377AB_n;
    int auto202377AB_i;

    // Variable Initialization
    lv_blockerforAllyingButtonDialog = c_invalidDialogId;
    lv_blockerforAllyingButtonDialogButton = c_invalidDialogControlId;
    lv_blockingTimeInIngameSeconds = 120;
    lv_blockerforAllyingButtonTimer = lv_blockingTimeInIngameSeconds;

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DialogCreateAEvo(38, 38, c_anchorTopRight, 5, 5, true);
    lv_blockerforAllyingButtonDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    gf_EmptyButtonCreate(DialogLastCreated(), 40, 40, c_anchorCenter, 0, 0, ((StringExternal("Param/Value/32858CF6") + TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_blockerforAllyingButtonTimer)), Color(75.29, 75.29, 75.29))) + StringExternal("Param/Value/3F94A1A8")), StringExternal("Param/Value/A7AAED90"), false, null);
    lv_blockerforAllyingButtonDialogButton = DialogControlLastCreated();
    auto202377AB_n = lv_blockingTimeInIngameSeconds;
    for (auto202377AB_i = 1; auto202377AB_i <= auto202377AB_n; auto202377AB_i += 1) {
        Wait(1.0, c_timeGame);
        lv_blockerforAllyingButtonTimer = (lv_blockerforAllyingButtonTimer - 1);
        libNtve_gf_SetDialogItemTooltip(lv_blockerforAllyingButtonDialogButton, ((StringExternal("Param/Value/9D26354A") + TextWithColor(TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(lv_blockerforAllyingButtonTimer)), Color(75.29, 75.29, 75.29))) + StringExternal("Param/Value/B558256E")), PlayerGroupAll());
    }
    DialogSetVisible(lv_blockerforAllyingButtonDialog, PlayerGroupAll(), false);
    DialogControlSetVisible(lv_blockerforAllyingButtonDialogButton, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockBlockAllyingButton_Init () {
    gt_UnlockBlockAllyingButton = TriggerCreate("gt_UnlockBlockAllyingButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tell me allies and enemies of myself
//--------------------------------------------------------------------------------------------------
bool gt_Tellmealliesandenemiesofmyself_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, (IntToText(gv_alliedQueenOfPlayer[EventPlayer()]) + (StringExternal("Param/Value/EBE9BB24") + IntToText(gv_enemyQueenOfPlayer[EventPlayer()]))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tellmealliesandenemiesofmyself_Init () {
    gt_Tellmealliesandenemiesofmyself = TriggerCreate("gt_Tellmealliesandenemiesofmyself_Func");
    TriggerAddEventKeyPressed(gt_Tellmealliesandenemiesofmyself, c_playerAny, c_keyHome, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tell Players To Suggest Ideas
//--------------------------------------------------------------------------------------------------
bool gt_TellPlayersToSuggestIdeas_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(170.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/E3B54E7D"));
    SoundPlayForPlayer(SoundLink("DiscordSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("DiscordSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TellPlayersToSuggestIdeas_Init () {
    gt_TellPlayersToSuggestIdeas = TriggerCreate("gt_TellPlayersToSuggestIdeas_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tell Players environmental Layout Information
//--------------------------------------------------------------------------------------------------
bool gt_TellPlayersenvironmentalLayoutInformation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_mapLayoutName;
    text lv_information;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_mapLayoutName = StringExternal("Param/Value/E26252CB");
    lv_information = StringExternal("Param/Value/DA8F472B");

    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(30.0, c_timeGame);
    if (((gv_MapGen == 4) || (gv_MapGen == 13) || (gv_MapGen == 14) || (gv_MapGen == 16) || (gv_MapGen == 21) || (gv_MapGen == 22))) {
        if ((gv_MapGen == 4)) {
            lv_mapLayoutName = StringExternal("Param/Value/C7A30C4D");
            lv_information = StringExternal("Param/Value/91BD0A87");
        }
        else if ((gv_MapGen == 13)) {
            lv_mapLayoutName = StringExternal("Param/Value/4639EBD5");
            lv_information = StringExternal("Param/Value/9DABCF09");
        }
        else if ((gv_MapGen == 14)) {
            lv_mapLayoutName = StringExternal("Param/Value/A8C4B8C3");
            lv_information = StringExternal("Param/Value/D72B3A4E");
        }
        else if ((gv_MapGen == 16)) {
            lv_mapLayoutName = StringExternal("Param/Value/CFF16EE6");
            lv_information = StringExternal("Param/Value/DBB83F01");
        }
        else if ((gv_MapGen == 21)) {
            lv_mapLayoutName = StringExternal("Param/Value/4322439C");
            lv_information = StringExternal("Param/Value/1CA375C9");
        }
        else if ((gv_MapGen == 22)) {
            lv_mapLayoutName = StringExternal("Param/Value/D6012ED8");
            lv_information = StringExternal("Param/Value/0E1111E3");
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (lv_mapLayoutName + lv_information));
        SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TellPlayersenvironmentalLayoutInformation_Init () {
    gt_TellPlayersenvironmentalLayoutInformation = TriggerCreate("gt_TellPlayersenvironmentalLayoutInformation_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Player queen choice
//--------------------------------------------------------------------------------------------------
bool gt_AnnouncePlayerqueenchoice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto78E69B43_g;
    int auto78E69B43_var;
    const int autoA2CAF736_n = 3;
    int autoA2CAF736_i;
    playergroup auto064F9E75_g;
    int auto064F9E75_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenFireAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenGhostAnt")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto78E69B43_g = PlayerGroupActive();
    auto78E69B43_var = -1;
    while (true) {
        auto78E69B43_var = PlayerGroupNextPlayer(auto78E69B43_g, auto78E69B43_var);
        if (auto78E69B43_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnitCreatedUnit()), c_allianceIdChat, auto78E69B43_var) == true)) {
            UIDisplayMessage(PlayerGroupSingle(auto78E69B43_var), c_messageAreaError, TextWithColor((PlayerName(UnitGetOwner(EventUnitCreatedUnit())) + (TextWithColor(StringExternal("Param/Value/1B01AA55"), Color(50.20, 50.20, 50.20)) + UnitGetName(EventUnitCreatedUnit()))), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitCreatedUnit()), false))));
        }

    }
    for (autoA2CAF736_i = 1; autoA2CAF736_i <= autoA2CAF736_n; autoA2CAF736_i += 1) {
        auto064F9E75_g = PlayerGroupActive();
        auto064F9E75_var = -1;
        while (true) {
            auto064F9E75_var = PlayerGroupNextPlayer(auto064F9E75_g, auto064F9E75_var);
            if (auto064F9E75_var < 0) { break; }
            if ((PlayerGetAlliance(UnitGetOwner(EventUnitCreatedUnit()), c_allianceIdChat, auto064F9E75_var) == true)) {
                MinimapPing(PlayerGroupSingle(auto064F9E75_var), UnitGetPosition(EventUnitCreatedUnit()), 0.5, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitCreatedUnit()), false)));
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnnouncePlayerqueenchoice_Init () {
    gt_AnnouncePlayerqueenchoice = TriggerCreate("gt_AnnouncePlayerqueenchoice_Func");
    TriggerAddEventUnitCreated(gt_AnnouncePlayerqueenchoice, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: YES or NO response to request of vision
//--------------------------------------------------------------------------------------------------
bool gt_YESorNOresponsetorequestofvision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_requestingVisionPlayerApprovedDisaprovved;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_playerVisionRequestYESButton[1]) || (EventDialogControl() == gv_playerVisionRequestYESButton[2]) || (EventDialogControl() == gv_playerVisionRequestYESButton[3]) || (EventDialogControl() == gv_playerVisionRequestYESButton[4]) || (EventDialogControl() == gv_playerVisionRequestYESButton[5]) || (EventDialogControl() == gv_playerVisionRequestYESButton[6]) || (EventDialogControl() == gv_playerVisionRequestNOButton[1]) || (EventDialogControl() == gv_playerVisionRequestNOButton[2]) || (EventDialogControl() == gv_playerVisionRequestNOButton[3]) || (EventDialogControl() == gv_playerVisionRequestNOButton[4]) || (EventDialogControl() == gv_playerVisionRequestNOButton[5]) || (EventDialogControl() == gv_playerVisionRequestNOButton[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventDialogControl() == gv_playerVisionRequestYESButton[1]) || (EventDialogControl() == gv_playerVisionRequestNOButton[1]))) {
        lv_requestingVisionPlayerApprovedDisaprovved = 1;
    }
    else if (((EventDialogControl() == gv_playerVisionRequestYESButton[2]) || (EventDialogControl() == gv_playerVisionRequestNOButton[2]))) {
        lv_requestingVisionPlayerApprovedDisaprovved = 2;
    }
    else if (((EventDialogControl() == gv_playerVisionRequestYESButton[3]) || (EventDialogControl() == gv_playerVisionRequestNOButton[3]))) {
        lv_requestingVisionPlayerApprovedDisaprovved = 3;
    }
    else if (((EventDialogControl() == gv_playerVisionRequestYESButton[4]) || (EventDialogControl() == gv_playerVisionRequestNOButton[4]))) {
        lv_requestingVisionPlayerApprovedDisaprovved = 4;
    }
    else if (((EventDialogControl() == gv_playerVisionRequestYESButton[5]) || (EventDialogControl() == gv_playerVisionRequestNOButton[5]))) {
        lv_requestingVisionPlayerApprovedDisaprovved = 5;
    }
    else if (((EventDialogControl() == gv_playerVisionRequestYESButton[6]) || (EventDialogControl() == gv_playerVisionRequestNOButton[6]))) {
        lv_requestingVisionPlayerApprovedDisaprovved = 6;
    }
    DialogSetVisible(gv_playerVisionRequestDialogForPlayer[lv_requestingVisionPlayerApprovedDisaprovved], PlayerGroupSingle(EventPlayer()), false);
    if (((EventDialogControl() == gv_playerVisionRequestYESButton[1]) || (EventDialogControl() == gv_playerVisionRequestYESButton[2]) || (EventDialogControl() == gv_playerVisionRequestYESButton[3]) || (EventDialogControl() == gv_playerVisionRequestYESButton[4]) || (EventDialogControl() == gv_playerVisionRequestYESButton[5]) || (EventDialogControl() == gv_playerVisionRequestYESButton[6]))) {
        PlayerSetAlliance(EventPlayer(), c_allianceIdVision, lv_requestingVisionPlayerApprovedDisaprovved, true);
        UIDisplayMessage(PlayerGroupSingle(lv_requestingVisionPlayerApprovedDisaprovved), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/43F42EED")));
        gv_playerSharedhisvisionwithPlayer[EventPlayer()][lv_requestingVisionPlayerApprovedDisaprovved] = true;
    }
    else {
        PlayerSetAlliance(EventPlayer(), c_allianceIdVision, lv_requestingVisionPlayerApprovedDisaprovved, false);
        UIDisplayMessage(PlayerGroupSingle(lv_requestingVisionPlayerApprovedDisaprovved), c_messageAreaChat, (TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/437CF06F")));
        gv_playerSharedhisvisionwithPlayer[EventPlayer()][lv_requestingVisionPlayerApprovedDisaprovved] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_YESorNOresponsetorequestofvision_Init () {
    gt_YESorNOresponsetorequestofvision = TriggerCreate("gt_YESorNOresponsetorequestofvision_Func");
    TriggerAddEventDialogControl(gt_YESorNOresponsetorequestofvision, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Request Vision Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksRequestVisionButton_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[2] lv_timerDialogItemLabel;
    int lv_timerIndex;
    playergroup lv_unDefeatedPlayers;

    // Automatic Variable Declarations
    playergroup autoB0E45CD9_g;
    int autoB0E45CD9_var;
    playergroup auto6CFC3DE4_g;
    int auto6CFC3DE4_var;
    const int auto2FC72458_ae = 120;
    const int auto2FC72458_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lv_timerDialogItemLabel[init_i] = c_invalidDialogControlId;
    }
    lv_unDefeatedPlayers = PlayerGroupActive();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_playerVisionRequestRequestVisionButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB0E45CD9_g = PlayerGroupActive();
    autoB0E45CD9_var = -1;
    while (true) {
        autoB0E45CD9_var = PlayerGroupNextPlayer(autoB0E45CD9_g, autoB0E45CD9_var);
        if (autoB0E45CD9_var < 0) { break; }
        if ((gv_playerDefeated[autoB0E45CD9_var] == true)) {
            PlayerGroupRemove(lv_unDefeatedPlayers, autoB0E45CD9_var);
        }

    }
    if ((gv_amountofVisionrequestsclickedbyplayerhaveleft[EventPlayer()] != 0)) {
        auto6CFC3DE4_g = lv_unDefeatedPlayers;
        auto6CFC3DE4_var = -1;
        while (true) {
            auto6CFC3DE4_var = PlayerGroupNextPlayer(auto6CFC3DE4_g, auto6CFC3DE4_var);
            if (auto6CFC3DE4_var < 0) { break; }
            if ((gv_playerSharedhisvisionwithPlayer[auto6CFC3DE4_var][EventPlayer()] == false) && (auto6CFC3DE4_var != EventPlayer())) {
                DialogSetVisible(gv_playerVisionRequestDialogForPlayer[EventPlayer()], PlayerGroupSingle(auto6CFC3DE4_var), true);
            }

        }
        gv_amountofVisionrequestsclickedbyplayerhaveleft[EventPlayer()] = (gv_amountofVisionrequestsclickedbyplayerhaveleft[EventPlayer()] - 1);
        DialogControlSetVisible(gv_playerVisionRequestRequestVisionButton, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_CreateDialogItemLabel(gv_playerVisionRequestRequestVisionDialogButton, 200, 50, c_anchorTop, 0, 10, StringToText(("<s val=\"Header18\"><c val=\"D3D3D3\">" + " Time Untill you can Request vision again" + "</c></s>")), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_timerDialogItemLabel[0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_playerVisionRequestRequestVisionDialogButton, 140, 80, c_anchorCenter, 0, 0, StringToText(("<s val=\"ArcadeFighterWarning\"><c val=\"D3D3D3\">" + IntToString((120 - lv_timerIndex)) + "</c></s>")), ColorWithAlpha(0,0,0,0), false, 2.0);
        lv_timerDialogItemLabel[1] = DialogControlLastCreated();
        lv_timerIndex = 0;
        for ( ; ( (auto2FC72458_ai >= 0 && lv_timerIndex <= auto2FC72458_ae) || (auto2FC72458_ai < 0 && lv_timerIndex >= auto2FC72458_ae) ) ; lv_timerIndex += auto2FC72458_ai ) {
            libNtve_gf_SetDialogItemText(lv_timerDialogItemLabel[1], StringToText(("<s val=\"ArcadeFighterWarning\"><c val=\"D3D3D3\">" + IntToString((120 - lv_timerIndex)) + "</c></s>")), PlayerGroupSingle(EventPlayer()));
            Wait(1.0, c_timeGame);
        }
        DialogControlSetVisible(lv_timerDialogItemLabel[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(lv_timerDialogItemLabel[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_playerVisionRequestRequestVisionButton, PlayerGroupSingle(EventPlayer()), true);
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaChat, ((((StringExternal("Param/Value/B5C01D38") + StringExternal("Param/Value/7390AFDC")) + IntToText(gv_amountofVisionrequestsclickedbyplayerhaveleft[EventPlayer()])) + StringExternal("Param/Value/B89490AD")) + StringExternal("Param/Value/D9AE3BD1")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksRequestVisionButton_Init () {
    gt_PlayerClicksRequestVisionButton = TriggerCreate("gt_PlayerClicksRequestVisionButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksRequestVisionButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player clicks DefeatManu Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerclicksDefeatManuButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defeatCountdown;
    int lv_defeatCountdownReverseCounter;
    int lv_defeatCountdownCounterDialogItem;

    // Automatic Variable Declarations
    const int auto57E34D18_ae = 10;
    const int auto57E34D18_ai = 1;
    playergroup auto5CDE29EA_g;
    int auto5CDE29EA_var;

    // Variable Initialization
    lv_defeatCountdownReverseCounter = 9;
    lv_defeatCountdownCounterDialogItem = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_endGameVisionDefeatMenuLeave) || (EventDialogControl() == gv_endGameVisionDefeatMenuWatch)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_playerDefeatedManuDialog[0], PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_playerDefeatedManuDialog[1], PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_endGameVisionDefeatMenuLeave)) {
        DialogSetPosition(gv_discordLinkDefeatScreen[EventPlayer()], c_anchorCenter, 0, 0);
        DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(EventPlayer()), false);
        gv_discordLinkDialogOpen[EventPlayer()] = false;
        gf_DialogCreateAEvo(64, 64, c_anchorCenter, 0, -50, false);
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 64, 64, c_anchorTopLeft, 0, 0, StringToText(""), gf_ReturnNumberAs64x64Image(lv_defeatCountdownReverseCounter), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        lv_defeatCountdownCounterDialogItem = DialogControlLastCreated();
        lv_defeatCountdown = 1;
        for ( ; ( (auto57E34D18_ai >= 0 && lv_defeatCountdown <= auto57E34D18_ae) || (auto57E34D18_ai < 0 && lv_defeatCountdown >= auto57E34D18_ae) ) ; lv_defeatCountdown += auto57E34D18_ai ) {
            Wait(1.0, c_timeGame);
            lv_defeatCountdownReverseCounter = (10 - lv_defeatCountdown);
            libNtve_gf_SetDialogItemImage(lv_defeatCountdownCounterDialogItem, gf_ReturnNumberAs64x64Image(lv_defeatCountdownReverseCounter), PlayerGroupSingle(EventPlayer()));
        }
        UnitKill(gv_endgameVisionUnitofplayer[EventPlayer()]);
        GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    }
    else if ((EventDialogControl() == gv_endGameVisionDefeatMenuWatch)) {
        gv_playerChoseToWatchthegame[EventPlayer()] = true;
        DialogSetVisible(gv_playerVisionRequestRequestVisionDialogButton, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_discordLinkDefeatScreen[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        auto5CDE29EA_g = gv_defeatedPlayersPlayerGruop;
        auto5CDE29EA_var = -1;
        while (true) {
            auto5CDE29EA_var = PlayerGroupNextPlayer(auto5CDE29EA_g, auto5CDE29EA_var);
            if (auto5CDE29EA_var < 0) { break; }
            PlayerSetAlliance(auto5CDE29EA_var, c_allianceIdVision, EventPlayer(), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerclicksDefeatManuButton_Init () {
    gt_PlayerclicksDefeatManuButton = TriggerCreate("gt_PlayerclicksDefeatManuButton_Func");
    TriggerAddEventDialogControl(gt_PlayerclicksDefeatManuButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update UGUIBar Trigger
//--------------------------------------------------------------------------------------------------
bool gt_UpdateUGUIBarTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA015D1BA_g;
    int autoA015D1BA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        autoA015D1BA_g = PlayerGroupActive();
        autoA015D1BA_var = -1;
        while (true) {
            autoA015D1BA_var = PlayerGroupNextPlayer(autoA015D1BA_g, autoA015D1BA_var);
            if (autoA015D1BA_var < 0) { break; }
            if (((gv_playerCustomGUIString[autoA015D1BA_var] == "Evolution") || (gv_playerCustomGUIString[autoA015D1BA_var] == "Custom")) && (gv_playerDefeated[autoA015D1BA_var] == false)) {
                gf_UpdateUGUIBar(autoA015D1BA_var);
            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateUGUIBarTrigger_Init () {
    gt_UpdateUGUIBarTrigger = TriggerCreate("gt_UpdateUGUIBarTrigger_Func");
    TriggerAddEventKeyPressed(gt_UpdateUGUIBarTrigger, c_playerAny, c_keyNumPad0, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UGUIBar When Clicked Move Camara to selected Unit Trigger
//--------------------------------------------------------------------------------------------------
bool gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_uGUIBarWhenClickedMoveCamaratoselectedUnitButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), UnitGetPosition(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1)), 0.5, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger_Init () {
    gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger = TriggerCreate("gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger_Func");
    TriggerAddEventDialogControl(gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu Toggle Button - Close Settings Menu
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenuToggleButtonCloseSettingsMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_settingsMenuToggleButton[0]) || (EventDialogControl() == gv_settingsMenuToggleButton[1]) || (EventDialogControl() == gv_settingsMenuToggleButton[2]) || (EventDialogControl() == gv_settingsMenuToggleButton[3]) || (EventDialogControl() == gv_settingsMenuToggleButton[4]) || (EventDialogControl() == gv_settingsMenuToggleButton[5]) || (EventDialogControl() == gv_settingsMenuToggleButton[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_settingsMenuOpen[EventPlayer()] == false)) {
        DialogSetVisible(gv_settingsMenu, PlayerGroupSingle(EventPlayer()), true);
        gv_settingsMenuOpen[EventPlayer()] = true;
        libNtve_gf_SetDialogItemToggled(gv_settingsMenuToggleButton[EventPlayer()], true, PlayerGroupSingle(EventPlayer()));
    }
    else {
        DialogSetVisible(gv_settingsMenu, PlayerGroupSingle(EventPlayer()), false);
        gv_settingsMenuOpen[EventPlayer()] = false;
        libNtve_gf_SetDialogItemToggled(gv_settingsMenuToggleButton[0], false, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenuToggleButtonCloseSettingsMenu_Init () {
    gt_SettingsMenuToggleButtonCloseSettingsMenu = TriggerCreate("gt_SettingsMenuToggleButtonCloseSettingsMenu_Func");
    TriggerAddEventDialogControl(gt_SettingsMenuToggleButtonCloseSettingsMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu Toggle red X - Close Settings Menu
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenuToggleredXCloseSettingsMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_settingsMenuredX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_settingsMenu, PlayerGroupSingle(EventPlayer()), false);
    gv_settingsMenuOpen[EventPlayer()] = false;
    libNtve_gf_SetDialogItemToggled(gv_settingsMenuToggleButton[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenuToggleredXCloseSettingsMenu_Init () {
    gt_SettingsMenuToggleredXCloseSettingsMenu = TriggerCreate("gt_SettingsMenuToggleredXCloseSettingsMenu_Func");
    TriggerAddEventDialogControl(gt_SettingsMenuToggleredXCloseSettingsMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu Toggle Esc - Close Settings Menu
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenuToggleEscCloseSettingsMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_settingsMenuOpen[EventPlayer()] == true)) {
        DialogSetVisible(gv_settingsMenu, PlayerGroupSingle(EventPlayer()), false);
        gv_settingsMenuOpen[EventPlayer()] = false;
        libNtve_gf_SetDialogItemToggled(gv_settingsMenuToggleButton[EventPlayer()], false, PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenuToggleEscCloseSettingsMenu_Init () {
    gt_SettingsMenuToggleEscCloseSettingsMenu = TriggerCreate("gt_SettingsMenuToggleEscCloseSettingsMenu_Func");
    TriggerAddEventKeyPressed(gt_SettingsMenuToggleEscCloseSettingsMenu, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu Hide Right Side Toggle - Close Settings Menu
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenuHideRightSideToggleCloseSettingsMenu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_settingsMenuHideRightSideButtons0Out1in[0]) || (EventDialogControl() == gv_settingsMenuHideRightSideButtons0Out1in[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/9FB7009D"));
    if ((EventDialogControl() == gv_settingsMenuHideRightSideButtons0Out1in[0])) {
        gv_settingsMenuHideRightSideButtonsHiddenForPlayer[EventPlayer()] = true;
    }
    else {
        gv_settingsMenuHideRightSideButtonsHiddenForPlayer[EventPlayer()] = false;
    }
    if ((gv_settingsMenuHideRightSideButtonsHiddenForPlayer[EventPlayer()] == true)) {
        DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[0], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_skinsDialogTogglebuttonDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_discordLinkCopyToggleDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ctrlGroup_ToggleDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_patchNotes_ToggleDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_statsToggleDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_toggleUIBarManu, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_settingsMenuHideRightSideButtons0Out1in[0], PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_skinsDialogTogglebuttonDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_discordLinkCopyToggleDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_ctrlGroup_ToggleDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_patchNotes_ToggleDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_statsToggleDialog, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_playerCustomGUIString[EventPlayer()] == "SC2GUI")) {
            DialogControlSetVisible(gv_toggleUIBarManu, PlayerGroupSingle(EventPlayer()), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenuHideRightSideToggleCloseSettingsMenu_Init () {
    gt_SettingsMenuHideRightSideToggleCloseSettingsMenu = TriggerCreate("gt_SettingsMenuHideRightSideToggleCloseSettingsMenu_Func");
    TriggerAddEventDialogControl(gt_SettingsMenuHideRightSideToggleCloseSettingsMenu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player ClickSettings Menu GUI Opt Buttons
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClickSettingsMenuGUIOptButtons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_customGUISC2GUI[0]) || (EventDialogControl() == gv_customGUISC2GUI[1]) || (EventDialogControl() == gv_customGUISC2GUI[2]) || (EventDialogControl() == gv_customGUISC2GUI[3]) || (EventDialogControl() == gv_customGUISC2GUI[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_customGUISC2GUI[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_customGUISC2GUI[0])) {
        gv_playerCustomGUIString[EventPlayer()] = "SC2GUI";
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E91D4A8B"));
    }
    else if ((EventDialogControl() == gv_customGUISC2GUI[1])) {
        gv_playerCustomGUIString[EventPlayer()] = "Evolution";
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/96AAAECC"));
    }
    else if ((EventDialogControl() == gv_customGUISC2GUI[2])) {
        gv_playerCustomGUIString[EventPlayer()] = "Clean";
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6E6E7507"));
    }
    else if ((EventDialogControl() == gv_customGUISC2GUI[3])) {
        gv_playerCustomGUIString[EventPlayer()] = "Minimal";
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3842BDF0"));
    }
    else if ((EventDialogControl() == gv_customGUISC2GUI[4])) {
        gv_playerCustomGUIString[EventPlayer()] = "Custom";
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/53D32980"));
    }
    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
    gf_MoveGUIItemstolocationsbasedontheplayerschoice(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClickSettingsMenuGUIOptButtons_Init () {
    gt_PlayerClickSettingsMenuGUIOptButtons = TriggerCreate("gt_PlayerClickSettingsMenuGUIOptButtons_Func");
    TriggerAddEventDialogControl(gt_PlayerClickSettingsMenuGUIOptButtons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Winrate % WInChance Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleWinrateWInChanceDialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_winrateWinChanceToggleButton[0]) || (EventDialogControl() == gv_winrateWinChanceToggleButton[1]) || (EventDialogControl() == gv_winrateWinChanceToggleButton[2]) || (EventDialogControl() == gv_winrateWinChanceToggleButton[3]) || (EventDialogControl() == gv_winrateWinChanceToggleButton[4]) || (EventDialogControl() == gv_winrateWinChanceToggleButton[5]) || (EventDialogControl() == gv_winrateWinChanceToggleButton[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Cocoon_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((gv_winrateWInChanceDialogOpen[EventPlayer()] == true)) {
        DialogSetVisible(gv_winrateWinChanceDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        gv_winrateWInChanceDialogOpen[EventPlayer()] = false;
    }
    else {
        DialogSetVisible(gv_winrateWinChanceDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        gv_winrateWInChanceDialogOpen[EventPlayer()] = true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleWinrateWInChanceDialog_Init () {
    gt_ToggleWinrateWInChanceDialog = TriggerCreate("gt_ToggleWinrateWInChanceDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleWinrateWInChanceDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player leaves - so update the winchance dialog
//--------------------------------------------------------------------------------------------------
bool gt_Playerleavessoupdatethewinchancedialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerswhohavethedialogopen;
    int lv_textX;
    int lv_textY;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerswhohavethedialogopen = PlayerGroupEmpty();
    lv_textX = 50;
    lv_textY = 50;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RecalculateMainWinchanceswinrates();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerleavessoupdatethewinchancedialog_Init () {
    gt_Playerleavessoupdatethewinchancedialog = TriggerCreate("gt_Playerleavessoupdatethewinchancedialog_Func");
    TriggerAddEventPlayerLeft(gt_Playerleavessoupdatethewinchancedialog, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Discord Link Dialog Toggle
//--------------------------------------------------------------------------------------------------
bool gt_DiscordLinkDialogToggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_discordLinkCopyToggleButton[1]) || (EventDialogControl() == gv_discordLinkCopyToggleButton[2]) || (EventDialogControl() == gv_discordLinkCopyToggleButton[3]) || (EventDialogControl() == gv_discordLinkCopyToggleButton[4]) || (EventDialogControl() == gv_discordLinkCopyToggleButton[5]) || (EventDialogControl() == gv_discordLinkCopyToggleButton[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("DiscordSound", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    if ((gv_discordLinkDialogOpen[EventPlayer()] == true)) {
        DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(EventPlayer()), false);
        gv_discordLinkDialogOpen[EventPlayer()] = false;
        libNtve_gf_SetDialogItemImage(gv_discordLinkCopyToggleButtonImage[EventPlayer()], "DiscordIconDark.tga", PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemEditorValue(gv_discordLinkCopyEditBox[EventPlayer()], "https://discord.gg/SZ3ekuK", PlayerGroupAll());
        DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(EventPlayer()), true);
        gv_discordLinkDialogOpen[EventPlayer()] = true;
        libNtve_gf_SetDialogItemImage(gv_discordLinkCopyToggleButtonImage[EventPlayer()], "DiscordIconLight.tga", PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiscordLinkDialogToggle_Init () {
    gt_DiscordLinkDialogToggle = TriggerCreate("gt_DiscordLinkDialogToggle_Func");
    TriggerAddEventDialogControl(gt_DiscordLinkDialogToggle, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Discord Link Dialog Toggle  By word
//--------------------------------------------------------------------------------------------------
bool gt_DiscordLinkDialogToggleByword_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("DiscordSound", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    libNtve_gf_SetDialogItemEditorValue(gv_discordLinkCopyEditBox[EventPlayer()], "https://discord.gg/SZ3ekuK", PlayerGroupAll());
    DialogSetVisible(gv_discordLinkCopyDialog, PlayerGroupSingle(EventPlayer()), true);
    gv_discordLinkDialogOpen[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiscordLinkDialogToggleByword_Init () {
    gt_DiscordLinkDialogToggleByword = TriggerCreate("gt_DiscordLinkDialogToggleByword_Func");
    TriggerAddEventChatMessage(gt_DiscordLinkDialogToggleByword, c_playerAny, "Discord", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Players Vote For Starting Food Amount
//--------------------------------------------------------------------------------------------------
bool gt_MakePlayersVoteForStartingFoodAmount_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoEB2A72B7_n = 14;
    int autoEB2A72B7_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StartVoteForStartingFoodAmount();
    for (autoEB2A72B7_i = 1; autoEB2A72B7_i <= autoEB2A72B7_n; autoEB2A72B7_i += 1) {
        if ((gv_foodVoteEnded == false)) {
            Wait(0.5, c_timeGame);
        }

    }
    gf_EndVoteForStartingFoodAmount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakePlayersVoteForStartingFoodAmount_Init () {
    gt_MakePlayersVoteForStartingFoodAmount = TriggerCreate("gt_MakePlayersVoteForStartingFoodAmount_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYER CLICK -Player Voted For Food Amount ----------------
//--------------------------------------------------------------------------------------------------
bool gt_PLAYERCLICKPlayerVotedForFoodAmount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_actualplayingplayers;
    int lv_amountOfPlayersWhoVoted;

    // Automatic Variable Declarations
    playergroup autoD300AD54_g;
    int autoD300AD54_var;
    playergroup autoD8F014B0_g;
    int autoD8F014B0_var;

    // Variable Initialization
    lv_actualplayingplayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_foodVoteButton150) || (EventDialogControl() == gv_foodVoteButton250) || (EventDialogControl() == gv_foodVoteButton350)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHasVotedForStartingFood[EventPlayer()] = true;
    autoD300AD54_g = PlayerGroupActive();
    autoD300AD54_var = -1;
    while (true) {
        autoD300AD54_var = PlayerGroupNextPlayer(autoD300AD54_g, autoD300AD54_var);
        if (autoD300AD54_var < 0) { break; }
        if ((PlayerType(autoD300AD54_var) != c_playerTypeComputer)) {
            PlayerGroupAdd(lv_actualplayingplayers, autoD300AD54_var);
        }

    }
    autoD8F014B0_g = lv_actualplayingplayers;
    autoD8F014B0_var = -1;
    while (true) {
        autoD8F014B0_var = PlayerGroupNextPlayer(autoD8F014B0_g, autoD8F014B0_var);
        if (autoD8F014B0_var < 0) { break; }
        if ((gv_playerHasVotedForStartingFood[autoD8F014B0_var] == true)) {
            lv_amountOfPlayersWhoVoted = (lv_amountOfPlayersWhoVoted + 1);
        }

    }
    if ((EventDialogControl() == gv_foodVoteButton150)) {
        gv_startingFoodAmountVoteOfPlayer[EventPlayer()] = "150";
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton150, true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton250, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton350, false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_foodVoteButton250)) {
        gv_startingFoodAmountVoteOfPlayer[EventPlayer()] = "250";
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton150, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton250, true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton350, false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_foodVoteButton350)) {
        gv_startingFoodAmountVoteOfPlayer[EventPlayer()] = "350";
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton150, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton250, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_foodVoteButton350, true, PlayerGroupSingle(EventPlayer()));
    }
    gf_CalculateVotesForStartingFoodAmount();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/60692CDC") + TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/80DB137C") + StringToText(gv_startingFoodAmountVoteOfPlayer[EventPlayer()])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/672A751E")));
    if ((PlayerGroupCount(lv_actualplayingplayers) == lv_amountOfPlayersWhoVoted)) {
        gf_EndVoteForStartingFoodAmount();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYERCLICKPlayerVotedForFoodAmount_Init () {
    gt_PLAYERCLICKPlayerVotedForFoodAmount = TriggerCreate("gt_PLAYERCLICKPlayerVotedForFoodAmount_Func");
    TriggerAddEventDialogControl(gt_PLAYERCLICKPlayerVotedForFoodAmount, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Players Vote For Game Mode
//--------------------------------------------------------------------------------------------------
bool gt_MakePlayersVoteForGameMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6E2F498B_n = 14;
    int auto6E2F498B_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateandStartVoteForGameMode();
    for (auto6E2F498B_i = 1; auto6E2F498B_i <= auto6E2F498B_n; auto6E2F498B_i += 1) {
        if ((gv_gameModeVoteEnded == false)) {
            Wait(0.5, c_timeGame);
        }

    }
    gf_EndVoteForGameMode();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakePlayersVoteForGameMode_Init () {
    gt_MakePlayersVoteForGameMode = TriggerCreate("gt_MakePlayersVoteForGameMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYER CLICK -Player Voted For Game Mode ----------------
//--------------------------------------------------------------------------------------------------
bool gt_PLAYERCLICKPlayerVotedForGameMode_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_actualplayingplayers;
    int lv_amountOfPlayersWhoVoted;

    // Automatic Variable Declarations
    playergroup autoF32C678F_g;
    int autoF32C678F_var;
    playergroup auto48F2394B_g;
    int auto48F2394B_var;

    // Variable Initialization
    lv_actualplayingplayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_gameModeVoteButtonCTF) || (EventDialogControl() == gv_gameModeVoteButtonNormal) || (EventDialogControl() == gv_gameModeVoteButtonNYI)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHasVotedForGameMode[EventPlayer()] = true;
    autoF32C678F_g = PlayerGroupActive();
    autoF32C678F_var = -1;
    while (true) {
        autoF32C678F_var = PlayerGroupNextPlayer(autoF32C678F_g, autoF32C678F_var);
        if (autoF32C678F_var < 0) { break; }
        if ((PlayerType(autoF32C678F_var) != c_playerTypeComputer)) {
            PlayerGroupAdd(lv_actualplayingplayers, autoF32C678F_var);
        }

    }
    auto48F2394B_g = lv_actualplayingplayers;
    auto48F2394B_var = -1;
    while (true) {
        auto48F2394B_var = PlayerGroupNextPlayer(auto48F2394B_g, auto48F2394B_var);
        if (auto48F2394B_var < 0) { break; }
        if ((gv_playerHasVotedForGameMode[auto48F2394B_var] == true)) {
            lv_amountOfPlayersWhoVoted = (lv_amountOfPlayersWhoVoted + 1);
        }

    }
    libNtve_gf_SetDialogItemToggled(gv_gameModeVoteButtonNormal, false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_gameModeVoteButtonCTF, false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_gameModeVoteButtonNYI, false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_gameModeVoteButtonCTF)) {
        gv_gameModeVoteOfPlayer[EventPlayer()] = "CTF";
        libNtve_gf_SetDialogItemToggled(gv_gameModeVoteButtonCTF, true, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_gameModeVoteButtonNormal)) {
        gv_gameModeVoteOfPlayer[EventPlayer()] = "Normal";
        libNtve_gf_SetDialogItemToggled(gv_gameModeVoteButtonNormal, true, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_gameModeVoteButtonNYI)) {
        gv_gameModeVoteOfPlayer[EventPlayer()] = "NYI";
        gv_gameModeVoteOfPlayer[EventPlayer()] = "Normal";
        libNtve_gf_SetDialogItemToggled(gv_gameModeVoteButtonNYI, true, PlayerGroupSingle(EventPlayer()));
    }
    gf_CalculateVotesForGameMode();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/8665F5D5") + TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/D0EC9350") + StringToText(gv_gameModeVoteOfPlayer[EventPlayer()])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/9AEF4CC7")));
    if ((PlayerGroupCount(lv_actualplayingplayers) == lv_amountOfPlayersWhoVoted)) {
        gf_EndVoteForGameMode();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYERCLICKPlayerVotedForGameMode_Init () {
    gt_PLAYERCLICKPlayerVotedForGameMode = TriggerCreate("gt_PLAYERCLICKPlayerVotedForGameMode_Func");
    TriggerAddEventDialogControl(gt_PLAYERCLICKPlayerVotedForGameMode, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player A Clicked MapGenVote Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerAClickedMapGenVoteButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_actualplayingplayers;
    int lv_amountOfPlayersWhoVoted;

    // Automatic Variable Declarations
    playergroup auto8C6EBA8D_g;
    int auto8C6EBA8D_var;
    playergroup auto5EC7337B_g;
    int auto5EC7337B_var;

    // Variable Initialization
    lv_actualplayingplayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_randomMapGenVoteItem[0]) || (EventDialogControl() == gv_standardMapGenVoteItem[0]) || (EventDialogControl() == gv_invertedMapGenVoteItem[0]) || (EventDialogControl() == gv_islandsMapGenVoteItem[0]) || (EventDialogControl() == gv_pondMapGenVoteItem[0]) || (EventDialogControl() == gv_donutMapGenVoteItem[0]) || (EventDialogControl() == gv_riverMapGenVoteItem[0]) || (EventDialogControl() == gv_cavesMapGenVoteItem[0]) || (EventDialogControl() == gv_crossMapGenVoteItem[0]) || (EventDialogControl() == gv_streamsMapGenVoteItem[0]) || (EventDialogControl() == gv_yinYangMapGenVoteItem[0]) || (EventDialogControl() == gv_houseMapGenVoteItem[0]) || (EventDialogControl() == gv_cloverleafMapGenVoteItem[0]) || (EventDialogControl() == gv_gatesMapGenVoteItem[0]) || (EventDialogControl() == gv_pillarsMapGenVoteItem[0]) || (EventDialogControl() == gv_labyrinthMapGenVoteItem[0]) || (EventDialogControl() == gv_clockMapGenVoteItem[0]) || (EventDialogControl() == gv_pizzaMapGenVoteItem[0]) || (EventDialogControl() == gv_radioactiveMapGenVoteItem[0]) || (EventDialogControl() == gv_stripesMapGenVoteItem[0]) || (EventDialogControl() == gv_hexMapGenVoteItem[0]) || (EventDialogControl() == gv_octagonMapGenVoteItem[0]) || (EventDialogControl() == gv_pongMapGenVoteItem[0]) || (EventDialogControl() == gv_wheelMapGenVoteItem[0]) || (EventDialogControl() == gv_rubberWheelMapGenVoteItem[0]) || (EventDialogControl() == gv_chambersMapGenVoteItem[0]) || (EventDialogControl() == gv_hourglassMapGenVoteItem[0]) || (EventDialogControl() == gv_bunkerMapGenVoteItem[0]) || (EventDialogControl() == gv_heartbeatMapGenVoteItem[0]) || (EventDialogControl() == gv_cheeseMapGenVoteItem[0]) || (EventDialogControl() == gv_chipMapGenVoteItem[0]) || (EventDialogControl() == gv_antFarmMapGenVoteItem[0]) || (EventDialogControl() == gv_duelCircleMapGenVoteItem[0]) || (EventDialogControl() == gv_openWheelMapGenVoteItem[0]) || (EventDialogControl() == gv_threatMapGenVoteItem[0]) || (EventDialogControl() == gv_eyeMapGenVoteItem[0]) || (EventDialogControl() == gv_compassMapGenVoteItem[0]) || (EventDialogControl() == gv_chokeMapGenVoteItem[0]) || (EventDialogControl() == gv_teardropMapGenVoteItem[0]) || (EventDialogControl() == gv_ravineMapGenVoteItem[0]) || (EventDialogControl() == gv_twirlMapGenVoteItem[0]) || (EventDialogControl() == gv_invertedChokeMapGenVoteItem[0])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHasVotedForMapLayout[EventPlayer()] = true;
    auto8C6EBA8D_g = PlayerGroupActive();
    auto8C6EBA8D_var = -1;
    while (true) {
        auto8C6EBA8D_var = PlayerGroupNextPlayer(auto8C6EBA8D_g, auto8C6EBA8D_var);
        if (auto8C6EBA8D_var < 0) { break; }
        if ((PlayerType(auto8C6EBA8D_var) != c_playerTypeComputer)) {
            PlayerGroupAdd(lv_actualplayingplayers, auto8C6EBA8D_var);
        }

    }
    auto5EC7337B_g = lv_actualplayingplayers;
    auto5EC7337B_var = -1;
    while (true) {
        auto5EC7337B_var = PlayerGroupNextPlayer(auto5EC7337B_g, auto5EC7337B_var);
        if (auto5EC7337B_var < 0) { break; }
        if ((gv_playerHasVotedForMapLayout[auto5EC7337B_var] == true)) {
            lv_amountOfPlayersWhoVoted = (lv_amountOfPlayersWhoVoted + 1);
        }

    }
    libNtve_gf_SetDialogItemToggled(gv_randomMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_standardMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_invertedMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_islandsMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_pondMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_donutMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_riverMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_cavesMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_crossMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_crossMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_streamsMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_yinYangMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_houseMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_cloverleafMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_gatesMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_pillarsMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_labyrinthMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_clockMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_pizzaMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_radioactiveMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_stripesMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_hexMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_octagonMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_pongMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_wheelMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_rubberWheelMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_chambersMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_hourglassMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_bunkerMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_heartbeatMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_cheeseMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_chipMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_antFarmMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_duelCircleMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_openWheelMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_threatMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_eyeMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_compassMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_chokeMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_teardropMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_ravineMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_twirlMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_invertedChokeMapGenVoteItem[0], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_randomMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Random";
    }
    else if ((EventDialogControl() == gv_standardMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Standard";
    }
    else if ((EventDialogControl() == gv_invertedMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Inverted";
    }
    else if ((EventDialogControl() == gv_islandsMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Islands";
    }
    else if ((EventDialogControl() == gv_pondMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Pond";
    }
    else if ((EventDialogControl() == gv_donutMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Donut";
    }
    else if ((EventDialogControl() == gv_riverMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "River";
    }
    else if ((EventDialogControl() == gv_cavesMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Caves";
    }
    else if ((EventDialogControl() == gv_crossMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Cross";
    }
    else if ((EventDialogControl() == gv_streamsMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Streams";
    }
    else if ((EventDialogControl() == gv_yinYangMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Yin Yang";
    }
    else if ((EventDialogControl() == gv_houseMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "House";
    }
    else if ((EventDialogControl() == gv_cloverleafMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Cloverleaf";
    }
    else if ((EventDialogControl() == gv_gatesMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Gates";
    }
    else if ((EventDialogControl() == gv_pillarsMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Pillars";
    }
    else if ((EventDialogControl() == gv_labyrinthMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Labyrinth";
    }
    else if ((EventDialogControl() == gv_clockMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Clock";
    }
    else if ((EventDialogControl() == gv_pizzaMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Pizza";
    }
    else if ((EventDialogControl() == gv_radioactiveMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Radioactive";
    }
    else if ((EventDialogControl() == gv_stripesMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Stripes";
    }
    else if ((EventDialogControl() == gv_hexMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Hex";
    }
    else if ((EventDialogControl() == gv_octagonMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Octagon";
    }
    else if ((EventDialogControl() == gv_pongMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Pong";
    }
    else if ((EventDialogControl() == gv_wheelMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Wheel";
    }
    else if ((EventDialogControl() == gv_rubberWheelMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Rubber Wheel";
    }
    else if ((EventDialogControl() == gv_chambersMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Chambers";
    }
    else if ((EventDialogControl() == gv_hourglassMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Hourglass";
    }
    else if ((EventDialogControl() == gv_bunkerMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Bunker";
    }
    else if ((EventDialogControl() == gv_heartbeatMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Heartbeat";
    }
    else if ((EventDialogControl() == gv_cheeseMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Cheese";
    }
    else if ((EventDialogControl() == gv_chipMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Chip";
    }
    else if ((EventDialogControl() == gv_antFarmMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "AntFarm";
    }
    else if ((EventDialogControl() == gv_duelCircleMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "DuelCircle";
    }
    else if ((EventDialogControl() == gv_openWheelMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Open Wheel";
    }
    else if ((EventDialogControl() == gv_threatMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Threat";
    }
    else if ((EventDialogControl() == gv_eyeMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Eye";
    }
    else if ((EventDialogControl() == gv_compassMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Compass";
    }
    else if ((EventDialogControl() == gv_chokeMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Choke";
    }
    else if ((EventDialogControl() == gv_teardropMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Teardrop";
    }
    else if ((EventDialogControl() == gv_ravineMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Ravine";
    }
    else if ((EventDialogControl() == gv_twirlMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "Twirl";
    }
    else if ((EventDialogControl() == gv_invertedChokeMapGenVoteItem[0])) {
        gv_voteOfPlayerInMapGenVote[EventPlayer()] = "InvertedChoke";
    }
    gf_CalculateMapGenVoteVotes();
    DialogControlSetVisible(gv_invertedChokeMapGenVoteItem[1], PlayerGroupActive(), false);
    libNtve_gf_SetDialogItemImage(gv_randomMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_randomMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_standardMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_standardMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_invertedMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_invertedMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_islandsMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_islandsMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_pondMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_pondMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_donutMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_donutMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_riverMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_riverMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_cavesMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_cavesMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_crossMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_crossMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_streamsMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_streamsMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_yinYangMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_yinYangMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_houseMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_houseMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_cloverleafMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_cloverleafMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_gatesMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_gatesMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_pillarsMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_pillarsMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_labyrinthMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_laybrinthMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_clockMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_clockMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_pizzaMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_pizzaMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_radioactiveMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_radioactiveMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_stripesMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_stripesMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_hexMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_hexMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_octagonMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_octagonMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_pongMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_pongMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_wheelMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_wheelMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_rubberWheelMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_rubberWheelMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_chambersMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_chambersMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_hourglassMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_hourglassMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_bunkerMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_bunkerMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_heartbeatMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_heartbeatMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_cheeseMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_cheeseMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_chipMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_chipMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_antFarmMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_antFarmMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_duelCircleMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_duelCircleMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_openWheelMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_openWheelMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_eyeMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_eyeMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_compassMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_compassMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_chokeMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_chokeMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_teardropMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_tearDropMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_ravineMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_ravineMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_twirlMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_twirlMapGenVoteVotes), PlayerGroupActive());
    libNtve_gf_SetDialogItemImage(gv_invertedChokeMapGenVoteItem[1], gf_ReturnNumberAs64x64Image(gv_invertedChokeMapGenVoteVotes), PlayerGroupActive());
    DialogControlSetVisible(gv_invertedChokeMapGenVoteItem[1], PlayerGroupActive(), true);
    if ((PlayerGroupCount(lv_actualplayingplayers) == lv_amountOfPlayersWhoVoted)) {
        gf_EndVoteForMapLayout();
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/75CA9A03") + TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/6671E3A3") + StringToText(gv_voteOfPlayerInMapGenVote[EventPlayer()])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/8B47CBF6")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerAClickedMapGenVoteButton_Init () {
    gt_PlayerAClickedMapGenVoteButton = TriggerCreate("gt_PlayerAClickedMapGenVoteButton_Func");
    TriggerAddEventDialogControl(gt_PlayerAClickedMapGenVoteButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Players Vote For Map Pool
//--------------------------------------------------------------------------------------------------
bool gt_MakePlayersVoteForMapPool_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto31A7B19F_n = 14;
    int auto31A7B19F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((GameAttributeGameValue("[bnet:local/0.0/273101]2") == "0003"))) {
        gv_generateRandomMap = true;
    }

    if ((gv_generateRandomMap == true)) {
        gf_StartVoteForMapPool();
        for (auto31A7B19F_i = 1; auto31A7B19F_i <= auto31A7B19F_n; auto31A7B19F_i += 1) {
            if ((gv_mapPoolVoteEnded == false)) {
                Wait(0.5, c_timeGame);
            }

        }
        gf_EndVoteForMapPool();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakePlayersVoteForMapPool_Init () {
    gt_MakePlayersVoteForMapPool = TriggerCreate("gt_MakePlayersVoteForMapPool_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYER CLICK - Player Voted For Map Pool ----------------
//--------------------------------------------------------------------------------------------------
bool gt_PLAYERCLICKPlayerVotedForMapPool_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_actualplayingplayers;
    int lv_amountOfPlayersWhoVoted;

    // Automatic Variable Declarations
    playergroup auto0472B7C0_g;
    int auto0472B7C0_var;
    playergroup auto96E76797_g;
    int auto96E76797_var;

    // Variable Initialization
    lv_actualplayingplayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_mapPoolIncludeDynamic) || (EventDialogControl() == gv_mapPoolDontIncludeDynamic)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHasVotedForMapPool[EventPlayer()] = true;
    auto0472B7C0_g = PlayerGroupActive();
    auto0472B7C0_var = -1;
    while (true) {
        auto0472B7C0_var = PlayerGroupNextPlayer(auto0472B7C0_g, auto0472B7C0_var);
        if (auto0472B7C0_var < 0) { break; }
        if ((PlayerType(auto0472B7C0_var) != c_playerTypeComputer)) {
            PlayerGroupAdd(lv_actualplayingplayers, auto0472B7C0_var);
        }

    }
    auto96E76797_g = lv_actualplayingplayers;
    auto96E76797_var = -1;
    while (true) {
        auto96E76797_var = PlayerGroupNextPlayer(auto96E76797_g, auto96E76797_var);
        if (auto96E76797_var < 0) { break; }
        if ((gv_playerHasVotedForMapPool[auto96E76797_var] == true)) {
            lv_amountOfPlayersWhoVoted = (lv_amountOfPlayersWhoVoted + 1);
        }

    }
    if ((EventDialogControl() == gv_mapPoolIncludeDynamic)) {
        gv_mapPoolVoteOfPlayer[EventPlayer()] = "DynYes";
        libNtve_gf_SetDialogItemToggled(gv_mapPoolIncludeDynamic, true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_mapPoolDontIncludeDynamic, false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_mapPoolDontIncludeDynamic)) {
        gv_mapPoolVoteOfPlayer[EventPlayer()] = "DynNo";
        libNtve_gf_SetDialogItemToggled(gv_mapPoolIncludeDynamic, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_mapPoolDontIncludeDynamic, true, PlayerGroupSingle(EventPlayer()));
    }
    gf_CalculateVotesForMapPool();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/2D009D6F") + TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/536C5A34") + StringToText(gv_mapPoolVoteOfPlayer[EventPlayer()])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/B530D43A")));
    if ((PlayerGroupCount(lv_actualplayingplayers) == lv_amountOfPlayersWhoVoted)) {
        gf_EndVoteForMapPool();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYERCLICKPlayerVotedForMapPool_Init () {
    gt_PLAYERCLICKPlayerVotedForMapPool = TriggerCreate("gt_PLAYERCLICKPlayerVotedForMapPool_Func");
    TriggerAddEventDialogControl(gt_PLAYERCLICKPlayerVotedForMapPool, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make Players Vote For Random Queen
//--------------------------------------------------------------------------------------------------
bool gt_MakePlayersVoteForRandomQueen_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE053466B_n = 14;
    int autoE053466B_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_StartVoteForRandomQueen();
    for (autoE053466B_i = 1; autoE053466B_i <= autoE053466B_n; autoE053466B_i += 1) {
        if ((gv_randomQueenVoteEnded == false)) {
            Wait(0.5, c_timeGame);
        }

    }
    gf_EndVoteForRandomQueen();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakePlayersVoteForRandomQueen_Init () {
    gt_MakePlayersVoteForRandomQueen = TriggerCreate("gt_MakePlayersVoteForRandomQueen_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: PLAYER CLICK - Player Voted For Random Queen ----------------
//--------------------------------------------------------------------------------------------------
bool gt_PLAYERCLICKPlayerVotedForRandomQueen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_actualplayingplayers;
    int lv_amountOfPlayersWhoVoted;

    // Automatic Variable Declarations
    playergroup auto8AF0A92B_g;
    int auto8AF0A92B_var;
    playergroup auto4B82479E_g;
    int auto4B82479E_var;

    // Variable Initialization
    lv_actualplayingplayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_forcePlayerstopickRandomQueen) || (EventDialogControl() == gv_dontForceplayerstopickRandomQueen)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerHasVotedForRandomQueen[EventPlayer()] = true;
    auto8AF0A92B_g = PlayerGroupActive();
    auto8AF0A92B_var = -1;
    while (true) {
        auto8AF0A92B_var = PlayerGroupNextPlayer(auto8AF0A92B_g, auto8AF0A92B_var);
        if (auto8AF0A92B_var < 0) { break; }
        if ((PlayerType(auto8AF0A92B_var) != c_playerTypeComputer)) {
            PlayerGroupAdd(lv_actualplayingplayers, auto8AF0A92B_var);
        }

    }
    auto4B82479E_g = lv_actualplayingplayers;
    auto4B82479E_var = -1;
    while (true) {
        auto4B82479E_var = PlayerGroupNextPlayer(auto4B82479E_g, auto4B82479E_var);
        if (auto4B82479E_var < 0) { break; }
        if ((gv_playerHasVotedForRandomQueen[auto4B82479E_var] == true)) {
            lv_amountOfPlayersWhoVoted = (lv_amountOfPlayersWhoVoted + 1);
        }

    }
    if ((EventDialogControl() == gv_forcePlayerstopickRandomQueen)) {
        gv_randomQueenVoteOfPlayer[EventPlayer()] = "ForceRandom";
        libNtve_gf_SetDialogItemToggled(gv_forcePlayerstopickRandomQueen, true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_dontForceplayerstopickRandomQueen, false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_dontForceplayerstopickRandomQueen)) {
        gv_randomQueenVoteOfPlayer[EventPlayer()] = "LetPick";
        libNtve_gf_SetDialogItemToggled(gv_forcePlayerstopickRandomQueen, false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_dontForceplayerstopickRandomQueen, true, PlayerGroupSingle(EventPlayer()));
    }
    gf_CalculateVotesForRandomQueen();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, (StringExternal("Param/Value/1DF62B7A") + TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/3C18B818") + StringToText(gv_randomQueenVoteOfPlayer[EventPlayer()])), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))) + StringExternal("Param/Value/A63BF1B6")));
    if ((PlayerGroupCount(lv_actualplayingplayers) == lv_amountOfPlayersWhoVoted)) {
        gf_EndVoteForRandomQueen();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PLAYERCLICKPlayerVotedForRandomQueen_Init () {
    gt_PLAYERCLICKPlayerVotedForRandomQueen = TriggerCreate("gt_PLAYERCLICKPlayerVotedForRandomQueen_Func");
    TriggerAddEventDialogControl(gt_PLAYERCLICKPlayerVotedForRandomQueen, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle UI Bar Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleUIBarManu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_toggleUIBarManu))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_toggleUIManuforplayerisiropen[EventPlayer()] == true)) {
        gv_toggleUIManuforplayerisiropen[EventPlayer()] = false;
        DialogSetVisible(gv_playerUIBarManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
    }
    else {
        gv_toggleUIManuforplayerisiropen[EventPlayer()] = true;
        DialogSetVisible(gv_playerUIBarManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
    }
    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_skinsDialogOpen[EventPlayer()] == true)) {
        gv_skinsDialogOpen[EventPlayer()] = false;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleUIBarManu_Init () {
    gt_ToggleUIBarManu = TriggerCreate("gt_ToggleUIBarManu_Func");
    TriggerAddEventDialogControl(gt_ToggleUIBarManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set UI Bar based on player Choice
//--------------------------------------------------------------------------------------------------
bool gt_SetUIBarbasedonplayerChoice_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA46AF879_g;
    int autoA46AF879_var;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_playerUIButtonManuDialogItem[1]) || (EventDialogControl() == gv_playerUIButtonManuDialogItem[2]) || (EventDialogControl() == gv_playerUIButtonManuDialogItem[3]) || (EventDialogControl() == gv_playerUIButtonManuDialogItem[4]) || (EventDialogControl() == gv_playerUIButtonManuDialogItem[5]) || (EventDialogControl() == gv_playerUIButtonManuDialogItem[6]) || (EventDialogControl() == gv_playerUIButtonManuDialogItem[7])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_playerUIImageDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[1])) {
        gv_playerUIChoice[EventPlayer()] = "Default";
        DialogControlSetVisible(gv_playerUIImageDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[2])) {
        gv_playerUIChoice[EventPlayer()] = "DAGGART";
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[3])) {
        gv_playerUIChoice[EventPlayer()] = "CharHybrid";
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[4])) {
        gv_playerUIChoice[EventPlayer()] = "Jungle";
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[5])) {
        gv_playerUIChoice[EventPlayer()] = "Obsidian";
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[6])) {
        gv_playerUIChoice[EventPlayer()] = "Loxley";
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], false, PlayerGroupSingle(EventPlayer()));
    }
    else if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[7])) {
        gv_playerUIChoice[EventPlayer()] = "Acid Green";
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[1], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[2], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[3], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[4], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[5], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[6], false, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemToggled(gv_playerUIButtonManuDialogItem[7], true, PlayerGroupSingle(EventPlayer()));
    }
    if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[1])) {
        DialogControlSetVisible(gv_playerUIImageDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    libNtve_gf_CreateDialogItemImage(gv_playerUIBarDialog, 2135, 1210, c_anchorCenter, 0, 0, StringToText(""), gf_UIBarofPlayer(gv_playerUIChoice[EventPlayer()]), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    autoA46AF879_g = PlayerGroupActive();
    autoA46AF879_var = -1;
    while (true) {
        autoA46AF879_var = PlayerGroupNextPlayer(autoA46AF879_g, autoA46AF879_var);
        if (autoA46AF879_var < 0) { break; }
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoA46AF879_var), false);
    }
    gv_playerUIImageDialog[EventPlayer()] = DialogControlLastCreated();
    if ((gv_playerCustomGUIString[EventPlayer()] == "SC2GUI")) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }

    if ((EventDialogControl() == gv_playerUIButtonManuDialogItem[1])) {
        DialogControlSetVisible(gv_playerUIImageDialog[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetUIBarbasedonplayerChoice_Init () {
    gt_SetUIBarbasedonplayerChoice = TriggerCreate("gt_SetUIBarbasedonplayerChoice_Func");
    TriggerAddEventDialogControl(gt_SetUIBarbasedonplayerChoice, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Skins manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSkinsmanu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_skinsDialogToggleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_skinsDialogOpen[EventPlayer()] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SkinsMenuOpen", 0);
        gv_skinsDialogOpen[EventPlayer()] = false;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SkinsMenuOpen", 1);
        gv_skinsDialogOpen[EventPlayer()] = true;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_queenSwapModelManuButtonModel[EventPlayer()], gf_TurnQueenSwapModelStringIntoUnitEntry(gv_queenSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_toggleUIManuforplayerisiropen[EventPlayer()] == true)) {
        gv_toggleUIManuforplayerisiropen[EventPlayer()] = false;
        DialogSetVisible(gv_playerUIBarManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
    }

    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSkinsmanu_Init () {
    gt_ToggleSkinsmanu = TriggerCreate("gt_ToggleSkinsmanu_Func");
    TriggerAddEventDialogControl(gt_ToggleSkinsmanu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skins Manu Button X
//--------------------------------------------------------------------------------------------------
bool gt_SkinsManuButtonX_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_skinsManuButtonX))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_skinsDialogOpen[EventPlayer()] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SkinsMenuOpen", 0);
        gv_skinsDialogOpen[EventPlayer()] = false;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_skinsDialogToggleButton, false, PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkinsManuButtonX_Init () {
    gt_SkinsManuButtonX = TriggerCreate("gt_SkinsManuButtonX_Func");
    TriggerAddEventDialogControl(gt_SkinsManuButtonX, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Skins Button Close
//--------------------------------------------------------------------------------------------------
bool gt_UnitSkinsButtonClose_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_skinsDialogOpen[EventPlayer()] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SkinsMenuOpen", 0);
        gv_skinsDialogOpen[EventPlayer()] = false;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_skinsDialogToggleButton, false, PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitSkinsButtonClose_Init () {
    gt_UnitSkinsButtonClose = TriggerCreate("gt_UnitSkinsButtonClose_Func");
    TriggerAddEventUnitAbility(gt_UnitSkinsButtonClose, null, AbilityCommand("CloseSkinsMenu", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Skins Button Open
//--------------------------------------------------------------------------------------------------
bool gt_UnitSkinsButtonOpen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto21AD3DDC_g;
    int auto21AD3DDC_var;
    playergroup autoC9002F9D_g;
    int autoC9002F9D_var;
    playergroup auto140D4D1C_g;
    int auto140D4D1C_var;
    playergroup auto527A4F08_g;
    int auto527A4F08_var;
    playergroup auto26328171_g;
    int auto26328171_var;
    playergroup auto803D4EA2_g;
    int auto803D4EA2_var;
    playergroup auto0C6944DD_g;
    int auto0C6944DD_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_skinsDialogOpen[EventPlayer()] == false)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SkinsMenuOpen", 1);
        gv_skinsDialogOpen[EventPlayer()] = true;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(gv_skinsDialogToggleButton, true, PlayerGroupSingle(EventPlayer()));
        if ((UnitGetType(EventUnit()) == "NewWorkerNest")) {
            gf_UnlockWorkersIfConditionsaremet(EventPlayer());
            gf_IfUnitSkinSelectionManuIsOpenCloseit();
            if ((gv_workersSwapModelManuOpen[EventPlayer()] == true)) {
                gv_workersSwapModelManuOpen[EventPlayer()] = false;
                DialogSetVisible(gv_workerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                auto21AD3DDC_g = PlayerGroupActive();
                auto21AD3DDC_var = -1;
                while (true) {
                    auto21AD3DDC_var = PlayerGroupNextPlayer(auto21AD3DDC_g, auto21AD3DDC_var);
                    if (auto21AD3DDC_var < 0) { break; }
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                }
            }
            else {
                gv_workersSwapModelManuOpen[EventPlayer()] = true;
                DialogSetVisible(gv_workerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemUnitLink(gv_workerSwapModelManuButtonModel[EventPlayer()], gf_TurnWorkerSwapModelStringIntoUnitEntry(gv_workerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedMacerator[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedRemastered[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedHologram[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_workerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
        }
        else if ((UnitGetType(EventUnit()) == "NewSoldierNest")) {
            gf_UnlockSoldiersIfConditionsaremet(EventPlayer());
            gf_IfUnitSkinSelectionManuIsOpenCloseit();
            if ((gv_soldiersSwapModelManuOpen[EventPlayer()] == true)) {
                gv_soldiersSwapModelManuOpen[EventPlayer()] = false;
                DialogSetVisible(gv_soldierSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                autoC9002F9D_g = PlayerGroupActive();
                autoC9002F9D_var = -1;
                while (true) {
                    autoC9002F9D_var = PlayerGroupNextPlayer(autoC9002F9D_g, autoC9002F9D_var);
                    if (autoC9002F9D_var < 0) { break; }
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                }
            }
            else {
                gv_soldiersSwapModelManuOpen[EventPlayer()] = true;
                DialogSetVisible(gv_soldierSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                libNtve_gf_SetDialogItemUnitLink(gv_soldierSwapModelManuButtonModel[EventPlayer()], gf_TurnSoldierSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_soldierSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_soldierSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_soldierSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
            if ((gv_soldierSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
            }
        }
        else if (((UnitGetType(EventUnit()) == "UltraliskCavern") || (UnitGetType(EventUnit()) == "StingerNest") || (UnitGetType(EventUnit()) == "AcidSprayerNest") || (UnitGetType(EventUnit()) == "TunnelTremblerNest") || (UnitGetType(EventUnit()) == "KhepriNest"))) {
            if ((UnitGetType(EventUnit()) == "UltraliskCavern")) {
                gf_UnlockMajorIfConditionsaremet(EventPlayer());
                gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
                if ((gv_majorsSwapModelManuOpen[EventPlayer()] == true)) {
                    gv_majorsSwapModelManuOpen[EventPlayer()] = false;
                    DialogSetVisible(gv_majorSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                    auto140D4D1C_g = PlayerGroupActive();
                    auto140D4D1C_var = -1;
                    while (true) {
                        auto140D4D1C_var = PlayerGroupNextPlayer(auto140D4D1C_g, auto140D4D1C_var);
                        if (auto140D4D1C_var < 0) { break; }
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    }
                }
                else {
                    gv_majorsSwapModelManuOpen[EventPlayer()] = true;
                    DialogSetVisible(gv_majorSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemUnitLink(gv_majorSwapModelManuButtonModel[EventPlayer()], gf_TurnMajorSwapModelStringIntoUnitEntry(EventPlayer(), gv_majorSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_majorSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_majorSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_majorSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_majorSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
            }
            else if ((UnitGetType(EventUnit()) == "StingerNest")) {
                gf_UnlockStingerIfConditionsaremet(EventPlayer());
                gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
                if ((gv_stingersSwapModelManuOpen[EventPlayer()] == true)) {
                    gv_stingersSwapModelManuOpen[EventPlayer()] = false;
                    DialogSetVisible(gv_stingerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                    auto527A4F08_g = PlayerGroupActive();
                    auto527A4F08_var = -1;
                    while (true) {
                        auto527A4F08_var = PlayerGroupNextPlayer(auto527A4F08_g, auto527A4F08_var);
                        if (auto527A4F08_var < 0) { break; }
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    }
                }
                else {
                    gv_stingersSwapModelManuOpen[EventPlayer()] = true;
                    DialogSetVisible(gv_stingerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemUnitLink(gv_stingerSwapModelManuButtonModel[EventPlayer()], gf_TurnStingerSwapModelStringIntoUnitEntry(EventPlayer(), gv_stingerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_stingerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_stingerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_stingerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_stingerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
            }
            else if ((UnitGetType(EventUnit()) == "AcidSprayerNest")) {
                gf_UnlockAcidSprayerIfConditionsaremet(EventPlayer());
                gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
                if ((gv_acidSprayersSwapModelManuOpen[EventPlayer()] == true)) {
                    gv_acidSprayersSwapModelManuOpen[EventPlayer()] = false;
                    DialogSetVisible(gv_acidSprayerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                    auto26328171_g = PlayerGroupActive();
                    auto26328171_var = -1;
                    while (true) {
                        auto26328171_var = PlayerGroupNextPlayer(auto26328171_g, auto26328171_var);
                        if (auto26328171_var < 0) { break; }
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    }
                }
                else {
                    gv_acidSprayersSwapModelManuOpen[EventPlayer()] = true;
                    DialogSetVisible(gv_acidSprayerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemUnitLink(gv_acidSprayerSwapModelManuButtonModel[EventPlayer()], gf_TurnAcidSprayerSwapModelStringIntoUnitEntry(EventPlayer(), gv_acidSprayerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_acidSprayerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_acidSprayerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_acidSprayerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_acidSprayerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
            }
            else if ((UnitGetType(EventUnit()) == "TunnelTremblerNest")) {
                gf_UnlockTunnelTremblerIfConditionsaremet(EventPlayer());
                gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
                if ((gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] == true)) {
                    gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] = false;
                    DialogSetVisible(gv_tunnelTremblerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                    auto803D4EA2_g = PlayerGroupActive();
                    auto803D4EA2_var = -1;
                    while (true) {
                        auto803D4EA2_var = PlayerGroupNextPlayer(auto803D4EA2_g, auto803D4EA2_var);
                        if (auto803D4EA2_var < 0) { break; }
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    }
                }
                else {
                    gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] = true;
                    DialogSetVisible(gv_tunnelTremblerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemUnitLink(gv_tunnelTremblerSwapModelManuButtonModel[EventPlayer()], gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry(EventPlayer(), gv_tunnelTremblerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_tunnelTremblerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_tunnelTremblerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_tunnelTremblerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_tunnelTremblerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
            }
            else if ((UnitGetType(EventUnit()) == "KhepriNest")) {
                gf_UnlockKhepriIfConditionsaremet(EventPlayer());
                gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
                if ((gv_kheprisSwapModelManuOpen[EventPlayer()] == true)) {
                    gv_kheprisSwapModelManuOpen[EventPlayer()] = false;
                    DialogSetVisible(gv_khepriSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
                    auto0C6944DD_g = PlayerGroupActive();
                    auto0C6944DD_var = -1;
                    while (true) {
                        auto0C6944DD_var = PlayerGroupNextPlayer(auto0C6944DD_g, auto0C6944DD_var);
                        if (auto0C6944DD_var < 0) { break; }
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                        DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
                    }
                }
                else {
                    gv_kheprisSwapModelManuOpen[EventPlayer()] = true;
                    DialogSetVisible(gv_khepriSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
                    libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
                    libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelManuButtonModel[EventPlayer()], gf_TurnKhepriSwapModelStringIntoUnitEntry(EventPlayer(), gv_khepriSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_khepriSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_khepriSwapModelIsUnlockedGray[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_khepriSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
                if ((gv_khepriSwapModelIsUnlockedMech[EventPlayer()] == true)) {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
                }
                else {
                    libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitSkinsButtonOpen_Init () {
    gt_UnitSkinsButtonOpen = TriggerCreate("gt_UnitSkinsButtonOpen_Func");
    TriggerAddEventUnitAbility(gt_UnitSkinsButtonOpen, null, AbilityCommand("OpenSkinsManu", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Escape so close Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksEscapesocloseSkinsManu_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_skinsDialogOpen[EventPlayer()] == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SkinsMenuOpen", 0);
        gv_skinsDialogOpen[EventPlayer()] = false;
        DialogSetVisible(gv_skinsDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(gv_skinsDialogToggleButton, false, PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksEscapesocloseSkinsManu_Init () {
    gt_PlayerClicksEscapesocloseSkinsManu = TriggerCreate("gt_PlayerClicksEscapesocloseSkinsManu_Func");
    TriggerAddEventKeyPressed(gt_PlayerClicksEscapesocloseSkinsManu, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bulk Builders Built by player
//--------------------------------------------------------------------------------------------------
bool gt_BulkBuildersBuiltbyplayer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "BulkBuilderBody"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bulkBuildersBuiltbyplayer[UnitGetOwner(EventUnitProgressUnit())] = (gv_bulkBuildersBuiltbyplayer[UnitGetOwner(EventUnitProgressUnit())] + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BulkBuildersBuiltbyplayer_Init () {
    gt_BulkBuildersBuiltbyplayer = TriggerCreate("gt_BulkBuildersBuiltbyplayer_Func");
    TriggerAddEventUnitConstructProgress(gt_BulkBuildersBuiltbyplayer, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Cha,ber Swarm And Mech
//--------------------------------------------------------------------------------------------------
bool gt_UpgradeChaberSwarmAndMech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "UpgradeChamber") || (UnitGetType(EventUnit()) == "EvolutionChamberQueenStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberWorkerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberSoldierStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberMajorStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberStingerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberAcidSprayerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberTunnelTremblerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberKhepriStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberGraveDiggerStrain")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[UnitGetOwner(EventUnit())] = (gv_amountOfUpgradesDONEbyUpgradeChamberByPlayer[UnitGetOwner(EventUnit())] + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgradeChaberSwarmAndMech_Init () {
    gt_UpgradeChaberSwarmAndMech = TriggerCreate("gt_UpgradeChaberSwarmAndMech_Func");
    TriggerAddEventUnitResearchProgress(gt_UpgradeChaberSwarmAndMech, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time Enforce W H U
//--------------------------------------------------------------------------------------------------
bool gt_TimeEnforceWHU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_WorkerHologramUnlock, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeEnforceWHU_Init () {
    gt_TimeEnforceWHU = TriggerCreate("gt_TimeEnforceWHU_Func");
    TriggerAddEventTimeElapsed(gt_TimeEnforceWHU, 1260.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker - Hologram -Unlock
//--------------------------------------------------------------------------------------------------
bool gt_WorkerHologramUnlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_amountOfWorkerNestsBuiltThisgamebeforeminute15byplayer[UnitGetOwner(EventUnitCreatedUnit())] = (gv_amountOfWorkerNestsBuiltThisgamebeforeminute15byplayer[UnitGetOwner(EventUnitCreatedUnit())] + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkerHologramUnlock_Init () {
    gt_WorkerHologramUnlock = TriggerCreate("gt_WorkerHologramUnlock_Func");
    TriggerAddEventUnitCreated(gt_WorkerHologramUnlock, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time Enforce S S U
//--------------------------------------------------------------------------------------------------
bool gt_TimeEnforceSSU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_SoldierSwarmUnlock, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeEnforceSSU_Init () {
    gt_TimeEnforceSSU = TriggerCreate("gt_TimeEnforceSSU_Func");
    TriggerAddEventTimeElapsed(gt_TimeEnforceSSU, 1260.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier - Swarm-Unlock
//--------------------------------------------------------------------------------------------------
bool gt_SoldierSwarmUnlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewSoldierNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_amountOfSoldierNestsBuiltThisgamebeforeminute20byplayer[UnitGetOwner(EventUnitCreatedUnit())] = (gv_amountOfSoldierNestsBuiltThisgamebeforeminute20byplayer[UnitGetOwner(EventUnitCreatedUnit())] + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoldierSwarmUnlock_Init () {
    gt_SoldierSwarmUnlock = TriggerCreate("gt_SoldierSwarmUnlock_Func");
    TriggerAddEventUnitCreated(gt_SoldierSwarmUnlock, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time Enforce Q SH U
//--------------------------------------------------------------------------------------------------
bool gt_TimeEnforceQSHU_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_QueenSpikeyHeadUnlock, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeEnforceQSHU_Init () {
    gt_TimeEnforceQSHU = TriggerCreate("gt_TimeEnforceQSHU_Func");
    TriggerAddEventTimeElapsed(gt_TimeEnforceQSHU, 1800.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen - SpikeyHead -Unlock
//--------------------------------------------------------------------------------------------------
bool gt_QueenSpikeyHeadUnlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "UpgradeChamber"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_amountOfUpgradeChambersBuiltThisgamebeforeminute30byplayer[UnitGetOwner(EventUnitCreatedUnit())] = (gv_amountOfUpgradeChambersBuiltThisgamebeforeminute30byplayer[UnitGetOwner(EventUnitCreatedUnit())] + 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenSpikeyHeadUnlock_Init () {
    gt_QueenSpikeyHeadUnlock = TriggerCreate("gt_QueenSpikeyHeadUnlock_Func");
    TriggerAddEventUnitCreated(gt_QueenSpikeyHeadUnlock, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Worker Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleWorkerSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup autoA03B9F65_g;
    int autoA03B9F65_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_workerSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_workerSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_workerSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_workerSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_workerSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_workerSwapModelManuButtonToggle[6]) || (EventDialogControl() == gv_workerSwapModelManuButtonToggle[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockWorkersIfConditionsaremet(EventPlayer());
    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_workersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_workersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_workerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        autoA03B9F65_g = PlayerGroupActive();
        autoA03B9F65_var = -1;
        while (true) {
            autoA03B9F65_var = PlayerGroupNextPlayer(autoA03B9F65_g, autoA03B9F65_var);
            if (autoA03B9F65_var < 0) { break; }
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_workersSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_workerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_workerSwapModelManuButtonModel[EventPlayer()], gf_TurnWorkerSwapModelStringIntoUnitEntry(gv_workerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedMacerator[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextLongAntenas[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedRemastered[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextThickhead[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedHologram[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextHologram[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleWorkerSkinsManu_Init () {
    gt_ToggleWorkerSkinsManu = TriggerCreate("gt_ToggleWorkerSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleWorkerSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Worker Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksWorkerButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatWorkerModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto1103ED98_g;
    int auto1103ED98_u;
    unit auto1103ED98_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_workerSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_workerSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_workerSwapModelQueenChoiceButton[5]) || (EventDialogControl() == gv_workerSwapModelQueenChoiceButton[6]) || (EventDialogControl() == gv_workerSwapModelQueenChoiceButton[7]) || (EventDialogControl() == gv_workerSwapModelQueenChoiceButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_workerSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[5], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[6], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[7], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerSwapModelQueenChoiceButton[8], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[1])) {
        gv_workerSwapModelString[EventPlayer()] = "Default";
        if ((gv_workerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[2])) {
        gv_workerSwapModelString[EventPlayer()] = "Macerator";
        if ((gv_workerSwapModelIsUnlockedMacerator[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[3])) {
        gv_workerSwapModelString[EventPlayer()] = "Remastered";
        if ((gv_workerSwapModelIsUnlockedRemastered[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[5])) {
        gv_workerSwapModelString[EventPlayer()] = "Hologram";
        if ((gv_workerSwapModelIsUnlockedHologram[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[6])) {
        gv_workerSwapModelString[EventPlayer()] = "Gray";
        if ((gv_workerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[7])) {
        gv_workerSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_workerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerSwapModelQueenChoiceButton[8])) {
        gv_workerSwapModelString[EventPlayer()] = "Mech";
        if ((gv_workerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatWorkerModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_workerSwapModelManuLargeModel[EventPlayer()], gf_TurnWorkerSwapModelStringIntoUnitEntry(gv_workerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatWorkerModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto1103ED98_g = UnitGroup("Drone", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1103ED98_u = UnitGroupCount(auto1103ED98_g, c_unitCountAll);
        for (;; auto1103ED98_u -= 1) {
            auto1103ED98_var = UnitGroupUnitFromEnd(auto1103ED98_g, auto1103ED98_u);
            if (auto1103ED98_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto1103ED98_var, libNtve_gf_ModelSwap(gf_TurnWorkerSwapModelStringIntoModelEntry(gv_workerSwapModelString[UnitGetOwner(auto1103ED98_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/B92A7C47"), EventPlayer());
        gv_workerSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_workerSwapModelManuButtonModel[EventPlayer()], gf_TurnWorkerSwapModelStringIntoUnitEntry(gv_workerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatWorkerModel == true)) {
        DialogControlSetVisible(gv_workerSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_workerSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksWorkerButton_Init () {
    gt_PlayerClicksWorkerButton = TriggerCreate("gt_PlayerClicksWorkerButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksWorkerButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure players have the correct skin even after upgradeing Speedlings
//--------------------------------------------------------------------------------------------------
bool gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto48A96DA1_g;
    int auto48A96DA1_u;
    unit auto48A96DA1_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    auto48A96DA1_g = UnitGroup("Zergling", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto48A96DA1_u = UnitGroupCount(auto48A96DA1_g, c_unitCountAll);
    for (;; auto48A96DA1_u -= 1) {
        auto48A96DA1_var = UnitGroupUnitFromEnd(auto48A96DA1_g, auto48A96DA1_u);
        if (auto48A96DA1_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto48A96DA1_var, libNtve_gf_ModelSwap(gf_TurnSoldierSwapModelStringIntoModelEntry(gv_soldierSwapModelString[UnitGetOwner(auto48A96DA1_var)]), 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings_Init () {
    gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings = TriggerCreate("gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings_Func");
    TriggerAddEventUnitAbility(gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings, null, AbilityCommand("SpawningPoolResearch", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Soldier Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSoldierSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto06A8D06F_g;
    int auto06A8D06F_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_soldierSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_soldierSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_soldierSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_soldierSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_soldierSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_soldierSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockSoldiersIfConditionsaremet(EventPlayer());
    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_soldiersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_soldiersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_soldierSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto06A8D06F_g = PlayerGroupActive();
        auto06A8D06F_var = -1;
        while (true) {
            auto06A8D06F_var = PlayerGroupNextPlayer(auto06A8D06F_g, auto06A8D06F_var);
            if (auto06A8D06F_var < 0) { break; }
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_soldiersSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_soldierSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_soldierSwapModelManuButtonModel[EventPlayer()], gf_TurnSoldierSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSoldierSkinsManu_Init () {
    gt_ToggleSoldierSkinsManu = TriggerCreate("gt_ToggleSoldierSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleSoldierSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Soldier Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksSoldierButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSoldierModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto8DA1B143_g;
    int auto8DA1B143_u;
    unit auto8DA1B143_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_soldierSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_soldierSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_soldierSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_soldierSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_soldierSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[1])) {
        gv_soldierSwapModelString[EventPlayer()] = "Default";
        if ((gv_soldierSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[2])) {
        gv_soldierSwapModelString[EventPlayer()] = "Gray";
        if ((gv_soldierSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[3])) {
        gv_soldierSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_soldierSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_soldierSwapModelQueenChoiceButton[4])) {
        gv_soldierSwapModelString[EventPlayer()] = "Mech";
        if ((gv_soldierSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_soldierSwapModelManuLargeModel[EventPlayer()], gf_TurnSoldierSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSoldierModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto8DA1B143_g = UnitGroup("Zergling", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8DA1B143_u = UnitGroupCount(auto8DA1B143_g, c_unitCountAll);
        for (;; auto8DA1B143_u -= 1) {
            auto8DA1B143_var = UnitGroupUnitFromEnd(auto8DA1B143_g, auto8DA1B143_u);
            if (auto8DA1B143_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto8DA1B143_var, libNtve_gf_ModelSwap(gf_TurnSoldierSwapModelStringIntoModelEntry(gv_soldierSwapModelString[UnitGetOwner(auto8DA1B143_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/6E068AF6"), EventPlayer());
        gv_soldierSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_soldierSwapModelManuButtonModel[EventPlayer()], gf_TurnSoldierSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSoldierModel == true)) {
        DialogControlSetVisible(gv_soldierSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_soldierSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksSoldierButton_Init () {
    gt_PlayerClicksSoldierButton = TriggerCreate("gt_PlayerClicksSoldierButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksSoldierButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Queen Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleQueenSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto09A6AE5E_g;
    int auto09A6AE5E_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_queenSwapModelManuButtonToggle[EventPlayer()]))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_queenSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_queenSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_queenSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_queenSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_queenSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_queenSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockQueensIfConditionsaremet(EventPlayer());
    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_queensSwapModelManuOpen[EventPlayer()] == true)) {
        gv_queensSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_queenSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto09A6AE5E_g = PlayerGroupActive();
        auto09A6AE5E_var = -1;
        while (true) {
            auto09A6AE5E_var = PlayerGroupNextPlayer(auto09A6AE5E_g, auto09A6AE5E_var);
            if (auto09A6AE5E_var < 0) { break; }
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextLongAntenas[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextThickhead[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextSpikeyHead[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextHologram[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextLongAntenas[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextThickhead[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextSpikeyHead[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextHologram[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_queenSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_queensSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_queenSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_queenSwapModelManuButtonModel[EventPlayer()], gf_TurnQueenSwapModelStringIntoUnitEntry(gv_queenSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedLongAntenas[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextLongAntenas[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextLongAntenas[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedThickHead[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextThickhead[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextThickhead[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedSpikeyHead[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextSpikeyHead[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextSpikeyHead[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedHologram[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextHologram[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextHologram[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_queenSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_queenSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleQueenSkinsManu_Init () {
    gt_ToggleQueenSkinsManu = TriggerCreate("gt_ToggleQueenSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleQueenSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Queen Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksQueenButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatQueenModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto91C52741_g;
    int auto91C52741_u;
    unit auto91C52741_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[4]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[5]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[6]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[7]) || (EventDialogControl() == gv_queenSwapModelQueenChoiceButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_queenSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[5], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[6], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[7], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_queenSwapModelQueenChoiceButton[8], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[1])) {
        gv_queenSwapModelString[EventPlayer()] = "Default";
        if ((gv_queenSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[2])) {
        gv_queenSwapModelString[EventPlayer()] = "LongAntenas";
        if ((gv_queenSwapModelIsUnlockedLongAntenas[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[3])) {
        gv_queenSwapModelString[EventPlayer()] = "ThickHead";
        if ((gv_queenSwapModelIsUnlockedThickHead[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[4])) {
        gv_queenSwapModelString[EventPlayer()] = "SpikeyHead";
        if ((gv_queenSwapModelIsUnlockedSpikeyHead[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[5])) {
        gv_queenSwapModelString[EventPlayer()] = "Hologram";
        if ((gv_queenSwapModelIsUnlockedHologram[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[6])) {
        gv_queenSwapModelString[EventPlayer()] = "Gray";
        if ((gv_queenSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[7])) {
        gv_queenSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_queenSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    else if ((EventDialogControl() == gv_queenSwapModelQueenChoiceButton[8])) {
        gv_queenSwapModelString[EventPlayer()] = "Mech";
        if ((gv_queenSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatQueenModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_queenSwapModelManuLargeModel[EventPlayer()], gf_TurnQueenSwapModelStringIntoUnitEntry(gv_queenSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatQueenModel == true)) {
        if ((!((UnitGetType(gv_queenOfPlayer[EventPlayer()]) == "NewQueen")))) {
            libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
            auto91C52741_g = gf_AllQueensOfAllTypesOfPlayer(EventPlayer(), false, false);
            auto91C52741_u = UnitGroupCount(auto91C52741_g, c_unitCountAll);
            for (;; auto91C52741_u -= 1) {
                auto91C52741_var = UnitGroupUnitFromEnd(auto91C52741_g, auto91C52741_u);
                if (auto91C52741_var == null) { break; }
                libNtve_gf_SendActorMessageToUnit(auto91C52741_var, libNtve_gf_ModelSwap(gf_TurnQueenSwapModelStringIntoModelEntry(gv_queenSwapModelString[UnitGetOwner(auto91C52741_var)]), 1));
            }
        }
        else {
            gf_DisplayErrorForPlayer(StringExternal("Param/Value/9CEFFB15"), EventPlayer());
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/DEFBAD88"), EventPlayer());
        gv_queenSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_queenSwapModelManuButtonModel[EventPlayer()], gf_TurnQueenSwapModelStringIntoUnitEntry(gv_queenSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatQueenModel == true)) {
        DialogControlSetVisible(gv_queenSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_queenSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksQueenButton_Init () {
    gt_PlayerClicksQueenButton = TriggerCreate("gt_PlayerClicksQueenButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksQueenButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Buildings Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleBuildingsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_buildingsSkinsManuToggle[1]) || (EventDialogControl() == gv_buildingsSkinsManuToggle[2]) || (EventDialogControl() == gv_buildingsSkinsManuToggle[3]) || (EventDialogControl() == gv_buildingsSkinsManuToggle[4]) || (EventDialogControl() == gv_buildingsSkinsManuToggle[5]) || (EventDialogControl() == gv_buildingsSkinsManuToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_buildingsSkinsManuOpen[EventPlayer()] == true)) {
        gv_buildingsSkinsManuOpen[EventPlayer()] = false;
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_buildingsSkinsManu, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gv_buildingsSkinsManuOpen[EventPlayer()] = true;
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_buildingsSkinsManu, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleBuildingsManu_Init () {
    gt_ToggleBuildingsManu = TriggerCreate("gt_ToggleBuildingsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleBuildingsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ModelSwap SubTrail
//--------------------------------------------------------------------------------------------------
bool gt_ModelSwapSubTrail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Subtrail", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelSwapSubTrail_Init () {
    gt_ModelSwapSubTrail = TriggerCreate("gt_ModelSwapSubTrail_Func");
    TriggerAddEventUnitAbility(gt_ModelSwapSubTrail, null, AbilityCommand("UpgradeToSubterraneanTrail", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ModelSwap FarmTrail
//--------------------------------------------------------------------------------------------------
bool gt_ModelSwapFarmTrail_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Farm", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelSwapFarmTrail_Init () {
    gt_ModelSwapFarmTrail = TriggerCreate("gt_ModelSwapFarmTrail_Func");
    TriggerAddEventUnitAbility(gt_ModelSwapFarmTrail, null, AbilityCommand("UpgradeToFoodGenerator", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure newer Worker Nests use the right model
//--------------------------------------------------------------------------------------------------
bool gt_MakesurenewerWorkerNestsusetherightmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(EventUnitProgressUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesurenewerWorkerNestsusetherightmodel_Init () {
    gt_MakesurenewerWorkerNestsusetherightmodel = TriggerCreate("gt_MakesurenewerWorkerNestsusetherightmodel_Func");
    TriggerAddEventUnitConstructProgress(gt_MakesurenewerWorkerNestsusetherightmodel, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle WorkerNest Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleWorkerNestSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto4669A3EB_g;
    int auto4669A3EB_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_workerNestSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_workerNestSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_workerNestSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_workerNestSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_workerNestSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_workerNestSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockWorkerNestIfConditionsaremet(EventPlayer());
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_workerNestsSwapModelManuOpen[EventPlayer()] == true)) {
        gv_workerNestsSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_workerNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto4669A3EB_g = PlayerGroupActive();
        auto4669A3EB_var = -1;
        while (true) {
            auto4669A3EB_var = PlayerGroupNextPlayer(auto4669A3EB_g, auto4669A3EB_var);
            if (auto4669A3EB_var < 0) { break; }
            DialogControlSetVisible(gv_workerNestSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerNestSwapModelUnlockingManuTextWebMod[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerNestSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_workerNestSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerNestSwapModelUnlockingManuTextWebMod[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_workerNestSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_workerNestsSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_workerNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_workerNestSwapModelManuButtonModel[EventPlayer()], gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Normal", EventPlayer(), gv_workerNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerNestSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerNestSwapModelIsUnlockedWebMod[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelUnlockingManuTextWebMod[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelSwarmWinrate[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_workerNestSwapModelUnlockingManuTextWebMod[EventPlayer()], StringExternal("Param/Value/116BE0D2"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelUnlockingManuTextWebMod[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelSwarmWinrate[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_workerNestSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelMechWinrate[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_workerNestSwapModelUnlockingManuTextMech[EventPlayer()], StringExternal("Param/Value/6B373F19"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_workerNestSwapModelMechWinrate[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleWorkerNestSkinsManu_Init () {
    gt_ToggleWorkerNestSkinsManu = TriggerCreate("gt_ToggleWorkerNestSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleWorkerNestSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks WorkerNest Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksWorkerNestButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSpikesNestModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup autoB37E2891_g;
    int autoB37E2891_u;
    unit autoB37E2891_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_workerNestSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_workerNestSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_workerNestSwapModelQueenChoiceButton[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_workerNestSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_workerNestSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerNestSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_workerNestSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_workerNestSwapModelQueenChoiceButton[1])) {
        gv_workerNestSwapModelString[EventPlayer()] = "Default";
        if ((gv_workerNestSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerNestSwapModelQueenChoiceButton[2])) {
        gv_workerNestSwapModelString[EventPlayer()] = "WebMod";
        if ((gv_workerNestSwapModelIsUnlockedWebMod[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_workerNestSwapModelQueenChoiceButton[3])) {
        gv_workerNestSwapModelString[EventPlayer()] = "Mech";
        if ((gv_workerNestSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_workerNestSwapModelManuLargeModelNormal[EventPlayer()], gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Normal", EventPlayer(), gv_workerNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemUnitLink(gv_workerNestSwapModelManuLargeModelFarm[EventPlayer()], gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Farm", EventPlayer(), gv_workerNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemUnitLink(gv_workerNestSwapModelManuLargeModelSubtrail[EventPlayer()], gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Subtrail", EventPlayer(), gv_workerNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        autoB37E2891_g = UnitGroup("NewWorkerNest", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB37E2891_u = UnitGroupCount(autoB37E2891_g, c_unitCountAll);
        for (;; autoB37E2891_u -= 1) {
            autoB37E2891_var = UnitGroupUnitFromEnd(autoB37E2891_g, autoB37E2891_u);
            if (autoB37E2891_var == null) { break; }
            if ((libNtve_gf_UnitIsUnderConstruction(autoB37E2891_var) == false)) {
                if ((UnitHasBehavior2(autoB37E2891_var, "SubterraneanTrail") == true)) {
                    libNtve_gf_SendActorMessageToUnit(autoB37E2891_var, libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Subtrail", gv_workerNestSwapModelString[UnitGetOwner(autoB37E2891_var)]), 1));
                }
                else if ((UnitHasBehavior2(autoB37E2891_var, "FoodGenerator") == true)) {
                    libNtve_gf_SendActorMessageToUnit(autoB37E2891_var, libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Farm", gv_workerNestSwapModelString[UnitGetOwner(autoB37E2891_var)]), 1));
                }
                else if (true) {
                    libNtve_gf_SendActorMessageToUnit(autoB37E2891_var, libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(autoB37E2891_var)]), 1));
                }
            }

        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/E868A864"), EventPlayer());
        gv_workerNestSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_workerNestSwapModelManuButtonModel[EventPlayer()], gf_TurnWorkerNestSwapModelStringIntoUnitEntry("Normal", EventPlayer(), gv_workerNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        DialogControlSetVisible(gv_workerNestSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_workerNestSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksWorkerNestButton_Init () {
    gt_PlayerClicksWorkerNestButton = TriggerCreate("gt_PlayerClicksWorkerNestButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksWorkerNestButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure newer Soldier Nests use the right model
//--------------------------------------------------------------------------------------------------
bool gt_MakesurenewerSoldierNestsusetherightmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NewSoldierNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), libNtve_gf_ModelSwap(gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnitProgressUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesurenewerSoldierNestsusetherightmodel_Init () {
    gt_MakesurenewerSoldierNestsusetherightmodel = TriggerCreate("gt_MakesurenewerSoldierNestsusetherightmodel_Func");
    TriggerAddEventUnitConstructProgress(gt_MakesurenewerSoldierNestsusetherightmodel, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle SoldierNest Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSoldierNestSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto13C5C79F_g;
    int auto13C5C79F_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_soldierNestSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_soldierNestSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_soldierNestSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_soldierNestSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_soldierNestSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_soldierNestSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockSoldierNestIfConditionsaremet(EventPlayer());
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_soldierNestSwapModelManuOpen[EventPlayer()] == true)) {
        gv_soldierNestSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_soldierNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto13C5C79F_g = PlayerGroupActive();
        auto13C5C79F_var = -1;
        while (true) {
            auto13C5C79F_var = PlayerGroupNextPlayer(auto13C5C79F_g, auto13C5C79F_var);
            if (auto13C5C79F_var < 0) { break; }
            DialogControlSetVisible(gv_soldierNestSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierNestSwapModelUnlockingManuTextWebMod[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierNestSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_soldierNestSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_soldierNestSwapModelUnlockingManuTextWebMod[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_soldierNestSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_soldierNestSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_soldierNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_soldierNestSwapModelManuButtonModel[EventPlayer()], gf_TurnSoldierNestSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierNestSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierNestSwapModelIsUnlockedWebMod[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelUnlockingManuTextWebMod[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelSwarmWinrate[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_soldierNestSwapModelUnlockingManuTextWebMod[EventPlayer()], StringExternal("Param/Value/5F67D880"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelUnlockingManuTextWebMod[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_soldierNestSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelMechWinrate[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_soldierNestSwapModelUnlockingManuTextMech[EventPlayer()], StringExternal("Param/Value/625EF43F"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_soldierNestSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSoldierNestSkinsManu_Init () {
    gt_ToggleSoldierNestSkinsManu = TriggerCreate("gt_ToggleSoldierNestSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleSoldierNestSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks SoldierNest Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksSoldierNestButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSpikesNestModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto2E50B412_g;
    int auto2E50B412_u;
    unit auto2E50B412_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_soldierNestSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_soldierNestSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_soldierNestSwapModelQueenChoiceButton[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_soldierNestSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_soldierNestSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_soldierNestSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_soldierNestSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_soldierNestSwapModelQueenChoiceButton[1])) {
        gv_soldierNestSwapModelString[EventPlayer()] = "Default";
        if ((gv_soldierNestSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_soldierNestSwapModelQueenChoiceButton[2])) {
        gv_soldierNestSwapModelString[EventPlayer()] = "WebMod";
        if ((gv_soldierNestSwapModelIsUnlockedWebMod[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_soldierNestSwapModelQueenChoiceButton[3])) {
        gv_soldierNestSwapModelString[EventPlayer()] = "Mech";
        if ((gv_soldierNestSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_soldierNestSwapModelManuLargeModel[EventPlayer()], gf_TurnSoldierNestSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto2E50B412_g = UnitGroup("NewSoldierNest", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto2E50B412_u = UnitGroupCount(auto2E50B412_g, c_unitCountAll);
        for (;; auto2E50B412_u -= 1) {
            auto2E50B412_var = UnitGroupUnitFromEnd(auto2E50B412_g, auto2E50B412_u);
            if (auto2E50B412_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto2E50B412_var, libNtve_gf_ModelSwap(gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(auto2E50B412_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/AF8EDE21"), EventPlayer());
        gv_soldierNestSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_soldierNestSwapModelManuButtonModel[EventPlayer()], gf_TurnSoldierNestSwapModelStringIntoUnitEntry(EventPlayer(), gv_soldierNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        DialogControlSetVisible(gv_soldierNestSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_soldierNestSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksSoldierNestButton_Init () {
    gt_PlayerClicksSoldierNestButton = TriggerCreate("gt_PlayerClicksSoldierNestButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksSoldierNestButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure newer Bulk Builder use the right model - Creation
//--------------------------------------------------------------------------------------------------
bool gt_MakesurenewerBulkBuilderusetherightmodelCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "BulkBuilderBody") || (UnitGetType(EventUnitCreatedUnit()) == "BulkBuilderTentacle")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "BulkBuilderBody")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(EventUnitCreatedUnit())], "Body"), 1));
        UnitSetFacing(EventUnitCreatedUnit(), 0.0, 0.0);
    }
    else {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(EventUnitCreatedUnit())], "Tentecle"), 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesurenewerBulkBuilderusetherightmodelCreation_Init () {
    gt_MakesurenewerBulkBuilderusetherightmodelCreation = TriggerCreate("gt_MakesurenewerBulkBuilderusetherightmodelCreation_Func");
    TriggerAddEventUnitCreated(gt_MakesurenewerBulkBuilderusetherightmodelCreation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure newer Bulk Builder use the right model - Prograssion
//--------------------------------------------------------------------------------------------------
bool gt_MakesurenewerBulkBuilderusetherightmodelPrograssion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "BulkBuilderBody") || (UnitGetType(EventUnitProgressUnit()) == "BulkBuilderTentacle")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitProgressUnit()) == "BulkBuilderBody")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(EventUnitProgressUnit())], "Body"), 1));
    }
    else {
        libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(EventUnitProgressUnit())], "Tentecle"), 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesurenewerBulkBuilderusetherightmodelPrograssion_Init () {
    gt_MakesurenewerBulkBuilderusetherightmodelPrograssion = TriggerCreate("gt_MakesurenewerBulkBuilderusetherightmodelPrograssion_Func");
    TriggerAddEventUnitConstructProgress(gt_MakesurenewerBulkBuilderusetherightmodelPrograssion, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Bulk Builder Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleBulkBuilderSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup autoFBF1F44B_g;
    int autoFBF1F44B_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_bulkBuilderSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_bulkBuilderSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_bulkBuilderSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_bulkBuilderSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_bulkBuilderSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_bulkBuilderSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockBulkBuilderIfConditionsaremet(EventPlayer());
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_bulkBuilderSwapModelManuOpen[EventPlayer()] == true)) {
        gv_bulkBuilderSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_bulkBuilderSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        autoFBF1F44B_g = PlayerGroupActive();
        autoFBF1F44B_var = -1;
        while (true) {
            autoFBF1F44B_var = PlayerGroupNextPlayer(autoFBF1F44B_g, autoFBF1F44B_var);
            if (autoFBF1F44B_var < 0) { break; }
            DialogControlSetVisible(gv_bulkBuilderSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_bulkBuilderSwapModelUnlockingManuTextWebMod[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_bulkBuilderSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_bulkBuilderSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_bulkBuilderSwapModelUnlockingManuTextWebMod[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_bulkBuilderSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_bulkBuilderSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_bulkBuilderSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_bulkBuilderSwapModelManuButtonModel[EventPlayer()], gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(EventPlayer(), gv_bulkBuilderSwapModelString[EventPlayer()], "Body"), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_bulkBuilderSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_bulkBuilderSwapModelIsUnlockedWebMod[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelUnlockingManuTextWebMod[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelSwarmWinrate[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_bulkBuilderSwapModelUnlockingManuTextWebMod[EventPlayer()], StringExternal("Param/Value/A3200000"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelUnlockingManuTextWebMod[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_bulkBuilderSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelMechWinrate[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemText(gv_bulkBuilderSwapModelUnlockingManuTextMech[EventPlayer()], StringExternal("Param/Value/DF1CC22F"), PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_bulkBuilderSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleBulkBuilderSkinsManu_Init () {
    gt_ToggleBulkBuilderSkinsManu = TriggerCreate("gt_ToggleBulkBuilderSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleBulkBuilderSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Bulk Builder Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksBulkBuilderButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSpikesNestModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup autoC7032A61_g;
    int autoC7032A61_u;
    unit autoC7032A61_var;
    unitgroup autoDD5D90CA_g;
    int autoDD5D90CA_u;
    unit autoDD5D90CA_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_bulkBuilderSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_bulkBuilderSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_bulkBuilderSwapModelQueenChoiceButton[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_bulkBuilderSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_bulkBuilderSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_bulkBuilderSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_bulkBuilderSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_bulkBuilderSwapModelQueenChoiceButton[1])) {
        gv_bulkBuilderSwapModelString[EventPlayer()] = "Default";
        if ((gv_bulkBuilderSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_bulkBuilderSwapModelQueenChoiceButton[2])) {
        gv_bulkBuilderSwapModelString[EventPlayer()] = "WebMod";
        if ((gv_bulkBuilderSwapModelIsUnlockedWebMod[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_bulkBuilderSwapModelQueenChoiceButton[3])) {
        gv_bulkBuilderSwapModelString[EventPlayer()] = "Mech";
        if ((gv_bulkBuilderSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_bulkBuilderSwapModelManuLargeModelBody[EventPlayer()], gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(EventPlayer(), gv_bulkBuilderSwapModelString[EventPlayer()], "Body"), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemUnitLink(gv_bulkBuilderSwapModelManuLargeModelTentecle[EventPlayer()], gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(EventPlayer(), gv_bulkBuilderSwapModelString[EventPlayer()], "Tentecle"), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        autoC7032A61_g = UnitGroup("BulkBuilderBody", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC7032A61_u = UnitGroupCount(autoC7032A61_g, c_unitCountAll);
        for (;; autoC7032A61_u -= 1) {
            autoC7032A61_var = UnitGroupUnitFromEnd(autoC7032A61_g, autoC7032A61_u);
            if (autoC7032A61_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoC7032A61_var, libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(autoC7032A61_var)], "Body"), 1));
        }
        autoDD5D90CA_g = UnitGroup("BulkBuilderTentacle", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDD5D90CA_u = UnitGroupCount(autoDD5D90CA_g, c_unitCountAll);
        for (;; autoDD5D90CA_u -= 1) {
            autoDD5D90CA_var = UnitGroupUnitFromEnd(autoDD5D90CA_g, autoDD5D90CA_u);
            if (autoDD5D90CA_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoDD5D90CA_var, libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(autoDD5D90CA_var)], "Tentecle"), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/DC4BF5DF"), EventPlayer());
        gv_bulkBuilderSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_bulkBuilderSwapModelManuButtonModel[EventPlayer()], gf_TurnBulkBuilderSwapModelStringIntoUnitEntry(EventPlayer(), gv_bulkBuilderSwapModelString[EventPlayer()], "Body"), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        DialogControlSetVisible(gv_bulkBuilderSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_bulkBuilderSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksBulkBuilderButton_Init () {
    gt_PlayerClicksBulkBuilderButton = TriggerCreate("gt_PlayerClicksBulkBuilderButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksBulkBuilderButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure newer Upgrade Chamber use the right model
//--------------------------------------------------------------------------------------------------
bool gt_MakesurenewerUpgradeChamberusetherightmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "UpgradeChamber") || (UnitGetType(EventUnitProgressUnit()) == "EvolutionChamberQueenStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberWorkerStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberSoldierStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberMajorStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberStingerStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberAcidSprayerStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberTunnelTremblerStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberKhepriStrain") || (UnitGetType(EventUnitProgressUnit()) == "UpgradeChamberGraveDiggerStrain")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), libNtve_gf_ModelSwap(gf_TurnUpgradeChamberSwapModelStringIntoModelEntry(gv_upgradeChamberSwapModelString[UnitGetOwner(EventUnitProgressUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesurenewerUpgradeChamberusetherightmodel_Init () {
    gt_MakesurenewerUpgradeChamberusetherightmodel = TriggerCreate("gt_MakesurenewerUpgradeChamberusetherightmodel_Func");
    TriggerAddEventUnitConstructProgress(gt_MakesurenewerUpgradeChamberusetherightmodel, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(gt_MakesurenewerUpgradeChamberusetherightmodel, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle UpgradeChamber Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleUpgradeChamberSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup autoDC1A9690_g;
    int autoDC1A9690_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_upgradeChamberSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_upgradeChamberSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_upgradeChamberSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_upgradeChamberSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_upgradeChamberSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_upgradeChamberSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockUpgradeChamberIfConditionsaremet(EventPlayer());
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_upgradeChamberSwapModelManuOpen[EventPlayer()] == true)) {
        gv_upgradeChamberSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_upgradeChamberSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        autoDC1A9690_g = PlayerGroupActive();
        autoDC1A9690_var = -1;
        while (true) {
            autoDC1A9690_var = PlayerGroupNextPlayer(autoDC1A9690_g, autoDC1A9690_var);
            if (autoDC1A9690_var < 0) { break; }
            DialogControlSetVisible(gv_upgradeChamberSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_upgradeChamberSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_upgradeChamberSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_upgradeChamberSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_upgradeChamberSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_upgradeChamberSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_upgradeChamberSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_upgradeChamberSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_upgradeChamberSwapModelManuButtonModel[EventPlayer()], gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry(EventPlayer(), gv_upgradeChamberSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_upgradeChamberSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_upgradeChamberSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_upgradeChamberSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_upgradeChamberSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_upgradeChamberSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_upgradeChamberSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_upgradeChamberSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_upgradeChamberSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_upgradeChamberSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleUpgradeChamberSkinsManu_Init () {
    gt_ToggleUpgradeChamberSkinsManu = TriggerCreate("gt_ToggleUpgradeChamberSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleUpgradeChamberSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks UpgradeChamber Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksUpgradeChamberButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_allChambersUnitGroup;
    bool lv_playerCanSelectThatSpikesNestModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto687AC294_g;
    int auto687AC294_u;
    unit auto687AC294_var;

    // Variable Initialization
    lv_allChambersUnitGroup = UnitGroupEmpty();
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_upgradeChamberSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_upgradeChamberSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_upgradeChamberSwapModelQueenChoiceButton[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_upgradeChamberSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_upgradeChamberSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_upgradeChamberSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_upgradeChamberSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_upgradeChamberSwapModelQueenChoiceButton[1])) {
        DialogControlSetPosition(gv_upgradeChamberSwapModelManuLargeModel[EventPlayer()], PlayerGroupAll(), c_anchorCenter, -260, 0);
        gv_upgradeChamberSwapModelString[EventPlayer()] = "Default";
        if ((gv_upgradeChamberSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_upgradeChamberSwapModelQueenChoiceButton[2])) {
        DialogControlSetPosition(gv_upgradeChamberSwapModelManuLargeModel[EventPlayer()], PlayerGroupAll(), c_anchorCenter, -260, 100);
        gv_upgradeChamberSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_upgradeChamberSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_upgradeChamberSwapModelQueenChoiceButton[3])) {
        DialogControlSetPosition(gv_upgradeChamberSwapModelManuLargeModel[EventPlayer()], PlayerGroupAll(), c_anchorCenter, -260, 100);
        gv_upgradeChamberSwapModelString[EventPlayer()] = "Mech";
        if ((gv_upgradeChamberSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_upgradeChamberSwapModelManuLargeModel[EventPlayer()], gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry(EventPlayer(), gv_upgradeChamberSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        UnitGroupAddUnitGroup(lv_allChambersUnitGroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UpgradeChamber", "", "", EventPlayer(), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_allChambersUnitGroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("EvolutionChamberQueenStrain", "UpgradeChamberWorkerStrain", "UpgradeChamberSoldierStrain", EventPlayer(), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_allChambersUnitGroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UpgradeChamberMajorStrain", "UpgradeChamberStingerStrain", "UpgradeChamberAcidSprayerStrain", EventPlayer(), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_allChambersUnitGroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UpgradeChamberTunnelTremblerStrain", "UpgradeChamberKhepriStrain", "UpgradeChamberGraveDiggerStrain", EventPlayer(), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto687AC294_g = lv_allChambersUnitGroup;
        auto687AC294_u = UnitGroupCount(auto687AC294_g, c_unitCountAll);
        for (;; auto687AC294_u -= 1) {
            auto687AC294_var = UnitGroupUnitFromEnd(auto687AC294_g, auto687AC294_u);
            if (auto687AC294_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto687AC294_var, libNtve_gf_ModelSwap(gf_TurnUpgradeChamberSwapModelStringIntoModelEntry(gv_upgradeChamberSwapModelString[UnitGetOwner(auto687AC294_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/B37DE5C7"), EventPlayer());
        gv_upgradeChamberSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_upgradeChamberSwapModelManuButtonModel[EventPlayer()], gf_TurnUpgradeChamberSwapModelStringIntoUnitEntry(EventPlayer(), gv_upgradeChamberSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        DialogControlSetVisible(gv_upgradeChamberSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_upgradeChamberSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksUpgradeChamberButton_Init () {
    gt_PlayerClicksUpgradeChamberButton = TriggerCreate("gt_PlayerClicksUpgradeChamberButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksUpgradeChamberButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure newer Spike nests use the right model
//--------------------------------------------------------------------------------------------------
bool gt_MakesurenewerSpikenestsusetherightmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnitCreatedUnit()) == "MediumSpikeNest") || (UnitGetType(EventUnitCreatedUnit()) == "LargeSpikeNest")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "SmallSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "MediumSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale(1.5, 1.5, 1.5, 0.0));
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "LargeSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
        libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesurenewerSpikenestsusetherightmodel_Init () {
    gt_MakesurenewerSpikenestsusetherightmodel = TriggerCreate("gt_MakesurenewerSpikenestsusetherightmodel_Func");
    TriggerAddEventUnitCreated(gt_MakesurenewerSpikenestsusetherightmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle SpikesNest Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSpikesNestSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto1DB1667C_g;
    int auto1DB1667C_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_spikesNestSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_spikesNestSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_spikesNestSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_spikesNestSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_spikesNestSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_spikesNestSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockSpikesNestIfConditionsaremet(EventPlayer());
    gf_IfBuildingsSkinSelectionManuIsOpenCloseit();
    if ((gv_spikesNestsSwapModelManuOpen[EventPlayer()] == true)) {
        gv_spikesNestsSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_spikesNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto1DB1667C_g = PlayerGroupActive();
        auto1DB1667C_var = -1;
        while (true) {
            auto1DB1667C_var = PlayerGroupNextPlayer(auto1DB1667C_g, auto1DB1667C_var);
            if (auto1DB1667C_var < 0) { break; }
            DialogControlSetVisible(gv_spikesNestSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_spikesNestSwapModelUnlockingManuTextFAT[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_spikesNestSwapModelUnlockingManuTextFATWebMod[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_spikesNestSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_spikesNestSwapModelUnlockingManuTextFAT[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_spikesNestSwapModelUnlockingManuTextFATWebMod[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_spikesNestsSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_spikesNestSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_spikesNestSwapModelManuButtonModel[EventPlayer()], gf_TurnSpikesNestSwapModelStringIntoUnitEntry(EventPlayer(), gv_spikesNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_spikesNestSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_spikesNestSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_spikesNestSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_spikesNestSwapModelIsUnlockedFAT[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_spikesNestSwapModelUnlockingManuTextFAT[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_spikesNestSwapModelUnlockingManuTextFAT[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_spikesNestSwapModelIsUnlockedFATWebMod[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_spikesNestSwapModelUnlockingManuTextFATWebMod[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_spikesNestSwapModelUnlockingManuTextFATWebMod[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSpikesNestSkinsManu_Init () {
    gt_ToggleSpikesNestSkinsManu = TriggerCreate("gt_ToggleSpikesNestSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleSpikesNestSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks SpikesNest Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksSpikesNestButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSpikesNestModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto1F2AEC65_g;
    int auto1F2AEC65_u;
    unit auto1F2AEC65_var;
    unitgroup autoB6F0EFF2_g;
    int autoB6F0EFF2_u;
    unit autoB6F0EFF2_var;
    unitgroup auto57CC130D_g;
    int auto57CC130D_u;
    unit auto57CC130D_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_spikesNestSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_spikesNestSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_spikesNestSwapModelQueenChoiceButton[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_spikesNestSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_spikesNestSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_spikesNestSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_spikesNestSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_spikesNestSwapModelQueenChoiceButton[1])) {
        gv_spikesNestSwapModelString[EventPlayer()] = "Default";
        if ((gv_spikesNestSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_spikesNestSwapModelQueenChoiceButton[2])) {
        gv_spikesNestSwapModelString[EventPlayer()] = "FAT";
        if ((gv_spikesNestSwapModelIsUnlockedFAT[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    else if ((EventDialogControl() == gv_spikesNestSwapModelQueenChoiceButton[3])) {
        gv_spikesNestSwapModelString[EventPlayer()] = "FAT WebMod";
        if ((gv_spikesNestSwapModelIsUnlockedFATWebMod[EventPlayer()] == true)) {
            lv_playerCanSelectThatSpikesNestModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_spikesNestSwapModelManuLargeModel[EventPlayer()], gf_TurnSpikesNestSwapModelStringIntoUnitEntry(EventPlayer(), gv_spikesNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto1F2AEC65_g = UnitGroup("SmallSpikeNest", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1F2AEC65_u = UnitGroupCount(auto1F2AEC65_g, c_unitCountAll);
        for (;; auto1F2AEC65_u -= 1) {
            auto1F2AEC65_var = UnitGroupUnitFromEnd(auto1F2AEC65_g, auto1F2AEC65_u);
            if (auto1F2AEC65_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto1F2AEC65_var, libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(auto1F2AEC65_var)]), 1));
        }
        autoB6F0EFF2_g = UnitGroup("MediumSpikeNest", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB6F0EFF2_u = UnitGroupCount(autoB6F0EFF2_g, c_unitCountAll);
        for (;; autoB6F0EFF2_u -= 1) {
            autoB6F0EFF2_var = UnitGroupUnitFromEnd(autoB6F0EFF2_g, autoB6F0EFF2_u);
            if (autoB6F0EFF2_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoB6F0EFF2_var, libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(autoB6F0EFF2_var)]), 1));
            libNtve_gf_SendActorMessageToUnit(autoB6F0EFF2_var, libNtve_gf_SetScale(1.5, 1.5, 1.5, 0.0));
        }
        auto57CC130D_g = UnitGroup("LargeSpikeNest", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto57CC130D_u = UnitGroupCount(auto57CC130D_g, c_unitCountAll);
        for (;; auto57CC130D_u -= 1) {
            auto57CC130D_var = UnitGroupUnitFromEnd(auto57CC130D_g, auto57CC130D_u);
            if (auto57CC130D_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto57CC130D_var, libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(auto57CC130D_var)]), 1));
            libNtve_gf_SendActorMessageToUnit(auto57CC130D_var, libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/935B01A0"), EventPlayer());
        gv_spikesNestSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_spikesNestSwapModelManuButtonModel[EventPlayer()], gf_TurnSpikesNestSwapModelStringIntoUnitEntry(EventPlayer(), gv_spikesNestSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSpikesNestModel == true)) {
        DialogControlSetVisible(gv_spikesNestSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_spikesNestSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksSpikesNestButton_Init () {
    gt_PlayerClicksSpikesNestButton = TriggerCreate("gt_PlayerClicksSpikesNestButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksSpikesNestButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Specialty Unit Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleSpecialtyUnitManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_specialtyUnitSkinsManuToggle[1]) || (EventDialogControl() == gv_specialtyUnitSkinsManuToggle[2]) || (EventDialogControl() == gv_specialtyUnitSkinsManuToggle[3]) || (EventDialogControl() == gv_specialtyUnitSkinsManuToggle[4]) || (EventDialogControl() == gv_specialtyUnitSkinsManuToggle[5]) || (EventDialogControl() == gv_specialtyUnitSkinsManuToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_IfUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_specialtyUnitSkinsManuOpen[EventPlayer()] == true)) {
        gv_specialtyUnitSkinsManuOpen[EventPlayer()] = false;
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_specialtyUnitSkinsManu, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gv_specialtyUnitSkinsManuOpen[EventPlayer()] = true;
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        DialogSetVisible(gv_specialtyUnitSkinsManu, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleSpecialtyUnitManu_Init () {
    gt_ToggleSpecialtyUnitManu = TriggerCreate("gt_ToggleSpecialtyUnitManu_Func");
    TriggerAddEventDialogControl(gt_ToggleSpecialtyUnitManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Major Spawns so change its model
//--------------------------------------------------------------------------------------------------
bool gt_MajorSpawnssochangeitsmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Ultralisk") && (gv_majorSwapModelString[UnitGetOwner(EventUnitCreatedUnit())] != "Not Chosen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnMajorSwapModelStringIntoModelEntry(gv_majorSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MajorSpawnssochangeitsmodel_Init () {
    gt_MajorSpawnssochangeitsmodel = TriggerCreate("gt_MajorSpawnssochangeitsmodel_Func");
    TriggerAddEventUnitCreated(gt_MajorSpawnssochangeitsmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Major Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleMajorSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto396D86FB_g;
    int auto396D86FB_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_majorSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_majorSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_majorSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_majorSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_majorSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_majorSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockMajorIfConditionsaremet(EventPlayer());
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_majorsSwapModelManuOpen[EventPlayer()] == true)) {
        gv_majorsSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_majorSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto396D86FB_g = PlayerGroupActive();
        auto396D86FB_var = -1;
        while (true) {
            auto396D86FB_var = PlayerGroupNextPlayer(auto396D86FB_g, auto396D86FB_var);
            if (auto396D86FB_var < 0) { break; }
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_majorsSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_majorSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_majorSwapModelManuButtonModel[EventPlayer()], gf_TurnMajorSwapModelStringIntoUnitEntry(EventPlayer(), gv_majorSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_majorSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_majorSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_majorSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_majorSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_majorSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleMajorSkinsManu_Init () {
    gt_ToggleMajorSkinsManu = TriggerCreate("gt_ToggleMajorSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleMajorSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Major Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksMajorButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatmajorModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto0910DED3_g;
    int auto0910DED3_u;
    unit auto0910DED3_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_majorSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_majorSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_majorSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_majorSwapModelQueenChoiceButton[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_majorSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_majorSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_majorSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_majorSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_majorSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_majorSwapModelQueenChoiceButton[1])) {
        gv_majorSwapModelString[EventPlayer()] = "Default";
        if ((gv_majorSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_majorSwapModelQueenChoiceButton[2])) {
        gv_majorSwapModelString[EventPlayer()] = "Gray";
        if ((gv_majorSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_majorSwapModelQueenChoiceButton[3])) {
        gv_majorSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_majorSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_majorSwapModelQueenChoiceButton[4])) {
        gv_majorSwapModelString[EventPlayer()] = "Mech";
        if ((gv_majorSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_majorSwapModelManuLargeModel[EventPlayer()], gf_TurnMajorSwapModelStringIntoUnitEntry(EventPlayer(), gv_majorSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatmajorModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto0910DED3_g = UnitGroup("Ultralisk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0910DED3_u = UnitGroupCount(auto0910DED3_g, c_unitCountAll);
        for (;; auto0910DED3_u -= 1) {
            auto0910DED3_var = UnitGroupUnitFromEnd(auto0910DED3_g, auto0910DED3_u);
            if (auto0910DED3_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto0910DED3_var, libNtve_gf_ModelSwap(gf_TurnMajorSwapModelStringIntoModelEntry(gv_majorSwapModelString[UnitGetOwner(auto0910DED3_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/6ACBFA61"), EventPlayer());
        gv_majorSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_majorSwapModelManuButtonModel[EventPlayer()], gf_TurnMajorSwapModelStringIntoUnitEntry(EventPlayer(), gv_majorSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatmajorModel == true)) {
        DialogControlSetVisible(gv_majorSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_majorSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksMajorButton_Init () {
    gt_PlayerClicksMajorButton = TriggerCreate("gt_PlayerClicksMajorButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksMajorButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stinger Spawns so change its model
//--------------------------------------------------------------------------------------------------
bool gt_StingerSpawnssochangeitsmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Hydralisk") && (gv_stingerSwapModelString[UnitGetOwner(EventUnitCreatedUnit())] != "Not Chosen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnStingerSwapModelStringIntoModelEntry(gv_stingerSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StingerSpawnssochangeitsmodel_Init () {
    gt_StingerSpawnssochangeitsmodel = TriggerCreate("gt_StingerSpawnssochangeitsmodel_Func");
    TriggerAddEventUnitCreated(gt_StingerSpawnssochangeitsmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle StingerSkins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleStingerSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto8B3F4EA0_g;
    int auto8B3F4EA0_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_stingerSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_stingerSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_stingerSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_stingerSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_stingerSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_stingerSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockStingerIfConditionsaremet(EventPlayer());
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_stingersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_stingersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_stingerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto8B3F4EA0_g = PlayerGroupActive();
        auto8B3F4EA0_var = -1;
        while (true) {
            auto8B3F4EA0_var = PlayerGroupNextPlayer(auto8B3F4EA0_g, auto8B3F4EA0_var);
            if (auto8B3F4EA0_var < 0) { break; }
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_stingersSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_stingerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_stingerSwapModelManuButtonModel[EventPlayer()], gf_TurnStingerSwapModelStringIntoUnitEntry(EventPlayer(), gv_stingerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_stingerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_stingerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_stingerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_stingerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_stingerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleStingerSkinsManu_Init () {
    gt_ToggleStingerSkinsManu = TriggerCreate("gt_ToggleStingerSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleStingerSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Stinger Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksStingerButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatmajorModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto8FC58FF2_g;
    int auto8FC58FF2_u;
    unit auto8FC58FF2_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_stingerSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_stingerSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_stingerSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_stingerSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_stingerSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[1])) {
        gv_stingerSwapModelString[EventPlayer()] = "Default";
        if ((gv_stingerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[2])) {
        gv_stingerSwapModelString[EventPlayer()] = "Gray";
        if ((gv_stingerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[3])) {
        gv_stingerSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_stingerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_stingerSwapModelQueenChoiceButton[4])) {
        gv_stingerSwapModelString[EventPlayer()] = "Mech";
        if ((gv_stingerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_stingerSwapModelManuLargeModel[EventPlayer()], gf_TurnStingerSwapModelStringIntoUnitEntry(EventPlayer(), gv_stingerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatmajorModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto8FC58FF2_g = UnitGroup("Hydralisk", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8FC58FF2_u = UnitGroupCount(auto8FC58FF2_g, c_unitCountAll);
        for (;; auto8FC58FF2_u -= 1) {
            auto8FC58FF2_var = UnitGroupUnitFromEnd(auto8FC58FF2_g, auto8FC58FF2_u);
            if (auto8FC58FF2_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto8FC58FF2_var, libNtve_gf_ModelSwap(gf_TurnStingerSwapModelStringIntoModelEntry(gv_stingerSwapModelString[UnitGetOwner(auto8FC58FF2_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/3AF01BEF"), EventPlayer());
        gv_stingerSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_stingerSwapModelManuButtonModel[EventPlayer()], gf_TurnStingerSwapModelStringIntoUnitEntry(EventPlayer(), gv_stingerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatmajorModel == true)) {
        DialogControlSetVisible(gv_stingerSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_stingerSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksStingerButton_Init () {
    gt_PlayerClicksStingerButton = TriggerCreate("gt_PlayerClicksStingerButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksStingerButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acid Sprayer Spawns so change its model
//--------------------------------------------------------------------------------------------------
bool gt_AcidSprayerSpawnssochangeitsmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Locust") && (gv_acidSprayerSwapModelString[UnitGetOwner(EventUnitCreatedUnit())] != "Not Chosen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnAcidSprayerSwapModelStringIntoModelEntry(gv_acidSprayerSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcidSprayerSpawnssochangeitsmodel_Init () {
    gt_AcidSprayerSpawnssochangeitsmodel = TriggerCreate("gt_AcidSprayerSpawnssochangeitsmodel_Func");
    TriggerAddEventUnitCreated(gt_AcidSprayerSpawnssochangeitsmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make sure players have the correct skin even after upgradeing Speedlings 2
//--------------------------------------------------------------------------------------------------
bool gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto82EA8B1C_g;
    int auto82EA8B1C_u;
    unit auto82EA8B1C_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    auto82EA8B1C_g = UnitGroup("Zergling", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto82EA8B1C_u = UnitGroupCount(auto82EA8B1C_g, c_unitCountAll);
    for (;; auto82EA8B1C_u -= 1) {
        auto82EA8B1C_var = UnitGroupUnitFromEnd(auto82EA8B1C_g, auto82EA8B1C_u);
        if (auto82EA8B1C_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto82EA8B1C_var, libNtve_gf_ModelSwap(gf_TurnAcidSprayerSwapModelStringIntoModelEntry(gv_acidSprayerSwapModelString[UnitGetOwner(auto82EA8B1C_var)]), 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2_Init () {
    gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2 = TriggerCreate("gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2_Func");
    TriggerAddEventUnitAbility(gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2, null, AbilityCommand("SpawningPoolResearch", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Acid Sprayer Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleAcidSprayerSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup autoF3DCB495_g;
    int autoF3DCB495_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_acidSprayerSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_acidSprayerSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_acidSprayerSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_acidSprayerSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_acidSprayerSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_acidSprayerSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockAcidSprayerIfConditionsaremet(EventPlayer());
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_acidSprayersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_acidSprayersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_acidSprayerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        autoF3DCB495_g = PlayerGroupActive();
        autoF3DCB495_var = -1;
        while (true) {
            autoF3DCB495_var = PlayerGroupNextPlayer(autoF3DCB495_g, autoF3DCB495_var);
            if (autoF3DCB495_var < 0) { break; }
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_acidSprayersSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_acidSprayerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_acidSprayerSwapModelManuButtonModel[EventPlayer()], gf_TurnAcidSprayerSwapModelStringIntoUnitEntry(EventPlayer(), gv_acidSprayerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_acidSprayerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_acidSprayerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_acidSprayerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_acidSprayerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_acidSprayerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleAcidSprayerSkinsManu_Init () {
    gt_ToggleAcidSprayerSkinsManu = TriggerCreate("gt_ToggleAcidSprayerSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleAcidSprayerSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Acid Sprayer Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksAcidSprayerButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSoldierModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup auto19E9F98D_g;
    int auto19E9F98D_u;
    unit auto19E9F98D_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_acidSprayerSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_acidSprayerSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_acidSprayerSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_acidSprayerSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_acidSprayerSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[1])) {
        gv_acidSprayerSwapModelString[EventPlayer()] = "Default";
        if ((gv_acidSprayerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[2])) {
        gv_acidSprayerSwapModelString[EventPlayer()] = "Gray";
        if ((gv_acidSprayerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[3])) {
        gv_acidSprayerSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_acidSprayerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_acidSprayerSwapModelQueenChoiceButton[4])) {
        gv_acidSprayerSwapModelString[EventPlayer()] = "Mech";
        if ((gv_acidSprayerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_acidSprayerSwapModelManuLargeModel[EventPlayer()], gf_TurnAcidSprayerSwapModelStringIntoUnitEntry(EventPlayer(), gv_acidSprayerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSoldierModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        auto19E9F98D_g = UnitGroup("Locust", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto19E9F98D_u = UnitGroupCount(auto19E9F98D_g, c_unitCountAll);
        for (;; auto19E9F98D_u -= 1) {
            auto19E9F98D_var = UnitGroupUnitFromEnd(auto19E9F98D_g, auto19E9F98D_u);
            if (auto19E9F98D_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto19E9F98D_var, libNtve_gf_ModelSwap(gf_TurnAcidSprayerSwapModelStringIntoModelEntry(gv_acidSprayerSwapModelString[UnitGetOwner(auto19E9F98D_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/C595FB41"), EventPlayer());
        gv_acidSprayerSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_acidSprayerSwapModelManuButtonModel[EventPlayer()], gf_TurnAcidSprayerSwapModelStringIntoUnitEntry(EventPlayer(), gv_acidSprayerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSoldierModel == true)) {
        DialogControlSetVisible(gv_acidSprayerSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_acidSprayerSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksAcidSprayerButton_Init () {
    gt_PlayerClicksAcidSprayerButton = TriggerCreate("gt_PlayerClicksAcidSprayerButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksAcidSprayerButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tunnel Trembler Spawns so change its model
//--------------------------------------------------------------------------------------------------
bool gt_TunnelTremblerSpawnssochangeitsmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "TunnelTrembler") && (gv_tunnelTremblerSwapModelString[UnitGetOwner(EventUnitCreatedUnit())] != "Not Chosen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnTunnelTremblerSwapModelStringIntoModelEntry(gv_tunnelTremblerSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TunnelTremblerSpawnssochangeitsmodel_Init () {
    gt_TunnelTremblerSpawnssochangeitsmodel = TriggerCreate("gt_TunnelTremblerSpawnssochangeitsmodel_Func");
    TriggerAddEventUnitCreated(gt_TunnelTremblerSpawnssochangeitsmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Tunnel Trembler Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleTunnelTremblerSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto51D2CA5F_g;
    int auto51D2CA5F_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tunnelTremblerSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_tunnelTremblerSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_tunnelTremblerSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_tunnelTremblerSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_tunnelTremblerSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_tunnelTremblerSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockTunnelTremblerIfConditionsaremet(EventPlayer());
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] == true)) {
        gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_tunnelTremblerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto51D2CA5F_g = PlayerGroupActive();
        auto51D2CA5F_var = -1;
        while (true) {
            auto51D2CA5F_var = PlayerGroupNextPlayer(auto51D2CA5F_g, auto51D2CA5F_var);
            if (auto51D2CA5F_var < 0) { break; }
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_tunnelTremblersSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_tunnelTremblerSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_tunnelTremblerSwapModelManuButtonModel[EventPlayer()], gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry(EventPlayer(), gv_tunnelTremblerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_tunnelTremblerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_tunnelTremblerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_tunnelTremblerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_tunnelTremblerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_tunnelTremblerSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleTunnelTremblerSkinsManu_Init () {
    gt_ToggleTunnelTremblerSkinsManu = TriggerCreate("gt_ToggleTunnelTremblerSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleTunnelTremblerSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Tunnel Trembler Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksTunnelTremblerButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatmajorModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup autoC31CAFD5_g;
    int autoC31CAFD5_u;
    unit autoC31CAFD5_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_tunnelTremblerSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_tunnelTremblerSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_tunnelTremblerSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_tunnelTremblerSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_tunnelTremblerSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[1])) {
        gv_tunnelTremblerSwapModelString[EventPlayer()] = "Default";
        if ((gv_tunnelTremblerSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[2])) {
        gv_tunnelTremblerSwapModelString[EventPlayer()] = "Gray";
        if ((gv_tunnelTremblerSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[3])) {
        gv_tunnelTremblerSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_tunnelTremblerSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    else if ((EventDialogControl() == gv_tunnelTremblerSwapModelQueenChoiceButton[4])) {
        gv_tunnelTremblerSwapModelString[EventPlayer()] = "Mech";
        if ((gv_tunnelTremblerSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatmajorModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_tunnelTremblerSwapModelManuLargeModel[EventPlayer()], gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry(EventPlayer(), gv_tunnelTremblerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatmajorModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        autoC31CAFD5_g = UnitGroup("TunnelTrembler", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC31CAFD5_u = UnitGroupCount(autoC31CAFD5_g, c_unitCountAll);
        for (;; autoC31CAFD5_u -= 1) {
            autoC31CAFD5_var = UnitGroupUnitFromEnd(autoC31CAFD5_g, autoC31CAFD5_u);
            if (autoC31CAFD5_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoC31CAFD5_var, libNtve_gf_ModelSwap(gf_TurnTunnelTremblerSwapModelStringIntoModelEntry(gv_tunnelTremblerSwapModelString[UnitGetOwner(autoC31CAFD5_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/BFB30D71"), EventPlayer());
        gv_tunnelTremblerSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_tunnelTremblerSwapModelManuButtonModel[EventPlayer()], gf_TurnTunnelTremblerSwapModelStringIntoUnitEntry(EventPlayer(), gv_tunnelTremblerSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatmajorModel == true)) {
        DialogControlSetVisible(gv_tunnelTremblerSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_tunnelTremblerSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksTunnelTremblerButton_Init () {
    gt_PlayerClicksTunnelTremblerButton = TriggerCreate("gt_PlayerClicksTunnelTremblerButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksTunnelTremblerButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khepri Spawns so change its model
//--------------------------------------------------------------------------------------------------
bool gt_KhepriSpawnssochangeitsmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SwarmHostMP") && (gv_khepriSwapModelString[UnitGetOwner(EventUnitCreatedUnit())] != "Not Chosen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnKhepriSwapModelStringIntoModelEntry(gv_khepriSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KhepriSpawnssochangeitsmodel_Init () {
    gt_KhepriSpawnssochangeitsmodel = TriggerCreate("gt_KhepriSpawnssochangeitsmodel_Func");
    TriggerAddEventUnitCreated(gt_KhepriSpawnssochangeitsmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khepri Bettle Spawns so change its model
//--------------------------------------------------------------------------------------------------
bool gt_KhepriBettleSpawnssochangeitsmodel_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "LocustMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(gf_TurnKhepriBettleSwapModelStringIntoModelEntry(gv_khepriSwapModelString[UnitGetOwner(EventUnitCreatedUnit())]), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KhepriBettleSpawnssochangeitsmodel_Init () {
    gt_KhepriBettleSpawnssochangeitsmodel = TriggerCreate("gt_KhepriBettleSpawnssochangeitsmodel_Func");
    TriggerAddEventUnitCreated(gt_KhepriBettleSpawnssochangeitsmodel, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Khepri Skins Manu
//--------------------------------------------------------------------------------------------------
bool gt_ToggleKhepriSkinsManu_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_colorofUnlocked;
    color lv_colorofLocked;

    // Automatic Variable Declarations
    playergroup auto0ACB1A44_g;
    int auto0ACB1A44_var;

    // Variable Initialization
    lv_colorofUnlocked = Color(41.96, 77.65, 35.29);
    lv_colorofLocked = Color(93.73, 15.69, 10.59);

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_khepriSwapModelManuButtonToggle[1]) || (EventDialogControl() == gv_khepriSwapModelManuButtonToggle[2]) || (EventDialogControl() == gv_khepriSwapModelManuButtonToggle[3]) || (EventDialogControl() == gv_khepriSwapModelManuButtonToggle[4]) || (EventDialogControl() == gv_khepriSwapModelManuButtonToggle[5]) || (EventDialogControl() == gv_khepriSwapModelManuButtonToggle[6])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnlockKhepriIfConditionsaremet(EventPlayer());
    gf_IfSpecialtyUnitSkinSelectionManuIsOpenCloseit();
    if ((gv_kheprisSwapModelManuOpen[EventPlayer()] == true)) {
        gv_kheprisSwapModelManuOpen[EventPlayer()] = false;
        DialogSetVisible(gv_khepriSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), false, PlayerGroupSingle(EventPlayer()));
        auto0ACB1A44_g = PlayerGroupActive();
        auto0ACB1A44_var = -1;
        while (true) {
            auto0ACB1A44_var = PlayerGroupNextPlayer(auto0ACB1A44_g, auto0ACB1A44_var);
            if (auto0ACB1A44_var < 0) { break; }
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupActive(), false);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_kheprisSwapModelManuOpen[EventPlayer()] = true;
        DialogSetVisible(gv_khepriSwapModelManuDialog, PlayerGroupSingle(EventPlayer()), true);
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelManuButtonModel[EventPlayer()], gf_TurnKhepriSwapModelStringIntoUnitEntry(EventPlayer(), gv_khepriSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_khepriSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextDefault[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_khepriSwapModelIsUnlockedGray[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextGray[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_khepriSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextSwarm[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    if ((gv_khepriSwapModelIsUnlockedMech[EventPlayer()] == true)) {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofUnlocked, PlayerGroupSingle(EventPlayer()));
    }
    else {
        libNtve_gf_SetDialogItemColor(gv_khepriSwapModelUnlockingManuTextMech[EventPlayer()], lv_colorofLocked, PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleKhepriSkinsManu_Init () {
    gt_ToggleKhepriSkinsManu = TriggerCreate("gt_ToggleKhepriSkinsManu_Func");
    TriggerAddEventDialogControl(gt_ToggleKhepriSkinsManu, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicks Khepri Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClicksKhepriButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerCanSelectThatSoldierModel;
    string lv_originalModelString;

    // Automatic Variable Declarations
    unitgroup autoD5B830B4_g;
    int autoD5B830B4_u;
    unit autoD5B830B4_var;
    unitgroup auto73519551_g;
    int auto73519551_u;
    unit auto73519551_var;

    // Variable Initialization
    lv_originalModelString = "";

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[1]) || (EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[2]) || (EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[3]) || (EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_originalModelString = gv_khepriSwapModelString[EventPlayer()];
    libNtve_gf_SetDialogItemToggled(gv_khepriSwapModelQueenChoiceButton[1], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_khepriSwapModelQueenChoiceButton[2], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_khepriSwapModelQueenChoiceButton[3], false, PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemToggled(gv_khepriSwapModelQueenChoiceButton[4], false, PlayerGroupSingle(EventPlayer()));
    if ((EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[1])) {
        gv_khepriSwapModelString[EventPlayer()] = "Default";
        if ((gv_khepriSwapModelIsUnlockedDefault[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[2])) {
        gv_khepriSwapModelString[EventPlayer()] = "Gray";
        if ((gv_khepriSwapModelIsUnlockedGray[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[3])) {
        gv_khepriSwapModelString[EventPlayer()] = "Swarm";
        if ((gv_khepriSwapModelIsUnlockedSwarm[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    else if ((EventDialogControl() == gv_khepriSwapModelQueenChoiceButton[4])) {
        gv_khepriSwapModelString[EventPlayer()] = "Mech";
        if ((gv_khepriSwapModelIsUnlockedMech[EventPlayer()] == true)) {
            lv_playerCanSelectThatSoldierModel = true;
        }

    }
    libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelManuLargeModel[EventPlayer()], gf_TurnKhepriSwapModelStringIntoUnitEntry(EventPlayer(), gv_khepriSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelManuMid1Model[EventPlayer()], gf_TurnKhepriBettleSwapModelStringIntoUnitEntry(EventPlayer(), gv_khepriSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelManuMid2Model[EventPlayer()], gf_TurnKhepriBettleSwapModelStringIntoUnitEntry(EventPlayer(), gv_khepriSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSoldierModel == true)) {
        libNtve_gf_SetDialogItemToggled(EventDialogControl(), true, PlayerGroupSingle(EventPlayer()));
        autoD5B830B4_g = UnitGroup("SwarmHostMP", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD5B830B4_u = UnitGroupCount(autoD5B830B4_g, c_unitCountAll);
        for (;; autoD5B830B4_u -= 1) {
            autoD5B830B4_var = UnitGroupUnitFromEnd(autoD5B830B4_g, autoD5B830B4_u);
            if (autoD5B830B4_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(autoD5B830B4_var, libNtve_gf_ModelSwap(gf_TurnKhepriSwapModelStringIntoModelEntry(gv_khepriSwapModelString[UnitGetOwner(autoD5B830B4_var)]), 1));
        }
        auto73519551_g = UnitGroup("LocustMP", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto73519551_u = UnitGroupCount(auto73519551_g, c_unitCountAll);
        for (;; auto73519551_u -= 1) {
            auto73519551_var = UnitGroupUnitFromEnd(auto73519551_g, auto73519551_u);
            if (auto73519551_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto73519551_var, libNtve_gf_ModelSwap(gf_TurnKhepriBettleSwapModelStringIntoModelEntry(gv_khepriSwapModelString[UnitGetOwner(auto73519551_var)]), 1));
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/15A88E22"), EventPlayer());
        gv_khepriSwapModelString[EventPlayer()] = lv_originalModelString;
    }
    libNtve_gf_SetDialogItemUnitLink(gv_khepriSwapModelManuButtonModel[EventPlayer()], gf_TurnKhepriSwapModelStringIntoUnitEntry(EventPlayer(), gv_khepriSwapModelString[EventPlayer()]), PlayerGroupSingle(EventPlayer()));
    if ((lv_playerCanSelectThatSoldierModel == true)) {
        DialogControlSetVisible(gv_khepriSwapModelClickMeModel[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_khepriSwapModelClickMeImage[EventPlayer()], PlayerGroupSingle(EventPlayer()), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClicksKhepriButton_Init () {
    gt_PlayerClicksKhepriButton = TriggerCreate("gt_PlayerClicksKhepriButton_Func");
    TriggerAddEventDialogControl(gt_PlayerClicksKhepriButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial TIp 1: Dig and pick queen
//--------------------------------------------------------------------------------------------------
bool gt_TutorialTIp1Digandpickqueen_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    playergroup lv_playerswhodonthaveaqueenyet;
    unitgroup[7] lv_queensofcheckedplayer;

    // Automatic Variable Declarations
    playergroup autoC9EC1C2C_g;
    int autoC9EC1C2C_var;
    const int auto4E5789AF_n = 10;
    int auto4E5789AF_i;
    playergroup auto1AB59D7A_g;
    int auto1AB59D7A_var;

    // Variable Initialization
    lv_playerswhodonthaveaqueenyet = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_queensofcheckedplayer[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC9EC1C2C_g = gv_tutorialPlayers;
    autoC9EC1C2C_var = -1;
    while (true) {
        autoC9EC1C2C_var = PlayerGroupNextPlayer(autoC9EC1C2C_g, autoC9EC1C2C_var);
        if (autoC9EC1C2C_var < 0) { break; }
        if (((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", autoC9EC1C2C_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", autoC9EC1C2C_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            PlayerGroupAdd(lv_playerswhodonthaveaqueenyet, autoC9EC1C2C_var);
        }

    }
    UIDisplayMessage(lv_playerswhodonthaveaqueenyet, c_messageAreaSubtitle, StringExternal("Param/Value/1A2C67B7"));
    Wait(2.0, c_timeGame);
    lv_playerswhodonthaveaqueenyet = PlayerGroupEmpty();
    for (auto4E5789AF_i = 1; auto4E5789AF_i <= auto4E5789AF_n; auto4E5789AF_i += 1) {
        MinimapPing(lv_playerswhodonthaveaqueenyet, UnitGetPosition(UnitGroupRandomUnit(UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)), 2.0, Color(100.00, 64.71, 0.00));
    }
    Wait(10.0, c_timeGame);
    auto1AB59D7A_g = gv_tutorialPlayers;
    auto1AB59D7A_var = -1;
    while (true) {
        auto1AB59D7A_var = PlayerGroupNextPlayer(auto1AB59D7A_g, auto1AB59D7A_var);
        if (auto1AB59D7A_var < 0) { break; }
        if (((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenBlackAnt", "QueenFireAnt", "QueenWoodAnt", auto1AB59D7A_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("QueenLeafCutterAnt", "QueenPharaohAnt", "QueenGhostAnt", auto1AB59D7A_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            PlayerGroupAdd(lv_playerswhodonthaveaqueenyet, auto1AB59D7A_var);
        }

    }
    UIDisplayMessage(lv_playerswhodonthaveaqueenyet, c_messageAreaSubtitle, StringExternal("Param/Value/62BEEE21"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialTIp1Digandpickqueen_Init () {
    gt_TutorialTIp1Digandpickqueen = TriggerCreate("gt_TutorialTIp1Digandpickqueen_Func");
    TriggerEnable(gt_TutorialTIp1Digandpickqueen, false);
    TriggerAddEventTimeElapsed(gt_TutorialTIp1Digandpickqueen, 90.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Tip 2: Build 5 Forager Nests
//--------------------------------------------------------------------------------------------------
bool gt_TutorialTip2Build5ForagerNests_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[7] lv_workerNestsofcheckedplayer;

    // Automatic Variable Declarations
    const int autoAB72ABE6_n = 5;
    int autoAB72ABE6_i;
    playergroup auto42CACA10_g;
    int auto42CACA10_var;
    playergroup auto30D80718_g;
    int auto30D80718_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_workerNestsofcheckedplayer[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoAB72ABE6_i = 1; autoAB72ABE6_i <= autoAB72ABE6_n; autoAB72ABE6_i += 1) {
        auto42CACA10_g = gv_tutorialPlayers;
        auto42CACA10_var = -1;
        while (true) {
            auto42CACA10_var = PlayerGroupNextPlayer(auto42CACA10_g, auto42CACA10_var);
            if (auto42CACA10_var < 0) { break; }
            if (((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "", "", auto42CACA10_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
                if ((UnitGetType(gv_queenOfPlayer[auto42CACA10_var]) != "NewQueen")) {
                    UIDisplayMessage(PlayerGroupSingle(auto42CACA10_var), c_messageAreaSubtitle, (StringExternal("Param/Value/A4B1C14E") + UnitGetName(gv_queenOfPlayer[auto42CACA10_var]) + StringExternal("Param/Value/B05239C5")));
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(auto42CACA10_var), c_messageAreaSubtitle, (StringExternal("Param/Value/D299B90E") + UnitGetName(gv_queenOfPlayer[auto42CACA10_var]) + StringExternal("Param/Value/F5CA56E6")));
                }
            }

        }
        Wait(20.0, c_timeGame);
    }
    Wait(300.0, c_timeGame);
    auto30D80718_g = gv_tutorialPlayers;
    auto30D80718_var = -1;
    while (true) {
        auto30D80718_var = PlayerGroupNextPlayer(auto30D80718_g, auto30D80718_var);
        if (auto30D80718_var < 0) { break; }
        if (((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "", "", auto30D80718_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
            UIDisplayMessage(PlayerGroupSingle(auto30D80718_var), c_messageAreaSubtitle, (StringExternal("Param/Value/6B4672AD") + UnitGetName(gv_queenOfPlayer[auto30D80718_var]) + StringExternal("Param/Value/95E99524")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialTip2Build5ForagerNests_Init () {
    gt_TutorialTip2Build5ForagerNests = TriggerCreate("gt_TutorialTip2Build5ForagerNests_Func");
    TriggerEnable(gt_TutorialTip2Build5ForagerNests, false);
    TriggerAddEventTimeElapsed(gt_TutorialTip2Build5ForagerNests, 140.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Tip 3: Build more Soldier Nests
//--------------------------------------------------------------------------------------------------
bool gt_TutorialTip3BuildmoreSoldierNests_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoB74D5187_n = 5;
    int autoB74D5187_i;
    playergroup auto6F345C9C_g;
    int auto6F345C9C_var;
    playergroup auto5566BD3E_g;
    int auto5566BD3E_var;

    // Actions
    if (!runActions) {
        return true;
    }

    for (autoB74D5187_i = 1; autoB74D5187_i <= autoB74D5187_n; autoB74D5187_i += 1) {
        auto6F345C9C_g = gv_tutorialPlayers;
        auto6F345C9C_var = -1;
        while (true) {
            auto6F345C9C_var = PlayerGroupNextPlayer(auto6F345C9C_g, auto6F345C9C_var);
            if (auto6F345C9C_var < 0) { break; }
            if (((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewSoldierNest", "", "", auto6F345C9C_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
                UIDisplayMessage(PlayerGroupSingle(auto6F345C9C_var), c_messageAreaSubtitle, (StringExternal("Param/Value/A23FF270") + UnitGetName(gv_queenOfPlayer[auto6F345C9C_var]) + StringExternal("Param/Value/A8DD458E")));
            }

        }
        Wait(20.0, c_timeGame);
    }
    Wait(300.0, c_timeGame);
    auto5566BD3E_g = gv_tutorialPlayers;
    auto5566BD3E_var = -1;
    while (true) {
        auto5566BD3E_var = PlayerGroupNextPlayer(auto5566BD3E_g, auto5566BD3E_var);
        if (auto5566BD3E_var < 0) { break; }
        if (((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewSoldierNest", "", "", auto5566BD3E_var, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5))) {
            UIDisplayMessage(PlayerGroupSingle(auto5566BD3E_var), c_messageAreaSubtitle, (StringExternal("Param/Value/1089D3F0") + UnitGetName(gv_queenOfPlayer[auto5566BD3E_var]) + StringExternal("Param/Value/4E9ABBBF")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialTip3BuildmoreSoldierNests_Init () {
    gt_TutorialTip3BuildmoreSoldierNests = TriggerCreate("gt_TutorialTip3BuildmoreSoldierNests_Func");
    TriggerEnable(gt_TutorialTip3BuildmoreSoldierNests, false);
    TriggerAddEventTimeElapsed(gt_TutorialTip3BuildmoreSoldierNests, 320.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Tip 4: Get speed upgrade
//--------------------------------------------------------------------------------------------------
bool gt_TutorialTip4Getspeedupgrade_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto36219DEB_g;
    int auto36219DEB_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto36219DEB_g = gv_tutorialPlayers;
    auto36219DEB_var = -1;
    while (true) {
        auto36219DEB_var = PlayerGroupNextPlayer(auto36219DEB_g, auto36219DEB_var);
        if (auto36219DEB_var < 0) { break; }
        if ((TechTreeUpgradeCount(auto36219DEB_var, "zerglingmovementspeed", c_techCountQueuedOrBetter) == 0)) {
            UIDisplayMessage(PlayerGroupSingle(auto36219DEB_var), c_messageAreaSubtitle, (StringExternal("Param/Value/5D190929") + UnitGetName(gv_queenOfPlayer[auto36219DEB_var]) + StringExternal("Param/Value/797DA185")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialTip4Getspeedupgrade_Init () {
    gt_TutorialTip4Getspeedupgrade = TriggerCreate("gt_TutorialTip4Getspeedupgrade_Func");
    TriggerEnable(gt_TutorialTip4Getspeedupgrade, false);
    TriggerAddEventTimeElapsed(gt_TutorialTip4Getspeedupgrade, 350.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tutorial Tip 5: Pick Tier 1 Ability
//--------------------------------------------------------------------------------------------------
bool gt_TutorialTip5PickTier1Ability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto061A0AEA_g;
    int auto061A0AEA_var;
    playergroup autoB7D320EA_g;
    int autoB7D320EA_var;
    playergroup auto542DC89A_g;
    int auto542DC89A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto061A0AEA_g = gv_tutorialPlayers;
    auto061A0AEA_var = -1;
    while (true) {
        auto061A0AEA_var = PlayerGroupNextPlayer(auto061A0AEA_g, auto061A0AEA_var);
        if (auto061A0AEA_var < 0) { break; }
        if (((TechTreeUpgradeCount(auto061A0AEA_var, "ReaserchedTier1Ability", c_techCountCompleteOnly) == 1))) {
            UIDisplayMessage(PlayerGroupSingle(auto061A0AEA_var), c_messageAreaSubtitle, (StringExternal("Param/Value/C727596E") + UnitGetName(gv_queenOfPlayer[auto061A0AEA_var]) + StringExternal("Param/Value/2E03B51E")));
        }

    }
    Wait(300.0, c_timeGame);
    autoB7D320EA_g = gv_tutorialPlayers;
    autoB7D320EA_var = -1;
    while (true) {
        autoB7D320EA_var = PlayerGroupNextPlayer(autoB7D320EA_g, autoB7D320EA_var);
        if (autoB7D320EA_var < 0) { break; }
        if (((TechTreeUpgradeCount(autoB7D320EA_var, "ReaserchedTier2Ability", c_techCountCompleteOnly) == 1))) {
            UIDisplayMessage(PlayerGroupSingle(autoB7D320EA_var), c_messageAreaSubtitle, (StringExternal("Param/Value/97C184D1") + UnitGetName(gv_queenOfPlayer[autoB7D320EA_var]) + StringExternal("Param/Value/8906DE9D")));
        }

    }
    Wait(300.0, c_timeGame);
    auto542DC89A_g = gv_tutorialPlayers;
    auto542DC89A_var = -1;
    while (true) {
        auto542DC89A_var = PlayerGroupNextPlayer(auto542DC89A_g, auto542DC89A_var);
        if (auto542DC89A_var < 0) { break; }
        if (((TechTreeUpgradeCount(auto542DC89A_var, "ReaserchedTier3Ability", c_techCountCompleteOnly) == 1))) {
            UIDisplayMessage(PlayerGroupSingle(auto542DC89A_var), c_messageAreaSubtitle, (StringExternal("Param/Value/71DD624E") + UnitGetName(gv_queenOfPlayer[auto542DC89A_var]) + StringExternal("Param/Value/51D1C863")));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TutorialTip5PickTier1Ability_Init () {
    gt_TutorialTip5PickTier1Ability = TriggerCreate("gt_TutorialTip5PickTier1Ability_Func");
    TriggerEnable(gt_TutorialTip5PickTier1Ability, false);
    TriggerAddEventTimeElapsed(gt_TutorialTip5PickTier1Ability, 400.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Snow down the screen of all players
//--------------------------------------------------------------------------------------------------
bool gt_RunSnowdownthescreenofallplayers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ranOnce;
    int lv_yOffset;
    int lv_snowDialog;
    int lv_snowDialogItemImage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_yOffset = -1167;
    lv_snowDialog = c_invalidDialogId;
    lv_snowDialogItemImage = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DialogCreateAEvo(1210, 2135, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    lv_snowDialog = DialogLastCreated();
    while (true) {
        if ((gv_initializationDone == false)) {
            if ((lv_ranOnce == 0)) {
                lv_ranOnce = 1;
            }
            else {
                DialogControlSetVisible(lv_snowDialogItemImage, PlayerGroupAll(), false);
            }
            libNtve_gf_CreateDialogItemImage(lv_snowDialog, 2135, 1210, c_anchorCenter, 0, lv_yOffset, StringToText(""), "Snow.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
            lv_snowDialogItemImage = DialogControlLastCreated();
            lv_yOffset = (lv_yOffset + 5);
            Wait(0.08, c_timeGame);
        }
        else {
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 2.0, 100.0);
            Wait(2.0, c_timeGame);
            DialogControlSetVisible(lv_snowDialogItemImage, PlayerGroupAll(), false);
            DialogSetVisible(lv_snowDialog, PlayerGroupActive(), false);
            TriggerEnable(TriggerGetCurrent(), false);
            return true;
        }
        if ((gv_initializationDone == true)) {
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RunSnowdownthescreenofallplayers_Init () {
    gt_RunSnowdownthescreenofallplayers = TriggerCreate("gt_RunSnowdownthescreenofallplayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace Ping Sound With Christmas Ping Sound
//--------------------------------------------------------------------------------------------------
bool gt_ReplacePingSoundWithChristmasPingSound_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), c_soundCategoryAlert);
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryAlert);
    SoundPlayForPlayer(SoundLink("ChristmasGiftPing", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("ChristmasGiftPing", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReplacePingSoundWithChristmasPingSound_Init () {
    gt_ReplacePingSoundWithChristmasPingSound = TriggerCreate("gt_ReplacePingSoundWithChristmasPingSound_Func");
    TriggerEnable(gt_ReplacePingSoundWithChristmasPingSound, false);
    TriggerAddEventPing(gt_ReplacePingSoundWithChristmasPingSound, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Replace Soundtrack Christmas Soundtrack 
//--------------------------------------------------------------------------------------------------
bool gt_ReplaceSoundtrackChristmasSoundtrack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelStop(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), c_soundCategoryAlert);
    SoundChannelStop(PlayerGroupSingle(EventPlayer()), c_soundCategoryAlert);
    SoundPlayForPlayer(SoundLink("ChristmasGiftPing", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("ChristmasGiftPing", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/ADBE05D8"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReplaceSoundtrackChristmasSoundtrack_Init () {
    gt_ReplaceSoundtrackChristmasSoundtrack = TriggerCreate("gt_ReplaceSoundtrackChristmasSoundtrack_Func");
    TriggerEnable(gt_ReplaceSoundtrackChristmasSoundtrack, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Give Created Units Christmas hats
//--------------------------------------------------------------------------------------------------
bool gt_GiveCreatedUnitsChristmashats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scaleOfModel;
    string lv_localAttachmentPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleOfModel = 1.4;
    lv_localAttachmentPoint = "Ref_Target";

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "NewQueen") || (UnitGetType(EventUnitCreatedUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenFireAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenGhostAnt") || (UnitGetType(EventUnitCreatedUnit()) == "Ultralisk") || (UnitGetType(EventUnitCreatedUnit()) == "Hydralisk") || (UnitGetType(EventUnitCreatedUnit()) == "Locust") || (UnitGetType(EventUnitCreatedUnit()) == "TunnelTrembler") || (UnitGetType(EventUnitCreatedUnit()) == "SwarmHostMP") || (UnitGetType(EventUnitCreatedUnit()) == "InfestedAbomination") || (UnitGetType(EventUnitCreatedUnit()) == "SpaceCowSmall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitCreatedUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenFireAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenGhostAnt"))) {
        lv_localAttachmentPoint = "Ref_Weapon";
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "NewQueen")) {
        lv_scaleOfModel = 0.7;
    }
    else if (((UnitGetType(EventUnitCreatedUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenFireAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnitCreatedUnit()) == "QueenGhostAnt") || (UnitGetType(EventUnitCreatedUnit()) == "Hydralisk") || (UnitGetType(EventUnitCreatedUnit()) == "Locust"))) {
        lv_localAttachmentPoint = "Ref_Head";
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "TunnelTrembler")) {
        lv_localAttachmentPoint = "Ref_Head";
        lv_scaleOfModel = 1.5;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "Ultralisk")) {
        lv_localAttachmentPoint = "Ref_Head";
        lv_scaleOfModel = 2.7;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "InfestedAbomination")) {
        lv_localAttachmentPoint = "Ref_Head";
        lv_scaleOfModel = 2.7;
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "SwarmHostMP")) {
        lv_scaleOfModel = 2.7;
    }
    libNtve_gf_AttachActorToUnit(EventUnitCreatedUnit(), "Actorthatdeletesafterunitdeath", lv_localAttachmentPoint);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_ModelSwap("ChristmasHat", 0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(lv_scaleOfModel, lv_scaleOfModel, lv_scaleOfModel, 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GiveCreatedUnitsChristmashats_Init () {
    gt_GiveCreatedUnitsChristmashats = TriggerCreate("gt_GiveCreatedUnitsChristmashats_Func");
    TriggerEnable(gt_GiveCreatedUnitsChristmashats, false);
    TriggerAddEventUnitCreated(gt_GiveCreatedUnitsChristmashats, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Carry Food Based On Food Type Christmas
//--------------------------------------------------------------------------------------------------
bool gt_SetCarryFoodBasedOnFoodTypeChristmas_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == true) && (gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == true))) {
        if ((UnitGroupCount(UnitGroup("PlantFood", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_model = gf_ReturnRandomGiftColorbasedonFoodType(false);
        }
        else if ((UnitGroupCount(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_model = gf_ReturnRandomGiftColorbasedonFoodType(true);
        }
    }
    else {
        if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == true) && (gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == false))) {
            lv_model = gf_ReturnRandomGiftColorbasedonFoodType(false);
        }
        else if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == false) && (gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == true))) {
            lv_model = gf_ReturnRandomGiftColorbasedonFoodType(true);
        }
    }
    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "CarryModel"), libNtve_gf_ModelSwap(lv_model, 1));
    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "CarryModel"), libNtve_gf_SetScale(((RandomInt(6, 14) / 10.0) * 0.5), ((RandomInt(6, 14) / 10.0) * 0.5), ((RandomInt(6, 14) / 10.0) * 0.5), 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetCarryFoodBasedOnFoodTypeChristmas_Init () {
    gt_SetCarryFoodBasedOnFoodTypeChristmas = TriggerCreate("gt_SetCarryFoodBasedOnFoodTypeChristmas_Func");
    TriggerEnable(gt_SetCarryFoodBasedOnFoodTypeChristmas, false);
    TriggerAddEventUnitAbility(gt_SetCarryFoodBasedOnFoodTypeChristmas, null, AbilityCommand("DroneHarvest", 1), c_abilHarvestStageWaitToReturn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ModelSwap Food to Gift
//--------------------------------------------------------------------------------------------------
bool gt_ModelSwapFoodtoGift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "MineralField") || (UnitGetType(EventUnitCreatedUnit()) == "PlantFood")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnitCreatedUnit()) == "MineralField")) {
        lv_model = gf_ReturnRandomGiftColorbasedonFoodType(true);
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "PlantFood")) {
        lv_model = gf_ReturnRandomGiftColorbasedonFoodType(false);
    }
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_ModelSwap(lv_model, 0));
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale((RandomInt(8, 12) / 10.0), (RandomInt(8, 12) / 10.0), (RandomInt(8, 12) / 10.0), 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelSwapFoodtoGift_Init () {
    gt_ModelSwapFoodtoGift = TriggerCreate("gt_ModelSwapFoodtoGift_Func");
    TriggerEnable(gt_ModelSwapFoodtoGift, false);
    TriggerAddEventUnitCreated(gt_ModelSwapFoodtoGift, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen death
//--------------------------------------------------------------------------------------------------
bool gt_Queendeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_friendlyQueenCount;
    int lv_currentPlayer;
    int lv_currentTeam;
    unit lv_currentUnit;
    int lv_otherTeam;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_rankedResultsShown == false))) {
            return false;
        }

        if (!((gf_MatchIsRanked() == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "NewQueen") || (UnitGetType(EventUnit()) == "RavagerCocoon") || (UnitGetType(EventUnit()) == "Queen") || (UnitGetType(EventUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnit()) == "QueenFireAnt") || (UnitGetType(EventUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnit()) == "QueenGhostAnt")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentTeam = gf_TeamOfPlayer(lv_currentPlayer);
    lv_otherTeam = gf_OtherTeam(lv_currentTeam);
    if (((lv_currentTeam == 0) || (lv_otherTeam == 0))) {
        return true;
    }
    lv_friendlyQueenCount = gf_TeamQueenCount(lv_currentPlayer);
    if ((lv_friendlyQueenCount == 0) && (gv_statRecordingEnabled == true)) {
        Wait(0.0, c_timeGame);
        gf_Rankedmatchresults(lv_otherTeam);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Queendeath_Init () {
    gt_Queendeath = TriggerCreate("gt_Queendeath_Func");
    TriggerAddEventUnitDied(gt_Queendeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify all ratings
//--------------------------------------------------------------------------------------------------
bool gt_Modifyallratings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_losers;
    int lv_winners;
    text lv_text;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup autoB0BB8618_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_winners = gv_rankedEndWinningTeam;
    lv_losers = gf_OtherTeam(lv_winners);
    autoB0BB8618_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoB0BB8618_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        lv_text = null;
        if ((gf_TeamOfPlayer(lv_currentPlayer) == lv_winners)) {
            gf_Modifyratingofplayer(lv_currentPlayer, true);
            lv_text = StringExternal("Param/Value/36BF2E02");
            lv_text = (lv_text + PlayerName(lv_currentPlayer) + StringExternal("Param/Value/F8E770E7"));
            lv_text = (lv_text + StringExternal("Param/Value/71127AA1") + FixedToText(gv_storedRatingDelta[lv_currentPlayer], 0) + StringExternal("Param/Value/A8E9C350"));
            lv_text = (lv_text + StringExternal("Param/Value/3CEA6592") + FixedToText(gv_playerRatingModified[lv_currentPlayer], 0));
            gv_playerWon[lv_currentPlayer] = true;
        }
        else {
            gf_Modifyratingofplayer(lv_currentPlayer, false);
            lv_text = StringExternal("Param/Value/040D20C4");
            lv_text = (lv_text + PlayerName(lv_currentPlayer) + StringExternal("Param/Value/8C12C9A2"));
            lv_text = (lv_text + StringExternal("Param/Value/44976139") + FixedToText(AbsF(gv_storedRatingDelta[lv_currentPlayer]), 0) + StringExternal("Param/Value/FED65683"));
            lv_text = (lv_text + StringExternal("Param/Value/B0E5376A") + FixedToText(gv_playerRatingModified[lv_currentPlayer], 0));
        }
        libNtve_gf_SetDialogItemText(gv_rankedResultsLabel, lv_text, PlayerGroupSingle(lv_currentPlayer));
    }
    DialogSetVisible(gv_rankedResults, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Modifyallratings_Init () {
    gt_Modifyallratings = TriggerCreate("gt_Modifyallratings_Func");
    TriggerAddEventGeneric(gt_Modifyallratings, "rate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize ranked results dialog
//--------------------------------------------------------------------------------------------------
bool gt_Initializerankedresultsdialog_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DialogCreateAEvo(800, 400, c_anchorCenter, 0, -100, false);
    gv_rankedResults = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 800, 400, c_anchorCenter, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "RankedResults", PlayerGroupAll());
    gv_rankedResultsLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initializerankedresultsdialog_Init () {
    gt_Initializerankedresultsdialog = TriggerCreate("gt_Initializerankedresultsdialog_Func");
    TriggerAddEventMapInit(gt_Initializerankedresultsdialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicked Queen Choice Button
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClickedQueenChoiceButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomQueenNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomQueenNumber = RandomInt(1, 6);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("MorphBlackDummy", 0))) {
        gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenBlackAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphFireDummy", 0))) {
        gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenFireAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphWoodDummy", 0))) {
        gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenWoodAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphPharaohDummy", 0))) {
        gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenPharaohAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphLeafCutterDummy", 0))) {
        gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenLeafCutterAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphGhostDummy", 0))) {
        gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenGhostAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("AbilityRandomQueen", 0))) {
        libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
        if ((lv_randomQueenNumber == 1)) {
            gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenBlackAnt");
        }
        else if ((lv_randomQueenNumber == 2)) {
            gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenFireAnt");
        }
        else if ((lv_randomQueenNumber == 3)) {
            gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenWoodAnt");
        }
        else if ((lv_randomQueenNumber == 4)) {
            gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenPharaohAnt");
        }
        else if ((lv_randomQueenNumber == 5)) {
            gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenLeafCutterAnt");
        }
        else if ((lv_randomQueenNumber == 6)) {
            gf_Startqueenmorphforplayer(gv_queenOfPlayer[UnitGetOwner(EventUnit())], "QueenGhostAnt");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClickedQueenChoiceButton_Init () {
    gt_PlayerClickedQueenChoiceButton = TriggerCreate("gt_PlayerClickedQueenChoiceButton_Func");
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("AbilityRandomQueen", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("MorphGhostDummy", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("MorphLeafCutterDummy", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("MorphPharaohDummy", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("MorphWoodDummy", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("MorphFireDummy", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedQueenChoiceButton, null, AbilityCommand("MorphBlackDummy", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player's Queen Morph Finished
//--------------------------------------------------------------------------------------------------
bool gt_PlayersQueenMorphFinished_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("MorphToQueen", 0))) {
        gf_Endqueenmorphforplayer(EventUnit(), "QueenBlackAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenFire", 0))) {
        gf_Endqueenmorphforplayer(EventUnit(), "QueenFireAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenWood", 0))) {
        gf_Endqueenmorphforplayer(EventUnit(), "QueenWoodAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenPharaoh", 0))) {
        gf_Endqueenmorphforplayer(EventUnit(), "QueenPharaohAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenLeafCutter", 0))) {
        gf_Endqueenmorphforplayer(EventUnit(), "QueenLeafCutterAnt");
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenGhost", 0))) {
        gf_Endqueenmorphforplayer(EventUnit(), "QueenGhostAnt");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayersQueenMorphFinished_Init () {
    gt_PlayersQueenMorphFinished = TriggerCreate("gt_PlayersQueenMorphFinished_Func");
    TriggerAddEventUnitAbility(gt_PlayersQueenMorphFinished, null, AbilityCommand("MorphToQueenGhost", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlayersQueenMorphFinished, null, AbilityCommand("MorphToQueenLeafCutter", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlayersQueenMorphFinished, null, AbilityCommand("MorphToQueenPharaoh", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlayersQueenMorphFinished, null, AbilityCommand("MorphToQueenWood", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlayersQueenMorphFinished, null, AbilityCommand("MorphToQueenFire", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_PlayersQueenMorphFinished, null, AbilityCommand("MorphToQueen", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel morph - Random 
//--------------------------------------------------------------------------------------------------
bool gt_CancelmorphRandom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("NewQueen", 1));
    gv_playerChosenRanomQueen[UnitGetOwner(EventUnit())] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelmorphRandom_Init () {
    gt_CancelmorphRandom = TriggerCreate("gt_CancelmorphRandom_Func");
    TriggerAddEventUnitAbility(gt_CancelmorphRandom, null, AbilityCommand("MorphToQueen", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CancelmorphRandom, null, AbilityCommand("MorphToQueenFire", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CancelmorphRandom, null, AbilityCommand("MorphToQueenWood", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CancelmorphRandom, null, AbilityCommand("MorphToQueenPharaoh", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CancelmorphRandom, null, AbilityCommand("MorphToQueenLeafCutter", 1), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_CancelmorphRandom, null, AbilityCommand("MorphGhostDummy", 1), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Morph Eggs Fixer
//--------------------------------------------------------------------------------------------------
bool gt_MorphEggsFixer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("MorphToQueen", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("QueenCocoonBlack", 1));
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenFire", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("RavagerCocoon", 1));
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenWood", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("QueenCocoonWood", 1));
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenPharaoh", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("QueenCocoonPharaoh", 1));
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenLeafCutter", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("QueenCocoonLeafCutter", 1));
    }
    else if ((EventUnitAbility() == AbilityCommand("MorphToQueenGhost", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("QueenCocoonGhostAnt", 1));
    }
    else if ((EventUnitAbility() == AbilityCommand("AbilityRandomQueen", 0))) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("QueenCocoonRandom", 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MorphEggsFixer_Init () {
    gt_MorphEggsFixer = TriggerCreate("gt_MorphEggsFixer_Func");
    TriggerAddEventUnitAbility(gt_MorphEggsFixer, null, AbilityCommand("MorphToQueen", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MorphEggsFixer, null, AbilityCommand("MorphToQueenFire", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MorphEggsFixer, null, AbilityCommand("MorphToQueenWood", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MorphEggsFixer, null, AbilityCommand("MorphToQueenPharaoh", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MorphEggsFixer, null, AbilityCommand("MorphToQueenLeafCutter", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_MorphEggsFixer, null, AbilityCommand("MorphToQueenGhost", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize AI profiles
//--------------------------------------------------------------------------------------------------
bool gt_InitializeAIprofiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentProfile;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentProfile = 1;
    gv_aIProfile_ForagerMax[lv_currentProfile] = 10;
    gv_aIProfile_ForagerToSoldierRatio[lv_currentProfile] = 0.9;
    gv_aIProfile_BroodlingMax[lv_currentProfile] = 2;
    gv_aIProfile_BroodlingToSoldierRatio[lv_currentProfile] = 0.25;
    gv_aIProfile_ActionCooldown[lv_currentProfile] = 1.7;
    gv_aIProfile_AttackWavePeriod[lv_currentProfile] = 120.0;
    gv_aIProfile_OffensiveDigDuration[lv_currentProfile] = 60.0;
    gv_aIProfile_SoliderTargetPeriod[lv_currentProfile] = 10.0;
    gv_aIProfile_CheatFoodRate[lv_currentProfile] = -0.5;
    gv_aIProfile_CheatEnergyRate[lv_currentProfile] = -0.2;
    lv_currentProfile = 2;
    gv_aIProfile_ForagerMax[lv_currentProfile] = 25;
    gv_aIProfile_ForagerToSoldierRatio[lv_currentProfile] = 1.2;
    gv_aIProfile_BroodlingMax[lv_currentProfile] = 5;
    gv_aIProfile_BroodlingToSoldierRatio[lv_currentProfile] = 0.333;
    gv_aIProfile_ActionCooldown[lv_currentProfile] = 1.2;
    gv_aIProfile_AttackWavePeriod[lv_currentProfile] = 60.0;
    gv_aIProfile_SoliderTargetPeriod[lv_currentProfile] = 5.0;
    gv_aIProfile_OffensiveDigDuration[lv_currentProfile] = 60.0;
    gv_aIProfile_CheatFoodRate[lv_currentProfile] = 0.0;
    gv_aIProfile_CheatEnergyRate[lv_currentProfile] = 0.0;
    lv_currentProfile = 3;
    gv_aIProfile_ForagerMax[lv_currentProfile] = 20;
    gv_aIProfile_ForagerToSoldierRatio[lv_currentProfile] = 1.0;
    gv_aIProfile_BroodlingMax[lv_currentProfile] = 8;
    gv_aIProfile_BroodlingToSoldierRatio[lv_currentProfile] = 0.333;
    gv_aIProfile_ActionCooldown[lv_currentProfile] = 1.0;
    gv_aIProfile_AttackWavePeriod[lv_currentProfile] = 45.0;
    gv_aIProfile_SoliderTargetPeriod[lv_currentProfile] = 4.0;
    gv_aIProfile_OffensiveDigDuration[lv_currentProfile] = 60.0;
    gv_aIProfile_CheatFoodRate[lv_currentProfile] = 1.5;
    gv_aIProfile_CheatEnergyRate[lv_currentProfile] = 0.5;
    lv_currentProfile = 4;
    gv_aIProfile_ForagerMax[lv_currentProfile] = 30;
    gv_aIProfile_ForagerToSoldierRatio[lv_currentProfile] = 1.0;
    gv_aIProfile_BroodlingMax[lv_currentProfile] = 8;
    gv_aIProfile_BroodlingToSoldierRatio[lv_currentProfile] = 0.333;
    gv_aIProfile_ActionCooldown[lv_currentProfile] = 0.6;
    gv_aIProfile_AttackWavePeriod[lv_currentProfile] = 35.0;
    gv_aIProfile_SoliderTargetPeriod[lv_currentProfile] = 4.0;
    gv_aIProfile_OffensiveDigDuration[lv_currentProfile] = 90.0;
    gv_aIProfile_CheatFoodRate[lv_currentProfile] = 2.0;
    gv_aIProfile_CheatEnergyRate[lv_currentProfile] = 3.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitializeAIprofiles_Init () {
    gt_InitializeAIprofiles = TriggerCreate("gt_InitializeAIprofiles_Func");
    TriggerAddEventMapInit(gt_InitializeAIprofiles);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI damage point
//--------------------------------------------------------------------------------------------------
bool gt_AIdamagepoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_aI_Active[UnitGetOwner(EventUnit())] == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "NewWorkerNest") || (UnitGetType(EventUnit()) == "NewSoldierNest") || (UnitGetType(EventUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnit()) == "MediumSpikeNest") || (UnitGetType(EventUnit()) == "LargeSpikeNest")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_aI_CurrentDamagePoint[UnitGetOwner(EventUnit())] = UnitGetPosition(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIdamagepoint_Init () {
    gt_AIdamagepoint = TriggerCreate("gt_AIdamagepoint_Func");
    TriggerAddEventUnitDied(gt_AIdamagepoint, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reinforce base defense
//--------------------------------------------------------------------------------------------------
bool gt_Reinforcebasedefense_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_soldierGroup;
    unitgroup lv_enemyUnitGroup;
    point lv_deathPoint;
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_soldierGroup = UnitGroupEmpty();
    lv_enemyUnitGroup = UnitGroupEmpty();
    lv_deathPoint = UnitGetPosition(EventUnit());
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_aI_Active[UnitGetOwner(EventUnit())] == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) == "NewWorkerNest") || (UnitGetType(EventUnit()) == "NewSoldierNest")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_enemyUnitGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "Ultralisk", "Locust", lv_currentPlayer, c_unitAllianceEnemy, RegionCircle(lv_deathPoint, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_enemyUnitGroup, c_unitCountAlive) >= 10)) {
        lv_soldierGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "Hydralisk", "Locust", lv_currentPlayer, -1, RegionCircle(lv_deathPoint, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_soldierGroup, libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Ultralisk", "", "", lv_currentPlayer, -1, RegionCircle(lv_deathPoint, 14.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupIssueOrder(lv_soldierGroup, OrderTargetingPoint(AbilityCommand("move", 3), lv_deathPoint), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Reinforcebasedefense_Init () {
    gt_Reinforcebasedefense = TriggerCreate("gt_Reinforcebasedefense_Func");
    TriggerAddEventUnitDied(gt_Reinforcebasedefense, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI difficulty Food Multiplier
//--------------------------------------------------------------------------------------------------
bool gt_AIdifficultyFoodMultiplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeComputer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, gv_aIdifficultyFoodMultiplier[UnitGetOwner(EventUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AIdifficultyFoodMultiplier_Init () {
    gt_AIdifficultyFoodMultiplier = TriggerCreate("gt_AIdifficultyFoodMultiplier_Func");
    TriggerAddEventUnitAbility(gt_AIdifficultyFoodMultiplier, null, AbilityCommand("DroneHarvest", 1), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allow Plant Collection
//--------------------------------------------------------------------------------------------------
bool gt_AllowPlantCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstWordOfTextFoodTypeToChange;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_firstWordOfTextFoodTypeToChange = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/37EF334E"));
    gv_canCollectPlantFood[EventPlayer()] = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/5980F484"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllowPlantCollection_Init () {
    gt_AllowPlantCollection = TriggerCreate("gt_AllowPlantCollection_Func");
    TriggerAddEventChatMessage(gt_AllowPlantCollection, c_playerAny, "AllowPlant", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allow Meat Collection
//--------------------------------------------------------------------------------------------------
bool gt_AllowMeatCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstWordOfTextFoodTypeToChange;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_firstWordOfTextFoodTypeToChange = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3B8DE06E"));
    gv_canCollectMeatFood[EventPlayer()] = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F450A241"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AllowMeatCollection_Init () {
    gt_AllowMeatCollection = TriggerCreate("gt_AllowMeatCollection_Func");
    TriggerAddEventChatMessage(gt_AllowMeatCollection, c_playerAny, "AllowMeat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deny Plant Collection
//--------------------------------------------------------------------------------------------------
bool gt_DenyPlantCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstWordOfTextFoodTypeToChange;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_firstWordOfTextFoodTypeToChange = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8642C0E9"));
    gv_canCollectPlantFood[EventPlayer()] = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/0ED46D10"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DenyPlantCollection_Init () {
    gt_DenyPlantCollection = TriggerCreate("gt_DenyPlantCollection_Func");
    TriggerAddEventChatMessage(gt_DenyPlantCollection, c_playerAny, "DenyPlant", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deny Meat Collection
//--------------------------------------------------------------------------------------------------
bool gt_DenyMeatCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_firstWordOfTextFoodTypeToChange;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_firstWordOfTextFoodTypeToChange = 3;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/05B62F90"));
    gv_canCollectMeatFood[EventPlayer()] = false;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/38A4FBD4"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DenyMeatCollection_Init () {
    gt_DenyMeatCollection = TriggerCreate("gt_DenyMeatCollection_Func");
    TriggerAddEventChatMessage(gt_DenyMeatCollection, c_playerAny, "DenyMeat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make idle foragers work
//--------------------------------------------------------------------------------------------------
bool gt_Makeidleforagerswork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_closestCritterOrFood;
    unitgroup lv_critterAndFoodGroup;
    point lv_searchPoint;
    unitgroup lv_queenGroup;
    unitgroup lv_blackQueens;
    unitgroup lv_fireQueens;
    unitgroup lv_woodQueens;
    unitgroup lv_pharaohQueens;
    unitgroup lv_leafCutterQueens;
    unitgroup lv_ghostQueens;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto30F433F3_g;
    int auto30F433F3_u;
    const int auto0BDD3075_n = 3;
    int auto0BDD3075_i;

    // Variable Initialization
    lv_critterAndFoodGroup = UnitGroupEmpty();
    lv_queenGroup = UnitGroupEmpty();
    lv_blackQueens = UnitGroupEmpty();
    lv_fireQueens = UnitGroupEmpty();
    lv_woodQueens = UnitGroupEmpty();
    lv_pharaohQueens = UnitGroupEmpty();
    lv_leafCutterQueens = UnitGroupEmpty();
    lv_ghostQueens = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "ForagerIgnoreAI") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(UnitGroupSelected(UnitGetOwner(EventUnit())), EventUnit()) == true)) {
        return true;
    }

    lv_queenGroup = UnitGroup("Queen", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_blackQueens = UnitGroup("QueenBlackAnt", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_queenGroup, lv_blackQueens);
    lv_fireQueens = UnitGroup("QueenFireAnt", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_queenGroup, lv_fireQueens);
    lv_woodQueens = UnitGroup("QueenWoodAnt", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_queenGroup, lv_woodQueens);
    lv_pharaohQueens = UnitGroup("QueenPharaohAnt", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_queenGroup, lv_pharaohQueens);
    lv_leafCutterQueens = UnitGroup("QueenLeafCutterAnt", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_queenGroup, lv_leafCutterQueens);
    lv_ghostQueens = UnitGroup("QueenGhostAnt", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupAddUnitGroup(lv_queenGroup, lv_ghostQueens);
    if ((UnitGroupCount(lv_queenGroup, c_unitCountAlive) >= 1)) {
        if ((RandomFixed(0.0, 100.0) <= 50.0)) {
            lv_searchPoint = UnitGetPosition(EventUnit());
        }
        else {
            lv_searchPoint = UnitGetPosition(UnitGroupRandomUnit(UnitGroup("NewWorkerNest", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive));
        }
    }
    else {
        lv_searchPoint = UnitGetPosition(EventUnit());
    }
    if ((gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == true)) {
        UnitGroupAddUnitGroup(lv_critterAndFoodGroup, UnitGroup("SpaceCowSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_critterAndFoodGroup, UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }

    if ((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == true)) {
        UnitGroupAddUnitGroup(lv_critterAndFoodGroup, UnitGroup("PlantFood", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_critterAndFoodGroup, UnitGroup("DeadFlowerFood", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }

    auto30F433F3_g = lv_critterAndFoodGroup;
    auto30F433F3_u = UnitGroupCount(auto30F433F3_g, c_unitCountAll);
    for (;; auto30F433F3_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto30F433F3_g, auto30F433F3_u);
        if (lv_currentUnit == null) { break; }
        if ((((UnitGetType(lv_currentUnit) == "Fungus") && ((libNtve_gf_UnitIsVisibleToPlayer(lv_currentUnit, UnitGetOwner(EventUnit())) == false) || (PointPathingCost(UnitGetPosition(EventUnit()), UnitGetPosition(lv_currentUnit)) >= 18))) || (UnitGroupCount(UnitGroup("Drone", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(lv_currentUnit), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2) || (PointPathingIsConnected(UnitGetPosition(EventUnit()), UnitGetPosition(lv_currentUnit)) == false) || (PointPathingCost(UnitGetPosition(EventUnit()), UnitGetPosition(lv_currentUnit)) >= 1000))) {
            UnitGroupRemove(lv_critterAndFoodGroup, lv_currentUnit);
        }

    }
    for (auto0BDD3075_i = 1; auto0BDD3075_i <= auto0BDD3075_n; auto0BDD3075_i += 1) {
        if ((UnitGroupCount(lv_critterAndFoodGroup, c_unitCountAlive) >= 2) && (RandomFixed(0.0, 100.0) <= 15.0)) {
            UnitGroupRemove(lv_critterAndFoodGroup, UnitGroupClosestToPoint(lv_critterAndFoodGroup, lv_searchPoint));
        }

    }
    if ((UnitGroupCount(lv_critterAndFoodGroup, c_unitCountAlive) >= 1)) {
        lv_closestCritterOrFood = UnitGroupClosestToPoint(lv_critterAndFoodGroup, lv_searchPoint);
        if (((UnitGetType(lv_closestCritterOrFood) == "SpaceCowSmall"))) {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestCritterOrFood), c_orderQueueReplace);
            if ((UnitGetType(lv_closestCritterOrFood) != "Scantipede")) {
            }
            else {
                UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("ClaimLivestock", 0), lv_closestCritterOrFood), c_orderQueueReplace);
            }
        }
        else {
            UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_closestCritterOrFood), c_orderQueueReplace);
        }
        UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), lv_closestCritterOrFood), c_orderQueueAddToEnd);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Makeidleforagerswork_Init () {
    gt_Makeidleforagerswork = TriggerCreate("gt_Makeidleforagerswork_Func");
    TriggerAddEventUnitBecomesIdle(gt_Makeidleforagerswork, null, true);
    TriggerAddEventUnitCreated(gt_Makeidleforagerswork, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: FoodType Enforcer
//--------------------------------------------------------------------------------------------------
bool gt_FoodTypeEnforcer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == false) && ((UnitGetType(EventUnitTargetUnit()) == "MineralField") || (UnitGetType(EventUnitTargetUnit()) == "SpaceCowSmall")))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == false) && ((UnitGetType(EventUnitTargetUnit()) == "DeadFlowerFood") || (UnitGetType(EventUnitTargetUnit()) == "PlantFood")))) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FoodTypeEnforcer_Init () {
    gt_FoodTypeEnforcer = TriggerCreate("gt_FoodTypeEnforcer_Func");
    TriggerAddEventUnitAbility(gt_FoodTypeEnforcer, null, AbilityCommand("DroneHarvest", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Carry Food Based On Food Type
//--------------------------------------------------------------------------------------------------
bool gt_SetCarryFoodBasedOnFoodType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_foodCarryModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == true) && (gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == true))) {
        if ((UnitGroupCount(UnitGroup("PlantFood", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_foodCarryModel = "LeafCarry";
        }
        else if ((UnitGroupCount(UnitGroup("MineralField", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            lv_foodCarryModel = "MeatCarry";
        }
    }
    else {
        if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == true) && (gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == false))) {
            lv_foodCarryModel = "LeafCarry";
        }
        else if (((gv_canCollectPlantFood[UnitGetOwner(EventUnit())] == false) && (gv_canCollectMeatFood[UnitGetOwner(EventUnit())] == true))) {
            lv_foodCarryModel = "MeatCarry";
        }
    }
    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "CarryModel"), libNtve_gf_ModelSwap(lv_foodCarryModel, 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetCarryFoodBasedOnFoodType_Init () {
    gt_SetCarryFoodBasedOnFoodType = TriggerCreate("gt_SetCarryFoodBasedOnFoodType_Func");
    TriggerAddEventUnitAbility(gt_SetCarryFoodBasedOnFoodType, null, AbilityCommand("DroneHarvest", 1), c_abilHarvestStageWaitToReturn, false);
    TriggerAddEventUnitAbility(gt_SetCarryFoodBasedOnFoodType, null, AbilityCommand("SoldierHarvest", 1), c_abilHarvestStageWaitToReturn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make deselected foragers work
//--------------------------------------------------------------------------------------------------
bool gt_Makedeselectedforagerswork_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "ForagerIgnoreAI") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(UnitGroupIdle(UnitGetOwner(EventUnit()), true), EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.05, libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Makedeselectedforagerswork_Init () {
    gt_Makedeselectedforagerswork = TriggerCreate("gt_Makedeselectedforagerswork_Func");
    TriggerAddEventUnitSelected(gt_Makedeselectedforagerswork, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make waiting foragers work
//--------------------------------------------------------------------------------------------------
bool gt_Makewaitingforagerswork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_foragerGroup;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoCCC0E1D5_g;
    int autoCCC0E1D5_u;

    // Variable Initialization
    lv_foragerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "MineralField"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "ForagerIgnoreAI") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_foragerGroup = UnitGroup("Drone", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    UnitGroupRemove(lv_foragerGroup, EventUnit());
    if ((UnitGroupCount(lv_foragerGroup, c_unitCountAlive) >= 1)) {
        UnitGroupRemove(lv_foragerGroup, UnitGroupRandomUnit(lv_foragerGroup, c_unitCountAlive));
    }

    autoCCC0E1D5_g = lv_foragerGroup;
    autoCCC0E1D5_u = UnitGroupCount(autoCCC0E1D5_g, c_unitCountAll);
    for (;; autoCCC0E1D5_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoCCC0E1D5_g, autoCCC0E1D5_u);
        if (lv_currentUnit == null) { break; }
        if ((UnitHasBehavior2(lv_currentUnit, "ForagerIgnoreAI") == true)) {
            continue;
        }

        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.05, libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Makewaitingforagerswork_Init () {
    gt_Makewaitingforagerswork = TriggerCreate("gt_Makewaitingforagerswork_Func");
    TriggerAddEventUnitAbility(gt_Makewaitingforagerswork, null, AbilityCommand("DroneHarvest", 0), c_abilHarvestStageWaitAtResource, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make idle soldiers work
//--------------------------------------------------------------------------------------------------
bool gt_Makeidlesoldierswork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto915AF256_g;
    int auto915AF256_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SoldierIgnoreAI") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(UnitGroupSelected(UnitGetOwner(EventUnit())), EventUnit()) == true)) {
        return true;
    }

    UnitGroupAddUnitGroup(lv_unitGroup, UnitGroup("MineralField", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_unitGroup, UnitGroup("SpaceCowSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    auto915AF256_g = lv_unitGroup;
    auto915AF256_u = UnitGroupCount(auto915AF256_g, c_unitCountAll);
    for (;; auto915AF256_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto915AF256_g, auto915AF256_u);
        if (lv_currentUnit == null) { break; }
        if (((UnitGroupCount(UnitGroup("Drone", UnitGetOwner(EventUnit()), RegionCircle(UnitGetPosition(lv_currentUnit), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0))) {
            UnitGroupRemove(lv_unitGroup, lv_currentUnit);
        }

    }
    if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) == 0)) {
        UnitGroupAddUnitGroup(lv_unitGroup, UnitGroup(null, UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupRemoveUnitGroup(lv_unitGroup, UnitGroup("Zergling", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(UnitGroupRandomUnit(lv_unitGroup, c_unitCountAlive)), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
    UnitBehaviorAdd(EventUnit(), "SoldierIgnoreAI", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Makeidlesoldierswork_Init () {
    gt_Makeidlesoldierswork = TriggerCreate("gt_Makeidlesoldierswork_Func");
    TriggerAddEventUnitBecomesIdle(gt_Makeidlesoldierswork, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make deselected soldiers work
//--------------------------------------------------------------------------------------------------
bool gt_Makedeselectedsoldierswork_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SoldierIgnoreAI") == false))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SoldierIgnoreAI", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Makedeselectedsoldierswork_Init () {
    gt_Makedeselectedsoldierswork = TriggerCreate("gt_Makedeselectedsoldierswork_Func");
    TriggerAddEventUnitSelected(gt_Makedeselectedsoldierswork, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Make lost soldiers work
//--------------------------------------------------------------------------------------------------
bool gt_Makelostsoldierswork_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    unit lv_currentUnit;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    playergroup autoDE1E35E8_g;
    unitgroup auto77184AE0_g;
    int auto77184AE0_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(3.0, c_timeGame);
        autoDE1E35E8_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoDE1E35E8_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            Wait(0.0, c_timeGame);
            lv_unitGroup = UnitGroup("Zergling", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto77184AE0_g = lv_unitGroup;
            auto77184AE0_u = UnitGroupCount(auto77184AE0_g, c_unitCountAll);
            for (;; auto77184AE0_u -= 1) {
                lv_currentUnit = UnitGroupUnitFromEnd(auto77184AE0_g, auto77184AE0_u);
                if (lv_currentUnit == null) { break; }
                Wait(0.0, c_timeGame);
                if ((UnitIsValid(lv_currentUnit) == true) && (UnitIsAlive(lv_currentUnit) == true) && (UnitGroupHasUnit(UnitGroupIdle(lv_currentPlayer, false), lv_currentUnit) == true) && (UnitGroupHasUnit(UnitGroupSelected(lv_currentPlayer), lv_currentUnit) == false) && (UnitHasBehavior2(lv_currentUnit, "SoldierIgnoreAI") == false)) {
                    UnitIssueOrder(lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_currentUnit), 0.05, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Makelostsoldierswork_Init () {
    gt_Makelostsoldierswork = TriggerCreate("gt_Makelostsoldierswork_Func");
    TriggerAddEventTimeElapsed(gt_Makelostsoldierswork, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bulk Builder Was Created
//--------------------------------------------------------------------------------------------------
bool gt_BulkBuilderWasCreated_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_repeater;
    point[10] lv_spawnPointForTentacle;
    unitgroup[10] lv_spawnUnitGroupRegionForTentacle;
    unitgroup lv_dirtShakeUnits;
    bool[10] lv_spawnLocationBooleanForTentacleIsValidForSpawningATentecle;
    bool[10] lv_spawnLocationBooleanForTentacleIsinvalidForSpawningATenteclebecauseLocationhasDirtorbuilding;
    actor[10] lv_faketentecleActors;

    // Automatic Variable Declarations
    const int autoA55BAC26_n = 9;
    int autoA55BAC26_i;
    const int auto0AF0FF41_n = 9;
    int auto0AF0FF41_i;
    const int autoCDFF2D08_n = 9;
    int autoCDFF2D08_i;
    unitgroup autoF2EB25A6_g;
    int autoF2EB25A6_u;
    unit autoF2EB25A6_var;
    const int auto1A109FB6_n = 9;
    int auto1A109FB6_i;
    const int autoE1546286_n = 9;
    int autoE1546286_i;
    unitgroup auto23A3EB79_g;
    int auto23A3EB79_u;
    unit auto23A3EB79_var;
    unitgroup auto7A3ED72A_g;
    int auto7A3ED72A_u;
    unit auto7A3ED72A_var;

    // Variable Initialization
    lv_repeater = 1;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_spawnUnitGroupRegionForTentacle[init_i] = UnitGroupEmpty();
    }
    lv_dirtShakeUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "BulkBuilderBody"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitProgressUnit(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(EventUnitProgressUnit())], "Body"), 1));
    lv_spawnPointForTentacle[1] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), -2.0, -2.0);
    lv_spawnPointForTentacle[2] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), 0.0, -2.0);
    lv_spawnPointForTentacle[3] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), 2.0, -2.0);
    lv_spawnPointForTentacle[4] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), -2.0, 0.0);
    lv_spawnPointForTentacle[5] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), 0.0, 0.0);
    lv_spawnPointForTentacle[6] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), 2.0, 0.0);
    lv_spawnPointForTentacle[7] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), -2.0, 2.0);
    lv_spawnPointForTentacle[8] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), 0.0, 2.0);
    lv_spawnPointForTentacle[9] = PointWithOffset(UnitGetPosition(EventUnitProgressUnit()), 2.0, 2.0);
    for (autoA55BAC26_i = 1; autoA55BAC26_i <= autoA55BAC26_n; autoA55BAC26_i += 1) {
        UnitGroupAddUnitGroup(lv_spawnUnitGroupRegionForTentacle[lv_repeater], libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "DirtMoved", "BulkBuilderTentacle", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lv_spawnPointForTentacle[lv_repeater], 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_spawnUnitGroupRegionForTentacle[lv_repeater], libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "BulkBuilderBody", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lv_spawnPointForTentacle[lv_repeater], 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_spawnUnitGroupRegionForTentacle[lv_repeater], libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SmallSpikeNest", "MediumSpikeNest", "LargeSpikeNest", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lv_spawnPointForTentacle[lv_repeater], 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_spawnUnitGroupRegionForTentacle[lv_repeater], libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerNest", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lv_spawnPointForTentacle[lv_repeater], 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        UnitGroupAddUnitGroup(lv_spawnUnitGroupRegionForTentacle[lv_repeater], libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TunnelTremblerNest", "KhepriNest", "GraveDiggerNest", c_playerAny, c_unitAllianceAny, gf_Convertpointtosquareregion(lv_spawnPointForTentacle[lv_repeater], 1.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        if (((CreepIsPresent(lv_spawnPointForTentacle[lv_repeater]) == true) && (UnitGroupCount(lv_spawnUnitGroupRegionForTentacle[lv_repeater], c_unitCountAlive) == 0))) {
            lv_spawnLocationBooleanForTentacleIsValidForSpawningATentecle[lv_repeater] = true;
        }
        else {
            lv_spawnLocationBooleanForTentacleIsinvalidForSpawningATenteclebecauseLocationhasDirtorbuilding[lv_repeater] = true;
        }
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 1;
    for (auto0AF0FF41_i = 1; auto0AF0FF41_i <= auto0AF0FF41_n; auto0AF0FF41_i += 1) {
        if ((lv_spawnLocationBooleanForTentacleIsValidForSpawningATentecle[lv_repeater] == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "BulkBuilderTentacle", c_unitCreateIgnorePlacement, UnitGetOwner(EventUnitProgressUnit()), lv_spawnPointForTentacle[lv_repeater]);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(UnitLastCreated())], "Tentecle"), 1));
            libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(EventUnitProgressUnit()), 0.0);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimPlay Birth Birth");
            if (((lv_repeater == 2) || (lv_repeater == 4) || (lv_repeater == 6) || (lv_repeater == 8))) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(0.8, 0.8, 1.0, 0.0));
            }
            else {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 1.2, 0.0));
            }
        }

        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 1;
    for (autoCDFF2D08_i = 1; autoCDFF2D08_i <= autoCDFF2D08_n; autoCDFF2D08_i += 1) {
        if ((lv_spawnLocationBooleanForTentacleIsinvalidForSpawningATenteclebecauseLocationhasDirtorbuilding[lv_repeater] == true) && (lv_repeater != 5)) {
            libNtve_gf_CreateModelAtPoint("BulkBuilderTentacleDefualt", lv_spawnPointForTentacle[lv_repeater]);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_ModelSwap(gf_TurnBulkBuilderSwapModelStringIntoModelEntry(gv_bulkBuilderSwapModelString[UnitGetOwner(EventUnitProgressUnit())], "Tentecle"), 1));
            lv_faketentecleActors[lv_repeater] = libNtve_gf_ActorLastCreated();
            ActorSend(lv_faketentecleActors[lv_repeater], libNtve_gf_SetFacing((AngleBetweenPoints(lv_spawnPointForTentacle[lv_repeater], UnitGetPosition(EventUnitProgressUnit())) + 90.0)));
            ActorSend(lv_faketentecleActors[lv_repeater], libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(EventUnitProgressUnit()), false)), Color(100.00, 100.00, 100.00)));
            ActorSend(lv_faketentecleActors[lv_repeater], "AnimPlay Birth Birth");
            ActorSend(lv_faketentecleActors[lv_repeater], libNtve_gf_AnimSetTimeScaleGlobal(0.5));
            autoF2EB25A6_g = UnitGroup(null, c_playerAny, RegionCircle(lv_spawnPointForTentacle[lv_repeater], 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF2EB25A6_u = UnitGroupCount(autoF2EB25A6_g, c_unitCountAll);
            for (;; autoF2EB25A6_u -= 1) {
                autoF2EB25A6_var = UnitGroupUnitFromEnd(autoF2EB25A6_g, autoF2EB25A6_u);
                if (autoF2EB25A6_var == null) { break; }
                if ((UnitGetType(autoF2EB25A6_var) != "BulkBuilderBody") && (UnitGetType(autoF2EB25A6_var) != "BulkBuilderTentacle") && (UnitGetType(autoF2EB25A6_var) != "QueenBlackAnt") && (UnitGetType(autoF2EB25A6_var) != "QueenFireAnt") && (UnitGetType(autoF2EB25A6_var) != "QueenWoodAnt") && (UnitGetType(autoF2EB25A6_var) != "QueenLeafCutterAnt") && (UnitGetType(autoF2EB25A6_var) != "QueenPharaohAnt") && (UnitGetType(autoF2EB25A6_var) != "QueenGhostAnt") && (UnitGetType(autoF2EB25A6_var) != "CTFFlag")) {
                    UnitSetPropertyFixed(autoF2EB25A6_var, c_unitPropLife, (UnitGetPropertyFixed(autoF2EB25A6_var, c_unitPropLife, c_unitPropCurrent) - 30.0));
                    if (((UnitGetType(autoF2EB25A6_var) == "Dirt") || (UnitGetType(autoF2EB25A6_var) == "DirtMoved"))) {
                        libNtve_gf_SendActorMessageToUnit(autoF2EB25A6_var, libNtve_gf_AnimSetTimeScaleGlobal(0.5));
                        UnitBehaviorAdd(autoF2EB25A6_var, "MovedDirtShake", autoF2EB25A6_var, 1);
                        UnitGroupAdd(lv_dirtShakeUnits, autoF2EB25A6_var);
                    }

                }

            }
        }

        lv_repeater = (lv_repeater + 1);
    }
    Wait(1.9, c_timeGame);
    lv_repeater = 1;
    for (auto1A109FB6_i = 1; auto1A109FB6_i <= auto1A109FB6_n; auto1A109FB6_i += 1) {
        ActorSend(lv_faketentecleActors[lv_repeater], "AnimPlay StandWork Stand,Work,End");
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 1;
    Wait(1.9, c_timeGame);
    lv_repeater = 1;
    for (autoE1546286_i = 1; autoE1546286_i <= autoE1546286_n; autoE1546286_i += 1) {
        libNtve_gf_KillModel(lv_faketentecleActors[lv_repeater]);
        lv_repeater = (lv_repeater + 1);
    }
    lv_repeater = 1;
    Wait(1.9, c_timeGame);
    auto23A3EB79_g = lv_dirtShakeUnits;
    auto23A3EB79_u = UnitGroupCount(auto23A3EB79_g, c_unitCountAll);
    for (;; auto23A3EB79_u -= 1) {
        auto23A3EB79_var = UnitGroupUnitFromEnd(auto23A3EB79_g, auto23A3EB79_u);
        if (auto23A3EB79_var == null) { break; }
        UnitBehaviorRemove(auto23A3EB79_var, "MovedDirtShake", 1);
    }
    Wait(1.0, c_timeGame);
    auto7A3ED72A_g = lv_dirtShakeUnits;
    auto7A3ED72A_u = UnitGroupCount(auto7A3ED72A_g, c_unitCountAll);
    for (;; auto7A3ED72A_u -= 1) {
        auto7A3ED72A_var = UnitGroupUnitFromEnd(auto7A3ED72A_g, auto7A3ED72A_u);
        if (auto7A3ED72A_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto7A3ED72A_var, libNtve_gf_AnimSetTimeScaleGlobal(1.0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BulkBuilderWasCreated_Init () {
    gt_BulkBuilderWasCreated = TriggerCreate("gt_BulkBuilderWasCreated_Func");
    TriggerAddEventUnitConstructProgress(gt_BulkBuilderWasCreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ModelAttach - Upgrade Chamber
//--------------------------------------------------------------------------------------------------
bool gt_ModelAttachUpgradeChamber_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_animationName;
    string lv_animationType;
    fixed lv_facingOfOriginalUnit;
    string lv_modelSwapperModel;
    actor lv_eggModel;
    actor lv_eggSpawnEffect;
    fixed lv_ontopActorModelScaleSize;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_animationName = "Flail";
    lv_animationType = "Flail";
    lv_facingOfOriginalUnit = UnitGetFacing(EventUnit());
    lv_ontopActorModelScaleSize = 1.0;

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
    SoundPlayAtPointForPlayer(SoundLink("Changeling_Disguise", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 10.0, 100.0, 0.0);
    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    libNtve_gf_AttachActorToUnit(EventUnit(), "UnitIndicatorModelActor", "Ref_Turret");
    lv_eggModel = libNtve_gf_ActorLastCreated();
    ActorSend(lv_eggModel, libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
    ActorSend(lv_eggModel, libNtve_gf_SetScale(1.3, 1.3, 1.3, 2.0));
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay TheElephantAnimations Morph");
    Wait(1.9, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimSetPausedAll");
    Wait(0.1, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimSetPausedAll 0");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay TheElephantAnimations Build,D,Start");
    ActorSend(lv_eggModel, libNtve_gf_SetScale(3.0, 3.0, 3.0, 3.0));
    Wait(1.9, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimSetPausedAll");
    Wait(0.1, c_timeGame);
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimSetPausedAll 0");
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.0));
    if ((EventUnitAbility() == AbilityCommand("EvolveToWorkerStrain", 0))) {
        lv_modelSwapperModel = "Drone";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToSoldierStrain", 0))) {
        lv_modelSwapperModel = "ZerglingUpgrade";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToMajorStrain", 0))) {
        lv_modelSwapperModel = "Ultralisk";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToStingerStrain", 0))) {
        lv_modelSwapperModel = "Hydralisk";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToAcidSprayerStrain", 0))) {
        lv_modelSwapperModel = "AcidSprayerModel";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToTunnelTremblerStrain", 0))) {
        lv_modelSwapperModel = "Ravager";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToKhepriStrain", 0))) {
        lv_modelSwapperModel = "SwarmHostMP";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToGraveDiggerStrain", 0))) {
        lv_modelSwapperModel = "GraveDigger";
    }
    else if ((EventUnitAbility() == AbilityCommand("EvolveToQueenStrain", 0))) {
        lv_modelSwapperModel = gf_TurnQueenSwapModelStringIntoModelEntry(gv_queenSwapModelString[UnitGetOwner(EventUnit())]);
    }
    if ((EventUnitAbility() == AbilityCommand("EvolveToGraveDiggerStrain", 0))) {
        lv_animationName = "Stand";
        lv_animationType = "Stand";
    }

    if (((EventUnitAbility() == AbilityCommand("EvolveToWorkerStrain", 0)) || (EventUnitAbility() == AbilityCommand("EvolveToStingerStrain", 0)) || (EventUnitAbility() == AbilityCommand("EvolveToAcidSprayerStrain", 0)) || (EventUnitAbility() == AbilityCommand("EvolveToTunnelTremblerStrain", 0)) || (EventUnitAbility() == AbilityCommand("EvolveToKhepriStrain", 0)) || (EventUnitAbility() == AbilityCommand("EvolveToQueenStrain", 0)))) {
        lv_ontopActorModelScaleSize = 0.7;
    }
    else if (((EventUnitAbility() == AbilityCommand("EvolveToMajorStrain", 0)))) {
        lv_ontopActorModelScaleSize = 0.6;
    }
    lv_animationName = "Flail";
    lv_animationType = "Flail";
    ActorSend(lv_eggModel, libNtve_gf_SetScale(lv_ontopActorModelScaleSize, lv_ontopActorModelScaleSize, lv_ontopActorModelScaleSize, 0.0));
    ActorSend(lv_eggModel, libNtve_gf_ModelSwap(lv_modelSwapperModel, 1));
    ActorSend(lv_eggModel, MakeMsgAnimBracketStart(lv_animationName, lv_animationType, lv_animationType, lv_animationType, 0, -1.0, c_animTimeVariantAsAutomatic));
    ActorSend(lv_eggModel, libNtve_gf_AnimSetTimeScaleGlobal(0.3));
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetFacing(lv_facingOfOriginalUnit));
    ActorSend(lv_eggModel, libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    ActorSend(lv_eggModel, libNtve_gf_AliasAdd("Egging"));
    libNtve_gf_MakeUnitUncommandable(EventUnit(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelAttachUpgradeChamber_Init () {
    gt_ModelAttachUpgradeChamber = TriggerCreate("gt_ModelAttachUpgradeChamber_Func");
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToQueenStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToWorkerStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToSoldierStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToMajorStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToStingerStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToAcidSprayerStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToTunnelTremblerStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToKhepriStrain", 0), c_abilMorphStageUnitStart, false);
    TriggerAddEventUnitAbility(gt_ModelAttachUpgradeChamber, null, AbilityCommand("EvolveToGraveDiggerStrain", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model Speed - Upgrade Chamber - Started
//--------------------------------------------------------------------------------------------------
bool gt_ModelSpeedUpgradeChamberStarted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "EvolutionChamberQueenStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberWorkerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberSoldierStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberMajorStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberStingerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberAcidSprayerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberTunnelTremblerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberKhepriStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberGraveDiggerStrain")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "Egging"), libNtve_gf_AnimSetTimeScaleGlobal(1.2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelSpeedUpgradeChamberStarted_Init () {
    gt_ModelSpeedUpgradeChamberStarted = TriggerCreate("gt_ModelSpeedUpgradeChamberStarted_Func");
    TriggerAddEventUnitResearchProgress(gt_ModelSpeedUpgradeChamberStarted, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model Speed - Upgrade Chamber - Ended
//--------------------------------------------------------------------------------------------------
bool gt_ModelSpeedUpgradeChamberEnded_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "EvolutionChamberQueenStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberWorkerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberSoldierStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberMajorStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberStingerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberAcidSprayerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberTunnelTremblerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberKhepriStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberGraveDiggerStrain")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "Egging"), libNtve_gf_AnimSetTimeScaleGlobal(0.3));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelSpeedUpgradeChamberEnded_Init () {
    gt_ModelSpeedUpgradeChamberEnded = TriggerCreate("gt_ModelSpeedUpgradeChamberEnded_Func");
    TriggerAddEventUnitResearchProgress(gt_ModelSpeedUpgradeChamberEnded, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_ModelSpeedUpgradeChamberEnded, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model Scale  - Upgrade Chamber- on spawn = Resize
//--------------------------------------------------------------------------------------------------
bool gt_ModelScaleUpgradeChamberonspawnResize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "UpgradeChamber"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
    Wait(6.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelScaleUpgradeChamberonspawnResize_Init () {
    gt_ModelScaleUpgradeChamberonspawnResize = TriggerCreate("gt_ModelScaleUpgradeChamberonspawnResize_Func");
    TriggerAddEventUnitCreated(gt_ModelScaleUpgradeChamberonspawnResize, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Model Delete - Upgrade Chamber - on revert
//--------------------------------------------------------------------------------------------------
bool gt_ModelDeleteUpgradeChamberonrevert_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeGame);
    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "Egging"), libNtve_gf_ModelSwap("BloodTargetImpact", 1));
    libNtve_gf_PlayAnimation(ActorFromScope(ActorScopeFromUnit(EventUnit()), "Egging"), c_animNameDefault, "Stand", 0, c_animTimeDefault);
    Wait(1.0, c_timeGame);
    libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(EventUnit()), "Egging"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModelDeleteUpgradeChamberonrevert_Init () {
    gt_ModelDeleteUpgradeChamberonrevert = TriggerCreate("gt_ModelDeleteUpgradeChamberonrevert_Func");
    TriggerAddEventUnitAbility(gt_ModelDeleteUpgradeChamberonrevert, null, AbilityCommand("MutatebackintoUpgradeEvolutionchamber", 0), c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: When Animal Dies Make it tiny
//--------------------------------------------------------------------------------------------------
bool gt_WhenAnimalDiesMakeittiny_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpaceCowSmall"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetScale(0.1, 0.1, 0.8, 0.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhenAnimalDiesMakeittiny_Init () {
    gt_WhenAnimalDiesMakeittiny = TriggerCreate("gt_WhenAnimalDiesMakeittiny_Func");
    TriggerAddEventUnitDied(gt_WhenAnimalDiesMakeittiny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create forager nest
//--------------------------------------------------------------------------------------------------
bool gt_Createforagernest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitProgressUnit(), gv_iD, gv_currentNestID);
    gv_currentNestID += 1;
    UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LayForagerEgg", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Createforagernest_Init () {
    gt_Createforagernest = TriggerCreate("gt_Createforagernest_Func");
    TriggerAddEventUnitConstructProgress(gt_Createforagernest, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create soldier nest
//--------------------------------------------------------------------------------------------------
bool gt_Createsoldiernest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NewSoldierNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitProgressUnit(), gv_iD, gv_currentNestID);
    gv_currentNestID += 1;
    UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LaySoldierEgg", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Createsoldiernest_Init () {
    gt_Createsoldiernest = TriggerCreate("gt_Createsoldiernest_Func");
    TriggerAddEventUnitConstructProgress(gt_Createsoldiernest, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create assassin nest
//--------------------------------------------------------------------------------------------------
bool gt_Createassassinnest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "NewAssassinsNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitProgressUnit(), gv_iD, gv_currentNestID);
    gv_currentNestID += 1;
    UnitIssueOrder(EventUnitProgressUnit(), Order(AbilityCommand("LayAssassinEgg", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Createassassinnest_Init () {
    gt_Createassassinnest = TriggerCreate("gt_Createassassinnest_Func");
    TriggerAddEventUnitConstructProgress(gt_Createassassinnest, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker egg spawn
//--------------------------------------------------------------------------------------------------
bool gt_Workereggspawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_scaleDuration;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_scaleDuration = 10.0;

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "WorkerEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetCustomValue(EventUnitCreatedUnit(), gv_x, PointGetX(UnitGetPosition(EventUnit())));
    UnitSetCustomValue(EventUnitCreatedUnit(), gv_y, PointGetY(UnitGetPosition(EventUnit())));
    UnitSetCustomValue(EventUnitCreatedUnit(), gv_iD, UnitGetCustomValue(EventUnit(), gv_iD));
    UnitSetPosition(EventUnitCreatedUnit(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 0.9, libNtve_gf_RandomAngle()), false);
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale(0.3, 0.3, 0.3, 0.0));
    libNtve_gf_SendActorMessageToUnit(EventUnitCreatedUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.0, lv_scaleDuration));
    UnitIssueOrder(EventUnitCreatedUnit(), Order(AbilityCommand("MorphToForager", 0)), c_orderQueueReplace);
    UnitSetCustomValue(EventUnit(), gv_nestRespawnCount, (UnitGetCustomValue(EventUnit(), gv_nestRespawnCount) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Workereggspawn_Init () {
    gt_Workereggspawn = TriggerCreate("gt_Workereggspawn_Func");
    TriggerAddEventUnitCreated(gt_Workereggspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker egg hatch
//--------------------------------------------------------------------------------------------------
bool gt_Workeregghatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    unit lv_nest;

    // Automatic Variable Declarations
    playergroup auto1C663967_g;
    int auto1C663967_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1C663967_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto1C663967_var = -1;
    while (true) {
        auto1C663967_var = PlayerGroupNextPlayer(auto1C663967_g, auto1C663967_var);
        if (auto1C663967_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto1C663967_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto1C663967_var, EventUnit(), gv_ctrlGroup_Forager[auto1C663967_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnit(), gv_ctrlGroup_Forager[UnitGetOwner(EventUnit())]);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap(gf_TurnWorkerSwapModelStringIntoModelEntry(gv_workerSwapModelString[UnitGetOwner(EventUnit())]), 1));
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
    lv_x = UnitGetCustomValue(EventUnit(), gv_x);
    lv_y = UnitGetCustomValue(EventUnit(), gv_y);
    lv_nest = UnitGroupUnit(UnitGroup("NewWorkerNest", UnitGetOwner(EventUnit()), RegionCircle(Point(lv_x, lv_y), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((UnitIsValid(lv_nest) == true) && (UnitHasBehavior2(lv_nest, "SubterraneanTrail") == true)) {
        gf_Cloakforager(EventUnit());
    }

    if ((GameAttributeGameValue("[bnet:local/0.0/273101]3") == "0003")) {
        libNtve_gf_AttachActorToUnit(EventUnit(), "Actorthatdeletesafterunitdeath", "Ref_Head");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_ModelSwap("ChristmasHat", 0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.7, 1.7, 1.7, 0.0));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Workeregghatch_Init () {
    gt_Workeregghatch = TriggerCreate("gt_Workeregghatch_Func");
    TriggerAddEventUnitAbility(gt_Workeregghatch, null, AbilityCommand("MorphToForager", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier egg spawn normal
//--------------------------------------------------------------------------------------------------
bool gt_Soldiereggspawnnormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "SoldierEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Soldiereggsetup(EventUnitCreatedUnit(), EventUnit(), false);
    UnitSetCustomValue(EventUnit(), gv_nestRespawnCount, (UnitGetCustomValue(EventUnit(), gv_nestRespawnCount) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Soldiereggspawnnormal_Init () {
    gt_Soldiereggspawnnormal = TriggerCreate("gt_Soldiereggspawnnormal_Func");
    TriggerAddEventUnitCreated(gt_Soldiereggspawnnormal, null, "LaySoldierEgg", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier egg spawn fast
//--------------------------------------------------------------------------------------------------
bool gt_Soldiereggspawnfast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "SoldierEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Soldiereggsetup(EventUnitCreatedUnit(), EventUnit(), true);
    UnitBehaviorAdd(EventUnit(), "IncreasedSupply", EventUnit(), 1);
    UnitSetCustomValue(EventUnit(), gv_nestRespawnCount, (UnitGetCustomValue(EventUnit(), gv_nestRespawnCount) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Soldiereggspawnfast_Init () {
    gt_Soldiereggspawnfast = TriggerCreate("gt_Soldiereggspawnfast_Func");
    TriggerAddEventUnitCreated(gt_Soldiereggspawnfast, null, "LaySoldierEggFast", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier egg hatch
//--------------------------------------------------------------------------------------------------
bool gt_Soldieregghatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_factoryUnit;
    point lv_rallyPoint;

    // Automatic Variable Declarations
    playergroup auto18A67945_g;
    int auto18A67945_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto18A67945_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto18A67945_var = -1;
    while (true) {
        auto18A67945_var = PlayerGroupNextPlayer(auto18A67945_g, auto18A67945_var);
        if (auto18A67945_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto18A67945_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto18A67945_var, EventUnit(), gv_ctrlGroup_Soldier[auto18A67945_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnit(), gv_ctrlGroup_Soldier[UnitGetOwner(EventUnit())]);
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap(gf_TurnSoldierSwapModelStringIntoModelEntry(gv_soldierSwapModelString[UnitGetOwner(EventUnit())]), 1));
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
    if ((GameAttributeGameValue("[bnet:local/0.0/273101]3") == "0002")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_ModelSwap("AEvoSheep", 1));
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_AnimSetTimeScaleGlobal(1.6));
    }

    if ((TechTreeUpgradeCount(EventPlayer(), "MovementSpeed2", c_techCountCompleteOnly) == 1)) {
        UnitBehaviorAdd(EventUnit(), "SpawnSpeedBoostHealthDebuff", EventUnit(), 1);
        Wait(10.0, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "SpawnSpeedBoostHealthDebuff", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Soldieregghatch_Init () {
    gt_Soldieregghatch = TriggerCreate("gt_Soldieregghatch_Func");
    TriggerAddEventUnitAbility(gt_Soldieregghatch, null, AbilityCommand("MorphToSoldier", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Soldieregghatch, null, AbilityCommand("MorphToSoldierFast", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin egg spawn normal
//--------------------------------------------------------------------------------------------------
bool gt_Assassineggspawnnormal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "AssassinEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Assassineggsetup(EventUnitCreatedUnit(), EventUnit(), false);
    UnitSetCustomValue(EventUnit(), gv_nestRespawnCount, (UnitGetCustomValue(EventUnit(), gv_nestRespawnCount) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assassineggspawnnormal_Init () {
    gt_Assassineggspawnnormal = TriggerCreate("gt_Assassineggspawnnormal_Func");
    TriggerAddEventUnitCreated(gt_Assassineggspawnnormal, null, "LayAssassinEgg", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin egg spawn fast
//--------------------------------------------------------------------------------------------------
bool gt_Assassineggspawnfast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "AssassinEgg"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_Assassineggsetup(EventUnitCreatedUnit(), EventUnit(), true);
    UnitBehaviorAdd(EventUnit(), "IncreasedSupply", EventUnit(), 1);
    UnitSetCustomValue(EventUnit(), gv_nestRespawnCount, (UnitGetCustomValue(EventUnit(), gv_nestRespawnCount) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assassineggspawnfast_Init () {
    gt_Assassineggspawnfast = TriggerCreate("gt_Assassineggspawnfast_Func");
    TriggerAddEventUnitCreated(gt_Assassineggspawnfast, null, "LayAssassinEggFast", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin egg hatch
//--------------------------------------------------------------------------------------------------
bool gt_Assassinegghatch_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_iD;
    unit lv_factoryUnit;
    point lv_rallyPoint;
    point lv_positionofTrigUnit;
    int lv_ownerOfTrigUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x = UnitGetCustomValue(EventUnit(), gv_x);
    lv_y = UnitGetCustomValue(EventUnit(), gv_y);
    lv_iD = UnitGetCustomValue(EventUnit(), gv_iD);
    lv_positionofTrigUnit = UnitGetPosition(EventUnit());
    lv_ownerOfTrigUnit = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(0.3, 0.3, 0.3, 0.0));
    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assassinegghatch_Init () {
    gt_Assassinegghatch = TriggerCreate("gt_Assassinegghatch_Func");
    TriggerAddEventUnitAbility(gt_Assassinegghatch, null, AbilityCommand("MorphToAssassin", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Assassinegghatch, null, AbilityCommand("MorphToAssassinFast", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broodling spawn
//--------------------------------------------------------------------------------------------------
bool gt_Broodlingspawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitCreatedUnit()) == "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)) != AbilityCommand("attack", 0))) {
        return true;
    }

    if ((OrderGetTargetPosition(UnitOrder(EventUnit(), 0)) == null)) {
        return true;
    }

    UnitSetPosition(EventUnitCreatedUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 0.65, OrderGetTargetPosition(UnitOrder(EventUnit(), 0))), false);
    UnitSetCustomValue(EventUnitCreatedUnit(), gv_x, PointGetX(UnitGetPosition(EventUnit())));
    UnitSetCustomValue(EventUnitCreatedUnit(), gv_y, PointGetY(UnitGetPosition(EventUnit())));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Broodlingspawn_Init () {
    gt_Broodlingspawn = TriggerCreate("gt_Broodlingspawn_Func");
    TriggerAddEventUnitCreated(gt_Broodlingspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broodling spawner built
//--------------------------------------------------------------------------------------------------
bool gt_Broodlingspawnerbuilt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBEFBD853_g;
    int autoBEFBD853_var;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnitCreatedUnit()) == "MediumSpikeNest") || (UnitGetType(EventUnitCreatedUnit()) == "LargeSpikeNest")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBEFBD853_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoBEFBD853_var = -1;
    while (true) {
        autoBEFBD853_var = PlayerGroupNextPlayer(autoBEFBD853_g, autoBEFBD853_var);
        if (autoBEFBD853_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoBEFBD853_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoBEFBD853_var, EventUnitCreatedUnit(), gv_ctrlGroup_BroodlingSpawner[autoBEFBD853_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_BroodlingSpawner[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Broodlingspawnerbuilt_Init () {
    gt_Broodlingspawnerbuilt = TriggerCreate("gt_Broodlingspawnerbuilt_Func");
    TriggerAddEventUnitCreated(gt_Broodlingspawnerbuilt, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add forager nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_Addforagernesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoAFB4ACE8_g;
    int autoAFB4ACE8_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAFB4ACE8_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoAFB4ACE8_var = -1;
    while (true) {
        autoAFB4ACE8_var = PlayerGroupNextPlayer(autoAFB4ACE8_g, autoAFB4ACE8_var);
        if (autoAFB4ACE8_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoAFB4ACE8_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoAFB4ACE8_var, EventUnitCreatedUnit(), gv_ctrlGroup_ForagerNest[autoAFB4ACE8_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_ForagerNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addforagernesttocontrolgroup_Init () {
    gt_Addforagernesttocontrolgroup = TriggerCreate("gt_Addforagernesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_Addforagernesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add soldier nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_Addsoldiernesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto78E34B94_g;
    int auto78E34B94_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewSoldierNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto78E34B94_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto78E34B94_var = -1;
    while (true) {
        auto78E34B94_var = PlayerGroupNextPlayer(auto78E34B94_g, auto78E34B94_var);
        if (auto78E34B94_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto78E34B94_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto78E34B94_var, EventUnitCreatedUnit(), gv_ctrlGroup_SoldierNest[auto78E34B94_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_SoldierNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addsoldiernesttocontrolgroup_Init () {
    gt_Addsoldiernesttocontrolgroup = TriggerCreate("gt_Addsoldiernesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_Addsoldiernesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add major nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_Addmajornesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto60061E2F_g;
    int auto60061E2F_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "UltraliskCavern"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto60061E2F_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto60061E2F_var = -1;
    while (true) {
        auto60061E2F_var = PlayerGroupNextPlayer(auto60061E2F_g, auto60061E2F_var);
        if (auto60061E2F_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto60061E2F_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto60061E2F_var, EventUnitCreatedUnit(), gv_ctrlGroup_MajorNest[auto60061E2F_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_MajorNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addmajornesttocontrolgroup_Init () {
    gt_Addmajornesttocontrolgroup = TriggerCreate("gt_Addmajornesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_Addmajornesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Tunnel Trembler nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_AddTunnelTremblernesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto29C52AFF_g;
    int auto29C52AFF_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TunnelTremblerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto29C52AFF_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto29C52AFF_var = -1;
    while (true) {
        auto29C52AFF_var = PlayerGroupNextPlayer(auto29C52AFF_g, auto29C52AFF_var);
        if (auto29C52AFF_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto29C52AFF_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto29C52AFF_var, EventUnitCreatedUnit(), gv_ctrlGroup_MajorNest[auto29C52AFF_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_MajorNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddTunnelTremblernesttocontrolgroup_Init () {
    gt_AddTunnelTremblernesttocontrolgroup = TriggerCreate("gt_AddTunnelTremblernesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_AddTunnelTremblernesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add stinger nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_Addstingernesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2E578AF4_g;
    int auto2E578AF4_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "StingerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2E578AF4_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto2E578AF4_var = -1;
    while (true) {
        auto2E578AF4_var = PlayerGroupNextPlayer(auto2E578AF4_g, auto2E578AF4_var);
        if (auto2E578AF4_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto2E578AF4_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto2E578AF4_var, EventUnitCreatedUnit(), gv_ctrlGroup_StingerNest[auto2E578AF4_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_StingerNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addstingernesttocontrolgroup_Init () {
    gt_Addstingernesttocontrolgroup = TriggerCreate("gt_Addstingernesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_Addstingernesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Khepri nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_AddKheprinesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF8F71E54_g;
    int autoF8F71E54_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "KhepriNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF8F71E54_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoF8F71E54_var = -1;
    while (true) {
        autoF8F71E54_var = PlayerGroupNextPlayer(autoF8F71E54_g, autoF8F71E54_var);
        if (autoF8F71E54_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoF8F71E54_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoF8F71E54_var, EventUnitCreatedUnit(), gv_ctrlGroup_StingerNest[autoF8F71E54_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_StingerNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddKheprinesttocontrolgroup_Init () {
    gt_AddKheprinesttocontrolgroup = TriggerCreate("gt_AddKheprinesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_AddKheprinesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add acid sprayer nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_Addacidsprayernesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6C6F09B0_g;
    int auto6C6F09B0_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AcidSprayerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C6F09B0_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto6C6F09B0_var = -1;
    while (true) {
        auto6C6F09B0_var = PlayerGroupNextPlayer(auto6C6F09B0_g, auto6C6F09B0_var);
        if (auto6C6F09B0_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto6C6F09B0_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto6C6F09B0_var, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayerNest[auto6C6F09B0_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayerNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Addacidsprayernesttocontrolgroup_Init () {
    gt_Addacidsprayernesttocontrolgroup = TriggerCreate("gt_Addacidsprayernesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_Addacidsprayernesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Grave Digger nest to control group
//--------------------------------------------------------------------------------------------------
bool gt_AddGraveDiggernesttocontrolgroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6DC232CD_g;
    int auto6DC232CD_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "GraveDiggerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6DC232CD_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto6DC232CD_var = -1;
    while (true) {
        auto6DC232CD_var = PlayerGroupNextPlayer(auto6DC232CD_g, auto6DC232CD_var);
        if (auto6DC232CD_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto6DC232CD_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto6DC232CD_var, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayerNest[auto6DC232CD_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayerNest[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddGraveDiggernesttocontrolgroup_Init () {
    gt_AddGraveDiggernesttocontrolgroup = TriggerCreate("gt_AddGraveDiggernesttocontrolgroup_Func");
    TriggerAddEventUnitCreated(gt_AddGraveDiggernesttocontrolgroup, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Major spawn
//--------------------------------------------------------------------------------------------------
bool gt_Majorspawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoDB0FF64D_g;
    int autoDB0FF64D_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Ultralisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB0FF64D_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoDB0FF64D_var = -1;
    while (true) {
        autoDB0FF64D_var = PlayerGroupNextPlayer(autoDB0FF64D_g, autoDB0FF64D_var);
        if (autoDB0FF64D_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoDB0FF64D_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoDB0FF64D_var, EventUnitCreatedUnit(), gv_ctrlGroup_Major[autoDB0FF64D_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_Major[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Majorspawn_Init () {
    gt_Majorspawn = TriggerCreate("gt_Majorspawn_Func");
    TriggerAddEventUnitCreated(gt_Majorspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tunnel Trembler spawn
//--------------------------------------------------------------------------------------------------
bool gt_TunnelTremblerspawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto15346F08_g;
    int auto15346F08_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TunnelTrembler"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto15346F08_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto15346F08_var = -1;
    while (true) {
        auto15346F08_var = PlayerGroupNextPlayer(auto15346F08_g, auto15346F08_var);
        if (auto15346F08_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto15346F08_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto15346F08_var, EventUnitCreatedUnit(), gv_ctrlGroup_Major[auto15346F08_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_Major[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TunnelTremblerspawn_Init () {
    gt_TunnelTremblerspawn = TriggerCreate("gt_TunnelTremblerspawn_Func");
    TriggerAddEventUnitCreated(gt_TunnelTremblerspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stinger spawn
//--------------------------------------------------------------------------------------------------
bool gt_Stingerspawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA137017F_g;
    int autoA137017F_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Hydralisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA137017F_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoA137017F_var = -1;
    while (true) {
        autoA137017F_var = PlayerGroupNextPlayer(autoA137017F_g, autoA137017F_var);
        if (autoA137017F_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoA137017F_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoA137017F_var, EventUnitCreatedUnit(), gv_ctrlGroup_Stinger[autoA137017F_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_Stinger[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Stingerspawn_Init () {
    gt_Stingerspawn = TriggerCreate("gt_Stingerspawn_Func");
    TriggerAddEventUnitCreated(gt_Stingerspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Khepri spawn
//--------------------------------------------------------------------------------------------------
bool gt_Kheprispawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto7B444AAD_g;
    int auto7B444AAD_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "SwarmHostMP"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7B444AAD_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    auto7B444AAD_var = -1;
    while (true) {
        auto7B444AAD_var = PlayerGroupNextPlayer(auto7B444AAD_g, auto7B444AAD_var);
        if (auto7B444AAD_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, auto7B444AAD_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(auto7B444AAD_var, EventUnitCreatedUnit(), gv_ctrlGroup_Stinger[auto7B444AAD_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_Stinger[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kheprispawn_Init () {
    gt_Kheprispawn = TriggerCreate("gt_Kheprispawn_Func");
    TriggerAddEventUnitCreated(gt_Kheprispawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acid sprayer spawn
//--------------------------------------------------------------------------------------------------
bool gt_Acidsprayerspawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB8E224F5_g;
    int autoB8E224F5_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Locust"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8E224F5_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoB8E224F5_var = -1;
    while (true) {
        autoB8E224F5_var = PlayerGroupNextPlayer(autoB8E224F5_g, autoB8E224F5_var);
        if (autoB8E224F5_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoB8E224F5_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoB8E224F5_var, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayer[autoB8E224F5_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayer[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Acidsprayerspawn_Init () {
    gt_Acidsprayerspawn = TriggerCreate("gt_Acidsprayerspawn_Func");
    TriggerAddEventUnitCreated(gt_Acidsprayerspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grave Digger spawn
//--------------------------------------------------------------------------------------------------
bool gt_GraveDiggerspawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFAB10FB5_g;
    int autoFAB10FB5_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "InfestedAbomination"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFAB10FB5_g = PlayerGroupAlliance(c_playerGroupAlly, UnitGetOwner(EventUnit()));
    autoFAB10FB5_var = -1;
    while (true) {
        autoFAB10FB5_var = PlayerGroupNextPlayer(autoFAB10FB5_g, autoFAB10FB5_var);
        if (autoFAB10FB5_var < 0) { break; }
        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdControl, autoFAB10FB5_var) == true)) {
            gf_AddUnitToCustomCtrlGroup(autoFAB10FB5_var, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayer[autoFAB10FB5_var]);
        }

    }
    gf_AddUnitToCustomCtrlGroup(0, EventUnitCreatedUnit(), gv_ctrlGroup_AcidSprayer[UnitGetOwner(EventUnitCreatedUnit())]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GraveDiggerspawn_Init () {
    gt_GraveDiggerspawn = TriggerCreate("gt_GraveDiggerspawn_Func");
    TriggerAddEventUnitCreated(gt_GraveDiggerspawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unbreakable Dirt Created
//--------------------------------------------------------------------------------------------------
bool gt_UnbreakableDirtCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "UnbreakableDirtNoBlocker") || (UnitGetType(EventUnitCreatedUnit()) == "DirtUnbreakableandUntargetable")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnitCreatedUnit()), libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 100.0), 0.6, 10.0));
    ActorSend(libNtve_gf_MainActorofUnit(EventUnitCreatedUnit()), libNtve_gf_SetFacing(libNtve_gf_RandomAngle()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnbreakableDirtCreated_Init () {
    gt_UnbreakableDirtCreated = TriggerCreate("gt_UnbreakableDirtCreated_Func");
    TriggerAddEventUnitCreated(gt_UnbreakableDirtCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirt Created
//--------------------------------------------------------------------------------------------------
bool gt_DirtCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Dirt"))) {
            return false;
        }

        if (!((gv_initializationDone == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("DirtUnbreakableandUntargetable", "UnbreakableDirtNoBlocker", "", c_playerAny, c_unitAllianceAny, RegionCircle(UnitGetPosition(EventUnitCreatedUnit()), 0.3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        gf_Activatedirt(FixedToInt(PointGetX(UnitGetPosition(EventUnitCreatedUnit()))), FixedToInt(PointGetY(UnitGetPosition(EventUnitCreatedUnit()))));
        UnitRemove(EventUnitCreatedUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DirtCreated_Init () {
    gt_DirtCreated = TriggerCreate("gt_DirtCreated_Func");
    TriggerAddEventUnitCreated(gt_DirtCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spike Nest Death
//--------------------------------------------------------------------------------------------------
bool gt_SpikeNestDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_deathModel;
    string lv_modelOfDiedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_modelOfDiedUnit = gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnit())]);

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnit()) == "MediumSpikeNest") || (UnitGetType(EventUnit()) == "LargeSpikeNest")))) {
            return false;
        }

        if (!((libNtve_gf_KillingUnit() != EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MediumSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.5, 1.5, 1.5, 0.0));
    }
    else if ((UnitGetType(EventUnit()) == "LargeSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
    }
    libNtve_gf_CreateModelAtPoint(lv_modelOfDiedUnit, UnitGetPosition(EventUnit()));
    lv_deathModel = libNtve_gf_ActorLastCreated();
    ActorSend(lv_deathModel, libNtve_gf_SetFacing(UnitGetFacing(EventUnit())));
    ActorSend(lv_deathModel, libNtve_gf_SetTeamColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)), Color(100.00, 100.00, 100.00)));
    ActorSend(lv_deathModel, "AnimPlay Death Death");
    ActorSend(lv_deathModel, libNtve_gf_AnimSetTimeScaleGlobal(0.49));
    Wait(0.9, c_timeGame);
    libNtve_gf_KillModel(lv_deathModel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpikeNestDeath_Init () {
    gt_SpikeNestDeath = TriggerCreate("gt_SpikeNestDeath_Func");
    TriggerAddEventUnitDied(gt_SpikeNestDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ant kills2cash
//--------------------------------------------------------------------------------------------------
bool gt_antkills2cash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    fixed lv_foodAmount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libNtve_gf_KillingUnit() != null))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 14))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) < 14))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Dirt"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "SpaceCowSmall"))) {
            return false;
        }

        if (!(((TechTreeUpgradeCount(UnitGetOwner(libNtve_gf_KillingUnit()), "FireAnt", c_techCountCompleteOnly) == 1) || (TechTreeUpgradeCount(UnitGetOwner(libNtve_gf_KillingUnit()), "PharaohAnt", c_techCountCompleteOnly) == 1)))) {
            return false;
        }

        if (!((PlayerGetAlliance(UnitGetOwner(libNtve_gf_KillingUnit()), c_allianceIdPassive, UnitGetOwner(EventUnit())) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
    if ((UnitGetType(EventUnit()) == "Drone")) {
        lv_foodAmount = 1.0;
    }
    else if (((UnitGetType(EventUnit()) == "Zergling") || (UnitGetType(EventUnit()) == "Locust") || (UnitGetType(EventUnit()) == "TunnelTrembler"))) {
        lv_foodAmount = 3.0;
    }
    else if (((UnitGetType(EventUnit()) == "NewWorkerNest") || (UnitGetType(EventUnit()) == "NewSoldierNest") || (UnitGetType(EventUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnit()) == "UltraliskCavern") || (UnitGetType(EventUnit()) == "StingerNest") || (UnitGetType(EventUnit()) == "AcidSprayerNest") || (UnitGetType(EventUnit()) == "TunnelTremblerNest") || (UnitGetType(EventUnit()) == "GraveDiggerNest") || (UnitGetType(EventUnit()) == "KhepriNest") || (UnitGetType(EventUnit()) == "BulkBuilderTentacle") || (UnitGetType(EventUnit()) == "BulkBuilderBody"))) {
        lv_foodAmount = 10.0;
    }
    else if (((UnitGetType(EventUnit()) == "Ultralisk") || (UnitGetType(EventUnit()) == "Hydralisk") || (UnitGetType(EventUnit()) == "SwarmHostMP") || (UnitGetType(EventUnit()) == "InfestedAbomination") || (UnitGetType(EventUnit()) == "MediumSpikeNest"))) {
        lv_foodAmount = 20.0;
    }
    else if (((UnitGetType(EventUnit()) == "UpgradeChamber") || (UnitGetType(EventUnit()) == "UpgradeChamberWorkerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberSoldierStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberMajorStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberStingerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberAcidSprayerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberTunnelTremblerStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberKhepriStrain") || (UnitGetType(EventUnit()) == "UpgradeChamberGraveDiggerStrain") || (UnitGetType(EventUnit()) == "EvolutionChamberQueenStrain"))) {
        lv_foodAmount = 50.0;
    }
    else if (((UnitGetType(EventUnit()) == "Queen") || (UnitGetType(EventUnit()) == "QueenBlackAnt") || (UnitGetType(EventUnit()) == "QueenFireAnt") || (UnitGetType(EventUnit()) == "QueenWoodAnt") || (UnitGetType(EventUnit()) == "QueenPharaohAnt") || (UnitGetType(EventUnit()) == "QueenLeafCutterAnt") || (UnitGetType(EventUnit()) == "QueenGhostAnt") || (UnitGetType(EventUnit()) == "LargeSpikeNest"))) {
        lv_foodAmount = 100.0;
    }
    if ((lv_foodAmount >= 1)) {
        gv_fireAntResourceScore[lv_killingPlayer] += lv_foodAmount;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_antkills2cash_Init () {
    gt_antkills2cash = TriggerCreate("gt_antkills2cash_Func");
    TriggerAddEventUnitDied(gt_antkills2cash, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirt destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Dirtdestroyed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    playergroup auto056C1C6F_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Dirt") || (UnitGetType(EventUnit()) == "Wall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), gv_activeDirt) == 1)) {
        if ((UnitGroupHasUnit(gv_externalDirt, EventUnit()) == false)) {
            CreepModify(UnitGetPosition(EventUnit()), 0.75, true, true);
        }

    }

    auto056C1C6F_g = PlayerGroupActive();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(auto056C1C6F_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        if ((UnitGroupCount(UnitGroupAlliance(lv_currentPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
            SoundPlayAtPointForPlayer(SoundLink("RockDebris_ImpactExplosion_Medium", -1), c_maxPlayers, PlayerGroupSingle(lv_currentPlayer), UnitGetPosition(EventUnit()), 0.0, 100.0, 0.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dirtdestroyed_Init () {
    gt_Dirtdestroyed = TriggerCreate("gt_Dirtdestroyed_Func");
    TriggerAddEventUnitDied(gt_Dirtdestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dirt damaged
//--------------------------------------------------------------------------------------------------
bool gt_Dirtdamaged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dirtX;
    int lv_dirtY;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Dirt"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dirtX = FloorI((PointGetX(UnitGetPosition(EventUnit())) * 0.5));
    lv_dirtY = FloorI((PointGetY(UnitGetPosition(EventUnit())) * 0.5));
    gf_Activatedirt(lv_dirtX, lv_dirtY);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dirtdamaged_Init () {
    gt_Dirtdamaged = TriggerCreate("gt_Dirtdamaged_Func");
    TriggerAddEventUnitDamaged(gt_Dirtdamaged, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create corpse
//--------------------------------------------------------------------------------------------------
bool gt_Createcorpse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    unitgroup lv_foragerGroup;

    // Automatic Variable Declarations
    unitgroup auto288773E6_g;
    int auto288773E6_u;

    // Variable Initialization
    lv_foragerGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SpaceCowSmall"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "MineralField", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), libNtve_gf_RandomAngle());
    lv_foragerGroup = UnitGroup("Drone", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_foragerGroup, c_unitCountAlive) >= 1)) {
        UnitBehaviorAdd(lv_currentUnit, "ForagerIgnoreAI", lv_currentUnit, 1);
        lv_currentUnit = UnitGroupClosestToPoint(lv_foragerGroup, UnitGetPosition(EventUnit()));
        UnitIssueOrder(lv_currentUnit, OrderTargetingUnit(AbilityCommand("DroneHarvest", 0), UnitLastCreated()), c_orderQueueReplace);
        UnitGroupRemove(lv_foragerGroup, lv_currentUnit);
    }

    auto288773E6_g = lv_foragerGroup;
    auto288773E6_u = UnitGroupCount(auto288773E6_g, c_unitCountAll);
    for (;; auto288773E6_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto288773E6_g, auto288773E6_u);
        if (lv_currentUnit == null) { break; }
        UnitIssueOrder(lv_currentUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Createcorpse_Init () {
    gt_Createcorpse = TriggerCreate("gt_Createcorpse_Func");
    TriggerAddEventUnitDied(gt_Createcorpse, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Forager killed
//--------------------------------------------------------------------------------------------------
bool gt_Foragerkilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    int lv_id;
    unit lv_currentNest;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Drone"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = UnitGetCustomValue(EventUnit(), gv_x);
    lv_y = UnitGetCustomValue(EventUnit(), gv_y);
    lv_id = FixedToInt(UnitGetCustomValue(EventUnit(), gv_iD));
    lv_currentNest = UnitGroupUnit(UnitGroup("NewWorkerNest", UnitGetOwner(EventUnit()), RegionCircle(Point(lv_x, lv_y), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_id == FixedToInt(UnitGetCustomValue(lv_currentNest, gv_iD)))) {
        UnitIssueOrder(lv_currentNest, Order(AbilityCommand("LayForagerEgg", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Foragerkilled_Init () {
    gt_Foragerkilled = TriggerCreate("gt_Foragerkilled_Func");
    TriggerAddEventUnitDied(gt_Foragerkilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier killed
//--------------------------------------------------------------------------------------------------
bool gt_Soldierkilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    int lv_id;
    unit lv_currentNest;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Zergling"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = UnitGetCustomValue(EventUnit(), gv_x);
    lv_y = UnitGetCustomValue(EventUnit(), gv_y);
    lv_id = FixedToInt(UnitGetCustomValue(EventUnit(), gv_iD));
    lv_currentNest = UnitGroupUnit(UnitGroup("NewSoldierNest", UnitGetOwner(EventUnit()), RegionCircle(Point(lv_x, lv_y), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_id == FixedToInt(UnitGetCustomValue(lv_currentNest, gv_iD)))) {
        UnitIssueOrder(lv_currentNest, Order(AbilityCommand("LaySoldierEgg", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Soldierkilled_Init () {
    gt_Soldierkilled = TriggerCreate("gt_Soldierkilled_Func");
    TriggerAddEventUnitDied(gt_Soldierkilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assassin killed
//--------------------------------------------------------------------------------------------------
bool gt_Assassinkilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    int lv_id;
    unit lv_currentNest;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Assassin"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = UnitGetCustomValue(EventUnit(), gv_x);
    lv_y = UnitGetCustomValue(EventUnit(), gv_y);
    lv_id = FixedToInt(UnitGetCustomValue(EventUnit(), gv_iD));
    lv_currentNest = UnitGroupUnit(UnitGroup("NewAssassinsNest", UnitGetOwner(EventUnit()), RegionCircle(Point(lv_x, lv_y), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if ((lv_id == FixedToInt(UnitGetCustomValue(lv_currentNest, gv_iD)))) {
        UnitIssueOrder(lv_currentNest, Order(AbilityCommand("LayAssassinEgg", 0)), c_orderQueueReplace);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Assassinkilled_Init () {
    gt_Assassinkilled = TriggerCreate("gt_Assassinkilled_Func");
    TriggerAddEventUnitDied(gt_Assassinkilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Major dirt clear
//--------------------------------------------------------------------------------------------------
bool gt_Majordirtclear_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_dirtGroup;
    unitgroup lv_wallGroup;
    unit lv_currentUnit;
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    fixed lv_y;
    fixed lv_kaboomSize;

    // Automatic Variable Declarations
    unitgroup auto27323D1E_g;
    int auto27323D1E_u;
    unitgroup autoC9F720D9_g;
    int autoC9F720D9_u;
    unitgroup autoDFBADF60_g;
    int autoDFBADF60_u;

    // Variable Initialization
    lv_dirtGroup = UnitGroupEmpty();
    lv_wallGroup = UnitGroupEmpty();
    lv_kaboomSize = 4.5;

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Ultralisk") || (UnitGetType(EventUnit()) == "BeastMajor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "BeastMajor")) {
        lv_kaboomSize = 6.0;
    }

    lv_dirtGroup = UnitGroup("Dirt", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), lv_kaboomSize), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto27323D1E_g = lv_dirtGroup;
    auto27323D1E_u = UnitGroupCount(auto27323D1E_g, c_unitCountAll);
    for (;; auto27323D1E_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto27323D1E_g, auto27323D1E_u);
        if (lv_currentUnit == null) { break; }
        lv_dirtX = FloorI((PointGetX(UnitGetPosition(lv_currentUnit)) * 0.5));
        lv_dirtY = FloorI((PointGetY(UnitGetPosition(lv_currentUnit)) * 0.5));
        gf_Activatedirt(lv_dirtX, lv_dirtY);
        lv_x = PointGetX(UnitGetPosition(lv_currentUnit));
        lv_y = PointGetY(UnitGetPosition(lv_currentUnit));
        VisRevealArea(UnitGetOwner(EventUnit()), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 4.0, false);
    }
    lv_wallGroup = UnitGroup("Wall", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 4.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC9F720D9_g = lv_wallGroup;
    autoC9F720D9_u = UnitGroupCount(autoC9F720D9_g, c_unitCountAll);
    for (;; autoC9F720D9_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoC9F720D9_g, autoC9F720D9_u);
        if (lv_currentUnit == null) { break; }
        UnitDamage(lv_currentUnit, "MajorWallDamage", lv_currentUnit, 0.0);
    }
    Wait(0.0, c_timeGame);
    autoDFBADF60_g = lv_dirtGroup;
    autoDFBADF60_u = UnitGroupCount(autoDFBADF60_g, c_unitCountAll);
    for (;; autoDFBADF60_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoDFBADF60_g, autoDFBADF60_u);
        if (lv_currentUnit == null) { break; }
        UnitKill(lv_currentUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Majordirtclear_Init () {
    gt_Majordirtclear = TriggerCreate("gt_Majordirtclear_Func");
    TriggerAddEventUnitDied(gt_Majordirtclear, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgraded forager nest dies
//--------------------------------------------------------------------------------------------------
bool gt_Upgradedforagernestdies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_id;
    unit lv_nest;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto4EA4CF74_g;
    int auto4EA4CF74_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetCustomValue(EventUnit(), gv_farmUpgraded) == 1.0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FarmCostDecrease", (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FarmCostDecrease", c_techCountCompleteOnly) + 1));
    }

    if ((UnitGetCustomValue(EventUnit(), gv_subterraneanTrailUpgraded) == 1.0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SubterraneanTrailCostDecrease", (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "SubterraneanTrailCostDecrease", c_techCountCompleteOnly) + 1));
        lv_nest = EventUnit();
        lv_id = FixedToInt(UnitGetCustomValue(lv_nest, gv_iD));
        auto4EA4CF74_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "", "", c_playerAny, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4EA4CF74_u = UnitGroupCount(auto4EA4CF74_g, c_unitCountAll);
        for (;; auto4EA4CF74_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto4EA4CF74_g, auto4EA4CF74_u);
            if (lv_currentUnit == null) { break; }
            if ((lv_id == FixedToInt(UnitGetCustomValue(lv_currentUnit, gv_iD)))) {
                gf_Uncloakforager(lv_currentUnit);
                break;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgradedforagernestdies_Init () {
    gt_Upgradedforagernestdies = TriggerCreate("gt_Upgradedforagernestdies_Func");
    TriggerAddEventUnitDied(gt_Upgradedforagernestdies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Broodling kill credit transfer
//--------------------------------------------------------------------------------------------------
bool gt_Broodlingkillcredittransfer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    unit lv_broodlingSpawner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(libNtve_gf_KillingUnit()) == true))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "Broodling"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "Broodling"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = UnitGetCustomValue(libNtve_gf_KillingUnit(), gv_x);
    lv_y = UnitGetCustomValue(libNtve_gf_KillingUnit(), gv_y);
    lv_broodlingSpawner = UnitGroupUnit(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SmallSpikeNest", "MediumSpikeNest", "LargeSpikeNest", UnitGetOwner(libNtve_gf_KillingUnit()), -1, RegionCircle(Point(lv_x, lv_y), 0.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitSetPropertyFixed(lv_broodlingSpawner, c_unitPropKills, (UnitGetPropertyFixed(lv_broodlingSpawner, c_unitPropKills, c_unitPropCurrent) + 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Broodlingkillcredittransfer_Init () {
    gt_Broodlingkillcredittransfer = TriggerCreate("gt_Broodlingkillcredittransfer_Func");
    TriggerAddEventUnitDied(gt_Broodlingkillcredittransfer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicked Bulk Build Button - 1 Type nest
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClickedBulkBuildButton1Typenest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitsthatshouldMorph;
    unitgroup lv_nestsCreatedFromBulk;
    region lv_broodlingCleaner;
    string lv_modelOfBuildingbeingmadewithbulk;
    string lv_unitOfBuildingbeingmadewithbulk;

    // Automatic Variable Declarations
    unitgroup auto760A239A_g;
    int auto760A239A_u;
    unit auto760A239A_var;
    unitgroup auto130DCD87_g;
    int auto130DCD87_u;
    unit auto130DCD87_var;
    unitgroup autoA27014DE_g;
    int autoA27014DE_u;
    unit autoA27014DE_var;
    unitgroup auto4176C3C5_g;
    int auto4176C3C5_u;
    unit auto4176C3C5_var;
    unitgroup auto608C5248_g;
    int auto608C5248_u;
    unit auto608C5248_var;

    // Variable Initialization
    lv_unitsthatshouldMorph = UnitGroupEmpty();
    lv_nestsCreatedFromBulk = UnitGroupEmpty();
    lv_broodlingCleaner = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    if ((EventUnitAbility() == AbilityCommand("MassMorphToWorkerNest", 0))) {
        lv_modelOfBuildingbeingmadewithbulk = gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_unitOfBuildingbeingmadewithbulk = "NewWorkerNest";
    }
    else if ((EventUnitAbility() == AbilityCommand("MassMorphToSoldierNest", 0))) {
        lv_modelOfBuildingbeingmadewithbulk = gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_unitOfBuildingbeingmadewithbulk = "NewSoldierNest";
    }
    else if ((EventUnitAbility() == AbilityCommand("MassMorphToSpikeNest", 0))) {
        lv_modelOfBuildingbeingmadewithbulk = gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_unitOfBuildingbeingmadewithbulk = "SmallSpikeNest";
    }
    auto760A239A_g = UnitGroup("BulkBuilderTentacle", c_playerAny, gf_Convertpointtosquareregion(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto760A239A_u = UnitGroupCount(auto760A239A_g, c_unitCountAll);
    for (;; auto760A239A_u -= 1) {
        auto760A239A_var = UnitGroupUnitFromEnd(auto760A239A_g, auto760A239A_u);
        if (auto760A239A_var == null) { break; }
        if ((UnitGetFacing(auto760A239A_var) == AngleBetweenPoints(UnitGetPosition(auto760A239A_var), UnitGetPosition(EventUnit())))) {
            UnitGroupAdd(lv_unitsthatshouldMorph, auto760A239A_var);
        }

    }
    UnitGroupAdd(lv_unitsthatshouldMorph, EventUnit());
    auto130DCD87_g = lv_unitsthatshouldMorph;
    auto130DCD87_u = UnitGroupCount(auto130DCD87_g, c_unitCountAll);
    for (;; auto130DCD87_u -= 1) {
        auto130DCD87_var = UnitGroupUnitFromEnd(auto130DCD87_g, auto130DCD87_u);
        if (auto130DCD87_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto130DCD87_var, libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        libNtve_gf_SendActorMessageToUnit(auto130DCD87_var, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
        libNtve_gf_AttachModelToUnit(auto130DCD87_var, lv_modelOfBuildingbeingmadewithbulk, "Ref_Attacher 06");
        ActorSend(libNtve_gf_ActorLastCreatedSend(), libNtve_gf_AliasAdd("BuildingAttachment"));
        ActorSend(ActorFromScope(ActorScopeFromUnit(auto130DCD87_var), "BuildingAttachment"), libNtve_gf_SetScale(0.2, 0.2, 0.2, 0.0));
        ActorSend(ActorFromScope(ActorScopeFromUnit(auto130DCD87_var), "BuildingAttachment"), "AnimSetPausedAll 0");
        ActorSend(ActorFromScope(ActorScopeFromUnit(auto130DCD87_var), "BuildingAttachment"), "AnimSetPausedAll 0");
    }
    Wait(5.0, c_timeGame);
    autoA27014DE_g = lv_unitsthatshouldMorph;
    autoA27014DE_u = UnitGroupCount(autoA27014DE_g, c_unitCountAll);
    for (;; autoA27014DE_u -= 1) {
        autoA27014DE_var = UnitGroupUnitFromEnd(autoA27014DE_g, autoA27014DE_u);
        if (autoA27014DE_var == null) { break; }
        if ((UnitGetType(autoA27014DE_var) == "BulkBuilderBody")) {
            libNtve_gf_SendActorMessageToUnit(autoA27014DE_var, "AnimPlay Morph Morph");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(autoA27014DE_var, "AnimPlay StandWork Stand,Work,End");
        }
        ActorSend(ActorFromScope(ActorScopeFromUnit(autoA27014DE_var), "BuildingAttachment"), libNtve_gf_SetScale(1.0, 1.0, 1.0, 2.0));
    }
    Wait(1.9, c_timeGame);
    auto4176C3C5_g = lv_unitsthatshouldMorph;
    auto4176C3C5_u = UnitGroupCount(auto4176C3C5_g, c_unitCountAll);
    for (;; auto4176C3C5_u -= 1) {
        auto4176C3C5_var = UnitGroupUnitFromEnd(auto4176C3C5_g, auto4176C3C5_u);
        if (auto4176C3C5_var == null) { break; }
        UnitBehaviorAdd(auto4176C3C5_var, "DontSpawnSpikesuponDeath", auto4176C3C5_var, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk, c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(auto4176C3C5_var));
        if ((UnitGetType(UnitLastCreated()) == "NewWorkerNest")) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
        }
        else if ((UnitGetType(UnitLastCreated()) == "NewSoldierNest")) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
        }
        else if ((UnitGetType(UnitLastCreated()) == "SmallSpikeNest")) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
        }
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitGroupAdd(lv_nestsCreatedFromBulk, UnitLastCreated());
        libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(EventUnit()), 0.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("LaySoldierEgg", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("LayForagerEgg", 0)), c_orderQueueReplace);
        libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(auto4176C3C5_var), "BuildingAttachment"));
        UnitRemove(auto4176C3C5_var);
    }
    Wait(3.0, c_timeGame);
    auto608C5248_g = lv_nestsCreatedFromBulk;
    auto608C5248_u = UnitGroupCount(auto608C5248_g, c_unitCountAll);
    for (;; auto608C5248_u -= 1) {
        auto608C5248_var = UnitGroupUnitFromEnd(auto608C5248_g, auto608C5248_u);
        if (auto608C5248_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(auto608C5248_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClickedBulkBuildButton1Typenest_Init () {
    gt_PlayerClickedBulkBuildButton1Typenest = TriggerCreate("gt_PlayerClickedBulkBuildButton1Typenest_Func");
    TriggerAddEventUnitAbility(gt_PlayerClickedBulkBuildButton1Typenest, null, AbilityCommand("MassMorphToWorkerNest", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedBulkBuildButton1Typenest, null, AbilityCommand("MassMorphToSoldierNest", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_PlayerClickedBulkBuildButton1Typenest, null, AbilityCommand("MassMorphToSpikeNest", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Clicked Bulk Build Button - Nest Mix
//--------------------------------------------------------------------------------------------------
bool gt_PlayerClickedBulkBuildButtonNestMix_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitsthatshouldMorph;
    unitgroup lv_nestsCreatedFromBulk;
    region lv_broodlingCleaner;
    string[10] lv_modelOfBuildingbeingmadewithbulk;
    string[10] lv_unitOfBuildingbeingmadewithbulk;
    int lv_repeaterIndex;

    // Automatic Variable Declarations
    unitgroup auto80CF5CC7_g;
    int auto80CF5CC7_u;
    unit auto80CF5CC7_var;
    unitgroup autoF28E4B70_g;
    int autoF28E4B70_u;
    unit autoF28E4B70_var;
    unitgroup autoF8D83429_g;
    int autoF8D83429_u;
    unit autoF8D83429_var;
    unitgroup autoD4B6DC20_g;
    int autoD4B6DC20_u;
    unit autoD4B6DC20_var;
    unitgroup auto2653FFEB_g;
    int auto2653FFEB_u;
    unit auto2653FFEB_var;

    // Variable Initialization
    lv_unitsthatshouldMorph = UnitGroupEmpty();
    lv_nestsCreatedFromBulk = UnitGroupEmpty();
    lv_broodlingCleaner = RegionEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnit(), true);
    if ((EventUnitAbility() == AbilityCommand("MassMorphToNestMix144", 0))) {
        lv_modelOfBuildingbeingmadewithbulk[1] = gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[2] = gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[3] = gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[4] = gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[5] = gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[6] = gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[7] = gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[8] = gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_modelOfBuildingbeingmadewithbulk[9] = gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_unitOfBuildingbeingmadewithbulk[1] = "NewSoldierNest";
        lv_unitOfBuildingbeingmadewithbulk[2] = "NewWorkerNest";
        lv_unitOfBuildingbeingmadewithbulk[3] = "NewSoldierNest";
        lv_unitOfBuildingbeingmadewithbulk[4] = "NewWorkerNest";
        lv_unitOfBuildingbeingmadewithbulk[5] = "SmallSpikeNest";
        lv_unitOfBuildingbeingmadewithbulk[6] = "NewWorkerNest";
        lv_unitOfBuildingbeingmadewithbulk[7] = "NewSoldierNest";
        lv_unitOfBuildingbeingmadewithbulk[8] = "NewWorkerNest";
        lv_unitOfBuildingbeingmadewithbulk[9] = "NewSoldierNest";
    }
    else if ((EventUnitAbility() == AbilityCommand("MassMorphToSoldierNest", 0))) {
        lv_modelOfBuildingbeingmadewithbulk[0] = gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_unitOfBuildingbeingmadewithbulk[0] = "NewSoldierNest";
    }
    else if ((EventUnitAbility() == AbilityCommand("MassMorphToSpikeNest", 0))) {
        lv_modelOfBuildingbeingmadewithbulk[0] = gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(EventUnit())]);
        lv_unitOfBuildingbeingmadewithbulk[0] = "SmallSpikeNest";
    }
    auto80CF5CC7_g = UnitGroup("BulkBuilderTentacle", c_playerAny, gf_Convertpointtosquareregion(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto80CF5CC7_u = UnitGroupCount(auto80CF5CC7_g, c_unitCountAll);
    for (;; auto80CF5CC7_u -= 1) {
        auto80CF5CC7_var = UnitGroupUnitFromEnd(auto80CF5CC7_g, auto80CF5CC7_u);
        if (auto80CF5CC7_var == null) { break; }
        if ((UnitGetFacing(auto80CF5CC7_var) == AngleBetweenPoints(UnitGetPosition(auto80CF5CC7_var), UnitGetPosition(EventUnit())))) {
            UnitGroupAdd(lv_unitsthatshouldMorph, auto80CF5CC7_var);
        }

    }
    UnitGroupAdd(lv_unitsthatshouldMorph, EventUnit());
    autoF28E4B70_g = lv_unitsthatshouldMorph;
    autoF28E4B70_u = UnitGroupCount(autoF28E4B70_g, c_unitCountAll);
    for (;; autoF28E4B70_u -= 1) {
        autoF28E4B70_var = UnitGroupUnitFromEnd(autoF28E4B70_g, autoF28E4B70_u);
        if (autoF28E4B70_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoF28E4B70_var, libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        libNtve_gf_SendActorMessageToUnit(autoF28E4B70_var, "AnimBracketStart StandWork Stand,Work,Start Stand,Work Stand,Work,End");
        if ((UnitGetType(autoF28E4B70_var) == "BulkBuilderTentacle")) {
            if ((UnitGetFacing(autoF28E4B70_var) == 45.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[1], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == 90.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[2], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == 135.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[3], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == 180.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[6], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == -135.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[9], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == -90.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[8], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == -45.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[7], "Ref_Attacher 06");
            }
            else if ((UnitGetFacing(autoF28E4B70_var) == 0.0)) {
                libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[4], "Ref_Attacher 06");
            }
        }
        else {
            libNtve_gf_AttachModelToUnit(autoF28E4B70_var, lv_modelOfBuildingbeingmadewithbulk[5], "Ref_Attacher 06");
        }
        ActorSend(libNtve_gf_ActorLastCreatedSend(), libNtve_gf_AliasAdd("BuildingAttachment"));
        ActorSend(ActorFromScope(ActorScopeFromUnit(autoF28E4B70_var), "BuildingAttachment"), libNtve_gf_SetScale(0.2, 0.2, 0.2, 0.0));
        ActorSend(ActorFromScope(ActorScopeFromUnit(autoF28E4B70_var), "BuildingAttachment"), "AnimSetPausedAll 0");
        ActorSend(ActorFromScope(ActorScopeFromUnit(autoF28E4B70_var), "BuildingAttachment"), "AnimSetPausedAll 0");
    }
    Wait(5.0, c_timeGame);
    autoF8D83429_g = lv_unitsthatshouldMorph;
    autoF8D83429_u = UnitGroupCount(autoF8D83429_g, c_unitCountAll);
    for (;; autoF8D83429_u -= 1) {
        autoF8D83429_var = UnitGroupUnitFromEnd(autoF8D83429_g, autoF8D83429_u);
        if (autoF8D83429_var == null) { break; }
        if ((UnitGetType(autoF8D83429_var) == "BulkBuilderBody")) {
            libNtve_gf_SendActorMessageToUnit(autoF8D83429_var, "AnimPlay Morph Morph");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(autoF8D83429_var, "AnimPlay StandWork Stand,Work,End");
        }
        ActorSend(ActorFromScope(ActorScopeFromUnit(autoF8D83429_var), "BuildingAttachment"), libNtve_gf_SetScale(1.0, 1.0, 1.0, 2.0));
    }
    Wait(1.9, c_timeGame);
    autoD4B6DC20_g = lv_unitsthatshouldMorph;
    autoD4B6DC20_u = UnitGroupCount(autoD4B6DC20_g, c_unitCountAll);
    for (;; autoD4B6DC20_u -= 1) {
        autoD4B6DC20_var = UnitGroupUnitFromEnd(autoD4B6DC20_g, autoD4B6DC20_u);
        if (autoD4B6DC20_var == null) { break; }
        UnitBehaviorAdd(autoD4B6DC20_var, "DontSpawnSpikesuponDeath", autoD4B6DC20_var, 1);
        if ((UnitGetType(autoD4B6DC20_var) == "BulkBuilderTentacle")) {
            if ((UnitGetFacing(autoD4B6DC20_var) == 45.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[1], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == 90.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[2], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == 135.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[3], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == 180.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[6], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == -135.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[9], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == -90.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[8], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == -45.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[7], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            else if ((UnitGetFacing(autoD4B6DC20_var) == 0.0)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[4], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            }
            if ((UnitGetType(UnitLastCreated()) == "NewWorkerNest")) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
            }
            else if ((UnitGetType(UnitLastCreated()) == "NewSoldierNest")) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
            }
            else if ((UnitGetType(UnitLastCreated()) == "SmallSpikeNest")) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
            }
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitOfBuildingbeingmadewithbulk[5], c_unitCreateIgnorePlacement, UnitGetOwner(EventUnit()), UnitGetPosition(autoD4B6DC20_var));
            if ((UnitGetType(UnitLastCreated()) == "NewWorkerNest")) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnWorkerNestSwapModelStringIntoModelEntry("Normal", gv_workerNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
            }
            else if ((UnitGetType(UnitLastCreated()) == "NewSoldierNest")) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnSoldierNestSwapModelStringIntoModelEntry(gv_soldierNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
            }
            else if ((UnitGetType(UnitLastCreated()) == "SmallSpikeNest")) {
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap(gf_TurnSpikesNestSwapModelStringIntoModelEntry(gv_spikesNestSwapModelString[UnitGetOwner(UnitLastCreated())]), 1));
            }
        }
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        UnitGroupAdd(lv_nestsCreatedFromBulk, UnitLastCreated());
        libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), UnitGetPosition(EventUnit()), 0.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("LaySoldierEgg", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("LayForagerEgg", 0)), c_orderQueueReplace);
        libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(autoD4B6DC20_var), "BuildingAttachment"));
        UnitRemove(autoD4B6DC20_var);
    }
    Wait(3.0, c_timeGame);
    auto2653FFEB_g = lv_nestsCreatedFromBulk;
    auto2653FFEB_u = UnitGroupCount(auto2653FFEB_g, c_unitCountAll);
    for (;; auto2653FFEB_u -= 1) {
        auto2653FFEB_var = UnitGroupUnitFromEnd(auto2653FFEB_g, auto2653FFEB_u);
        if (auto2653FFEB_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(auto2653FFEB_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerClickedBulkBuildButtonNestMix_Init () {
    gt_PlayerClickedBulkBuildButtonNestMix = TriggerCreate("gt_PlayerClickedBulkBuildButtonNestMix_Func");
    TriggerAddEventUnitAbility(gt_PlayerClickedBulkBuildButtonNestMix, null, AbilityCommand("MassMorphToNestMix144", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Upgrade Debuff Applier
//--------------------------------------------------------------------------------------------------
bool gt_QueenUpgradeDebuffApplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyMax10") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyRegeneration1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenHealthRegeneration1")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyMax10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateQueenEnergyMax25", (TechTreeUpgradeCount(EventPlayer(), "MutateQueenEnergyMax25", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyRegeneration1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateQueenEnergyRegeneration3", (TechTreeUpgradeCount(EventPlayer(), "MutateQueenEnergyRegeneration3", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenHealthRegeneration1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateQueenHealthRegeneration3", (TechTreeUpgradeCount(EventPlayer(), "MutateQueenHealthRegeneration3", c_techCountCompleteOnly) + 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenUpgradeDebuffApplier_Init () {
    gt_QueenUpgradeDebuffApplier = TriggerCreate("gt_QueenUpgradeDebuffApplier_Func");
    TriggerAddEventUnitResearchProgress(gt_QueenUpgradeDebuffApplier, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Upgrade Debuff Remover
//--------------------------------------------------------------------------------------------------
bool gt_QueenUpgradeDebuffRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyMax10") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyRegeneration1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenHealthRegeneration1")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyMax10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateQueenEnergyMax25", (TechTreeUpgradeCount(EventPlayer(), "MutateQueenEnergyMax25", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenEnergyRegeneration1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateQueenEnergyRegeneration3", (TechTreeUpgradeCount(EventPlayer(), "MutateQueenEnergyRegeneration3", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateQueenHealthRegeneration1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateQueenHealthRegeneration3", (TechTreeUpgradeCount(EventPlayer(), "MutateQueenHealthRegeneration3", c_techCountCompleteOnly) - 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenUpgradeDebuffRemover_Init () {
    gt_QueenUpgradeDebuffRemover = TriggerCreate("gt_QueenUpgradeDebuffRemover_Func");
    TriggerAddEventUnitResearchProgress(gt_QueenUpgradeDebuffRemover, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_QueenUpgradeDebuffRemover, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Upgrade Debuff Applier
//--------------------------------------------------------------------------------------------------
bool gt_WorkerUpgradeDebuffApplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringAmount1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringSpeed25") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerMovementSpeed10")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringAmount1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateWorkerGatheringAmount3", (TechTreeUpgradeCount(EventPlayer(), "MutateWorkerGatheringAmount3", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringSpeed25")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateWorkerGatheringSpeed300", (TechTreeUpgradeCount(EventPlayer(), "MutateWorkerGatheringSpeed300", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerMovementSpeed10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateWorkerMovementSpeed30", (TechTreeUpgradeCount(EventPlayer(), "MutateWorkerMovementSpeed30", c_techCountCompleteOnly) + 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkerUpgradeDebuffApplier_Init () {
    gt_WorkerUpgradeDebuffApplier = TriggerCreate("gt_WorkerUpgradeDebuffApplier_Func");
    TriggerAddEventUnitResearchProgress(gt_WorkerUpgradeDebuffApplier, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Worker Upgrade Debuff Remover
//--------------------------------------------------------------------------------------------------
bool gt_WorkerUpgradeDebuffRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringAmount1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringSpeed25") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerMovementSpeed10")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringAmount1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateWorkerGatheringAmount3", (TechTreeUpgradeCount(EventPlayer(), "MutateWorkerGatheringAmount3", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerGatheringSpeed25")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateWorkerGatheringSpeed300", (TechTreeUpgradeCount(EventPlayer(), "MutateWorkerGatheringSpeed300", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateWorkerMovementSpeed10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateWorkerMovementSpeed30", (TechTreeUpgradeCount(EventPlayer(), "MutateWorkerMovementSpeed30", c_techCountCompleteOnly) - 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WorkerUpgradeDebuffRemover_Init () {
    gt_WorkerUpgradeDebuffRemover = TriggerCreate("gt_WorkerUpgradeDebuffRemover_Func");
    TriggerAddEventUnitResearchProgress(gt_WorkerUpgradeDebuffRemover, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_WorkerUpgradeDebuffRemover, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier Upgrade Debuff Applier
//--------------------------------------------------------------------------------------------------
bool gt_SoldierUpgradeDebuffApplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierDamage1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierArmor1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierAttackSpeed01") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMovementSpeed") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMaxHealth5") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierLowerUnitSize5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierDamage1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierDamage3", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierDamage3", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierArmor1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierArmor3", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierArmor3", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierAttackSpeed01")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierAttackSpeed05", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierAttackSpeed05", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMovementSpeed")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierMovementSpeed25", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierMovementSpeed25", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMaxHealth5")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierMaxHealth15", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierMaxHealth15", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierLowerUnitSize5")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierLowerUnitSize20", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierLowerUnitSize20", c_techCountCompleteOnly) + 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoldierUpgradeDebuffApplier_Init () {
    gt_SoldierUpgradeDebuffApplier = TriggerCreate("gt_SoldierUpgradeDebuffApplier_Func");
    TriggerAddEventUnitResearchProgress(gt_SoldierUpgradeDebuffApplier, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Soldier Upgrade Debuff Remover
//--------------------------------------------------------------------------------------------------
bool gt_SoldierUpgradeDebuffRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierDamage1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierArmor1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierAttackSpeed01") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMovementSpeed") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMaxHealth5") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierLowerUnitSize5")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierDamage1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierDamage3", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierDamage3", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierArmor1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierArmor3", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierArmor3", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierAttackSpeed01")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierAttackSpeed05", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierAttackSpeed05", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMovementSpeed")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierMovementSpeed25", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierMovementSpeed25", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierMaxHealth5")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierMaxHealth15", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierMaxHealth15", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSoldierLowerUnitSize5")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSoldierLowerUnitSize20", (TechTreeUpgradeCount(EventPlayer(), "MutateSoldierLowerUnitSize20", c_techCountCompleteOnly) - 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SoldierUpgradeDebuffRemover_Init () {
    gt_SoldierUpgradeDebuffRemover = TriggerCreate("gt_SoldierUpgradeDebuffRemover_Func");
    TriggerAddEventUnitResearchProgress(gt_SoldierUpgradeDebuffRemover, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_SoldierUpgradeDebuffRemover, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specialty Unit Upgrade Debuff Applier
//--------------------------------------------------------------------------------------------------
bool gt_SpecialtyUnitUpgradeDebuffApplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitDamage1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitArmor1")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitDamage1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSpecialtyUnitDamage3", (TechTreeUpgradeCount(EventPlayer(), "MutateSpecialtyUnitDamage3", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitArmor1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSpecialtyUnitArmor3", (TechTreeUpgradeCount(EventPlayer(), "MutateSpecialtyUnitArmor3", c_techCountCompleteOnly) + 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialtyUnitUpgradeDebuffApplier_Init () {
    gt_SpecialtyUnitUpgradeDebuffApplier = TriggerCreate("gt_SpecialtyUnitUpgradeDebuffApplier_Func");
    TriggerAddEventUnitResearchProgress(gt_SpecialtyUnitUpgradeDebuffApplier, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Specialty Unit Upgrade Debuff Remover
//--------------------------------------------------------------------------------------------------
bool gt_SpecialtyUnitUpgradeDebuffRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitDamage1") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitArmor1")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitDamage1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSpecialtyUnitDamage3", (TechTreeUpgradeCount(EventPlayer(), "MutateSpecialtyUnitDamage3", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateSpecialtyUnitArmor1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateSpecialtyUnitArmor3", (TechTreeUpgradeCount(EventPlayer(), "MutateSpecialtyUnitArmor3", c_techCountCompleteOnly) - 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpecialtyUnitUpgradeDebuffRemover_Init () {
    gt_SpecialtyUnitUpgradeDebuffRemover = TriggerCreate("gt_SpecialtyUnitUpgradeDebuffRemover_Func");
    TriggerAddEventUnitResearchProgress(gt_SpecialtyUnitUpgradeDebuffRemover, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_SpecialtyUnitUpgradeDebuffRemover, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Upgrade Debuff Applier
//--------------------------------------------------------------------------------------------------
bool gt_BuildingUpgradeDebuffApplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingHealthMax20") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingConstructionspeed10") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingCost10")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingHealthMax20")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateBuildingHealthMax45", (TechTreeUpgradeCount(EventPlayer(), "MutateBuildingHealthMax45", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingConstructionspeed10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateBuildingConstructionspeed102", (TechTreeUpgradeCount(EventPlayer(), "MutateBuildingConstructionspeed102", c_techCountCompleteOnly) + 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingCost10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateBuildingCost102", (TechTreeUpgradeCount(EventPlayer(), "MutateBuildingCost102", c_techCountCompleteOnly) + 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingUpgradeDebuffApplier_Init () {
    gt_BuildingUpgradeDebuffApplier = TriggerCreate("gt_BuildingUpgradeDebuffApplier_Func");
    TriggerAddEventUnitResearchProgress(gt_BuildingUpgradeDebuffApplier, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Upgrade Debuff Remover
//--------------------------------------------------------------------------------------------------
bool gt_BuildingUpgradeDebuffRemover_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingHealthMax20") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingConstructionspeed10") || (libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingCost10")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingHealthMax20")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateBuildingHealthMax45", (TechTreeUpgradeCount(EventPlayer(), "MutateBuildingHealthMax45", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingConstructionspeed10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateBuildingConstructionspeed102", (TechTreeUpgradeCount(EventPlayer(), "MutateBuildingConstructionspeed102", c_techCountCompleteOnly) - 1));
    }
    else if ((libNtve_gf_TriggeringProgressUpgrade() == "MutateBuildingCost10")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MutateBuildingCost102", (TechTreeUpgradeCount(EventPlayer(), "MutateBuildingCost102", c_techCountCompleteOnly) - 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingUpgradeDebuffRemover_Init () {
    gt_BuildingUpgradeDebuffRemover = TriggerCreate("gt_BuildingUpgradeDebuffRemover_Func");
    TriggerAddEventUnitResearchProgress(gt_BuildingUpgradeDebuffRemover, null, c_unitProgressStageComplete);
    TriggerAddEventUnitResearchProgress(gt_BuildingUpgradeDebuffRemover, null, c_unitProgressStageCancel);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock Drop Start
//--------------------------------------------------------------------------------------------------
bool gt_RockDropStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_dirtDustEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 5.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay StandRightReady Stand,Right,Ready");
        Wait(0.5, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay StandRightReady Stand,Right,Ready");
        Wait(0.5, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay StandRightReady Stand,Right,Ready");
        Wait(0.5, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay StandRightReady Stand,Right,Ready");
        Wait(0.5, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay StandRightReady Stand,Right,Ready");
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/41D663C9"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RockDropStart_Init () {
    gt_RockDropStart = TriggerCreate("gt_RockDropStart_Func");
    TriggerAddEventUnitAbility(gt_RockDropStart, null, AbilityCommand("DropRock", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rock Drop Exc
//--------------------------------------------------------------------------------------------------
bool gt_RockDropExc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_fallingRockDamageRegion;
    actor lv_fallingRockModel;
    actor[3] lv_dirtDustEffect;
    unitgroup lv_unitsThatTakeDamageFromRock;

    // Automatic Variable Declarations
    unitgroup auto43EC00B8_g;
    int auto43EC00B8_u;
    unit auto43EC00B8_var;

    // Variable Initialization
    lv_fallingRockDamageRegion = RegionCircle(EventUnitTargetPoint(), 1.5);
    lv_unitsThatTakeDamageFromRock = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 5.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        libNtve_gf_CreateModelAtPoint("RockDrop", EventUnitTargetPoint());
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Death Death");
        lv_fallingRockModel = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("DirtDeath2", EventUnitTargetPoint());
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.3, 0));
        lv_dirtDustEffect[1] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("DirtDeath2", UnitGetPosition(EventUnit()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.3, 0));
        lv_dirtDustEffect[2] = libNtve_gf_ActorLastCreated();
        lv_unitsThatTakeDamageFromRock = UnitGroup(null, c_playerAny, lv_fallingRockDamageRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        SoundPlayAtPointForPlayer(SoundLink("Uni_RockExplosionLarge", -1), c_maxPlayers, PlayerGroupActive(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
        SoundPlayAtPointForPlayer(SoundLink("Kraith_SpellImpact", -1), c_maxPlayers, PlayerGroupActive(), EventUnitTargetPoint(), 0.0, 100.0, 0.0);
        auto43EC00B8_g = lv_unitsThatTakeDamageFromRock;
        auto43EC00B8_u = UnitGroupCount(auto43EC00B8_g, c_unitCountAll);
        for (;; auto43EC00B8_u -= 1) {
            auto43EC00B8_var = UnitGroupUnitFromEnd(auto43EC00B8_g, auto43EC00B8_u);
            if (auto43EC00B8_var == null) { break; }
            if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, UnitGetOwner(auto43EC00B8_var)) == true)) {
                if (((UnitGetType(auto43EC00B8_var) == "Dirt") || (UnitGetType(auto43EC00B8_var) == "SpaceCowSmall"))) {
                    UnitCreateEffectUnit(EventUnit(), "DropRockDsmage", auto43EC00B8_var);
                }

            }
            else {
                UnitCreateEffectUnit(EventUnit(), "DropRockDsmage", auto43EC00B8_var);
            }
        }
        Wait(2.0, c_timeGame);
        ActorSend(lv_fallingRockModel, libNtve_gf_SetOpacity(0.0, 0));
        libNtve_gf_KillModel(lv_fallingRockModel);
        libNtve_gf_KillModel(lv_dirtDustEffect[1]);
        libNtve_gf_KillModel(lv_dirtDustEffect[2]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RockDropExc_Init () {
    gt_RockDropExc = TriggerCreate("gt_RockDropExc_Func");
    TriggerAddEventUnitAbility(gt_RockDropExc, null, AbilityCommand("DropRock", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bastion Drums Exc
//--------------------------------------------------------------------------------------------------
bool gt_BastionDrumsExc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyUnitsAroundQueen;
    unitgroup lv_perPlayerEnemyUnitsAroundQueen;
    region lv_bastionDrumRegion;
    actor[41] lv_bastionSphereActorGroup;
    int lv_arrayUsed;

    // Automatic Variable Declarations
    playergroup auto2711FAB8_g;
    int auto2711FAB8_var;
    const int auto7370FEAB_n = 10;
    int auto7370FEAB_i;
    unitgroup auto9185C4E1_g;
    int auto9185C4E1_u;
    unit auto9185C4E1_var;
    unitgroup auto467DC1BA_g;
    int auto467DC1BA_u;
    unit auto467DC1BA_var;

    // Variable Initialization
    lv_enemyUnitsAroundQueen = UnitGroupEmpty();
    lv_perPlayerEnemyUnitsAroundQueen = UnitGroupEmpty();
    lv_bastionDrumRegion = RegionCircle(UnitGetPosition(EventUnit()), 3.0);

    // Actions
    if (!runActions) {
        return true;
    }

    auto2711FAB8_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, EventPlayer());
    auto2711FAB8_var = -1;
    while (true) {
        auto2711FAB8_var = PlayerGroupNextPlayer(auto2711FAB8_g, auto2711FAB8_var);
        if (auto2711FAB8_var < 0) { break; }
        lv_perPlayerEnemyUnitsAroundQueen = UnitGroup(null, auto2711FAB8_var, lv_bastionDrumRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_enemyUnitsAroundQueen, lv_perPlayerEnemyUnitsAroundQueen);
    }
    for (auto7370FEAB_i = 1; auto7370FEAB_i <= auto7370FEAB_n; auto7370FEAB_i += 1) {
        auto9185C4E1_g = lv_enemyUnitsAroundQueen;
        auto9185C4E1_u = UnitGroupCount(auto9185C4E1_g, c_unitCountAll);
        for (;; auto9185C4E1_u -= 1) {
            auto9185C4E1_var = UnitGroupUnitFromEnd(auto9185C4E1_g, auto9185C4E1_u);
            if (auto9185C4E1_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto9185C4E1_var, true);
            libNtve_gf_AttachModelToUnit(auto9185C4E1_var, "BastionDrumsDefSphere", "Ref_Origin");
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 9.80), 1.0, 1.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.3, 0));
            lv_bastionSphereActorGroup[lv_arrayUsed] = libNtve_gf_ActorLastCreated();
            lv_arrayUsed = (lv_arrayUsed + 1);
        }
        lv_arrayUsed = 0;
        Wait(2.0, c_timeGame);
        auto467DC1BA_g = lv_enemyUnitsAroundQueen;
        auto467DC1BA_u = UnitGroupCount(auto467DC1BA_g, c_unitCountAll);
        for (;; auto467DC1BA_u -= 1) {
            auto467DC1BA_var = UnitGroupUnitFromEnd(auto467DC1BA_g, auto467DC1BA_u);
            if (auto467DC1BA_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto467DC1BA_var, false);
            libNtve_gf_KillModel(lv_bastionSphereActorGroup[lv_arrayUsed]);
            lv_arrayUsed = (lv_arrayUsed + 1);
        }
        lv_arrayUsed = 0;
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BastionDrumsExc_Init () {
    gt_BastionDrumsExc = TriggerCreate("gt_BastionDrumsExc_Func");
    TriggerAddEventUnitAbility(gt_BastionDrumsExc, null, AbilityCommand("BastionDrums", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Berserker Drums Exc
//--------------------------------------------------------------------------------------------------
bool gt_BerserkerDrumsExc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_allyandSelfUnits;
    unitgroup lv_perPlayerAllyandSelfUnitsAroundQueen;
    region lv_bastionDrumRegion;
    actor[41] lv_bastionSphereActorGroup;
    actor lv_redQueen;
    actor lv_redWave;
    int lv_arrayUsed;

    // Automatic Variable Declarations
    playergroup autoD52F177E_g;
    int autoD52F177E_var;
    unitgroup autoB0716C3A_g;
    int autoB0716C3A_u;
    unit autoB0716C3A_var;
    const int autoD3F285B9_n = 10;
    int autoD3F285B9_i;
    unitgroup autoD14D56BF_g;
    int autoD14D56BF_u;
    unit autoD14D56BF_var;
    unitgroup autoB8B1BD53_g;
    int autoB8B1BD53_u;
    unit autoB8B1BD53_var;
    unitgroup auto48319A2B_g;
    int auto48319A2B_u;
    unit auto48319A2B_var;

    // Variable Initialization
    lv_allyandSelfUnits = UnitGroupEmpty();
    lv_perPlayerAllyandSelfUnitsAroundQueen = UnitGroupEmpty();
    lv_bastionDrumRegion = RegionCircle(UnitGetPosition(EventUnit()), 3.0);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(EventUnit(), "HybridAAttackImpact", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 9.80), 1.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(3.0, 3.0, 3.0, 0.2));
    lv_redWave = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(EventUnit(), "QueenFire", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 9.80), 1.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.3, 0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.3, 1.3, 1.3, 0.0));
    lv_redQueen = libNtve_gf_ActorLastCreated();
    autoD52F177E_g = libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, EventPlayer());
    autoD52F177E_var = -1;
    while (true) {
        autoD52F177E_var = PlayerGroupNextPlayer(autoD52F177E_g, autoD52F177E_var);
        if (autoD52F177E_var < 0) { break; }
        lv_perPlayerAllyandSelfUnitsAroundQueen = UnitGroup(null, autoD52F177E_var, lv_bastionDrumRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_allyandSelfUnits, lv_perPlayerAllyandSelfUnitsAroundQueen);
    }
    autoB0716C3A_g = lv_allyandSelfUnits;
    autoB0716C3A_u = UnitGroupCount(autoB0716C3A_g, c_unitCountAll);
    for (;; autoB0716C3A_u -= 1) {
        autoB0716C3A_var = UnitGroupUnitFromEnd(autoB0716C3A_g, autoB0716C3A_u);
        if (autoB0716C3A_var == null) { break; }
        if ((!((UnitGetType(EventUnit()) == "Drone")))) {
            UnitBehaviorAdd(autoB0716C3A_var, "BerserkerFrenzy", autoB0716C3A_var, 1);
        }

    }
    for (autoD3F285B9_i = 1; autoD3F285B9_i <= autoD3F285B9_n; autoD3F285B9_i += 1) {
        autoD14D56BF_g = lv_allyandSelfUnits;
        autoD14D56BF_u = UnitGroupCount(autoD14D56BF_g, c_unitCountAll);
        for (;; autoD14D56BF_u -= 1) {
            autoD14D56BF_var = UnitGroupUnitFromEnd(autoD14D56BF_g, autoD14D56BF_u);
            if (autoD14D56BF_var == null) { break; }
            libNtve_gf_AttachModelToUnit(autoD14D56BF_var, "BerserkerDrumsEffect", "Ref_Origin");
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 9.80), 1.0, 1.0));
            lv_bastionSphereActorGroup[lv_arrayUsed] = libNtve_gf_ActorLastCreated();
            lv_arrayUsed = (lv_arrayUsed + 1);
        }
        lv_arrayUsed = 0;
        Wait(2.0, c_timeGame);
        autoB8B1BD53_g = lv_allyandSelfUnits;
        autoB8B1BD53_u = UnitGroupCount(autoB8B1BD53_g, c_unitCountAll);
        for (;; autoB8B1BD53_u -= 1) {
            autoB8B1BD53_var = UnitGroupUnitFromEnd(autoB8B1BD53_g, autoB8B1BD53_u);
            if (autoB8B1BD53_var == null) { break; }
            libNtve_gf_KillModel(lv_bastionSphereActorGroup[lv_arrayUsed]);
            lv_arrayUsed = (lv_arrayUsed + 1);
        }
        lv_arrayUsed = 0;
        Wait(2.0, c_timeGame);
    }
    auto48319A2B_g = lv_allyandSelfUnits;
    auto48319A2B_u = UnitGroupCount(auto48319A2B_g, c_unitCountAll);
    for (;; auto48319A2B_u -= 1) {
        auto48319A2B_var = UnitGroupUnitFromEnd(auto48319A2B_g, auto48319A2B_u);
        if (auto48319A2B_var == null) { break; }
        UnitBehaviorRemove(auto48319A2B_var, "BerserkerFrenzy", 1);
    }
    libNtve_gf_KillModel(lv_redQueen);
    libNtve_gf_KillModel(lv_redWave);
    libNtve_gf_AttachModelToUnit(EventUnit(), "HybridAAttackImpact", "Ref_Origin");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 9.80), 1.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(3.0, 3.0, 3.0, 0.2));
    lv_redWave = libNtve_gf_ActorLastCreated();
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_redWave);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BerserkerDrumsExc_Init () {
    gt_BerserkerDrumsExc = TriggerCreate("gt_BerserkerDrumsExc_Func");
    TriggerAddEventUnitAbility(gt_BerserkerDrumsExc, null, AbilityCommand("BerserkerMode", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acid Vomit Exc
//--------------------------------------------------------------------------------------------------
bool gt_AcidVomitExc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[3] lv_vomitActors;
    actor[41] lv_unitAcidActors;
    actor[41] lv_unitBigAcidActors;
    unitgroup lv_unitsThatAreInrangeOfacidVomit;
    unitgroup lv_unitsThatTakeDamageAcid;
    int lv_actorArrayForUnitAcidanimation;
    int lv_actorArrayForUnitBigAcidanimation;
    region lv_vomitSplashDamageRegion;
    int lv_amountofEffectedUnits;

    // Automatic Variable Declarations
    unitgroup auto46C39F8E_g;
    int auto46C39F8E_u;
    unit auto46C39F8E_var;
    unitgroup auto601BB6D8_g;
    int auto601BB6D8_u;
    unit auto601BB6D8_var;
    unitgroup auto3A1B22E5_g;
    int auto3A1B22E5_u;
    unit auto3A1B22E5_var;
    const int auto4C80FB24_n = 3;
    int auto4C80FB24_i;
    unitgroup auto3B0CE18C_g;
    int auto3B0CE18C_u;
    unit auto3B0CE18C_var;
    unitgroup auto423F11D2_g;
    int auto423F11D2_u;
    unit auto423F11D2_var;

    // Variable Initialization
    lv_unitsThatAreInrangeOfacidVomit = UnitGroupEmpty();
    lv_unitsThatTakeDamageAcid = UnitGroupEmpty();
    lv_vomitSplashDamageRegion = RegionCircle(EventUnitTargetPoint(), 1.5);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        libNtve_gf_CreateModelAtPoint("CorruptionBombImpact", EventUnitTargetPoint());
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.4, 0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 0.5, 0.0));
        lv_vomitActors[2] = libNtve_gf_ActorLastCreated();
        libNtve_gf_AttachModelToUnit(EventUnit(), "CorrosiveAcid", "Ref_Target");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 0.5, 0.0));
        lv_vomitActors[1] = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetDuration("Spell C", 0.5));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        lv_unitsThatAreInrangeOfacidVomit = UnitGroup(null, c_playerAny, lv_vomitSplashDamageRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto46C39F8E_g = lv_unitsThatAreInrangeOfacidVomit;
        auto46C39F8E_u = UnitGroupCount(auto46C39F8E_g, c_unitCountAll);
        for (;; auto46C39F8E_u -= 1) {
            auto46C39F8E_var = UnitGroupUnitFromEnd(auto46C39F8E_g, auto46C39F8E_u);
            if (auto46C39F8E_var == null) { break; }
            if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdPassive, UnitGetOwner(auto46C39F8E_var)) == false)) {
                UnitGroupAdd(lv_unitsThatTakeDamageAcid, auto46C39F8E_var);
            }

        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4EF61AAC") + IntToText(UnitGroupCount(lv_unitsThatTakeDamageAcid, c_unitCountAlive))));
        lv_amountofEffectedUnits = UnitGroupCount(lv_unitsThatTakeDamageAcid, c_unitCountAlive);
        auto601BB6D8_g = lv_unitsThatTakeDamageAcid;
        auto601BB6D8_u = UnitGroupCount(auto601BB6D8_g, c_unitCountAll);
        for (;; auto601BB6D8_u -= 1) {
            auto601BB6D8_var = UnitGroupUnitFromEnd(auto601BB6D8_g, auto601BB6D8_u);
            if (auto601BB6D8_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto601BB6D8_var, "MiasmaImpact", "Ref_Target");
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 0.5, 0.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.7, 0));
            lv_unitBigAcidActors[lv_actorArrayForUnitBigAcidanimation] = libNtve_gf_ActorLastCreated();
            lv_actorArrayForUnitBigAcidanimation = (lv_actorArrayForUnitBigAcidanimation + 1);
            UnitCreateEffectUnit(EventUnit(), "DropRockDsmage2", auto601BB6D8_var);
        }
        lv_actorArrayForUnitBigAcidanimation = 0;
        Wait(2.0, c_timeGame);
        auto3A1B22E5_g = lv_unitsThatTakeDamageAcid;
        auto3A1B22E5_u = UnitGroupCount(auto3A1B22E5_g, c_unitCountAll);
        for (;; auto3A1B22E5_u -= 1) {
            auto3A1B22E5_var = UnitGroupUnitFromEnd(auto3A1B22E5_g, auto3A1B22E5_u);
            if (auto3A1B22E5_var == null) { break; }
            libNtve_gf_KillModel(lv_unitBigAcidActors[0]);
            lv_unitBigAcidActors[lv_actorArrayForUnitBigAcidanimation] = libNtve_gf_ActorLastCreated();
            lv_actorArrayForUnitBigAcidanimation = (lv_actorArrayForUnitBigAcidanimation + 1);
        }
        for (auto4C80FB24_i = 1; auto4C80FB24_i <= auto4C80FB24_n; auto4C80FB24_i += 1) {
            auto3B0CE18C_g = lv_unitsThatTakeDamageAcid;
            auto3B0CE18C_u = UnitGroupCount(auto3B0CE18C_g, c_unitCountAll);
            for (;; auto3B0CE18C_u -= 1) {
                auto3B0CE18C_var = UnitGroupUnitFromEnd(auto3B0CE18C_g, auto3B0CE18C_u);
                if (auto3B0CE18C_var == null) { break; }
                libNtve_gf_AttachModelToUnit(auto3B0CE18C_var, "AcidicSpineImpact", "Ref_Target");
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.7, 0));
                UnitCreateEffectUnit(EventUnit(), "DropRockDsmage22", auto3B0CE18C_var);
                lv_unitAcidActors[lv_actorArrayForUnitAcidanimation] = libNtve_gf_ActorLastCreated();
                lv_actorArrayForUnitAcidanimation = (lv_actorArrayForUnitAcidanimation + 1);
            }
            lv_actorArrayForUnitAcidanimation = 0;
            Wait(2.0, c_timeGame);
            auto423F11D2_g = lv_unitsThatTakeDamageAcid;
            auto423F11D2_u = UnitGroupCount(auto423F11D2_g, c_unitCountAll);
            for (;; auto423F11D2_u -= 1) {
                auto423F11D2_var = UnitGroupUnitFromEnd(auto423F11D2_g, auto423F11D2_u);
                if (auto423F11D2_var == null) { break; }
                lv_unitAcidActors[lv_actorArrayForUnitAcidanimation] = libNtve_gf_ActorLastCreated();
                lv_actorArrayForUnitAcidanimation = (lv_actorArrayForUnitAcidanimation + 1);
            }
        }
        libNtve_gf_KillModel(lv_vomitActors[1]);
        libNtve_gf_KillModel(lv_vomitActors[2]);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetDuration("Spell C", 1.0));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/9067E39A"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AcidVomitExc_Init () {
    gt_AcidVomitExc = TriggerCreate("gt_AcidVomitExc_Func");
    TriggerAddEventUnitAbility(gt_AcidVomitExc, null, AbilityCommand("AcidVomit", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Land Mine Exc
//--------------------------------------------------------------------------------------------------
bool gt_LandMineExc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_placementModelActor;
    point lv_targetpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetpoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.0), EventUnitTargetPoint()) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LandMine", 0, EventPlayer(), lv_targetpoint);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.6));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell B", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        libNtve_gf_CreateModelAtPoint("MetalTargetImpact", lv_targetpoint);
        lv_placementModelActor = libNtve_gf_ActorLastCreated();
        Wait(2.0, c_timeGame);
        libNtve_gf_KillModel(lv_placementModelActor);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.0));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/DB4F16A6"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LandMineExc_Init () {
    gt_LandMineExc = TriggerCreate("gt_LandMineExc_Func");
    TriggerAddEventUnitAbility(gt_LandMineExc, null, AbilityCommand("LandMine", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Life Suction
//--------------------------------------------------------------------------------------------------
bool gt_LifeSuction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsAroundQueenIgnoreQueens;
    actor[21] lv_healingModelsred;
    actor lv_healingModelGreen;
    fixed lv_scaleOfGreenModel;
    int lv_actorArray;

    // Automatic Variable Declarations
    unitgroup autoF777188D_g;
    int autoF777188D_u;
    unit autoF777188D_var;
    unitgroup auto99FD5ED1_g;
    int auto99FD5ED1_u;
    unit auto99FD5ED1_var;
    int auto93D90924_n;
    int auto93D90924_i;

    // Variable Initialization
    lv_friendlyUnitsAroundQueenIgnoreQueens = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_friendlyUnitsAroundQueenIgnoreQueens = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", c_playerAny, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    autoF777188D_g = lv_friendlyUnitsAroundQueenIgnoreQueens;
    autoF777188D_u = UnitGroupCount(autoF777188D_g, c_unitCountAll);
    for (;; autoF777188D_u -= 1) {
        autoF777188D_var = UnitGroupUnitFromEnd(autoF777188D_g, autoF777188D_u);
        if (autoF777188D_var == null) { break; }
        if (((UnitGetType(autoF777188D_var) == "Queen") || (UnitGetType(autoF777188D_var) == "QueenBlackAnt") || (UnitGetType(autoF777188D_var) == "QueenFireAnt") || (UnitGetType(autoF777188D_var) == "QueenWoodAnt") || (UnitGetType(autoF777188D_var) == "QueenLeafCutterAnt") || (UnitGetType(autoF777188D_var) == "QueenGhostAnt") || (UnitGetType(autoF777188D_var) == "QueenPharaohAnt"))) {
            UnitGroupRemove(lv_friendlyUnitsAroundQueenIgnoreQueens, autoF777188D_var);
        }

        if (((UnitGetPropertyFixed(autoF777188D_var, c_unitPropLife, c_unitPropCurrent) < 40.0))) {
            UnitGroupRemove(lv_friendlyUnitsAroundQueenIgnoreQueens, autoF777188D_var);
        }

    }
    auto99FD5ED1_g = lv_friendlyUnitsAroundQueenIgnoreQueens;
    auto99FD5ED1_u = UnitGroupCount(auto99FD5ED1_g, c_unitCountAll);
    for (;; auto99FD5ED1_u -= 1) {
        auto99FD5ED1_var = UnitGroupUnitFromEnd(auto99FD5ED1_g, auto99FD5ED1_u);
        if (auto99FD5ED1_var == null) { break; }
        libNtve_gf_CreateModelAtPoint("PrimalHealBuffImpactModel", UnitGetPosition(auto99FD5ED1_var));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(82.35, 0.00, 0.00), 1.0, 0.0));
        lv_healingModelGreen = libNtve_gf_ActorLastCreated();
        UnitSetPropertyFixed(auto99FD5ED1_var, c_unitPropLife, (UnitGetPropertyFixed(auto99FD5ED1_var, c_unitPropLife, c_unitPropCurrent) - 40.0));
    }
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, ((UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive) * 10) + UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)));
    if ((UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive) != 0)) {
        libNtve_gf_CreateModelAtPoint("RegenerativeBileBuff", UnitGetPosition(EventUnit()));
        lv_healingModelGreen = libNtve_gf_ActorLastCreated();
        lv_scaleOfGreenModel = ((0.2 * UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive)) + 1.0);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(lv_scaleOfGreenModel, lv_scaleOfGreenModel, lv_scaleOfGreenModel, 0.0));
        SoundPlayAtPointForPlayer(SoundLink("Kerrigan_EnergyCollect", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 1.0);
    }
    else {
        lv_healingModelGreen = libNtve_gf_ActorLastCreated();
        SoundPlayAtPointForPlayer(SoundLink("Changeling_Yes", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 1.0);
    }
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_healingModelGreen);
    auto93D90924_n = UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAll);
    for (auto93D90924_i = 1; auto93D90924_i <= auto93D90924_n; auto93D90924_i += 1) {
        lv_actorArray = (lv_actorArray + 1);
        libNtve_gf_KillModel(lv_healingModelsred[lv_actorArray]);
    }
    lv_actorArray = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeSuction_Init () {
    gt_LifeSuction = TriggerCreate("gt_LifeSuction_Func");
    TriggerAddEventUnitAbility(gt_LifeSuction, null, AbilityCommand("LifeSuction", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Life Share
//--------------------------------------------------------------------------------------------------
bool gt_LifeShare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_friendlyUnitsAroundQueenIgnoreQueens;
    actor[21] lv_healingModelsGreen;
    actor lv_healingModelred;
    fixed lv_scaleOfGreenModel;
    int lv_actorArray;

    // Automatic Variable Declarations
    unitgroup auto0F1D098D_g;
    int auto0F1D098D_u;
    unit auto0F1D098D_var;
    unitgroup autoA231E1DA_g;
    int autoA231E1DA_u;
    unit autoA231E1DA_var;
    int autoAD30110B_n;
    int autoAD30110B_i;

    // Variable Initialization
    lv_friendlyUnitsAroundQueenIgnoreQueens = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_friendlyUnitsAroundQueenIgnoreQueens = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", c_playerAny, c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventUnit()), 2.0), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterUncommandable), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterUnstoppable - 32)) | (1 << (c_targetFilterMapBoss - 32))), 10);
    auto0F1D098D_g = lv_friendlyUnitsAroundQueenIgnoreQueens;
    auto0F1D098D_u = UnitGroupCount(auto0F1D098D_g, c_unitCountAll);
    for (;; auto0F1D098D_u -= 1) {
        auto0F1D098D_var = UnitGroupUnitFromEnd(auto0F1D098D_g, auto0F1D098D_u);
        if (auto0F1D098D_var == null) { break; }
        if (((auto0F1D098D_var == EventUnit()))) {
            UnitGroupRemove(lv_friendlyUnitsAroundQueenIgnoreQueens, auto0F1D098D_var);
        }

        if ((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdChat, UnitGetOwner(auto0F1D098D_var)) == false)) {
            UnitGroupRemove(lv_friendlyUnitsAroundQueenIgnoreQueens, auto0F1D098D_var);
        }

        if ((UnitGetPropertyFixed(auto0F1D098D_var, c_unitPropLife, c_unitPropNormal) == UnitGetPropertyFixed(auto0F1D098D_var, c_unitPropLife, c_unitPropCurrent))) {
            UnitGroupRemove(lv_friendlyUnitsAroundQueenIgnoreQueens, auto0F1D098D_var);
        }

    }
    autoA231E1DA_g = lv_friendlyUnitsAroundQueenIgnoreQueens;
    autoA231E1DA_u = UnitGroupCount(autoA231E1DA_g, c_unitCountAll);
    for (;; autoA231E1DA_u -= 1) {
        autoA231E1DA_var = UnitGroupUnitFromEnd(autoA231E1DA_g, autoA231E1DA_u);
        if (autoA231E1DA_var == null) { break; }
        libNtve_gf_CreateModelAtPoint("RegenerativeBileBuff", UnitGetPosition(autoA231E1DA_var));
        lv_healingModelred = libNtve_gf_ActorLastCreated();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(((UnitGetName(autoA231E1DA_var) + StringExternal("Param/Value/C013DB76")) + FixedToText(((UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive) * 10) + UnitGetPropertyFixed(autoA231E1DA_var, c_unitPropLife, c_unitPropCurrent)), c_fixedPrecisionAny)), Color(50.20, 100.00, 0.00)));
        UnitSetPropertyFixed(autoA231E1DA_var, c_unitPropLife, (UnitGetPropertyFixed(autoA231E1DA_var, c_unitPropLife, c_unitPropCurrent) + 40.0));
    }
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) - (UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive) * 10)));
    if ((UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive) != 0)) {
        libNtve_gf_CreateModelAtPoint("PrimalHealBuffImpactModel", UnitGetPosition(EventUnit()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(82.35, 0.00, 0.00), 1.0, 0.0));
        lv_healingModelred = libNtve_gf_ActorLastCreated();
        lv_scaleOfGreenModel = ((0.2 * UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAlive)) + 1.0);
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(lv_scaleOfGreenModel, lv_scaleOfGreenModel, lv_scaleOfGreenModel, 0.0));
        SoundPlayAtPointForPlayer(SoundLink("Changeling_Yes", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 1.0);
    }
    else {
        lv_healingModelred = libNtve_gf_ActorLastCreated();
        SoundPlayAtPointForPlayer(SoundLink("Changeling_Yes", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 0.0, 100.0, 1.0);
    }
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_healingModelred);
    autoAD30110B_n = UnitGroupCount(lv_friendlyUnitsAroundQueenIgnoreQueens, c_unitCountAll);
    for (autoAD30110B_i = 1; autoAD30110B_i <= autoAD30110B_n; autoAD30110B_i += 1) {
        lv_actorArray = (lv_actorArray + 1);
        libNtve_gf_KillModel(lv_healingModelsGreen[lv_actorArray]);
    }
    lv_actorArray = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LifeShare_Init () {
    gt_LifeShare = TriggerCreate("gt_LifeShare_Func");
    TriggerAddEventUnitAbility(gt_LifeShare, null, AbilityCommand("LifeShare", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Water Spring Exc
//--------------------------------------------------------------------------------------------------
bool gt_WaterSpringExc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_positionofSpring;
    unit lv_springUnit;
    int lv_wallsArray;
    int lv_wallsAngle;
    unitgroup lv_spring;
    unit lv_waterSpring;
    actor[9] lv_waterFallActors;
    int lv_blockingRegion;

    // Automatic Variable Declarations
    const int auto310E4B34_n = 8;
    int auto310E4B34_i;
    const int auto3E6271AF_n = 8;
    int auto3E6271AF_i;
    const int autoF607F48A_n = 8;
    int autoF607F48A_i;

    // Variable Initialization
    lv_positionofSpring = UnitGetPosition(EventUnitCreatedUnit());
    lv_springUnit = EventUnitCreatedUnit();
    lv_spring = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "WaterSpring"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "QueenLeafCutterAnt"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnitCreatedUnit());
    Wait(0.1, c_timeGame);
    if (((UnitCount(null, c_playerAny, RegionCircle(lv_positionofSpring, 1.5), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) - 1) == 0)) {
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WaterSpring", 0, EventPlayer(), lv_positionofSpring);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        lv_springUnit = UnitLastCreated();
        for (auto310E4B34_i = 1; auto310E4B34_i <= auto310E4B34_n; auto310E4B34_i += 1) {
            libNtve_gf_CreateModelAtPoint("WaterSpringWall", UnitGetPosition(lv_springUnit));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetFacing(lv_wallsAngle));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.4, 3.0));
            lv_waterFallActors[lv_wallsArray] = libNtve_gf_ActorLastCreated();
            lv_wallsArray = (lv_wallsArray + 1);
            lv_wallsAngle = (lv_wallsAngle + 45);
        }
        lv_wallsArray = 0;
        UnitGroupAdd(lv_spring, lv_springUnit);
        lv_waterSpring = lv_springUnit;
        Wait(10.0, c_timeGame);
        for (auto3E6271AF_i = 1; auto3E6271AF_i <= auto3E6271AF_n; auto3E6271AF_i += 1) {
            ActorSend(lv_waterFallActors[lv_wallsArray], libNtve_gf_SetOpacity(0.0, 1.0));
            lv_wallsArray = (lv_wallsArray + 1);
        }
        Wait(1.0, c_timeGame);
        lv_wallsArray = 0;
        libNtve_gf_MakeUnitInvulnerable(lv_springUnit, false);
        UnitRemove(lv_springUnit);
        for (autoF607F48A_i = 1; autoF607F48A_i <= autoF607F48A_n; autoF607F48A_i += 1) {
            libNtve_gf_KillModel(lv_waterFallActors[lv_wallsArray]);
            lv_wallsArray = (lv_wallsArray + 1);
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/85CEB2A2"), EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WaterSpringExc_Init () {
    gt_WaterSpringExc = TriggerCreate("gt_WaterSpringExc_Func");
    TriggerAddEventUnitCreated(gt_WaterSpringExc, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Regen Aura
//--------------------------------------------------------------------------------------------------
bool gt_EnergyRegenAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "EnergyRegenAuraMain", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyRegenAura_Init () {
    gt_EnergyRegenAura = TriggerCreate("gt_EnergyRegenAura_Func");
    TriggerAddEventUnitAbility(gt_EnergyRegenAura, null, AbilityCommand("ResearchEnergyRegenerationAura", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Building Regen Aura
//--------------------------------------------------------------------------------------------------
bool gt_BuildingRegenAura_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "BuildingRegenAuramain", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildingRegenAura_Init () {
    gt_BuildingRegenAura = TriggerCreate("gt_BuildingRegenAura_Func");
    TriggerAddEventUnitAbility(gt_BuildingRegenAura, null, AbilityCommand("ResearchBuildingRegeneration", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide Building
//--------------------------------------------------------------------------------------------------
bool gt_HideBuilding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_flashEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Aberration_Burrow", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnitTargetUnit()), 0.0, 100.0, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    libNtve_gf_CreateModelAtPoint("EMPTowerDebuff", UnitGetPosition(EventUnitTargetUnit()));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 3.0, 0.0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 0));
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(1.0, 3.0));
    Wait(3.0, c_timeGame);
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 3.0));
    lv_flashEffect = libNtve_gf_ActorLastCreated();
    Wait(7.0, c_timeGame);
    libNtve_gf_KillModel(lv_flashEffect);
    Wait(50.0, c_timeGame);
    UnitBehaviorRemove(EventUnitTargetUnit(), "HideBuilding", 1);
    SoundPlayAtPointForPlayer(SoundLink("Aiur_Zerg_Intestines", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnitTargetUnit()), 0.0, 100.0, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HideBuilding_Init () {
    gt_HideBuilding = TriggerCreate("gt_HideBuilding_Func");
    TriggerAddEventUnitAbility(gt_HideBuilding, null, AbilityCommand("HideBuilding", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: My Walking Boots
//--------------------------------------------------------------------------------------------------
bool gt_MyWalkingBoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_bootsEffect;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    libNtve_gf_AttachModelToUnit(EventUnit(), "MendBuffState", "Ref_Center");
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
    lv_bootsEffect = libNtve_gf_ActorLastCreated();
    Wait(60.0, c_timeGame);
    libNtve_gf_KillModel(lv_bootsEffect);
    UnitBehaviorRemove(EventUnit(), "WalkingBoots", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MyWalkingBoots_Init () {
    gt_MyWalkingBoots = TriggerCreate("gt_MyWalkingBoots_Func");
    TriggerAddEventUnitAbility(gt_MyWalkingBoots, null, AbilityCommand("MyWalkingBoots", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Insanity
//--------------------------------------------------------------------------------------------------
bool gt_Insanity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomAction;
    actor lv_headAttachmentModel;
    actor lv_bloodSplatterFromHead;
    unitgroup lv_randomUnitGroup;

    // Automatic Variable Declarations
    const int auto4DC3E19D_n = 10;
    int auto4DC3E19D_i;

    // Variable Initialization
    lv_randomUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        UnitBehaviorAdd(EventUnitTargetUnit(), "Insanity", EventUnit(), 1);
        libNtve_gf_AttachModelToUnit(EventUnitTargetUnit(), "EMPTowerDebuff", "Ref_Target");
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(50.20, 0.00, 50.20), 1.0, 0.0));
        lv_headAttachmentModel = libNtve_gf_ActorLastCreated();
        for (auto4DC3E19D_i = 1; auto4DC3E19D_i <= auto4DC3E19D_n; auto4DC3E19D_i += 1) {
            if ((UnitIsAlive(EventUnitTargetUnit()) == true)) {
                SoundPlayAtPointForPlayer(SoundLink("Slivan_BodyHit", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnitTargetUnit()), 0.0, 50.0, 0.0);
                libNtve_gf_AttachModelToUnit(EventUnitTargetUnit(), "BloodTargetImpact", "Ref_Target");
                ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
                lv_bloodSplatterFromHead = libNtve_gf_ActorLastCreated();
                UnitSetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) - 3.0));
                lv_randomAction = RandomInt(1, 5);
                libNtve_gf_MakeUnitUncommandable(EventUnitTargetUnit(), true);
                UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("que1", 1)), c_orderQueueReplace);
                UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("que1", 1)), c_orderQueueReplace);
                UnitIssueOrder(EventUnitTargetUnit(), Order(AbilityCommand("que1", 1)), c_orderQueueReplace);
                if ((lv_randomAction == 1)) {
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    lv_randomUnitGroup = UnitGroupAlliance(c_playerAny, c_unitAllianceEnemy, RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), 10.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("attack", 2), PointWithOffsetPolar(UnitGetPosition(UnitGroupRandomUnit(lv_randomUnitGroup, c_unitCountAlive)), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else if ((lv_randomAction == 2)) {
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(6.0, 8.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else if ((lv_randomAction == 3)) {
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(6.0, 8.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else if ((lv_randomAction == 4)) {
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 1), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(6.0, 8.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else if ((lv_randomAction == 5)) {
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(2.0, 3.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    Wait(0.2, c_timeGame);
                    UnitIssueOrder(EventUnitTargetUnit(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(RegionRandomPoint(RegionCircle(UnitGetGoalPosition(EventUnitTargetUnit()), RandomFixed(20.0, 30.0))), RandomFixed(0.9, 1.2), libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                Wait(2.0, c_timeGame);
                libNtve_gf_KillModel(lv_bloodSplatterFromHead);
                libNtve_gf_MakeUnitUncommandable(EventUnitTargetUnit(), false);
                Wait(3.0, c_timeGame);
            }

        }
        UnitBehaviorRemove(EventUnitTargetUnit(), "Insanity", 1);
        libNtve_gf_KillModel(lv_headAttachmentModel);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/9E47D034"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Insanity_Init () {
    gt_Insanity = TriggerCreate("gt_Insanity_Func");
    TriggerAddEventUnitAbility(gt_Insanity, null, AbilityCommand("Insanity", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Web
//--------------------------------------------------------------------------------------------------
bool gt_Web_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyUnitsWithinTargetArea;
    int lv_actorArray;
    actor[51] lv_webActors;
    actor[51] lv_stunActors;

    // Automatic Variable Declarations
    unitgroup auto0CDE08CC_g;
    int auto0CDE08CC_u;
    unit auto0CDE08CC_var;
    unitgroup autoD4CE112A_g;
    int autoD4CE112A_u;
    unit autoD4CE112A_var;
    unitgroup autoA50B5115_g;
    int autoA50B5115_u;
    unit autoA50B5115_var;

    // Variable Initialization
    lv_enemyUnitsWithinTargetArea = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 5.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        lv_enemyUnitsWithinTargetArea = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", c_playerAny, c_unitAllianceAlly, RegionCircle(EventUnitTargetPoint(), 3.0), UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterUnstoppable - 32))), 0);
        auto0CDE08CC_g = lv_enemyUnitsWithinTargetArea;
        auto0CDE08CC_u = UnitGroupCount(auto0CDE08CC_g, c_unitCountAll);
        for (;; auto0CDE08CC_u -= 1) {
            auto0CDE08CC_var = UnitGroupUnitFromEnd(auto0CDE08CC_g, auto0CDE08CC_u);
            if (auto0CDE08CC_var == null) { break; }
            if (((PlayerGetAlliance(UnitGetOwner(EventUnit()), c_allianceIdChat, UnitGetOwner(auto0CDE08CC_var)) == true) || (PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()) == PlayerGroupSingle(UnitGetOwner(auto0CDE08CC_var))))) {
                UnitGroupRemove(lv_enemyUnitsWithinTargetArea, auto0CDE08CC_var);
            }

        }
        autoD4CE112A_g = lv_enemyUnitsWithinTargetArea;
        autoD4CE112A_u = UnitGroupCount(autoD4CE112A_g, c_unitCountAll);
        for (;; autoD4CE112A_u -= 1) {
            autoD4CE112A_var = UnitGroupUnitFromEnd(autoD4CE112A_g, autoD4CE112A_u);
            if (autoD4CE112A_var == null) { break; }
            libNtve_gf_CreateModelAtPoint("SnowTreeDead", UnitGetPosition(autoD4CE112A_var));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.4, 0.4, 0.1, 0.0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_AnimSetPaused(true));
            lv_webActors[lv_actorArray] = libNtve_gf_ActorLastCreated();
            libNtve_gf_AttachModelToUnit(autoD4CE112A_var, "SpineLashStun", "Ref_Overhead");
            lv_stunActors[lv_actorArray] = libNtve_gf_ActorLastCreated();
            lv_actorArray = (lv_actorArray + 1);
            UnitBehaviorAdd(autoD4CE112A_var, "WebEntrapmentBuff", EventUnit(), 1);
        }
        lv_actorArray = 0;
        Wait(14.0, c_timeGame);
        autoA50B5115_g = lv_enemyUnitsWithinTargetArea;
        autoA50B5115_u = UnitGroupCount(autoA50B5115_g, c_unitCountAll);
        for (;; autoA50B5115_u -= 1) {
            autoA50B5115_var = UnitGroupUnitFromEnd(autoA50B5115_g, autoA50B5115_u);
            if (autoA50B5115_var == null) { break; }
            libNtve_gf_KillModel(lv_webActors[lv_actorArray]);
            libNtve_gf_KillModel(lv_stunActors[lv_actorArray]);
            UnitBehaviorRemove(autoA50B5115_var, "WebEntrapmentBuff", 1);
            lv_actorArray = (lv_actorArray + 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/3BAE54F9"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Web_Init () {
    gt_Web = TriggerCreate("gt_Web_Func");
    TriggerAddEventUnitAbility(gt_Web, null, AbilityCommand("WebEntrapment", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sickening Strikes
//--------------------------------------------------------------------------------------------------
bool gt_SickeningStrikes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_slownDownModelOnTarget;
    actor lv_slownDownModelOnCaster;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 4.0), EventUnitTargetPoint()) == true)) {
        libNtve_gf_AttachModelToUnit(EventUnit(), "PsionicPulseImpactEffect", "Ref_Center");
        lv_slownDownModelOnCaster = libNtve_gf_ActorLastCreated();
        ActorSend(lv_slownDownModelOnCaster, libNtve_gf_AnimSetTimeScaleGlobal(2.0));
        ActorSend(lv_slownDownModelOnCaster, libNtve_gf_SetTintColor(Color(100.00, 0.00, 100.00), 1.0, 0.0));
        ActorSend(lv_slownDownModelOnCaster, libNtve_gf_SetScale(0.7, 0.7, 0.7, 0.0));
        ActorSend(lv_slownDownModelOnCaster, libNtve_gf_SetScale(0.2, 0.2, 0.2, 2.0));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(2.0));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell B", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        libNtve_gf_AttachModelToUnit(EventUnitTargetUnit(), "QueenMPEnsnareSlow", "Ref_Center");
        lv_slownDownModelOnTarget = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(100.00, 0.00, 100.00), 1.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 8.0));
        Wait(0.5, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.0));
        Wait(5.1, c_timeGame);
        libNtve_gf_KillModel(lv_slownDownModelOnTarget);
        libNtve_gf_KillModel(lv_slownDownModelOnCaster);
        UnitBehaviorRemove(EventUnitTargetUnit(), "SickeningStrikeBuff", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/842285C2"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SickeningStrikes_Init () {
    gt_SickeningStrikes = TriggerCreate("gt_SickeningStrikes_Func");
    TriggerAddEventUnitAbility(gt_SickeningStrikes, null, AbilityCommand("SickeningStrike", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gravel Pile Dies
//--------------------------------------------------------------------------------------------------
bool gt_GravelPileDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "GravelPile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dirtX = FloorI((PointGetX(UnitGetPosition(EventUnit())) * 0.5));
    lv_dirtY = FloorI((PointGetY(UnitGetPosition(EventUnit())) * 0.5));
    gf_Activatedirt(lv_dirtX, lv_dirtY);
    lv_x = PointGetX(UnitGetPosition(EventUnit()));
    lv_y = PointGetY(UnitGetPosition(EventUnit()));
    VisRevealArea(UnitGetOwner(EventUnit()), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 1.2, false);
    Wait(0.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GravelPileDies_Init () {
    gt_GravelPileDies = TriggerCreate("gt_GravelPileDies_Func");
    TriggerAddEventUnitDied(gt_GravelPileDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie Fungus
//--------------------------------------------------------------------------------------------------
bool gt_ZombieFungus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_regionAroundZombieUnit;
    actor lv_zombieFungusEffectOnZombieUnitModelActor;
    actor[41] lv_zombieFungusEffectOnCapturedUnits;
    unitgroup lv_enemyUnitsStolen;
    int lv_actorArray;

    // Automatic Variable Declarations
    unitgroup auto61659730_g;
    int auto61659730_u;
    unit auto61659730_var;

    // Variable Initialization
    lv_enemyUnitsStolen = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        libNtve_gf_AttachModelToUnit(EventUnitTargetUnit(), "FungalGrowth", "Ref_Center");
        lv_zombieFungusEffectOnZombieUnitModelActor = libNtve_gf_ActorLastCreated();
        UnitBehaviorAdd(EventUnitTargetUnit(), "ZombieFungusTimedLife", EventUnit(), 1);
        Wait(14.0, c_timeGame);
        libNtve_gf_KillModel(lv_zombieFungusEffectOnZombieUnitModelActor);
        lv_regionAroundZombieUnit = RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 6.0);
        lv_enemyUnitsStolen = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(EventUnit()), c_unitAllianceEnemy, lv_regionAroundZombieUnit, UnitFilter(0, 0, (1 << c_targetFilterSelf) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterUncommandable) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterHasEnergy - 32)) | (1 << (c_targetFilterUnstoppable - 32))), 0);
        auto61659730_g = lv_enemyUnitsStolen;
        auto61659730_u = UnitGroupCount(auto61659730_g, c_unitCountAll);
        for (;; auto61659730_u -= 1) {
            auto61659730_var = UnitGroupUnitFromEnd(auto61659730_g, auto61659730_u);
            if (auto61659730_var == null) { break; }
            libNtve_gf_AttachModelToUnit(auto61659730_var, "SpineLashTentacle", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.3, 0.1, 0.0));
            libNtve_gf_RescueUnit2(lv_enemyUnitsStolen, EventPlayer(), true);
            lv_zombieFungusEffectOnCapturedUnits[lv_actorArray] = libNtve_gf_ActorLastCreated();
            lv_actorArray = (lv_actorArray + 1);
        }
        lv_actorArray = 0;
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/25AF23CE"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieFungus_Init () {
    gt_ZombieFungus = TriggerCreate("gt_ZombieFungus_Func");
    TriggerAddEventUnitAbility(gt_ZombieFungus, null, AbilityCommand("ZombieFungus", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tight Sight
//--------------------------------------------------------------------------------------------------
bool gt_TightSight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_positionOfCaster;
    unitgroup lv_enemyUnitsRevealed;
    region lv_revealingRegionDetectorRegion;
    int lv_distanceFromQueen;
    int lv_beaconModelsArray;
    int lv_beaconModelsArrayRepeatNumber;
    point lv__90RevealPoint;
    point lv_middleRevealPoint;
    point lv__90RevealPoint2;
    actor[101] lv_beaconModels;
    fixed lv_faceingAngleOfTheCaster;
    unit lv_pingUnit;

    // Automatic Variable Declarations
    const int autoED8DD126_n = 30;
    int autoED8DD126_i;
    unitgroup auto0A02D05C_g;
    int auto0A02D05C_u;
    unit auto0A02D05C_var;
    unitgroup auto97E702BD_g;
    int auto97E702BD_u;
    unit auto97E702BD_var;
    unitgroup auto5AA02337_g;
    int auto5AA02337_u;
    unit auto5AA02337_var;

    // Variable Initialization
    lv_positionOfCaster = UnitGetPosition(EventUnit());
    lv_enemyUnitsRevealed = UnitGroupEmpty();
    lv_distanceFromQueen = 3;
    lv__90RevealPoint = PointWithOffsetPolar(PointWithOffsetPolar(lv_positionOfCaster, lv_distanceFromQueen, lv_faceingAngleOfTheCaster), 3.0, (lv_faceingAngleOfTheCaster + 90.0));
    lv_middleRevealPoint = PointWithOffsetPolar(lv_positionOfCaster, lv_distanceFromQueen, lv_faceingAngleOfTheCaster);
    lv__90RevealPoint2 = PointWithOffsetPolar(PointWithOffsetPolar(lv_positionOfCaster, lv_distanceFromQueen, lv_faceingAngleOfTheCaster), 3.0, (lv_faceingAngleOfTheCaster - 90.0));
    lv_faceingAngleOfTheCaster = UnitGetFacing(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
    for (autoED8DD126_i = 1; autoED8DD126_i <= autoED8DD126_n; autoED8DD126_i += 1) {
        lv_revealingRegionDetectorRegion = RegionCircle(lv__90RevealPoint, 3.0);
        lv_enemyUnitsRevealed = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", EventPlayer(), c_unitAllianceEnemy, lv_revealingRegionDetectorRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0A02D05C_g = lv_enemyUnitsRevealed;
        auto0A02D05C_u = UnitGroupCount(auto0A02D05C_g, c_unitCountAll);
        for (;; auto0A02D05C_u -= 1) {
            auto0A02D05C_var = UnitGroupUnitFromEnd(auto0A02D05C_g, auto0A02D05C_u);
            if (auto0A02D05C_var == null) { break; }
            VisRevealArea(EventPlayer(), RegionCircle(UnitGetPosition(auto0A02D05C_var), 0.5), 2.0, false);
        }
        if ((UnitGroupCount(lv_enemyUnitsRevealed, c_unitCountAlive) > 0)) {
            lv_pingUnit = UnitGroupRandomUnit(lv_enemyUnitsRevealed, c_unitCountAlive);
            MinimapPing(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), UnitGetPosition(lv_pingUnit), 2.0, Color(50.20, 50.20, 0.00));
            MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(lv_pingUnit), 2.0, Color(50.20, 50.20, 0.00));
        }

        lv_revealingRegionDetectorRegion = RegionCircle(lv_middleRevealPoint, 3.0);
        lv_enemyUnitsRevealed = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", EventPlayer(), c_unitAllianceEnemy, lv_revealingRegionDetectorRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto97E702BD_g = lv_enemyUnitsRevealed;
        auto97E702BD_u = UnitGroupCount(auto97E702BD_g, c_unitCountAll);
        for (;; auto97E702BD_u -= 1) {
            auto97E702BD_var = UnitGroupUnitFromEnd(auto97E702BD_g, auto97E702BD_u);
            if (auto97E702BD_var == null) { break; }
            VisRevealArea(EventPlayer(), RegionCircle(UnitGetPosition(auto97E702BD_var), 0.5), 2.0, false);
        }
        if ((UnitGroupCount(lv_enemyUnitsRevealed, c_unitCountAlive) > 0)) {
            lv_pingUnit = UnitGroupRandomUnit(lv_enemyUnitsRevealed, c_unitCountAlive);
            MinimapPing(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), UnitGetPosition(lv_pingUnit), 2.0, Color(50.20, 50.20, 0.00));
            MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(lv_pingUnit), 2.0, Color(50.20, 50.20, 0.00));
        }

        lv_revealingRegionDetectorRegion = RegionCircle(lv__90RevealPoint2, 3.0);
        lv_enemyUnitsRevealed = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", EventPlayer(), c_unitAllianceEnemy, lv_revealingRegionDetectorRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto5AA02337_g = lv_enemyUnitsRevealed;
        auto5AA02337_u = UnitGroupCount(auto5AA02337_g, c_unitCountAll);
        for (;; auto5AA02337_u -= 1) {
            auto5AA02337_var = UnitGroupUnitFromEnd(auto5AA02337_g, auto5AA02337_u);
            if (auto5AA02337_var == null) { break; }
            VisRevealArea(EventPlayer(), RegionCircle(UnitGetPosition(auto5AA02337_var), 0.5), 2.0, false);
        }
        if ((UnitGroupCount(lv_enemyUnitsRevealed, c_unitCountAlive) > 0)) {
            lv_pingUnit = UnitGroupRandomUnit(lv_enemyUnitsRevealed, c_unitCountAlive);
            MinimapPing(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), UnitGetPosition(lv_pingUnit), 2.0, Color(50.20, 50.20, 0.00));
            MinimapPing(PlayerGroupSingle(EventPlayer()), UnitGetPosition(lv_pingUnit), 2.0, Color(50.20, 50.20, 0.00));
        }

        Wait(0.2, c_timeGame);
        PointSet(lv__90RevealPoint, PointWithOffsetPolar(PointWithOffsetPolar(lv_positionOfCaster, lv_distanceFromQueen, lv_faceingAngleOfTheCaster), 3.0, (lv_faceingAngleOfTheCaster + 90.0)));
        PointSet(lv_middleRevealPoint, PointWithOffsetPolar(lv_positionOfCaster, lv_distanceFromQueen, lv_faceingAngleOfTheCaster));
        PointSet(lv__90RevealPoint2, PointWithOffsetPolar(PointWithOffsetPolar(lv_positionOfCaster, lv_distanceFromQueen, lv_faceingAngleOfTheCaster), 3.0, (lv_faceingAngleOfTheCaster - 90.0)));
        lv_distanceFromQueen = (lv_distanceFromQueen + 5);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TightSight_Init () {
    gt_TightSight = TriggerCreate("gt_TightSight_Func");
    TriggerAddEventUnitAbility(gt_TightSight, null, AbilityCommand("TightSight", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clenching Claws
//--------------------------------------------------------------------------------------------------
bool gt_ClenchingClaws_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[3] lv_bloodModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(2.0));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell B", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.0));
        libNtve_gf_CreateModelAtPoint("SpineCrawlerAttackImpactReactionFlesh", UnitGetPosition(EventUnitTargetUnit()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 0.0));
        lv_bloodModel[1] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BloodSquibDeathRagdoll", UnitGetPosition(EventUnitTargetUnit()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(4.0, 4.0, 4.0, 0.0));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetRotation(0, -1.0, 90.0, 0, 0, 90.0));
        lv_bloodModel[2] = libNtve_gf_ActorLastCreated();
        SoundPlayAtPointForPlayer(SoundLink("MeatChunk_impact", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnitTargetUnit()), 0.0, 100.0, 0.0);
        Wait(2.0, c_timeGame);
        libNtve_gf_KillModel(lv_bloodModel[1]);
        libNtve_gf_KillModel(lv_bloodModel[2]);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/EB9D44CC"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClenchingClaws_Init () {
    gt_ClenchingClaws = TriggerCreate("gt_ClenchingClaws_Func");
    TriggerAddEventUnitAbility(gt_ClenchingClaws, null, AbilityCommand("ClenchingClaws", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disguise
//--------------------------------------------------------------------------------------------------
bool gt_Disguise_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeatTimes;
    int lv_unitEffectedArray;
    int lv_ownerOfEffectedUnitArray;
    unit[151] lv_unitEffected;
    int[151] lv_ownerOfEffectedUnit;
    region lv_effectRegion;
    playergroup lv_enemiesOfCastingPlayer;
    int lv_colorOfRandomEnemyPlayer;
    unitgroup lv_unitsEffectedByDisguise;

    // Automatic Variable Declarations
    playergroup autoBC204464_g;
    int autoBC204464_var;
    unitgroup autoD3BF3ECF_g;
    int autoD3BF3ECF_u;
    unit autoD3BF3ECF_var;
    unitgroup auto8965A7CE_g;
    int auto8965A7CE_u;
    unit auto8965A7CE_var;
    int auto8E759BF4_n;
    int auto8E759BF4_i;

    // Variable Initialization
    lv_repeatTimes = 1;
    lv_enemiesOfCastingPlayer = PlayerGroupEmpty();
    lv_unitsEffectedByDisguise = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 6.5), EventUnitTargetPoint()) == true)) {
        autoBC204464_g = PlayerGroupActive();
        autoBC204464_var = -1;
        while (true) {
            autoBC204464_var = PlayerGroupNextPlayer(autoBC204464_g, autoBC204464_var);
            if (autoBC204464_var < 0) { break; }
            if ((PlayerGetAlliance(EventPlayer(), c_allianceIdDefeat, autoBC204464_var) == true)) {
            }
            else {
                PlayerGroupAdd(lv_enemiesOfCastingPlayer, autoBC204464_var);
            }
        }
        lv_colorOfRandomEnemyPlayer = PlayerGroupPlayer(lv_enemiesOfCastingPlayer, RandomInt(1, PlayerGroupCount(lv_enemiesOfCastingPlayer)));
        lv_effectRegion = RegionCircle(EventUnitTargetPoint(), 2.4);
        lv_unitsEffectedByDisguise = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", c_playerAny, -1, lv_effectRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD3BF3ECF_g = lv_unitsEffectedByDisguise;
        autoD3BF3ECF_u = UnitGroupCount(autoD3BF3ECF_g, c_unitCountAll);
        for (;; autoD3BF3ECF_u -= 1) {
            autoD3BF3ECF_var = UnitGroupUnitFromEnd(autoD3BF3ECF_g, autoD3BF3ECF_u);
            if (autoD3BF3ECF_var == null) { break; }
            if ((PlayerGetAlliance(EventPlayer(), c_allianceIdDefeat, UnitGetOwner(autoD3BF3ECF_var)) == false)) {
                UnitGroupRemove(lv_unitsEffectedByDisguise, autoD3BF3ECF_var);
            }

        }
        auto8965A7CE_g = lv_unitsEffectedByDisguise;
        auto8965A7CE_u = UnitGroupCount(auto8965A7CE_g, c_unitCountAll);
        for (;; auto8965A7CE_u -= 1) {
            auto8965A7CE_var = UnitGroupUnitFromEnd(auto8965A7CE_g, auto8965A7CE_u);
            if (auto8965A7CE_var == null) { break; }
            UnitSetTeamColorIndex(auto8965A7CE_var, PlayerGetColorIndex(lv_colorOfRandomEnemyPlayer, false));
            lv_ownerOfEffectedUnit[lv_ownerOfEffectedUnitArray] = UnitGetOwner(auto8965A7CE_var);
            lv_unitEffected[lv_unitEffectedArray] = auto8965A7CE_var;
            lv_ownerOfEffectedUnitArray = (lv_ownerOfEffectedUnitArray + 1);
            lv_unitEffectedArray = (lv_unitEffectedArray + 1);
            lv_repeatTimes = (lv_repeatTimes + 1);
        }
        lv_ownerOfEffectedUnitArray = 0;
        lv_unitEffectedArray = 0;
        Wait(14.0, c_timeGame);
        auto8E759BF4_n = lv_repeatTimes;
        for (auto8E759BF4_i = 1; auto8E759BF4_i <= auto8E759BF4_n; auto8E759BF4_i += 1) {
            UnitSetTeamColorIndex(lv_unitEffected[lv_unitEffectedArray], PlayerGetColorIndex(lv_ownerOfEffectedUnit[lv_ownerOfEffectedUnitArray], false));
            lv_ownerOfEffectedUnitArray = (lv_ownerOfEffectedUnitArray + 1);
            lv_unitEffectedArray = (lv_unitEffectedArray + 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/9D8D59F5"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Disguise_Init () {
    gt_Disguise = TriggerCreate("gt_Disguise_Func");
    TriggerAddEventUnitAbility(gt_Disguise, null, AbilityCommand("Disguise", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shape Shift
//--------------------------------------------------------------------------------------------------
bool gt_ShapeShift_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_originalModelOfCasterUnit;
    string lv_modelOfTargetedUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_originalModelOfCasterUnit = gf_TurnQueenSwapModelStringIntoModelEntry(gv_queenSwapModelString[UnitGetOwner(EventUnit())]);
    lv_modelOfTargetedUnit = gf_TurnQueenSwapModelStringIntoModelEntry(gv_queenSwapModelString[UnitGetOwner(EventUnit())]);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(2.0));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell B", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        Wait(1.0, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.0));
        if ((UnitGetType(EventUnitTargetUnit()) == "Zergling")) {
            lv_modelOfTargetedUnit = gf_TurnSoldierSwapModelStringIntoModelEntry(gv_soldierSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "Drone")) {
            lv_modelOfTargetedUnit = gf_TurnWorkerSwapModelStringIntoModelEntry(gv_workerSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "Locust")) {
            lv_modelOfTargetedUnit = gf_TurnAcidSprayerSwapModelStringIntoModelEntry(gv_acidSprayerSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "Hydralisk")) {
            lv_modelOfTargetedUnit = gf_TurnStingerSwapModelStringIntoModelEntry(gv_stingerSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if (((UnitGetType(EventUnitTargetUnit()) == "Ultralisk") || (UnitGetType(EventUnitTargetUnit()) == "BeastMajor"))) {
            lv_modelOfTargetedUnit = gf_TurnStingerSwapModelStringIntoModelEntry(gv_stingerSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            lv_modelOfTargetedUnit = gf_TurnTunnelTremblerSwapModelStringIntoModelEntry(gv_tunnelTremblerSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if (((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") || (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP"))) {
            lv_modelOfTargetedUnit = gf_TurnKhepriSwapModelStringIntoModelEntry(gv_khepriSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "LocustMP")) {
            lv_modelOfTargetedUnit = "LocustMP";
            lv_modelOfTargetedUnit = gf_TurnKhepriBettleSwapModelStringIntoModelEntry(gv_khepriSwapModelString[UnitGetOwner(EventUnit())]);
        }
        else if (((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") || (UnitGetType(EventUnitTargetUnit()) == "GraveDigger"))) {
            lv_modelOfTargetedUnit = "NydusWorm";
        }
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_ModelSwap(lv_modelOfTargetedUnit, 1));
        if ((UnitGetType(EventUnit()) == "QueenGhostAnt")) {
            ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_SetOpacity(1.0, 0));
        }

        Wait(56.0, c_timeGame);
        if ((UnitGetType(EventUnit()) == "QueenGhostAnt")) {
            libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetOpacity(0.5, 5.0));
        }

        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_ModelSwap(lv_originalModelOfCasterUnit, 1));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/A03E0550"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShapeShift_Init () {
    gt_ShapeShift = TriggerCreate("gt_ShapeShift_Func");
    TriggerAddEventUnitAbility(gt_ShapeShift, null, AbilityCommand("ShapeShift", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Energy Efficiency
//--------------------------------------------------------------------------------------------------
bool gt_EnergyEfficiency_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergyMax, c_unitPropCurrent) + 60.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnergyEfficiency_Init () {
    gt_EnergyEfficiency = TriggerCreate("gt_EnergyEfficiency_Func");
    TriggerAddEventUnitAbility(gt_EnergyEfficiency, null, AbilityCommand("ResearchEnergyEfficiency", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toughened Character
//--------------------------------------------------------------------------------------------------
bool gt_ToughenedCharacter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_randomUnit;
    unit[11] lv_unitsEffected;
    int lv_unitsEffectedArray;
    unitgroup lv_friendlyUnitsAroundQueen;

    // Automatic Variable Declarations
    unitgroup auto1A881B5F_g;
    int auto1A881B5F_u;
    unit auto1A881B5F_var;
    const int autoF56A8D41_n = 10;
    int autoF56A8D41_i;
    const int auto0ECC9739_n = 10;
    int auto0ECC9739_i;
    const int autoF79E9CA2_n = 10;
    int autoF79E9CA2_i;

    // Variable Initialization
    lv_friendlyUnitsAroundQueen = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ToughenedCharacter", EventUnit(), 1);
    auto1A881B5F_g = lv_friendlyUnitsAroundQueen;
    auto1A881B5F_u = UnitGroupCount(auto1A881B5F_g, c_unitCountAll);
    for (;; auto1A881B5F_u -= 1) {
        auto1A881B5F_var = UnitGroupUnitFromEnd(auto1A881B5F_g, auto1A881B5F_u);
        if (auto1A881B5F_var == null) { break; }
        if ((PlayerGetAlliance(EventPlayer(), c_allianceIdDefeat, UnitGetOwner(auto1A881B5F_var)) == false)) {
            UnitGroupRemove(lv_friendlyUnitsAroundQueen, auto1A881B5F_var);
        }

    }
    for (autoF56A8D41_i = 1; autoF56A8D41_i <= autoF56A8D41_n; autoF56A8D41_i += 1) {
        lv_randomUnit = UnitGroupRandomUnit(lv_friendlyUnitsAroundQueen, c_unitCountAlive);
        UnitBehaviorAdd(lv_randomUnit, "ToughenedCharacter", EventUnit(), 1);
        lv_unitsEffected[lv_unitsEffectedArray] = lv_randomUnit;
        lv_unitsEffectedArray = (lv_unitsEffectedArray + 1);
    }
    lv_unitsEffectedArray = 0;
    Wait(84.0, c_timeGame);
    for (auto0ECC9739_i = 1; auto0ECC9739_i <= auto0ECC9739_n; auto0ECC9739_i += 1) {
        UnitBehaviorRemove(lv_unitsEffected[lv_unitsEffectedArray], "ToughenedCharacter", 1);
        UnitBehaviorAdd(lv_unitsEffected[lv_unitsEffectedArray], "ToughenedCharacter2", EventUnit(), 1);
        lv_unitsEffectedArray = (lv_unitsEffectedArray + 1);
    }
    lv_unitsEffectedArray = 0;
    Wait(28.0, c_timeGame);
    for (autoF79E9CA2_i = 1; autoF79E9CA2_i <= autoF79E9CA2_n; autoF79E9CA2_i += 1) {
        UnitBehaviorRemove(lv_unitsEffected[lv_unitsEffectedArray], "ToughenedCharacter2", 1);
        lv_unitsEffectedArray = (lv_unitsEffectedArray + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToughenedCharacter_Init () {
    gt_ToughenedCharacter = TriggerCreate("gt_ToughenedCharacter_Func");
    TriggerAddEventUnitAbility(gt_ToughenedCharacter, null, AbilityCommand("ToughenedCharacter", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Swarm Call
//--------------------------------------------------------------------------------------------------
bool gt_SwarmCall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_swarmUnitsUnitGroup;

    // Automatic Variable Declarations
    const int auto802F6F30_n = 20;
    int auto802F6F30_i;
    unitgroup autoF10E1136_g;
    int autoF10E1136_u;
    unit autoF10E1136_var;
    const int autoA9C37E95_n = 80;
    int autoA9C37E95_i;

    // Variable Initialization
    lv_swarmUnitsUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto802F6F30_i = 1; auto802F6F30_i <= auto802F6F30_n; auto802F6F30_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Zergling", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitGroupAdd(lv_swarmUnitsUnitGroup, UnitLastCreated());
    }
    autoF10E1136_g = lv_swarmUnitsUnitGroup;
    autoF10E1136_u = UnitGroupCount(autoF10E1136_g, c_unitCountAll);
    for (;; autoF10E1136_u -= 1) {
        autoF10E1136_var = UnitGroupUnitFromEnd(autoF10E1136_g, autoF10E1136_u);
        if (autoF10E1136_var == null) { break; }
        UnitBehaviorAdd(autoF10E1136_var, "SwarmCallTimedLife", EventUnit(), 1);
    }
    for (autoA9C37E95_i = 1; autoA9C37E95_i <= autoA9C37E95_n; autoA9C37E95_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "Broodling", 0, EventPlayer(), UnitGetPosition(EventUnit()));
        UnitGroupAdd(lv_swarmUnitsUnitGroup, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwarmCall_Init () {
    gt_SwarmCall = TriggerCreate("gt_SwarmCall_Func");
    TriggerAddEventUnitAbility(gt_SwarmCall, null, AbilityCommand("SwarmCall", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fear Stare
//--------------------------------------------------------------------------------------------------
bool gt_FearStare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_greenShieldModel;
    point lv_pointUnitShouldRunto;
    region lv_fearRegion;
    unitgroup lv_enemyUnitsUnderFear;

    // Automatic Variable Declarations
    const int autoECB427AA_n = 20;
    int autoECB427AA_i;
    unitgroup autoF9C7016A_g;
    int autoF9C7016A_u;
    unit autoF9C7016A_var;
    unitgroup autoC7F37026_g;
    int autoC7F37026_u;
    unit autoC7F37026_var;
    unitgroup auto3210C3C2_g;
    int auto3210C3C2_u;
    unit auto3210C3C2_var;

    // Variable Initialization
    lv_fearRegion = RegionEmpty();
    lv_enemyUnitsUnderFear = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        libNtve_gf_AttachModelToUnit(EventUnit(), "PsionicShield", "Ref_Center");
        lv_greenShieldModel = libNtve_gf_ActorLastCreated();
        for (autoECB427AA_i = 1; autoECB427AA_i <= autoECB427AA_n; autoECB427AA_i += 1) {
            lv_fearRegion = RegionCircle(UnitGetPosition(EventUnit()), 3.0);
            lv_enemyUnitsUnderFear = UnitGroup(null, c_playerAny, lv_fearRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF9C7016A_g = lv_enemyUnitsUnderFear;
            autoF9C7016A_u = UnitGroupCount(autoF9C7016A_g, c_unitCountAll);
            for (;; autoF9C7016A_u -= 1) {
                autoF9C7016A_var = UnitGroupUnitFromEnd(autoF9C7016A_g, autoF9C7016A_u);
                if (autoF9C7016A_var == null) { break; }
                if (((PlayerGetAlliance(EventPlayer(), c_allianceIdDefeat, UnitGetOwner(autoF9C7016A_var)) == true) || (UnitGetOwner(autoF9C7016A_var) == 0) || (UnitGetType(autoF9C7016A_var) == "QueenBlackAnt") || (UnitGetType(autoF9C7016A_var) == "QueenFireAnt") || (UnitGetType(autoF9C7016A_var) == "QueenWoodAnt") || (UnitGetType(autoF9C7016A_var) == "QueenLeafCutterAnt") || (UnitGetType(autoF9C7016A_var) == "QueenPharaohAnt") || (UnitGetType(autoF9C7016A_var) == "QueenGhostAnt"))) {
                    UnitGroupRemove(lv_enemyUnitsUnderFear, autoF9C7016A_var);
                }

            }
            autoC7F37026_g = lv_enemyUnitsUnderFear;
            autoC7F37026_u = UnitGroupCount(autoC7F37026_g, c_unitCountAll);
            for (;; autoC7F37026_u -= 1) {
                autoC7F37026_var = UnitGroupUnitFromEnd(autoC7F37026_g, autoC7F37026_u);
                if (autoC7F37026_var == null) { break; }
                libNtve_gf_MakeUnitUncommandable(autoC7F37026_var, true);
                lv_pointUnitShouldRunto = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 6.0, UnitGetPosition(autoC7F37026_var));
                UnitIssueOrder(autoC7F37026_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 5.0, (180 + RandomInt(30, -30)))), c_orderQueueReplace);
                UnitIssueOrder(autoC7F37026_var, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 5.0, 180)), c_orderQueueReplace);
                UnitIssueOrder(autoC7F37026_var, OrderTargetingPoint(AbilityCommand("move", 0), lv_pointUnitShouldRunto), c_orderQueueReplace);
                UnitBehaviorAdd(autoC7F37026_var, "UnitIsAfraid", EventUnit(), 1);
            }
            Wait(1.0, c_timeGame);
            auto3210C3C2_g = lv_enemyUnitsUnderFear;
            auto3210C3C2_u = UnitGroupCount(auto3210C3C2_g, c_unitCountAll);
            for (;; auto3210C3C2_u -= 1) {
                auto3210C3C2_var = UnitGroupUnitFromEnd(auto3210C3C2_g, auto3210C3C2_u);
                if (auto3210C3C2_var == null) { break; }
                libNtve_gf_MakeUnitUncommandable(auto3210C3C2_var, false);
                UnitBehaviorRemove(auto3210C3C2_var, "UnitIsAfraid", 1);
            }
        }
        libNtve_gf_KillModel(lv_greenShieldModel);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/E260E6D9"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FearStare_Init () {
    gt_FearStare = TriggerCreate("gt_FearStare_Func");
    TriggerAddEventUnitAbility(gt_FearStare, null, AbilityCommand("FearStare", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beast Call
//--------------------------------------------------------------------------------------------------
bool gt_BeastCall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beastCallUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
    libNtve_gf_UnitCreateFacingPoint(1, "BeastMajor", 0, EventPlayer(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.0, libNtve_gf_RandomAngle()), UnitGetPosition(EventUnit()));
    lv_beastCallUnit = UnitLastCreated();
    UnitBehaviorAdd(lv_beastCallUnit, "WebEntrapmentBuff", EventUnit(), 1);
    libNtve_gf_MakeUnitUncommandable(lv_beastCallUnit, true);
    SoundPlayOnUnitForPlayer(SoundLink("Zurvan_ZAppears_EarthShake", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 20.0, 0.0);
    SoundPlayAtPointForPlayer(SoundLink("Event_UltraliskEvo_UltraliskRoar", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(lv_beastCallUnit), 10.0, 100.0, 0.0);
    Wait(4.0, c_timeGame);
    UnitBehaviorRemove(lv_beastCallUnit, "WebEntrapmentBuff", 1);
    libNtve_gf_MakeUnitUncommandable(lv_beastCallUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeastCall_Init () {
    gt_BeastCall = TriggerCreate("gt_BeastCall_Func");
    TriggerAddEventUnitAbility(gt_BeastCall, null, AbilityCommand("BeastCall", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beast Beneath
//--------------------------------------------------------------------------------------------------
bool gt_BeastBeneath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beastBeneathUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AshWorm"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_beastBeneathUnit = EventUnitCreatedUnit();
    ActorSend(libNtve_gf_MainActorofUnit(lv_beastBeneathUnit), MakeMsgAnimPlay("Unborrow", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
    SoundPlayOnUnitForPlayer(SoundLink("UnknownSound", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 20.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeastBeneath_Init () {
    gt_BeastBeneath = TriggerCreate("gt_BeastBeneath_Func");
    TriggerEnable(gt_BeastBeneath, false);
    TriggerAddEventUnitCreated(gt_BeastBeneath, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beast Beneath Enabler
//--------------------------------------------------------------------------------------------------
bool gt_BeastBeneathEnabler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_BeastBeneath, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeastBeneathEnabler_Init () {
    gt_BeastBeneathEnabler = TriggerCreate("gt_BeastBeneathEnabler_Func");
    TriggerAddEventUnitAbility(gt_BeastBeneathEnabler, null, AbilityCommand("ResearchTier3Abilities", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beast Inside
//--------------------------------------------------------------------------------------------------
bool gt_BeastInside_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beastInsideUnit;
    actor lv_beastinsidePurpleMask;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponRemove(EventUnit(), "TalonsMissile");
    UnitWeaponAdd(EventUnit(), "AshWorm2", null);
    lv_beastInsideUnit = EventUnit();
    ActorSend(libNtve_gf_MainActorofUnit(lv_beastInsideUnit), MakeMsgAnimPlay("Spell C", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
    ActorSend(libNtve_gf_MainActorofUnit(lv_beastInsideUnit), libNtve_gf_SetScale(1.3, 1.3, 1.3, 3.0));
    libNtve_gf_AttachModelToUnit(lv_beastInsideUnit, "Queen", "Ref_Head");
    lv_beastinsidePurpleMask = libNtve_gf_ActorLastCreated();
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetScale(1.5, 1.5, 1.5, 3.0));
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetOpacity(0.0, 0.0));
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetOpacity(0.4, 3.0));
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetTintColor(Color(53.73, 0.00, 93.33), 1.0, 0.0));
    UnitSetPropertyFixed(lv_beastInsideUnit, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_beastInsideUnit, c_unitPropLifeMax, c_unitPropCurrent) + 200.0));
    UnitBehaviorAdd(lv_beastInsideUnit, "TheBeastInside", lv_beastInsideUnit, 1);
    SoundPlayOnUnitForPlayer(SoundLink("Brutalisk_Roar", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 20.0, 0.0);
    SoundPlayOnUnitForPlayer(SoundLink("Brutalisk_Roar", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
    Wait(28.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(lv_beastInsideUnit), libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetTintColor(Color(100.00, 100.00, 100.00), 1.0, 3.0));
    ActorSend(lv_beastinsidePurpleMask, libNtve_gf_SetOpacity(0.0, 3.0));
    Wait(3.0, c_timeGame);
    libNtve_gf_KillModel(lv_beastinsidePurpleMask);
    UnitBehaviorRemove(lv_beastInsideUnit, "TheBeastInside", 1);
    UnitSetPropertyFixed(lv_beastInsideUnit, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_beastInsideUnit, c_unitPropLifeMax, c_unitPropCurrent) - 200.0));
    UnitWeaponRemove(EventUnit(), "AshWorm2");
    UnitWeaponAdd(EventUnit(), "TalonsMissile", null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BeastInside_Init () {
    gt_BeastInside = TriggerCreate("gt_BeastInside_Func");
    TriggerAddEventUnitAbility(gt_BeastInside, null, AbilityCommand("TheBeastInside", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pied Piper
//--------------------------------------------------------------------------------------------------
bool gt_PiedPiper_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_allAnimalsOnTheMap;

    // Automatic Variable Declarations
    unitgroup auto43CA2712_g;
    int auto43CA2712_u;
    unit auto43CA2712_var;
    unitgroup autoFB1D5464_g;
    int autoFB1D5464_u;
    unit autoFB1D5464_var;

    // Variable Initialization
    lv_allAnimalsOnTheMap = UnitGroup("SpaceCowSmall", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    auto43CA2712_g = lv_allAnimalsOnTheMap;
    auto43CA2712_u = UnitGroupCount(auto43CA2712_g, c_unitCountAll);
    for (;; auto43CA2712_u -= 1) {
        auto43CA2712_var = UnitGroupUnitFromEnd(auto43CA2712_g, auto43CA2712_u);
        if (auto43CA2712_var == null) { break; }
        UnitBehaviorRemove(auto43CA2712_var, "CritterWanderLeashShort", 1);
        UnitIssueOrder(auto43CA2712_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    }
    Wait(10.0, c_timeGame);
    autoFB1D5464_g = lv_allAnimalsOnTheMap;
    autoFB1D5464_u = UnitGroupCount(autoFB1D5464_g, c_unitCountAll);
    for (;; autoFB1D5464_u -= 1) {
        autoFB1D5464_var = UnitGroupUnitFromEnd(autoFB1D5464_g, autoFB1D5464_u);
        if (autoFB1D5464_var == null) { break; }
        UnitIssueOrder(autoFB1D5464_var, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitBehaviorAdd(autoFB1D5464_var, "CritterWanderLeashShort", autoFB1D5464_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PiedPiper_Init () {
    gt_PiedPiper = TriggerCreate("gt_PiedPiper_Func");
    TriggerAddEventUnitAbility(gt_PiedPiper, null, AbilityCommand("PiedPiper", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen's Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_QueensReinforcements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, EventPlayer(), UnitGetPosition(EventUnit()));
    UnitBehaviorAdd(UnitLastCreated(), "SpawnedFromQueensReinforcements", EventUnit(), 1);
    ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_SetScale(0.7, 0.7, 0.7, 1.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueensReinforcements_Init () {
    gt_QueensReinforcements = TriggerCreate("gt_QueensReinforcements_Func");
    TriggerAddEventUnitAbility(gt_QueensReinforcements, null, AbilityCommand("Queensreinforcements", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vodoo
//--------------------------------------------------------------------------------------------------
bool gt_Vodoo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_losePreventionUnit;
    actor lv_controlBubble;
    int lv_originalOwner;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        libNtve_gf_AttachModelToUnit(EventUnitTargetUnit(), "GlazePower", "Ref_Target");
        lv_controlBubble = libNtve_gf_ActorLastCreated();
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.2, 0.2, 0.2, 0.0));
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), MakeMsgAnimPlay("Spell A", "", 0, -1.0, -1.0, -1.0, c_animTimeVariantAsAutomatic));
        lv_originalOwner = UnitGetOwner(EventUnitTargetUnit());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LoseDenier", 0, lv_originalOwner, Point(0.0, 0.0));
        lv_losePreventionUnit = UnitLastCreated();
        UnitSetOwner(EventUnitTargetUnit(), EventPlayer(), false);
        Wait(7.0, c_timeGame);
        UnitSetOwner(EventUnitTargetUnit(), lv_originalOwner, false);
        libNtve_gf_KillModel(lv_controlBubble);
        UnitRemove(lv_losePreventionUnit);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/D7A9B2EA"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Vodoo_Init () {
    gt_Vodoo = TriggerCreate("gt_Vodoo_Func");
    TriggerAddEventUnitAbility(gt_Vodoo, null, AbilityCommand("Vodoo", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Earthquake
//--------------------------------------------------------------------------------------------------
bool gt_Earthquake_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_earthquakeRegion;
    unitgroup lv_unitsEffectedbyEarthquake;
    unitgroup lv_enemyUnitsEffectedbyEarthquake;
    unitgroup lv_naturalUnitsEffectedbyEarthquake;
    unitgroup lv_dirtUnitsEffectedbyEarthquake;
    playergroup lv_playersEffectedbyEarthquake;
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    actor[101] lv_rockDropModels;
    int lv_rockDropModelsArray;
    int lv_rockDropModelsArrayNumber;
    fixed lv_y;

    // Automatic Variable Declarations
    const int auto5AA068D2_n = 4;
    int auto5AA068D2_i;
    unitgroup autoF762AEC6_g;
    int autoF762AEC6_u;
    unit autoF762AEC6_var;
    playergroup autoE2AD8951_g;
    int autoE2AD8951_var;
    unitgroup autoAAC5A163_g;
    int autoAAC5A163_u;
    unit autoAAC5A163_var;
    unitgroup auto993F210C_g;
    int auto993F210C_u;
    unit auto993F210C_var;
    unitgroup auto30A1BADC_g;
    int auto30A1BADC_u;
    unit auto30A1BADC_var;
    unitgroup autoC071F984_g;
    int autoC071F984_u;
    unit autoC071F984_var;
    unitgroup autoD0755FD6_g;
    int autoD0755FD6_u;
    unit autoD0755FD6_var;
    unitgroup auto8261C7AF_g;
    int auto8261C7AF_u;
    unit auto8261C7AF_var;
    int auto5316AD1E_n;
    int auto5316AD1E_i;

    // Variable Initialization
    lv_earthquakeRegion = RegionCircle(EventUnitTargetPoint(), 4.5);
    lv_unitsEffectedbyEarthquake = UnitGroup(null, c_playerAny, lv_earthquakeRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_enemyUnitsEffectedbyEarthquake = UnitGroupEmpty();
    lv_naturalUnitsEffectedbyEarthquake = UnitGroupEmpty();
    lv_dirtUnitsEffectedbyEarthquake = UnitGroupEmpty();
    lv_playersEffectedbyEarthquake = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 6.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(0.5));
        UnitBehaviorAdd(EventUnit(), "EarthquakeCasting", EventUnit(), 1);
        for (auto5AA068D2_i = 1; auto5AA068D2_i <= auto5AA068D2_n; auto5AA068D2_i += 1) {
            ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
            Wait(2.0, c_timeGame);
            lv_unitsEffectedbyEarthquake = UnitGroup(null, c_playerAny, lv_earthquakeRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF762AEC6_g = lv_unitsEffectedbyEarthquake;
            autoF762AEC6_u = UnitGroupCount(autoF762AEC6_g, c_unitCountAll);
            for (;; autoF762AEC6_u -= 1) {
                autoF762AEC6_var = UnitGroupUnitFromEnd(autoF762AEC6_g, autoF762AEC6_u);
                if (autoF762AEC6_var == null) { break; }
                PlayerGroupAdd(lv_playersEffectedbyEarthquake, UnitGetOwner(autoF762AEC6_var));
                autoE2AD8951_g = lv_playersEffectedbyEarthquake;
                autoE2AD8951_var = -1;
                while (true) {
                    autoE2AD8951_var = PlayerGroupNextPlayer(autoE2AD8951_g, autoE2AD8951_var);
                    if (autoE2AD8951_var < 0) { break; }
                    CameraShakeStart(autoE2AD8951_var, c_cameraPositionBoth, c_cameraDirectionZ, 0.4, 2.0, 100.0, 3.0);
                }
                if ((PlayerGetAlliance(EventPlayer(), c_allianceIdDefeat, UnitGetOwner(autoF762AEC6_var)) == true)) {
                }
                else {
                    UnitGroupAdd(lv_enemyUnitsEffectedbyEarthquake, autoF762AEC6_var);
                }
            }
            autoAAC5A163_g = lv_enemyUnitsEffectedbyEarthquake;
            autoAAC5A163_u = UnitGroupCount(autoAAC5A163_g, c_unitCountAll);
            for (;; autoAAC5A163_u -= 1) {
                autoAAC5A163_var = UnitGroupUnitFromEnd(autoAAC5A163_g, autoAAC5A163_u);
                if (autoAAC5A163_var == null) { break; }
                if (((PlayerGetAlliance(EventPlayer(), c_allianceIdDefeat, UnitGetOwner(autoAAC5A163_var)) == false) && (PlayerGetAlliance(EventPlayer(), c_allianceIdPassive, UnitGetOwner(autoAAC5A163_var)) == true))) {
                    UnitGroupAdd(lv_naturalUnitsEffectedbyEarthquake, autoAAC5A163_var);
                    UnitGroupRemove(lv_enemyUnitsEffectedbyEarthquake, autoAAC5A163_var);
                }

            }
            auto993F210C_g = lv_naturalUnitsEffectedbyEarthquake;
            auto993F210C_u = UnitGroupCount(auto993F210C_g, c_unitCountAll);
            for (;; auto993F210C_u -= 1) {
                auto993F210C_var = UnitGroupUnitFromEnd(auto993F210C_g, auto993F210C_u);
                if (auto993F210C_var == null) { break; }
                if ((UnitGetType(auto993F210C_var) == "Dirt")) {
                    UnitGroupAdd(lv_dirtUnitsEffectedbyEarthquake, auto993F210C_var);
                }

            }
            auto30A1BADC_g = lv_dirtUnitsEffectedbyEarthquake;
            auto30A1BADC_u = UnitGroupCount(auto30A1BADC_g, c_unitCountAll);
            for (;; auto30A1BADC_u -= 1) {
                auto30A1BADC_var = UnitGroupUnitFromEnd(auto30A1BADC_g, auto30A1BADC_u);
                if (auto30A1BADC_var == null) { break; }
                libNtve_gf_CreateModelAtPoint("RockDrop", UnitGetPosition(auto30A1BADC_var));
                lv_rockDropModels[lv_rockDropModelsArray] = libNtve_gf_ActorLastCreated();
                lv_rockDropModelsArray = (lv_rockDropModelsArray + 1);
            }
            autoC071F984_g = lv_enemyUnitsEffectedbyEarthquake;
            autoC071F984_u = UnitGroupCount(autoC071F984_g, c_unitCountAll);
            for (;; autoC071F984_u -= 1) {
                autoC071F984_var = UnitGroupUnitFromEnd(autoC071F984_g, autoC071F984_u);
                if (autoC071F984_var == null) { break; }
                libNtve_gf_CreateModelAtPoint("RockDrop", UnitGetPosition(autoC071F984_var));
                lv_rockDropModels[lv_rockDropModelsArray] = libNtve_gf_ActorLastCreated();
                lv_rockDropModelsArray = (lv_rockDropModelsArray + 1);
            }
            lv_rockDropModelsArrayNumber = lv_rockDropModelsArray;
            lv_rockDropModelsArray = 0;
            Wait(2.0, c_timeGame);
            autoD0755FD6_g = lv_dirtUnitsEffectedbyEarthquake;
            autoD0755FD6_u = UnitGroupCount(autoD0755FD6_g, c_unitCountAll);
            for (;; autoD0755FD6_u -= 1) {
                autoD0755FD6_var = UnitGroupUnitFromEnd(autoD0755FD6_g, autoD0755FD6_u);
                if (autoD0755FD6_var == null) { break; }
                lv_dirtX = FloorI((PointGetX(UnitGetPosition(autoD0755FD6_var)) * 0.5));
                lv_dirtY = FloorI((PointGetY(UnitGetPosition(autoD0755FD6_var)) * 0.5));
                gf_Activatedirt(lv_dirtX, lv_dirtY);
                lv_x = PointGetX(UnitGetPosition(autoD0755FD6_var));
                lv_y = PointGetY(UnitGetPosition(autoD0755FD6_var));
                VisRevealArea(UnitGetOwner(EventUnit()), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 1.2, false);
                Wait(0.0, c_timeGame);
                UnitKill(autoD0755FD6_var);
            }
            auto8261C7AF_g = lv_enemyUnitsEffectedbyEarthquake;
            auto8261C7AF_u = UnitGroupCount(auto8261C7AF_g, c_unitCountAll);
            for (;; auto8261C7AF_u -= 1) {
                auto8261C7AF_var = UnitGroupUnitFromEnd(auto8261C7AF_g, auto8261C7AF_u);
                if (auto8261C7AF_var == null) { break; }
                UnitSetPropertyFixed(auto8261C7AF_var, c_unitPropLife, (UnitGetPropertyFixed(auto8261C7AF_var, c_unitPropLife, c_unitPropCurrent) - 30.0));
            }
            auto5316AD1E_n = lv_rockDropModelsArrayNumber;
            for (auto5316AD1E_i = 1; auto5316AD1E_i <= auto5316AD1E_n; auto5316AD1E_i += 1) {
                libNtve_gf_KillModel(lv_rockDropModels[lv_rockDropModelsArray]);
                lv_rockDropModelsArray = (lv_rockDropModelsArray + 1);
            }
        }
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetTimeScaleGlobal(1.0));
        UnitBehaviorRemove(EventUnit(), "EarthquakeCasting", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/F6550BB4"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Earthquake_Init () {
    gt_Earthquake = TriggerCreate("gt_Earthquake_Func");
    TriggerAddEventUnitAbility(gt_Earthquake, null, AbilityCommand("Earthquake", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Healing Embrace
//--------------------------------------------------------------------------------------------------
bool gt_HealingEmbrace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "HealingEmbraceAura", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HealingEmbrace_Init () {
    gt_HealingEmbrace = TriggerCreate("gt_HealingEmbrace_Func");
    TriggerAddEventUnitAbility(gt_HealingEmbrace, null, AbilityCommand("ResearchTier3Abilities", 10), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield of Thorns
//--------------------------------------------------------------------------------------------------
bool gt_ShieldofThorns_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ShieldofThorns", EventUnit(), 1);
    Wait(28.0, c_timeGame);
    UnitBehaviorRemove(EventUnit(), "ShieldofThorns", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShieldofThorns_Init () {
    gt_ShieldofThorns = TriggerCreate("gt_ShieldofThorns_Func");
    TriggerAddEventUnitAbility(gt_ShieldofThorns, null, AbilityCommand("ShieldofThorns", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cheat Death
//--------------------------------------------------------------------------------------------------
bool gt_CheatDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerwhousedit;
    unit lv_unit;
    unit lv_cheatDeathUnit;
    point lv_positionOfAbilityUsage;
    string lv_typeOfUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerwhousedit = EventPlayer();
    lv_unit = EventUnit();
    lv_cheatDeathUnit = EventUnit();
    lv_positionOfAbilityUsage = UnitGetPosition(EventUnit());
    lv_typeOfUnit = UnitGetType(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerwhousedit = EventPlayer();
    libNtve_gf_CreateUnitsAtPoint2(1, "LoseDenier", 0, lv_playerwhousedit, Point(1.0, 1.0));
    lv_cheatDeathUnit = UnitLastCreated();
    Wait(28.0, c_timeGame);
    UnitKill(lv_cheatDeathUnit);
    UnitRemove(lv_cheatDeathUnit);
    if ((UnitIsAlive(lv_unit) == false)) {
        UIDisplayMessage(PlayerGroupSingle(lv_playerwhousedit), c_messageAreaDebug, StringExternal("Param/Value/79EF0D88"));
        libNtve_gf_CreateUnitsAtPoint2(1, lv_typeOfUnit, 0, lv_playerwhousedit, lv_positionOfAbilityUsage);
        PlayerModifyPropertyFixed(lv_playerwhousedit, c_playerPropMinerals, c_playerPropOperAdd, 500.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_ModelSwap("QueenGhost", 1));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetOpacity(0.5, 5.0));
        MinimapPing(PlayerGroupSingle(EventPlayer()), lv_positionOfAbilityUsage, 2.0, Color(50.20, 50.20, 100.00));
        Wait(0.3, c_timeGame);
        MinimapPing(PlayerGroupSingle(EventPlayer()), lv_positionOfAbilityUsage, 2.0, Color(50.20, 25.10, 25.10));
        Wait(0.3, c_timeGame);
        MinimapPing(PlayerGroupSingle(EventPlayer()), lv_positionOfAbilityUsage, 2.0, Color(50.20, 50.20, 25.10));
        Wait(0.3, c_timeGame);
        MinimapPing(PlayerGroupSingle(EventPlayer()), lv_positionOfAbilityUsage, 2.0, Color(50.20, 50.20, 100.00));
        Wait(0.3, c_timeGame);
        MinimapPing(PlayerGroupSingle(EventPlayer()), lv_positionOfAbilityUsage, 2.0, Color(50.20, 25.10, 25.10));
        Wait(0.3, c_timeGame);
        MinimapPing(PlayerGroupSingle(EventPlayer()), lv_positionOfAbilityUsage, 2.0, Color(50.20, 50.20, 25.10));
        Wait(0.3, c_timeGame);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lv_unit)), c_messageAreaDebug, StringExternal("Param/Value/F113AB1E"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheatDeath_Init () {
    gt_CheatDeath = TriggerCreate("gt_CheatDeath_Func");
    TriggerAddEventUnitAbility(gt_CheatDeath, null, AbilityCommand("CheatDeath", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TimeOut
//--------------------------------------------------------------------------------------------------
bool gt_TimeOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[251] lv_stunEffect;
    int lv_stunEffectArray;
    region lv_timeOutRegion;
    unitgroup lv_unitsInTimeOut;

    // Automatic Variable Declarations
    unitgroup autoE0F9F739_g;
    int autoE0F9F739_u;
    unit autoE0F9F739_var;
    unitgroup autoF8538CC9_g;
    int autoF8538CC9_u;
    unit autoF8538CC9_var;

    // Variable Initialization
    lv_timeOutRegion = RegionCircle(UnitGetPosition(EventUnit()), 7.0);
    lv_unitsInTimeOut = UnitGroup(null, c_playerAny, lv_timeOutRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    autoE0F9F739_g = lv_unitsInTimeOut;
    autoE0F9F739_u = UnitGroupCount(autoE0F9F739_g, c_unitCountAll);
    for (;; autoE0F9F739_u -= 1) {
        autoE0F9F739_var = UnitGroupUnitFromEnd(autoE0F9F739_g, autoE0F9F739_u);
        if (autoE0F9F739_var == null) { break; }
        if ((!(((UnitGetType(autoE0F9F739_var) == "NewQueen") || (UnitGetType(autoE0F9F739_var) == "RavagerCocoon") || (UnitGetType(autoE0F9F739_var) == "Queen") || (UnitGetType(autoE0F9F739_var) == "QueenBlackAnt") || (UnitGetType(autoE0F9F739_var) == "QueenFireAnt") || (UnitGetType(autoE0F9F739_var) == "QueenWoodAnt") || (UnitGetType(autoE0F9F739_var) == "QueenPharaohAnt") || (UnitGetType(autoE0F9F739_var) == "QueenLeafCutterAnt") || (UnitGetType(autoE0F9F739_var) == "QueenGhostAnt"))))) {
            UnitBehaviorAdd(autoE0F9F739_var, "TimeStopped", EventUnit(), 1);
            libNtve_gf_AttachModelToUnit(autoE0F9F739_var, "TempestDisruptionBlastTargetUnitStun", "Ref_Overhead");
            lv_stunEffect[lv_stunEffectArray] = libNtve_gf_ActorLastCreated();
            lv_stunEffectArray = (lv_stunEffectArray + 1);
        }

    }
    lv_stunEffectArray = 0;
    Wait(84.0, c_timeGame);
    autoF8538CC9_g = lv_unitsInTimeOut;
    autoF8538CC9_u = UnitGroupCount(autoF8538CC9_g, c_unitCountAll);
    for (;; autoF8538CC9_u -= 1) {
        autoF8538CC9_var = UnitGroupUnitFromEnd(autoF8538CC9_g, autoF8538CC9_u);
        if (autoF8538CC9_var == null) { break; }
        UnitBehaviorRemove(autoF8538CC9_var, "TimeStopped", 1);
        libNtve_gf_KillModel(lv_stunEffect[lv_stunEffectArray]);
        lv_stunEffectArray = (lv_stunEffectArray + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimeOut_Init () {
    gt_TimeOut = TriggerCreate("gt_TimeOut_Func");
    TriggerAddEventUnitAbility(gt_TimeOut, null, AbilityCommand("TimeOut", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fog of war
//--------------------------------------------------------------------------------------------------
bool gt_Fogofwar_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_enemiesOfTriggeringPlayer;
    playergroup lv_enemiesOfTriggeringPlayer2;
    actor[41] lv_fogActors;
    actor[11] lv_halfedFogActors;
    int lv_fogActorsArray;
    int lv_halfedFogActorsArray;
    region lv_fogRegion;

    // Automatic Variable Declarations
    const int auto4CE95613_n = 40;
    int auto4CE95613_i;
    const int auto9F39E64A_n = 10;
    int auto9F39E64A_i;
    const int auto5CF40218_n = 40;
    int auto5CF40218_i;
    const int auto539BC3D2_n = 10;
    int auto539BC3D2_i;

    // Variable Initialization
    lv_enemiesOfTriggeringPlayer = PlayerGroupEmpty();
    lv_enemiesOfTriggeringPlayer2 = PlayerGroupEmpty();
    lv_fogRegion = RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 7.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 9.5), EventUnitTargetPoint()) == true)) {
        for (auto4CE95613_i = 1; auto4CE95613_i <= auto4CE95613_n; auto4CE95613_i += 1) {
            libNtve_gf_CreateModelAtPoint("FogMist", RegionRandomPoint(lv_fogRegion));
            lv_fogActors[lv_fogActorsArray] = libNtve_gf_ActorLastCreated();
            gf_ShowHideActorForPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), libNtve_gf_ActorLastCreated(), false);
            gf_ShowHideActorForPlayerGroup(PlayerGroupSingle(EventPlayer()), libNtve_gf_ActorLastCreated(), false);
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.0, 0));
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(1.0, 5.0));
            lv_fogActorsArray = (lv_fogActorsArray + 1);
        }
        lv_fogActorsArray = 0;
        for (auto9F39E64A_i = 1; auto9F39E64A_i <= auto9F39E64A_n; auto9F39E64A_i += 1) {
            libNtve_gf_CreateModelAtPoint("FogMist", RegionRandomPoint(lv_fogRegion));
            lv_halfedFogActors[lv_halfedFogActorsArray] = libNtve_gf_ActorLastCreated();
            ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetOpacity(0.3, 0));
            gf_ShowHideActorForPlayerGroup(PlayerGroupAlliance(c_playerGroupEnemy, EventPlayer()), libNtve_gf_ActorLastCreated(), false);
            lv_halfedFogActorsArray = (lv_halfedFogActorsArray + 1);
        }
        lv_halfedFogActorsArray = 0;
        Wait(10.0, c_timeGame);
        for (auto5CF40218_i = 1; auto5CF40218_i <= auto5CF40218_n; auto5CF40218_i += 1) {
            libNtve_gf_KillModel(lv_fogActors[lv_fogActorsArray]);
            lv_fogActorsArray = (lv_fogActorsArray + 1);
        }
        for (auto539BC3D2_i = 1; auto539BC3D2_i <= auto539BC3D2_n; auto539BC3D2_i += 1) {
            libNtve_gf_KillModel(lv_halfedFogActors[lv_halfedFogActorsArray]);
            lv_halfedFogActorsArray = (lv_halfedFogActorsArray + 1);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/DC9C023F"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fogofwar_Init () {
    gt_Fogofwar = TriggerCreate("gt_Fogofwar_Func");
    TriggerAddEventUnitAbility(gt_Fogofwar, null, AbilityCommand("Fogofwar", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Curse
//--------------------------------------------------------------------------------------------------
bool gt_Curse_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 1.5), EventUnitTargetPoint()) == true)) {
        UnitBehaviorAdd(EventUnitTargetUnit(), "CurseAura", EventUnit(), 1);
        Wait(42.0, c_timeGame);
        UnitBehaviorRemove(EventUnitTargetUnit(), "CurseAura", 1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/4F7BADC8"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Curse_Init () {
    gt_Curse = TriggerCreate("gt_Curse_Func");
    TriggerAddEventUnitAbility(gt_Curse, null, AbilityCommand("Curse", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rise The Dead Started
//--------------------------------------------------------------------------------------------------
bool gt_RiseTheDeadStarted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_reviveRegion;

    // Automatic Variable Declarations
    const int auto1CD9F824_n = 14;
    int auto1CD9F824_i;

    // Variable Initialization
    lv_reviveRegion = RegionCircle(UnitGetPosition(EventUnitTargetUnit()), 4.0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(RegionCircle(UnitGetPosition(EventUnit()), 5.5), EventUnitTargetPoint()) == true)) {
        ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
        libNtve_gf_CreateModelAtPoint("FogBlue", EventUnitTargetPoint());
        gv_reviveAreaEffect[EventPlayer()] = libNtve_gf_ActorLastCreated();
        gv_reviveingRegion[EventPlayer()] = lv_reviveRegion;
        gv_revivePoint[EventPlayer()] = EventUnitTargetPoint();
        for (auto1CD9F824_i = 1; auto1CD9F824_i <= auto1CD9F824_n; auto1CD9F824_i += 1) {
            Wait(2.0, c_timeGame);
            TriggerEnable(gt_UnitDiesInReviveRegion, true);
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaError, StringExternal("Param/Value/B0361FD3"));
        SoundPlayOnUnitForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiseTheDeadStarted_Init () {
    gt_RiseTheDeadStarted = TriggerCreate("gt_RiseTheDeadStarted_Func");
    TriggerAddEventUnitAbility(gt_RiseTheDeadStarted, null, AbilityCommand("RiseTheDead", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Dies In Revive Region
//--------------------------------------------------------------------------------------------------
bool gt_UnitDiesInReviveRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diedUnit;
    int lv_ownerofRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_diedUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((RegionContainsPoint(gv_reviveingRegion[1], UnitGetPosition(lv_diedUnit)) == true) || (RegionContainsPoint(gv_reviveingRegion[2], UnitGetPosition(lv_diedUnit)) == true) || (RegionContainsPoint(gv_reviveingRegion[3], UnitGetPosition(lv_diedUnit)) == true) || (RegionContainsPoint(gv_reviveingRegion[4], UnitGetPosition(lv_diedUnit)) == true) || (RegionContainsPoint(gv_reviveingRegion[5], UnitGetPosition(lv_diedUnit)) == true) || (RegionContainsPoint(gv_reviveingRegion[6], UnitGetPosition(lv_diedUnit)) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RegionContainsPoint(gv_reviveingRegion[1], UnitGetPosition(lv_diedUnit)) == true)) {
        lv_ownerofRegion = 1;
        if ((UnitGetType(EventUnit()) == "Drone")) {
            gv_reviveDrones[lv_ownerofRegion] = (gv_reviveDrones[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Zergling")) {
            gv_reviveSoliders[lv_ownerofRegion] = (gv_reviveSoliders[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
            gv_reviveMajors[lv_ownerofRegion] = (gv_reviveMajors[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Locust")) {
            gv_reviveAcidSprayers[lv_ownerofRegion] = (gv_reviveAcidSprayers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
            gv_reviveStringers[lv_ownerofRegion] = (gv_reviveStringers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            gv_reviveTunnelTremblers[lv_ownerofRegion] = (gv_reviveTunnelTremblers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") && (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP")) {
            gv_reviveKhepri[lv_ownerofRegion] = (gv_reviveKhepri[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") && (UnitGetType(EventUnitTargetUnit()) == "GraveDigger")) {
            gv_reviveGraveDigger[lv_ownerofRegion] = (gv_reviveGraveDigger[lv_ownerofRegion] + 1);
        }
    }

    if ((RegionContainsPoint(gv_reviveingRegion[2], UnitGetPosition(lv_diedUnit)) == true)) {
        lv_ownerofRegion = 2;
        if ((UnitGetType(EventUnit()) == "Drone")) {
            gv_reviveDrones[lv_ownerofRegion] = (gv_reviveDrones[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Zergling")) {
            gv_reviveSoliders[lv_ownerofRegion] = (gv_reviveSoliders[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
            gv_reviveMajors[lv_ownerofRegion] = (gv_reviveMajors[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Locust")) {
            gv_reviveAcidSprayers[lv_ownerofRegion] = (gv_reviveAcidSprayers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
            gv_reviveStringers[lv_ownerofRegion] = (gv_reviveStringers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            gv_reviveTunnelTremblers[lv_ownerofRegion] = (gv_reviveTunnelTremblers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") && (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP")) {
            gv_reviveKhepri[lv_ownerofRegion] = (gv_reviveKhepri[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") && (UnitGetType(EventUnitTargetUnit()) == "GraveDigger")) {
            gv_reviveGraveDigger[lv_ownerofRegion] = (gv_reviveGraveDigger[lv_ownerofRegion] + 1);
        }
    }

    if ((RegionContainsPoint(gv_reviveingRegion[3], UnitGetPosition(lv_diedUnit)) == true)) {
        lv_ownerofRegion = 3;
        if ((UnitGetType(EventUnit()) == "Drone")) {
            gv_reviveDrones[lv_ownerofRegion] = (gv_reviveDrones[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Zergling")) {
            gv_reviveSoliders[lv_ownerofRegion] = (gv_reviveSoliders[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
            gv_reviveMajors[lv_ownerofRegion] = (gv_reviveMajors[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Locust")) {
            gv_reviveAcidSprayers[lv_ownerofRegion] = (gv_reviveAcidSprayers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
            gv_reviveStringers[lv_ownerofRegion] = (gv_reviveStringers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            gv_reviveTunnelTremblers[lv_ownerofRegion] = (gv_reviveTunnelTremblers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") && (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP")) {
            gv_reviveKhepri[lv_ownerofRegion] = (gv_reviveKhepri[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") && (UnitGetType(EventUnitTargetUnit()) == "GraveDigger")) {
            gv_reviveGraveDigger[lv_ownerofRegion] = (gv_reviveGraveDigger[lv_ownerofRegion] + 1);
        }
    }

    if ((RegionContainsPoint(gv_reviveingRegion[4], UnitGetPosition(lv_diedUnit)) == true)) {
        lv_ownerofRegion = 4;
        if ((UnitGetType(EventUnit()) == "Drone")) {
            gv_reviveDrones[lv_ownerofRegion] = (gv_reviveDrones[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Zergling")) {
            gv_reviveSoliders[lv_ownerofRegion] = (gv_reviveSoliders[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
            gv_reviveMajors[lv_ownerofRegion] = (gv_reviveMajors[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Locust")) {
            gv_reviveAcidSprayers[lv_ownerofRegion] = (gv_reviveAcidSprayers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
            gv_reviveStringers[lv_ownerofRegion] = (gv_reviveStringers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            gv_reviveTunnelTremblers[lv_ownerofRegion] = (gv_reviveTunnelTremblers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") && (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP")) {
            gv_reviveKhepri[lv_ownerofRegion] = (gv_reviveKhepri[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") && (UnitGetType(EventUnitTargetUnit()) == "GraveDigger")) {
            gv_reviveGraveDigger[lv_ownerofRegion] = (gv_reviveGraveDigger[lv_ownerofRegion] + 1);
        }
    }

    if ((RegionContainsPoint(gv_reviveingRegion[5], UnitGetPosition(lv_diedUnit)) == true)) {
        lv_ownerofRegion = 5;
        if ((UnitGetType(EventUnit()) == "Drone")) {
            gv_reviveDrones[lv_ownerofRegion] = (gv_reviveDrones[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Zergling")) {
            gv_reviveSoliders[lv_ownerofRegion] = (gv_reviveSoliders[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
            gv_reviveMajors[lv_ownerofRegion] = (gv_reviveMajors[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Locust")) {
            gv_reviveAcidSprayers[lv_ownerofRegion] = (gv_reviveAcidSprayers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
            gv_reviveStringers[lv_ownerofRegion] = (gv_reviveStringers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            gv_reviveTunnelTremblers[lv_ownerofRegion] = (gv_reviveTunnelTremblers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") && (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP")) {
            gv_reviveKhepri[lv_ownerofRegion] = (gv_reviveKhepri[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") && (UnitGetType(EventUnitTargetUnit()) == "GraveDigger")) {
            gv_reviveGraveDigger[lv_ownerofRegion] = (gv_reviveGraveDigger[lv_ownerofRegion] + 1);
        }
    }

    if ((RegionContainsPoint(gv_reviveingRegion[6], UnitGetPosition(lv_diedUnit)) == true)) {
        lv_ownerofRegion = 6;
        if ((UnitGetType(EventUnit()) == "Drone")) {
            gv_reviveDrones[lv_ownerofRegion] = (gv_reviveDrones[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Zergling")) {
            gv_reviveSoliders[lv_ownerofRegion] = (gv_reviveSoliders[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
            gv_reviveMajors[lv_ownerofRegion] = (gv_reviveMajors[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Locust")) {
            gv_reviveAcidSprayers[lv_ownerofRegion] = (gv_reviveAcidSprayers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
            gv_reviveStringers[lv_ownerofRegion] = (gv_reviveStringers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "TunnelTrembler")) {
            gv_reviveTunnelTremblers[lv_ownerofRegion] = (gv_reviveTunnelTremblers[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "SwarmHostMP") && (UnitGetType(EventUnitTargetUnit()) == "SwarmHostBurrowedMP")) {
            gv_reviveKhepri[lv_ownerofRegion] = (gv_reviveKhepri[lv_ownerofRegion] + 1);
        }
        else if ((UnitGetType(EventUnitTargetUnit()) == "InfestedAbomination") && (UnitGetType(EventUnitTargetUnit()) == "GraveDigger")) {
            gv_reviveGraveDigger[lv_ownerofRegion] = (gv_reviveGraveDigger[lv_ownerofRegion] + 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitDiesInReviveRegion_Init () {
    gt_UnitDiesInReviveRegion = TriggerCreate("gt_UnitDiesInReviveRegion_Func");
    TriggerEnable(gt_UnitDiesInReviveRegion, false);
    TriggerAddEventUnitDied(gt_UnitDiesInReviveRegion, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rise The Dead Ended
//--------------------------------------------------------------------------------------------------
bool gt_RiseTheDeadEnded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reviveEffectArray;
    int lv_reviveEffectRepeatAmount;
    actor[101] lv_reviveEffect;
    unitgroup lv_unitsWhoDiedWithinRegionUnitGroup;

    // Automatic Variable Declarations
    int auto2A37FD2D_n;
    int auto2A37FD2D_i;
    int autoD6047227_n;
    int autoD6047227_i;
    int auto783BC472_n;
    int auto783BC472_i;
    int autoC98D5762_n;
    int autoC98D5762_i;
    int autoF8682A1F_n;
    int autoF8682A1F_i;
    int autoBEFB45E2_n;
    int autoBEFB45E2_i;
    int auto300CEB24_n;
    int auto300CEB24_i;
    int auto725457CA_n;
    int auto725457CA_i;
    int autoC20E8032_n;
    int autoC20E8032_i;

    // Variable Initialization
    lv_unitsWhoDiedWithinRegionUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(28.0, c_timeGame);
    auto2A37FD2D_n = gv_reviveDrones[EventPlayer()];
    for (auto2A37FD2D_i = 1; auto2A37FD2D_i <= auto2A37FD2D_n; auto2A37FD2D_i += 1) {
        UnitCreate(1, "Drone", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    autoD6047227_n = gv_reviveSoliders[EventPlayer()];
    for (autoD6047227_i = 1; autoD6047227_i <= autoD6047227_n; autoD6047227_i += 1) {
        UnitCreate(1, "Zergling", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    auto783BC472_n = gv_reviveMajors[EventPlayer()];
    for (auto783BC472_i = 1; auto783BC472_i <= auto783BC472_n; auto783BC472_i += 1) {
        UnitCreate(1, "Ultralisk", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    autoC98D5762_n = gv_reviveAcidSprayers[EventPlayer()];
    for (autoC98D5762_i = 1; autoC98D5762_i <= autoC98D5762_n; autoC98D5762_i += 1) {
        UnitCreate(1, "Locust", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    autoF8682A1F_n = gv_reviveStringers[EventPlayer()];
    for (autoF8682A1F_i = 1; autoF8682A1F_i <= autoF8682A1F_n; autoF8682A1F_i += 1) {
        UnitCreate(1, "Hydralisk", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    autoBEFB45E2_n = gv_reviveTunnelTremblers[EventPlayer()];
    for (autoBEFB45E2_i = 1; autoBEFB45E2_i <= autoBEFB45E2_n; autoBEFB45E2_i += 1) {
        UnitCreate(1, "TunnelTrembler", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    auto300CEB24_n = gv_reviveKhepri[EventPlayer()];
    for (auto300CEB24_i = 1; auto300CEB24_i <= auto300CEB24_n; auto300CEB24_i += 1) {
        UnitCreate(1, "SwarmHostMP", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    auto725457CA_n = gv_reviveGraveDigger[EventPlayer()];
    for (auto725457CA_i = 1; auto725457CA_i <= auto725457CA_n; auto725457CA_i += 1) {
        UnitCreate(1, "InfestedAbomination", 0, EventPlayer(), gv_revivePoint[EventPlayer()], 270.0);
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), "AnimPlay Unborrow Unburrow");
        UnitBehaviorAdd(UnitLastCreated(), "Risenfromthedead", EventUnit(), 1);
        libNtve_gf_CreateModelAtPoint("ZergHeroRevive", UnitGetPosition(UnitLastCreated()));
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(0.5, 0.5, 2.0, 0.0));
        lv_reviveEffect[lv_reviveEffectArray] = libNtve_gf_ActorLastCreated();
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    gv_reviveingRegion[EventPlayer()] = RegionCircle(Point(0.0, 0.0), 0.0);
    gv_reviveDrones[EventPlayer()] = 0;
    gv_reviveSoliders[EventPlayer()] = 0;
    gv_reviveMajors[EventPlayer()] = 0;
    gv_reviveAcidSprayers[EventPlayer()] = 0;
    gv_reviveStringers[EventPlayer()] = 0;
    gv_reviveTunnelTremblers[EventPlayer()] = 0;
    gv_reviveKhepri[EventPlayer()] = 0;
    gv_reviveGraveDigger[EventPlayer()] = 0;
    TriggerEnable(gt_UnitDiesInReviveRegion, false);
    lv_reviveEffectRepeatAmount = lv_reviveEffectArray;
    lv_reviveEffectArray = 0;
    libNtve_gf_KillModel(gv_reviveAreaEffect[EventPlayer()]);
    Wait(6.0, c_timeGame);
    autoC20E8032_n = lv_reviveEffectRepeatAmount;
    for (autoC20E8032_i = 1; autoC20E8032_i <= autoC20E8032_n; autoC20E8032_i += 1) {
        libNtve_gf_KillModel(lv_reviveEffect[lv_reviveEffectArray]);
        lv_reviveEffectArray = (lv_reviveEffectArray + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RiseTheDeadEnded_Init () {
    gt_RiseTheDeadEnded = TriggerCreate("gt_RiseTheDeadEnded_Func");
    TriggerAddEventUnitAbility(gt_RiseTheDeadEnded, null, AbilityCommand("RiseTheDead", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Build A Plant
//--------------------------------------------------------------------------------------------------
bool gt_BuildAPlant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_angleForRegionSetting;
    unit lv_smallGrowingPlant;
    actor lv_bloodActorOnPlantation;
    point lv_plantingPoint;
    unit lv_foodUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plantingPoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.8, libNtve_gf_RandomAngle());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "GrowingPlantFood", c_unitCreateIgnorePlacement, 0, lv_plantingPoint, libNtve_gf_RandomAngle());
    lv_smallGrowingPlant = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetOpacity(0.0, 0));
    libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
    Wait(1.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetOpacity(1.0, 3.0));
    libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetScale(0.6, 0.6, 0.6, 3.0));
    libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 50.0), 1.0, 6.0));
    Wait(180.0, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
    UnitIssueOrder(lv_smallGrowingPlant, Order(AbilityCommand("MorphGrowingPlantintoPlantFood", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuildAPlant_Init () {
    gt_BuildAPlant = TriggerCreate("gt_BuildAPlant_Func");
    TriggerAddEventUnitAbility(gt_BuildAPlant, null, AbilityCommand("PlantAPlant", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prevent building Plantation too close to dirt
//--------------------------------------------------------------------------------------------------
bool gt_PreventbuildingPlantationtooclosetodirt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "DirtMoved", "Wall", c_playerAny, c_unitAllianceAny, RegionCircle(EventUnitTargetPoint(), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/3250AF94"), UnitGetOwner(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreventbuildingPlantationtooclosetodirt_Init () {
    gt_PreventbuildingPlantationtooclosetodirt = TriggerCreate("gt_PreventbuildingPlantationtooclosetodirt_Func");
    TriggerAddEventUnitAbility(gt_PreventbuildingPlantationtooclosetodirt, null, AbilityCommand("AbilityQueenBuilds", 1), c_abilBuildStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prevent building Plantation too close to eachother
//--------------------------------------------------------------------------------------------------
bool gt_PreventbuildingPlantationtooclosetoeachother_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Plantation", "", "", c_playerAny, c_unitAllianceAny, RegionCircle(EventUnitTargetPoint(), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/38561497"), UnitGetOwner(EventUnit()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreventbuildingPlantationtooclosetoeachother_Init () {
    gt_PreventbuildingPlantationtooclosetoeachother = TriggerCreate("gt_PreventbuildingPlantationtooclosetoeachother_Func");
    TriggerAddEventUnitAbility(gt_PreventbuildingPlantationtooclosetoeachother, null, AbilityCommand("AbilityQueenBuilds", 1), c_abilBuildStageApproach, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Passive Plantation Plant
//--------------------------------------------------------------------------------------------------
bool gt_PassivePlantationPlant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInt;
    int lv_angleForRegionSetting;
    unit lv_smallGrowingPlant;
    actor lv_bloodActorOnPlantation;
    point lv_plantingPoint;
    unit lv_foodUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomInt = RandomInt(0, 360);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Plantation"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(EventUnitCreatedUnit()) == true)) {
            if ((gv_passivePlantaplantUnlocked[UnitGetOwner(EventUnitCreatedUnit())] == true)) {
                lv_plantingPoint = PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.8, libNtve_gf_RandomAngle());
                lv_randomInt = RandomInt(0, 360);
                lv_plantingPoint = PointWithOffsetPolar(UnitGetPosition(EventUnitCreatedUnit()), 1.8, lv_randomInt);
                UnitCreate(1, "GrowingPlantFood", c_unitCreateIgnorePlacement, 0, lv_plantingPoint, lv_randomInt);
                lv_smallGrowingPlant = UnitLastCreated();
                libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetOpacity(0.0, 0));
                libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
                Wait(1.0, c_timeGame);
                libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetOpacity(1.0, 3.0));
                libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetScale(0.6, 0.6, 0.6, 3.0));
                libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetTintColor(ColorWithAlpha(gv_groundTextureRed, gv_groundTextureGreen, gv_groundTextureBlue, 50.0), 1.0, 6.0));
                Wait(100.0, c_timeGame);
                libNtve_gf_SendActorMessageToUnit(lv_smallGrowingPlant, libNtve_gf_SetScale(1.0, 1.0, 1.0, 3.0));
                UnitIssueOrder(lv_smallGrowingPlant, Order(AbilityCommand("MorphGrowingPlantintoPlantFood", 0)), c_orderQueueReplace);
                UnitBehaviorAdd(lv_smallGrowingPlant, "Nonrespawnable", lv_smallGrowingPlant, 1);
            }

            Wait(100.0, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PassivePlantationPlant_Init () {
    gt_PassivePlantationPlant = TriggerCreate("gt_PassivePlantationPlant_Func");
    TriggerAddEventUnitCreated(gt_PassivePlantationPlant, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: give players tiers from the start - After Abilities Removal - temp
//--------------------------------------------------------------------------------------------------
bool gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaserchedTier1Ability", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaserchedTier2Ability", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaserchedTier3Ability", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp_Init () {
    gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp = TriggerCreate("gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp_Func");
    TriggerAddEventUnitAbility(gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp, null, AbilityCommand("MorphToQueenGhost", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp, null, AbilityCommand("MorphToQueenLeafCutter", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp, null, AbilityCommand("MorphToQueenPharaoh", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp, null, AbilityCommand("MorphToQueenWood", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp, null, AbilityCommand("MorphToQueenFire", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp, null, AbilityCommand("MorphToQueen", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check If Player Reaserched Tier 3 Ability
//--------------------------------------------------------------------------------------------------
bool gt_CheckIfPlayerReaserchedTier3Ability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaserchedTier3Ability", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckIfPlayerReaserchedTier3Ability_Init () {
    gt_CheckIfPlayerReaserchedTier3Ability = TriggerCreate("gt_CheckIfPlayerReaserchedTier3Ability_Func");
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier3Ability, null, AbilityCommand("ResearchTier3Abilities", 15), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check If Player Reaserched Tier 2 Ability
//--------------------------------------------------------------------------------------------------
bool gt_CheckIfPlayerReaserchedTier2Ability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaserchedTier2Ability", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckIfPlayerReaserchedTier2Ability_Init () {
    gt_CheckIfPlayerReaserchedTier2Ability = TriggerCreate("gt_CheckIfPlayerReaserchedTier2Ability_Func");
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchZombieFungus", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchTightSight", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchClenchingClaws", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchToughenedCharacter", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchDisguise", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchShapeShift", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchEnergyEfficiency", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchWoodAntTower", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchGravelPile", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchFearStare", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchGrapple", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier2Ability, null, AbilityCommand("ResearchSwarmCall", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check If Player Reaserched Tier 1 Ability
//--------------------------------------------------------------------------------------------------
bool gt_CheckIfPlayerReaserchedTier1Ability_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ReaserchedTier1Ability", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckIfPlayerReaserchedTier1Ability_Init () {
    gt_CheckIfPlayerReaserchedTier1Ability = TriggerCreate("gt_CheckIfPlayerReaserchedTier1Ability_Func");
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchMoveAbility", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchSickeningStrike", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchWebEntrapment", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchBastionDrums", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchLifeSuction", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchLifeShare", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchWaterSpring", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchBuildingRegeneration", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchEnergyRegenerationAura", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchDropRock", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchBerserkerMode", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchAcidVomit", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchLandMine", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchInsanity", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchMyWalkingBoots", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_CheckIfPlayerReaserchedTier1Ability, null, AbilityCommand("ResearchHideBuilding", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start or stop sending out spikes
//--------------------------------------------------------------------------------------------------
bool gt_Startorstopsendingoutspikes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AttachModelToUnit(EventUnit(), "QueenBurstHealCastModel", "Ref_Origin");
    if ((EventUnitAbility() == AbilityCommand("Startsendingoutspikes", 0))) {
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 50.20, 0.00), 1.0, 0.0));
        UnitAbilitySpendExplicit(EventUnit(), AbilityCommand("Stopsendingoutspikes", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    }
    else {
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(76.86, 0.00, 0.00), 1.0, 0.0));
        UnitAbilitySpendExplicit(EventUnit(), AbilityCommand("Startsendingoutspikes", 0), c_spendLocationAll, 1.0, 1.0, 1.0, 1.0);
    }
    if ((UnitGetType(EventUnit()) == "SmallSpikeNest")) {
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.0, 1.0, 1.5, 0.0));
        UnitWeaponRemove(EventUnit(), "BroodlingSpawner");
    }
    else if ((UnitGetType(EventUnit()) == "MediumSpikeNest")) {
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(1.5, 1.5, 2.4, 0.0));
        UnitWeaponRemove(EventUnit(), "BroodlingSpawnerXx2");
    }
    else if ((UnitGetType(EventUnit()) == "LargeSpikeNest")) {
        ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetScale(2.0, 2.0, 3.0, 0.0));
        UnitWeaponRemove(EventUnit(), "BroodlingSpawnerXx4");
    }
    if ((EventUnitAbility() == AbilityCommand("Startsendingoutspikes", 0))) {
        if ((UnitGetType(EventUnit()) == "SmallSpikeNest")) {
            UnitWeaponAdd(EventUnit(), "BroodlingSpawner", "BroodlingSpawnerTurret");
        }
        else if ((UnitGetType(EventUnit()) == "MediumSpikeNest")) {
            UnitWeaponAdd(EventUnit(), "BroodlingSpawnerXx2", "BroodlingSpawnerTurret");
        }
        else if ((UnitGetType(EventUnit()) == "LargeSpikeNest")) {
            UnitWeaponAdd(EventUnit(), "BroodlingSpawnerXx4", "BroodlingSpawnerTurret");
        }
    }

    if ((EventUnitAbility() == AbilityCommand("Startsendingoutspikes", 0))) {
        UnitBehaviorRemove(EventUnit(), "ManuallyDisabledSpikeNest", 1);
    }
    else if ((EventUnitAbility() == AbilityCommand("Stopsendingoutspikes", 0))) {
        UnitBehaviorAdd(EventUnit(), "ManuallyDisabledSpikeNest", EventUnit(), 1);
    }
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Startorstopsendingoutspikes_Init () {
    gt_Startorstopsendingoutspikes = TriggerCreate("gt_Startorstopsendingoutspikes_Func");
    TriggerAddEventUnitAbility(gt_Startorstopsendingoutspikes, null, AbilityCommand("Startsendingoutspikes", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_Startorstopsendingoutspikes, null, AbilityCommand("Stopsendingoutspikes", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spike Survival
//--------------------------------------------------------------------------------------------------
bool gt_SpikeSurvival_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_healImpactModel;
    actor lv_healIconModel;

    // Automatic Variable Declarations
    unitgroup autoCF7F54C6_g;
    int autoCF7F54C6_u;
    unit autoCF7F54C6_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF7F54C6_g = UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoCF7F54C6_u = UnitGroupCount(autoCF7F54C6_g, c_unitCountAll);
    for (;; autoCF7F54C6_u -= 1) {
        autoCF7F54C6_var = UnitGroupUnitFromEnd(autoCF7F54C6_g, autoCF7F54C6_u);
        if (autoCF7F54C6_var == null) { break; }
        UnitBehaviorAdd(autoCF7F54C6_var, "Stunfor2Seconds", EventUnit(), 1);
    }
    UnitBehaviorAdd(EventUnit(), "SpikeSurvivalActivated", EventUnit(), 1);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * 1.5));
    SoundPlayOnUnitForPlayer(SoundLink("SwarmHost_EmptyBubbleLaunch", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 2.0, 100.0, 0.0);
    libNtve_gf_CreateModelAtPoint("DehakaHealBuffModel", UnitGetPosition(EventUnit()));
    lv_healIconModel = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("SpikeSurvivalImpactModel", UnitGetPosition(EventUnit()));
    lv_healImpactModel = libNtve_gf_ActorLastCreated();
    if ((UnitGetType(EventUnit()) == "SmallSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.5, 2.0));
    }
    else if ((UnitGetType(EventUnit()) == "MediumSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.5, 1.5, 2.25, 2.0));
    }
    else if ((UnitGetType(EventUnit()) == "LargeSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(2.0, 2.0, 3.0, 2.0));
    }
    if ((UnitGetType(EventUnit()) == "SmallSpikeNest")) {
        ActorSend(lv_healIconModel, libNtve_gf_SetScale(1.0, 1.0, 1.5, 2.0));
        ActorSend(lv_healImpactModel, libNtve_gf_SetScale(1.0, 1.0, 1.5, 2.0));
    }
    else if ((UnitGetType(EventUnit()) == "MediumSpikeNest")) {
        ActorSend(lv_healIconModel, libNtve_gf_SetScale(1.5, 1.5, 2.25, 2.0));
        ActorSend(lv_healImpactModel, libNtve_gf_SetScale(1.5, 1.5, 2.25, 2.0));
    }
    else if ((UnitGetType(EventUnit()) == "LargeSpikeNest")) {
        ActorSend(lv_healIconModel, libNtve_gf_SetScale(2.0, 2.0, 3.0, 2.0));
        ActorSend(lv_healImpactModel, libNtve_gf_SetScale(2.0, 2.0, 3.0, 2.0));
    }
    Wait(4.0, c_timeGame);
    libNtve_gf_KillModel(lv_healIconModel);
    libNtve_gf_KillModel(lv_healImpactModel);
    Wait(14.0, c_timeGame);
    if ((UnitGetType(EventUnit()) == "SmallSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.0, 1.0, 1.0, 2.0));
    }
    else if ((UnitGetType(EventUnit()) == "MediumSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(1.5, 1.5, 1.5, 2.0));
    }
    else if ((UnitGetType(EventUnit()) == "LargeSpikeNest")) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(2.0, 2.0, 2.0, 2.0));
    }
    Wait(2.0, c_timeGame);
    UnitBehaviorRemove(EventUnit(), "SpikeSurvivalActivated", 1);
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) / 1.5));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLifeMax, (UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) / 1.5));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpikeSurvival_Init () {
    gt_SpikeSurvival = TriggerCreate("gt_SpikeSurvival_Func");
    TriggerAddEventUnitAbility(gt_SpikeSurvival, null, AbilityCommand("SpikeSurvival", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spike Disband
//--------------------------------------------------------------------------------------------------
bool gt_SpikeDisband_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_healImpactModel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(0.6, 0.6, 0.1, 2.0));
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateModelAtPoint("JumpStompDustCloud", UnitGetPosition(EventUnit()));
    lv_healImpactModel = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing((FixedToInt(UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent)) / 10), "Broodling", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(EventUnit()));
    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 0.0);
    Wait(2.0, c_timeGame);
    libNtve_gf_KillModel(lv_healImpactModel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpikeDisband_Init () {
    gt_SpikeDisband = TriggerCreate("gt_SpikeDisband_Func");
    TriggerAddEventUnitAbility(gt_SpikeDisband, null, AbilityCommand("SpikeDisband", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: When Rapid Evolution is done. give behavior(queen duel upgrade slot)
//--------------------------------------------------------------------------------------------------
bool gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "RapidEvolution", c_techCountQueuedOrBetter) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(gv_queenOfPlayer[EventPlayer()], "RapidEvolution", gv_queenOfPlayer[EventPlayer()], 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot_Init () {
    gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot = TriggerCreate("gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot_Func");
    TriggerAddEventUnitAbility(gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot, null, AbilityCommand("evolutionchamberresearch", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen Sprint
//--------------------------------------------------------------------------------------------------
bool gt_QueenSprint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "QueenSprint", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenSprint_Init () {
    gt_QueenSprint = TriggerCreate("gt_QueenSprint_Func");
    TriggerAddEventUnitAbility(gt_QueenSprint, null, AbilityCommand("UnknownAbility", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall placement
//--------------------------------------------------------------------------------------------------
bool gt_Wallplacement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    region lv_region;
    point lv_wallPosition;
    int lv_owner;
    playergroup lv_ownerGroup;

    // Automatic Variable Declarations
    const int auto5C2233B8_n = 100;
    int auto5C2233B8_i;

    // Variable Initialization
    lv_ownerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "WallPlacementDummy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wallPosition = UnitGetPosition(EventUnitCreatedUnit());
    lv_owner = UnitGetOwner(EventUnitCreatedUnit());
    lv_ownerGroup = PlayerGroupSingle(lv_owner);
    UnitRemove(EventUnitCreatedUnit());
    lv_x = PointGetX(UnitGetPosition(EventUnitCreatedUnit()));
    lv_y = PointGetY(UnitGetPosition(EventUnitCreatedUnit()));
    lv_region = RegionRect((lv_x - 6.0), (lv_y - 6.0), (lv_x + 6.0), (lv_y + 6.0));
    if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("NewWorkerNest", "NewSoldierNest", "", lv_owner, c_unitAllianceAlly, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("UltraliskCavern", "StingerNest", "AcidSprayerNest", lv_owner, c_unitAllianceAlly, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SmallSpikeNest", "MediumSpikeNest", "LargeSpikeNest", lv_owner, c_unitAllianceAlly, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) == 0)) {
        UIDisplayMessage(lv_ownerGroup, c_messageAreaChat, StringExternal("Param/Value/FF1AD867"));
        UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + gv_wallEnergyCost));
        SoundPlayForPlayer(SoundLink("WallPlacementError", -1), c_maxPlayers, lv_ownerGroup, 100.0, 0.0);
    }
    else if ((UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Dirt", "Wall", "", c_playerAny, c_unitAllianceAny, lv_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1)) {
        if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_wallPosition) <= 0.15)) {
            UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -0.9, lv_wallPosition), true);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_wallPosition) <= 0.35)) {
            UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -0.7, lv_wallPosition), true);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_wallPosition) <= 0.55)) {
            UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -0.5, lv_wallPosition), true);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_wallPosition) <= 0.75)) {
            UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -0.3, lv_wallPosition), true);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_wallPosition) <= 0.95)) {
            UnitSetPosition(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), -0.1, lv_wallPosition), true);
        }
        UnitCreate(1, "Wall", c_unitCreateIgnorePlacement, 0, lv_wallPosition, libNtve_gf_RandomAngle());
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("BuildWoodWall", 0), lv_wallPosition), c_orderQueueAddToFront);
        gv_queenWallBuildStartPosition[lv_owner] = UnitGetPosition(EventUnit());
        for (auto5C2233B8_i = 1; auto5C2233B8_i <= auto5C2233B8_n; auto5C2233B8_i += 1) {
            Wait(0.0, c_timeGame);
            if (((UnitIsValid(EventUnit()) == false) || (UnitIsAlive(EventUnit()) == false) || (OrderGetAbilityCommand(UnitOrder(EventUnit(), 0)) != AbilityCommand("QueenBuild2", 5)))) {
                break;
            }

            if ((DistanceBetweenPoints(gv_queenWallBuildStartPosition[lv_owner], UnitGetPosition(EventUnit())) >= 0.5)) {
                UnitIssueOrder(EventUnit(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wallplacement_Init () {
    gt_Wallplacement = TriggerCreate("gt_Wallplacement_Func");
    TriggerAddEventUnitCreated(gt_Wallplacement, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drone Control - Pharaoh ant
//--------------------------------------------------------------------------------------------------
bool gt_DroneControlPharaohant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_respawnPointVariable;
    unit lv_controlledUnit;
    unitgroup lv_enemyDronesInDroneControlRegion;
    unitgroup lv_enemySoldiersInDroneControlRegion;
    unitgroup lv_unitstoreturntoowner;
    int[7] lv_originalUnitOfOwner;
    int lv_unitID;

    // Automatic Variable Declarations
    const int auto840E7E36_n = 4;
    int auto840E7E36_i;
    const int auto803C88AC_n = 2;
    int auto803C88AC_i;
    unitgroup auto780C586B_g;
    int auto780C586B_u;
    unit auto780C586B_var;

    // Variable Initialization
    lv_enemyDronesInDroneControlRegion = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "", "", EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_enemySoldiersInDroneControlRegion = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Zergling", "", "", EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_unitstoreturntoowner = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "Nonrespawnable") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto840E7E36_i = 1; auto840E7E36_i <= auto840E7E36_n; auto840E7E36_i += 1) {
        lv_controlledUnit = UnitGroupRandomUnit(lv_enemyDronesInDroneControlRegion, c_unitCountAlive);
        UnitGroupAdd(lv_unitstoreturntoowner, lv_controlledUnit);
        lv_unitID = (lv_unitID + 1);
        lv_originalUnitOfOwner[lv_unitID] = UnitGetOwner(lv_controlledUnit);
        UnitSetOwner(lv_controlledUnit, EventPlayer(), false);
        libNtve_gf_AttachModelToUnit(lv_controlledUnit, "InfestorEnsnare", "Ref_Center");
        UnitBehaviorAdd(lv_controlledUnit, "DroneTimedLife", EventUnit(), 1);
        UnitGroupRemove(lv_enemyDronesInDroneControlRegion, lv_controlledUnit);
    }
    for (auto803C88AC_i = 1; auto803C88AC_i <= auto803C88AC_n; auto803C88AC_i += 1) {
        lv_controlledUnit = UnitGroupRandomUnit(lv_enemySoldiersInDroneControlRegion, c_unitCountAlive);
        UnitGroupAdd(lv_unitstoreturntoowner, lv_controlledUnit);
        lv_unitID = (lv_unitID + 1);
        lv_originalUnitOfOwner[lv_unitID] = UnitGetOwner(lv_controlledUnit);
        UnitSetOwner(lv_controlledUnit, EventPlayer(), false);
        libNtve_gf_AttachModelToUnit(lv_controlledUnit, "InfestorEnsnare", "Ref_Center");
        UnitBehaviorAdd(lv_controlledUnit, "DroneTimedLife", EventUnit(), 1);
        UnitGroupRemove(lv_enemyDronesInDroneControlRegion, lv_controlledUnit);
    }
    lv_unitID = 0;
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    SoundPlayOnUnitForPlayer(SoundLink("ChristmasGiftEnemy", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), EventUnit(), 0.0, 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    Wait(40.0, c_timeGame);
    auto780C586B_g = lv_unitstoreturntoowner;
    auto780C586B_u = UnitGroupCount(auto780C586B_g, c_unitCountAll);
    for (;; auto780C586B_u -= 1) {
        auto780C586B_var = UnitGroupUnitFromEnd(auto780C586B_g, auto780C586B_u);
        if (auto780C586B_var == null) { break; }
        lv_respawnPointVariable = UnitGetPosition(auto780C586B_var);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(auto780C586B_var), c_unitCreateIgnorePlacement, 1, lv_respawnPointVariable);
        UnitKill(auto780C586B_var);
        lv_unitID = (lv_unitID + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DroneControlPharaohant_Init () {
    gt_DroneControlPharaohant = TriggerCreate("gt_DroneControlPharaohant_Func");
    TriggerAddEventUnitAbility(gt_DroneControlPharaohant, null, AbilityCommand("DroneControl", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Ability Pickup
//--------------------------------------------------------------------------------------------------
bool gt_MoveAbilityPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_dirtModelOnCarrier;
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) - 30.0));
    libNtve_gf_MakeUnitFacePoint(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitTargetUnit()), 5.0, UnitGetPosition(EventUnit())), 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(EventUnitTargetUnit()), libNtve_gf_SetScale(0.1, 0.1, 0.1, 1.0));
    UnitBehaviorAdd(EventUnit(), "CarryingDirt", EventUnit(), 1);
    lv_dirtX = FloorI((PointGetX(UnitGetPosition(EventUnitTargetUnit())) * 0.5));
    lv_dirtY = FloorI((PointGetY(UnitGetPosition(EventUnitTargetUnit())) * 0.5));
    gf_Activatedirt(lv_dirtX, lv_dirtY);
    lv_x = PointGetX(UnitGetPosition(EventUnitTargetUnit()));
    lv_y = PointGetY(UnitGetPosition(EventUnitTargetUnit()));
    VisRevealArea(UnitGetOwner(EventUnit()), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 1.2, false);
    Wait(0.0, c_timeGame);
    UnitSetCustomValue(EventUnit(), gv_hpOfMoveddirtunitabilityCustomvalue, ((UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLife, c_unitPropCurrent) / UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLifeMax, c_unitPropCurrent)) * 100.0));
    UnitKill(EventUnitTargetUnit());
    libNtve_gf_AttachModelToUnit(EventUnit(), "AEvoDirt", "Ref_Target 02");
    lv_dirtModelOnCarrier = libNtve_gf_ActorLastCreated();
    ActorSend(lv_dirtModelOnCarrier, libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
    ActorSend(lv_dirtModelOnCarrier, libNtve_gf_AliasAdd("CarriedDirt"));
    ActorSend(lv_dirtModelOnCarrier, libNtve_gf_SetScale(0.7, 0.7, 0.7, 2.0));
    UnitAbilityAddCooldown(EventUnit(), "MoveAbilityUp", "Abil/MoveAbility", 20.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveAbilityPickup_Init () {
    gt_MoveAbilityPickup = TriggerCreate("gt_MoveAbilityPickup_Func");
    TriggerAddEventUnitAbility(gt_MoveAbilityPickup, null, AbilityCommand("MoveAbilityUp", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Move Ability Dropoff
//--------------------------------------------------------------------------------------------------
bool gt_MoveAbilityDropoff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "CarryingDirt") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "CarryingDirt", 1);
    libNtve_gf_MakeUnitFacePoint(EventUnit(), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitCreatedUnit()), 5.0, UnitGetPosition(EventUnit())), 0.0);
    UnitSetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnitCreatedUnit(), c_unitPropLife, c_unitPropCurrent) * (UnitGetCustomValue(EventUnit(), gv_hpOfMoveddirtunitabilityCustomvalue) / 100.0)));
    ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), "CarriedDirt"), libNtve_gf_SetScale(0.1, 0.1, 0.1, 2.0));
    ActorSend(libNtve_gf_MainActorofUnit(EventUnitCreatedUnit()), libNtve_gf_SetScale(0.1, 0.1, 0.1, 0.0));
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetPaused(false));
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    ActorSend(libNtve_gf_MainActorofUnit(EventUnitCreatedUnit()), libNtve_gf_SetScale(0.8, 0.8, 0.35, 2.0));
    libNtve_gf_KillModel(ActorFromScope(ActorScopeFromUnit(EventUnitCreatedUnit()), "CarriedDirt"));
    Wait(2.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), libNtve_gf_AnimSetPaused(true));
    UnitSetOwner(EventUnitCreatedUnit(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MoveAbilityDropoff_Init () {
    gt_MoveAbilityDropoff = TriggerCreate("gt_MoveAbilityDropoff_Func");
    TriggerAddEventUnitCreated(gt_MoveAbilityDropoff, null, "AbilityQueenBuilds", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: When Dirt Dies Create Random Dirt Death Model then destroy it
//--------------------------------------------------------------------------------------------------
bool gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor[4] lv_unitdeathmodel;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Dirt") || (UnitGetType(EventUnit()) == "DirtMoved")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("DirtDeath1", UnitGetPosition(EventUnit()));
    lv_unitdeathmodel[1] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("DirtDeath2", UnitGetPosition(EventUnit()));
    lv_unitdeathmodel[2] = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("DirtDeath3", UnitGetPosition(EventUnit()));
    lv_unitdeathmodel[3] = libNtve_gf_ActorLastCreated();
    Wait(3.0, c_timeGame);
    libNtve_gf_KillModel(lv_unitdeathmodel[1]);
    libNtve_gf_KillModel(lv_unitdeathmodel[2]);
    libNtve_gf_KillModel(lv_unitdeathmodel[3]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit_Init () {
    gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit = TriggerCreate("gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit_Func");
    TriggerAddEventUnitDied(gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rapid Mutation - Ghost Ant
//--------------------------------------------------------------------------------------------------
bool gt_RapidMutationGhostAnt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + 25.0));
    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell");
    SoundPlayOnUnitForPlayer(SoundLink("Changeling_Ready", -1), c_maxPlayers, PlayerGroupAll(), EventUnit(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RapidMutationGhostAnt_Init () {
    gt_RapidMutationGhostAnt = TriggerCreate("gt_RapidMutationGhostAnt_Func");
    TriggerAddEventUnitAbility(gt_RapidMutationGhostAnt, null, AbilityCommand("RapidMutation", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attach Ability Icon
//--------------------------------------------------------------------------------------------------
bool gt_AttachAbilityIcon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abilityDialog;
    int lv_alphaOfDialog;
    string lv_abilityImage;

    // Automatic Variable Declarations
    playergroup auto665D9607_g;
    int auto665D9607_var;
    const int auto70692B3D_n = 50;
    int auto70692B3D_i;

    // Variable Initialization
    lv_abilityDialog = c_invalidDialogId;
    lv_alphaOfDialog = 100;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DialogCreateAEvo(76, 76, c_anchorCenter, 0, 0, false);
    auto665D9607_g = PlayerGroupActive();
    auto665D9607_var = -1;
    while (true) {
        auto665D9607_var = PlayerGroupNextPlayer(auto665D9607_g, auto665D9607_var);
        if (auto665D9607_var < 0) { break; }
        if ((UnitFilterMatch(EventUnit(), auto665D9607_var, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterNeutral), 0)) == true)) {
            DialogSetVisible(DialogLastCreated(), PlayerGroupAlliance(c_playerGroupAlly, auto665D9607_var), true);
        }

    }
    lv_abilityDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetPositionRelativeToUnitWithAnchor(DialogLastCreated(), EventUnit(), "Ref_Overhead", c_anchorCenter, 0, -100);
    if ((EventUnitAbility() == AbilityCommand("AcidicStrikes", 0))) {
        lv_abilityImage = "Assets\\Textures\\btn-ability-zerg-corrosiveblast.dds";
    }
    else if ((EventUnitAbility() == AbilityCommand("PsiStorm", 0))) {
        lv_abilityImage = "Assets\\Textures\\btn-ability-zerg-darkswarm.dds";
    }
    else if ((EventUnitAbility() == AbilityCommand("QueenBuild2", 5))) {
        lv_abilityImage = "Assets\\Textures\\btn-ability-zerg-armoraura.dds";
    }
    else if ((EventUnitAbility() == AbilityCommand("RepelEnemyAnts", 0))) {
        lv_abilityImage = "Assets\\Textures\\CustomAbilityIcons\\SprayCanIcon.dds";
    }
    else if ((EventUnitAbility() == AbilityCommand("DroneControl", 0))) {
        lv_abilityImage = "Assets\\Textures\\CustomAbilityIcons\\Drone Control.dds";
    }
    else if ((EventUnitAbility() == AbilityCommand("RapidMutation", 0))) {
        lv_abilityImage = "Assets\\Textures\\CustomAbilityIcons\\Stock Icon 3.dds";
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, 0, 0, StringToText(""), lv_abilityImage, c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    for (auto70692B3D_i = 1; auto70692B3D_i <= auto70692B3D_n; auto70692B3D_i += 1) {
        DialogSetTransparency(lv_abilityDialog, (100 - lv_alphaOfDialog));
        lv_alphaOfDialog = (lv_alphaOfDialog - 2);
        DialogSetPositionRelativeToUnitWithAnchor(DialogLastCreated(), EventUnit(), "Ref_Overhead", c_anchorCenter, 0, (-100 + (-100 + (2 * lv_alphaOfDialog))));
        Wait(0.01, c_timeGame);
    }
    DialogSetVisible(lv_abilityDialog, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AttachAbilityIcon_Init () {
    gt_AttachAbilityIcon = TriggerCreate("gt_AttachAbilityIcon_Func");
    TriggerAddEventUnitAbility(gt_AttachAbilityIcon, null, AbilityCommand("AcidicStrikes", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_AttachAbilityIcon, null, AbilityCommand("PsiStorm", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_AttachAbilityIcon, null, AbilityCommand("QueenBuild2", 5), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_AttachAbilityIcon, null, AbilityCommand("RepelEnemyAnts", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_AttachAbilityIcon, null, AbilityCommand("DroneControl", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_AttachAbilityIcon, null, AbilityCommand("RapidMutation", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Repel Ants - Leaf Cutter
//--------------------------------------------------------------------------------------------------
bool gt_RepelAntsLeafCutter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_enemyUnitsAroundTriggeringQueen;

    // Automatic Variable Declarations
    const int auto2F5931A9_n = 3;
    int auto2F5931A9_i;
    unitgroup auto1D48C900_g;
    int auto1D48C900_u;
    unit auto1D48C900_var;
    unitgroup auto3CB22463_g;
    int auto3CB22463_u;
    unit auto3CB22463_var;
    unitgroup auto7233CEE7_g;
    int auto7233CEE7_u;
    unit auto7233CEE7_var;

    // Variable Initialization
    lv_enemyUnitsAroundTriggeringQueen = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto2F5931A9_i = 1; auto2F5931A9_i <= auto2F5931A9_n; auto2F5931A9_i += 1) {
        auto1D48C900_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", EventPlayer(), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(EventUnit()), 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1D48C900_u = UnitGroupCount(auto1D48C900_g, c_unitCountAll);
        for (;; auto1D48C900_u -= 1) {
            auto1D48C900_var = UnitGroupUnitFromEnd(auto1D48C900_g, auto1D48C900_u);
            if (auto1D48C900_var == null) { break; }
            if (((UnitGetType(auto1D48C900_var) == "Zergling") || (UnitGetType(auto1D48C900_var) == "Drone"))) {
                UnitGroupAdd(lv_enemyUnitsAroundTriggeringQueen, auto1D48C900_var);
            }

        }
        auto3CB22463_g = lv_enemyUnitsAroundTriggeringQueen;
        auto3CB22463_u = UnitGroupCount(auto3CB22463_g, c_unitCountAll);
        for (;; auto3CB22463_u -= 1) {
            auto3CB22463_var = UnitGroupUnitFromEnd(auto3CB22463_g, auto3CB22463_u);
            if (auto3CB22463_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(auto3CB22463_var, true);
            UnitIssueOrder(auto3CB22463_var, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnit()), 5.0, UnitGetPosition(auto3CB22463_var))), c_orderQueueReplace);
        }
        Wait(1.5, c_timeGame);
        auto7233CEE7_g = lv_enemyUnitsAroundTriggeringQueen;
        auto7233CEE7_u = UnitGroupCount(auto7233CEE7_g, c_unitCountAll);
        for (;; auto7233CEE7_u -= 1) {
            auto7233CEE7_var = UnitGroupUnitFromEnd(auto7233CEE7_g, auto7233CEE7_u);
            if (auto7233CEE7_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(auto7233CEE7_var, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RepelAntsLeafCutter_Init () {
    gt_RepelAntsLeafCutter = TriggerCreate("gt_RepelAntsLeafCutter_Func");
    TriggerAddEventUnitAbility(gt_RepelAntsLeafCutter, null, AbilityCommand("RepelEnemyAnts", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall finish - Creep
//--------------------------------------------------------------------------------------------------
bool gt_WallfinishCreep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_position;
    region lv_nearbyCurrentWall;
    fixed lv_x;
    fixed lv_y;
    int lv_wallCount;
    int lv_dirtCount;

    // Automatic Variable Declarations
    fixed auto62FBE965_ae;
    const fixed auto62FBE965_ai = 2.0;
    fixed auto783E2D23_ae;
    const fixed auto783E2D23_ai = 2.0;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_position = EventUnitTargetPoint();
    auto62FBE965_ae = (PointGetX(lv_position) + 2.0);
    lv_x = (PointGetX(lv_position) - 2.0);
    for ( ; ( (auto62FBE965_ai >= 0 && lv_x <= auto62FBE965_ae) || (auto62FBE965_ai < 0 && lv_x >= auto62FBE965_ae) ) ; lv_x += auto62FBE965_ai ) {
        auto783E2D23_ae = (PointGetY(lv_position) + 2.0);
        lv_y = (PointGetY(lv_position) - 2.0);
        for ( ; ( (auto783E2D23_ai >= 0 && lv_y <= auto783E2D23_ae) || (auto783E2D23_ai < 0 && lv_y >= auto783E2D23_ae) ) ; lv_y += auto783E2D23_ai ) {
            lv_nearbyCurrentWall = RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0));
            lv_wallCount = UnitGroupCount(UnitGroup("Wall", c_playerAny, lv_nearbyCurrentWall, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            lv_dirtCount = UnitGroupCount(UnitGroup("Dirt", c_playerAny, lv_nearbyCurrentWall, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
            if ((lv_dirtCount >= 1)) {
                lv_dirtCount += 1;
            }

            if (((lv_wallCount + lv_dirtCount) >= 4)) {
                CreepModify(Point(lv_x, lv_y), 0.9, true, true);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WallfinishCreep_Init () {
    gt_WallfinishCreep = TriggerCreate("gt_WallfinishCreep_Func");
    TriggerAddEventUnitAbility(gt_WallfinishCreep, null, AbilityCommand("BuildWoodWall", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel wall
//--------------------------------------------------------------------------------------------------
bool gt_Cancelwall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(UnitGroupUnit(UnitGroup("Wall", c_playerAny, RegionCircle(EventUnitTargetPoint(), 0.2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1));
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergy, (UnitGetPropertyFixed(EventUnit(), c_unitPropEnergy, c_unitPropCurrent) + (gv_wallEnergyCost - 2.0)));
    UnitSetPosition(EventUnit(), gv_queenWallBuildStartPosition[UnitGetOwner(EventUnit())], true);
    Wait(0.0, c_timeGame);
    UnitSetPosition(EventUnit(), gv_queenWallBuildStartPosition[UnitGetOwner(EventUnit())], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Cancelwall_Init () {
    gt_Cancelwall = TriggerCreate("gt_Cancelwall_Func");
    TriggerAddEventUnitAbility(gt_Cancelwall, null, AbilityCommand("BuildWoodWall", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dig
//--------------------------------------------------------------------------------------------------
bool gt_Dig_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dirtX = FloorI((PointGetX(UnitGetPosition(EventUnitTargetUnit())) * 0.5));
    lv_dirtY = FloorI((PointGetY(UnitGetPosition(EventUnitTargetUnit())) * 0.5));
    gf_Activatedirt(lv_dirtX, lv_dirtY);
    lv_x = PointGetX(UnitGetPosition(EventUnitTargetUnit()));
    lv_y = PointGetY(UnitGetPosition(EventUnitTargetUnit()));
    VisRevealArea(UnitGetOwner(EventUnit()), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 1.2, false);
    Wait(0.0, c_timeGame);
    UnitKill(EventUnitTargetUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dig_Init () {
    gt_Dig = TriggerCreate("gt_Dig_Func");
    TriggerAddEventUnitAbility(gt_Dig, null, AbilityCommand("Dig", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(gt_Dig, null, AbilityCommand("DigGraveDigger", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen acidic strikes start
//--------------------------------------------------------------------------------------------------
bool gt_Queenacidicstrikesstart_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponAdd(EventUnit(), "AcidicSpine", null);
    UnitWeaponRemove(EventUnit(), "TalonsMissile");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Queenacidicstrikesstart_Init () {
    gt_Queenacidicstrikesstart = TriggerCreate("gt_Queenacidicstrikesstart_Func");
    TriggerAddEventUnitBehaviorChange(gt_Queenacidicstrikesstart, null, "AcidicStrikes", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen acidic strikes end
//--------------------------------------------------------------------------------------------------
bool gt_Queenacidicstrikesend_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitWeaponAdd(EventUnit(), "TalonsMissile", null);
    UnitWeaponRemove(EventUnit(), "AcidicSpine");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Queenacidicstrikesend_Init () {
    gt_Queenacidicstrikesend = TriggerCreate("gt_Queenacidicstrikesend_Func");
    TriggerAddEventUnitBehaviorChange(gt_Queenacidicstrikesend, null, "AcidicStrikes", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Mutagenic Bite
//--------------------------------------------------------------------------------------------------
bool gt_UnlockMutagenicBite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(EventPlayer(), "FireAnt", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel3", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mutagenicBiteUnlocked[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockMutagenicBite_Init () {
    gt_UnlockMutagenicBite = TriggerCreate("gt_UnlockMutagenicBite_Func");
    TriggerAddEventUnitAbility(gt_UnlockMutagenicBite, null, AbilityCommand("evolutionchamberresearch", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UnlockMutagenicBite, null, AbilityCommand("evolutionchamberresearch", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Passive Plant a plant
//--------------------------------------------------------------------------------------------------
bool gt_UnlockPassivePlantaplant_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(EventPlayer(), "LeafCutterAnt", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel3", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_passivePlantaplantUnlocked[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockPassivePlantaplant_Init () {
    gt_UnlockPassivePlantaplant = TriggerCreate("gt_UnlockPassivePlantaplant_Func");
    TriggerAddEventUnitAbility(gt_UnlockPassivePlantaplant, null, AbilityCommand("evolutionchamberresearch", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UnlockPassivePlantaplant, null, AbilityCommand("evolutionchamberresearch", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Spirits of the graveyard
//--------------------------------------------------------------------------------------------------
bool gt_UnlockSpiritsofthegraveyard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((TechTreeUpgradeCount(EventPlayer(), "GhostAnt", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel3", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_passiveSpiritsofthegraveyardUnlocked[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockSpiritsofthegraveyard_Init () {
    gt_UnlockSpiritsofthegraveyard = TriggerCreate("gt_UnlockSpiritsofthegraveyard_Func");
    TriggerAddEventUnitAbility(gt_UnlockSpiritsofthegraveyard, null, AbilityCommand("evolutionchamberresearch", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_UnlockSpiritsofthegraveyard, null, AbilityCommand("evolutionchamberresearch", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spirits of the graveyard
//--------------------------------------------------------------------------------------------------
bool gt_Spiritsofthegraveyard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_respawnedunit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Zergling") && (gv_passiveSpiritsofthegraveyardUnlocked[EventPlayer()] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mutagenicBiteUnlocked[EventPlayer()] == true)) {
    }

    if ((gv_spiritsofthegraveyardNumber[EventPlayer()] == 9)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(EventUnit()), c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(EventUnit()));
        lv_respawnedunit = UnitLastCreated();
        UnitBehaviorAdd(lv_respawnedunit, "Spiritofthegraveyard", lv_respawnedunit, 1);
        gv_spiritsofthegraveyardNumber[EventPlayer()] = 0;
        Wait(120.0, c_timeGame);
        UnitKill(lv_respawnedunit);
    }
    else {
        gv_spiritsofthegraveyardNumber[EventPlayer()] = (gv_spiritsofthegraveyardNumber[EventPlayer()] + 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spiritsofthegraveyard_Init () {
    gt_Spiritsofthegraveyard = TriggerCreate("gt_Spiritsofthegraveyard_Func");
    TriggerAddEventUnitDied(gt_Spiritsofthegraveyard, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mutagenic Bite
//--------------------------------------------------------------------------------------------------
bool gt_MutagenicBite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Zergling") && (gv_mutagenicBiteUnlocked[UnitGetOwner(EventUnit())] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_mutagenicBiteNumber[UnitGetOwner(EventUnit())] == 9)) {
        UnitBehaviorAdd(EventUnit(), "MutagenicBite", EventUnit(), 1);
        libNtve_gf_SendActorMessageToUnit(EventUnit(), libNtve_gf_SetScale(2.5, 2.5, 2.5, 3.0));
        gv_mutagenicBiteNumber[EventPlayer()] = 0;
    }
    else {
        gv_mutagenicBiteNumber[EventPlayer()] = (gv_mutagenicBiteNumber[EventPlayer()] + 1);
    }
    Wait(2.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MutagenicBite_Init () {
    gt_MutagenicBite = TriggerCreate("gt_MutagenicBite_Func");
    TriggerAddEventUnitAbility(gt_MutagenicBite, null, AbilityCommand("MorphToSoldier", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_MutagenicBite, null, AbilityCommand("MorphToSoldierFast", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Speed Cycle
//--------------------------------------------------------------------------------------------------
bool gt_SpeedCycle_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unitgroup[7] lv_soldiersOfPlayer;

    // Automatic Variable Declarations
    playergroup auto94731503_g;
    int auto94731503_var;
    unitgroup autoDC3FCA04_g;
    int autoDC3FCA04_u;
    unit autoDC3FCA04_var;
    unitgroup autoDC2240D4_g;
    int autoDC2240D4_u;
    unit autoDC2240D4_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_soldiersOfPlayer[init_i] = UnitGroupEmpty();
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        auto94731503_g = PlayerGroupActive();
        auto94731503_var = -1;
        while (true) {
            auto94731503_var = PlayerGroupNextPlayer(auto94731503_g, auto94731503_var);
            if (auto94731503_var < 0) { break; }
            lv_soldiersOfPlayer[auto94731503_var] = UnitGroup("Zergling", auto94731503_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if (((TechTreeUpgradeCount(auto94731503_var, "BlackAnt", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(auto94731503_var, "ZergMeleeWeaponsLevel3", c_techCountCompleteOnly) == 1) && (TechTreeUpgradeCount(auto94731503_var, "ZergGroundArmorsLevel3", c_techCountCompleteOnly) == 1))) {
                autoDC3FCA04_g = lv_soldiersOfPlayer[auto94731503_var];
                autoDC3FCA04_u = UnitGroupCount(autoDC3FCA04_g, c_unitCountAll);
                for (;; autoDC3FCA04_u -= 1) {
                    autoDC3FCA04_var = UnitGroupUnitFromEnd(autoDC3FCA04_g, autoDC3FCA04_u);
                    if (autoDC3FCA04_var == null) { break; }
                    UnitBehaviorAdd(autoDC3FCA04_var, "SpeedCycle", autoDC3FCA04_var, 1);
                }
                Wait(10.0, c_timeGame);
                autoDC2240D4_g = lv_soldiersOfPlayer[auto94731503_var];
                autoDC2240D4_u = UnitGroupCount(autoDC2240D4_g, c_unitCountAll);
                for (;; autoDC2240D4_u -= 1) {
                    autoDC2240D4_var = UnitGroupUnitFromEnd(autoDC2240D4_g, autoDC2240D4_u);
                    if (autoDC2240D4_var == null) { break; }
                    UnitBehaviorRemove(autoDC2240D4_var, "SpeedCycle", 1);
                }
                Wait(50.0, c_timeGame);
            }
            else {
                Wait(60.0, c_timeGame);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpeedCycle_Init () {
    gt_SpeedCycle = TriggerCreate("gt_SpeedCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill escaped queens
//--------------------------------------------------------------------------------------------------
bool gt_Killescapedqueens_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_dirtMapValue;
    int lv_dirtX;
    int lv_dirtY;
    unit lv_queen;
    unitgroup lv_queenGroup;
    unitgroup lv_blackQueens;
    unitgroup lv_fireQueens;
    unitgroup lv_woodQueens;
    unitgroup lv_pharaohQueens;
    unitgroup lv_leafCutterQueens;
    unitgroup lv_ghostQueens;
    unit lv_currentUnit;
    fixed lv_xOffset;
    fixed lv_yOffset;
    point lv_visPoint;

    // Automatic Variable Declarations
    playergroup autoABF4736A_g;
    const fixed auto421D213F_ae = 1.0;
    const fixed auto421D213F_ai = 0.5;
    const fixed auto4BD0674D_ae = 1.0;
    const fixed auto4BD0674D_ai = 0.5;

    // Variable Initialization
    lv_queenGroup = UnitGroupEmpty();
    lv_blackQueens = UnitGroupEmpty();
    lv_fireQueens = UnitGroupEmpty();
    lv_woodQueens = UnitGroupEmpty();
    lv_pharaohQueens = UnitGroupEmpty();
    lv_leafCutterQueens = UnitGroupEmpty();
    lv_ghostQueens = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        autoABF4736A_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoABF4736A_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            Wait(0.0, c_timeGame);
            lv_queenGroup = UnitGroup("Queen", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            lv_blackQueens = UnitGroup("QueenBlackAnt", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_queenGroup, lv_blackQueens);
            lv_fireQueens = UnitGroup("QueenFireAnt", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_queenGroup, lv_fireQueens);
            lv_woodQueens = UnitGroup("QueenWoodAnt", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_queenGroup, lv_woodQueens);
            lv_pharaohQueens = UnitGroup("QueenPharaohAnt", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_queenGroup, lv_pharaohQueens);
            lv_leafCutterQueens = UnitGroup("QueenLeafCutterAnt", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_queenGroup, lv_leafCutterQueens);
            lv_ghostQueens = UnitGroup("QueenGhostAnt", lv_currentPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            UnitGroupAddUnitGroup(lv_queenGroup, lv_ghostQueens);
            lv_xOffset = 0.0;
            for ( ; ( (auto421D213F_ai >= 0 && lv_xOffset <= auto421D213F_ae) || (auto421D213F_ai < 0 && lv_xOffset >= auto421D213F_ae) ) ; lv_xOffset += auto421D213F_ai ) {
                lv_yOffset = 0.0;
                for ( ; ( (auto4BD0674D_ai >= 0 && lv_yOffset <= auto4BD0674D_ae) || (auto4BD0674D_ai < 0 && lv_yOffset >= auto4BD0674D_ae) ) ; lv_yOffset += auto4BD0674D_ai ) {
                    if ((UnitGroupCount(lv_queenGroup, c_unitCountAlive) >= 1)) {
                        lv_queen = UnitGroupUnit(lv_queenGroup, 1);
                        lv_dirtX = FloorI(((PointGetX(UnitGetPosition(lv_queen)) + lv_xOffset) * 0.5));
                        lv_dirtY = FloorI(((PointGetY(UnitGetPosition(lv_queen)) + lv_yOffset) * 0.5));
                        lv_dirtMapValue = gv_dirtMap[lv_dirtX][lv_dirtY];
                        if ((lv_dirtMapValue == 1) && (lv_dirtX >= 2) && (lv_dirtY >= 2) && (lv_dirtX <= 65) && (lv_dirtY <= 65)) {
                            lv_visPoint = UnitGetPosition(lv_queen);
                            UnitSetPosition(lv_queen, gv_queenWallBuildStartPosition[lv_currentPlayer], true);
                            Wait(0.0, c_timeGame);
                            UnitKill(lv_queen);
                            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, gv_queenWallBuildStartPosition[lv_currentPlayer]);
                            VisExploreArea(lv_currentPlayer, RegionCircle(lv_visPoint, 10.0), false, false);
                            Wait(0.0, c_timeGame);
                            VisExploreArea(lv_currentPlayer, RegionCircle(lv_visPoint, 10.0), false, false);
                        }

                    }

                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Killescapedqueens_Init () {
    gt_Killescapedqueens = TriggerCreate("gt_Killescapedqueens_Func");
    TriggerAddEventTimeElapsed(gt_Killescapedqueens, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade forager nest to farm
//--------------------------------------------------------------------------------------------------
bool gt_Upgradeforagernesttofarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    int lv_id;
    unit lv_nest;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto76A03B0E_g;
    int auto76A03B0E_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FarmCostIncrease", (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FarmCostIncrease", c_techCountCompleteOnly) + 1));
    UnitSetCustomValue(EventUnit(), gv_farmUpgraded, 1.0);
    lv_nest = EventUnit();
    lv_id = FixedToInt(UnitGetCustomValue(lv_nest, gv_iD));
    auto76A03B0E_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "WorkerEgg", "", c_playerAny, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto76A03B0E_u = UnitGroupCount(auto76A03B0E_g, c_unitCountAll);
    for (;; auto76A03B0E_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto76A03B0E_g, auto76A03B0E_u);
        if (lv_currentUnit == null) { break; }
        if ((lv_id == FixedToInt(UnitGetCustomValue(lv_currentUnit, gv_iD)))) {
            UnitRemove(lv_currentUnit);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgradeforagernesttofarm_Init () {
    gt_Upgradeforagernesttofarm = TriggerCreate("gt_Upgradeforagernesttofarm_Func");
    TriggerAddEventUnitAbility(gt_Upgradeforagernesttofarm, null, AbilityCommand("UpgradeToFoodGenerator", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade forager nest to subterranean trail
//--------------------------------------------------------------------------------------------------
bool gt_Upgradeforagernesttosubterraneantrail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    int lv_id;
    unit lv_nest;
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup auto766D15B4_g;
    int auto766D15B4_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "SubterraneanTrailCostIncrease", (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "SubterraneanTrailCostIncrease", c_techCountCompleteOnly) + 1));
    UnitSetCustomValue(EventUnit(), gv_subterraneanTrailUpgraded, 1.0);
    lv_nest = EventUnit();
    lv_id = FixedToInt(UnitGetCustomValue(lv_nest, gv_iD));
    auto766D15B4_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Drone", "", "", c_playerAny, -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto766D15B4_u = UnitGroupCount(auto766D15B4_g, c_unitCountAll);
    for (;; auto766D15B4_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto766D15B4_g, auto766D15B4_u);
        if (lv_currentUnit == null) { break; }
        if ((lv_id == FixedToInt(UnitGetCustomValue(lv_currentUnit, gv_iD)))) {
            gf_Cloakforager(lv_currentUnit);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Upgradeforagernesttosubterraneantrail_Init () {
    gt_Upgradeforagernesttosubterraneantrail = TriggerCreate("gt_Upgradeforagernesttosubterraneantrail_Func");
    TriggerAddEventUnitAbility(gt_Upgradeforagernesttosubterraneantrail, null, AbilityCommand("UpgradeToSubterraneanTrail", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Collection Food Activator
//--------------------------------------------------------------------------------------------------
bool gt_DoubleCollectionFoodActivator_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_DoubleCollectionFoodApplier, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleCollectionFoodActivator_Init () {
    gt_DoubleCollectionFoodActivator = TriggerCreate("gt_DoubleCollectionFoodActivator_Func");
    TriggerAddEventUnitAbility(gt_DoubleCollectionFoodActivator, null, AbilityCommand("EvolveQueenUpgrades", 27), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Double Collection Food Applier
//--------------------------------------------------------------------------------------------------
bool gt_DoubleCollectionFoodApplier_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TechTreeUpgradeCount(EventPlayer(), "DoubleCollectionincome", c_techCountCompleteOnly) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperSetTo, (PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) + 10));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DoubleCollectionFoodApplier_Init () {
    gt_DoubleCollectionFoodApplier = TriggerCreate("gt_DoubleCollectionFoodApplier_Func");
    TriggerEnable(gt_DoubleCollectionFoodApplier, false);
    TriggerAddEventUnitAbility(gt_DoubleCollectionFoodApplier, null, AbilityCommand("DroneHarvest", 1), c_abilHarvestStageDropOff, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select Soldiers\Workers Owned By This Nest
//--------------------------------------------------------------------------------------------------
bool gt_SelectSoldiersWorkersOwnedByThisNest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    unitgroup lv_unitsSpawnedByThisNest;
    unitgroup lv_unitsBasedonnesttype;
    actor lv_eggModel;

    // Automatic Variable Declarations
    unitgroup auto0E93197D_g;
    int auto0E93197D_u;
    unit auto0E93197D_var;

    // Variable Initialization
    lv_x = PointGetX(UnitGetPosition(EventUnit()));
    lv_y = PointGetY(UnitGetPosition(EventUnit()));
    lv_unitsSpawnedByThisNest = UnitGroupEmpty();
    lv_unitsBasedonnesttype = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitAbility() == AbilityCommand("SelectWorkersOfThisNest", 0))) {
        lv_unitsBasedonnesttype = UnitGroup("Drone", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if ((EventUnitAbility() == AbilityCommand("SelectSoldiersOfThisNest", 0))) {
        lv_unitsBasedonnesttype = UnitGroup("Zergling", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    auto0E93197D_g = lv_unitsBasedonnesttype;
    auto0E93197D_u = UnitGroupCount(auto0E93197D_g, c_unitCountAll);
    for (;; auto0E93197D_u -= 1) {
        auto0E93197D_var = UnitGroupUnitFromEnd(auto0E93197D_g, auto0E93197D_u);
        if (auto0E93197D_var == null) { break; }
        if ((lv_x == UnitGetCustomValue(auto0E93197D_var, gv_x)) && (lv_y == UnitGetCustomValue(auto0E93197D_var, gv_y))) {
            UnitGroupAdd(lv_unitsSpawnedByThisNest, auto0E93197D_var);
        }

    }
    if ((UnitGroupCount(lv_unitsSpawnedByThisNest, c_unitCountAlive) != 0)) {
        libNtve_gf_CreateModelAtPoint("Egg", UnitGetPosition(EventUnit()));
        lv_eggModel = libNtve_gf_ActorLastCreated();
        ActorSend(lv_eggModel, libNtve_gf_SetScale(3.0, 3.0, 2.0, 0.0));
        ActorSend(lv_eggModel, libNtve_gf_SetScale(0.2, 0.2, 1.0, 3.0));
        ActorSend(lv_eggModel, libNtve_gf_SetOpacity(0.0, 3.0));
        UnitSelect(EventUnit(), EventPlayer(), false);
        UnitGroupSelect(lv_unitsSpawnedByThisNest, EventPlayer(), true);
        Wait(3.0, c_timeGame);
        libNtve_gf_KillModel(lv_eggModel);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SelectSoldiersWorkersOwnedByThisNest_Init () {
    gt_SelectSoldiersWorkersOwnedByThisNest = TriggerCreate("gt_SelectSoldiersWorkersOwnedByThisNest_Func");
    TriggerAddEventUnitAbility(gt_SelectSoldiersWorkersOwnedByThisNest, null, AbilityCommand("SelectWorkersOfThisNest", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(gt_SelectSoldiersWorkersOwnedByThisNest, null, AbilityCommand("SelectSoldiersOfThisNest", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: When Tunnel Trembler uses Pebbel Drop. create Pebbel drop model at target Location
//--------------------------------------------------------------------------------------------------
bool gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_rockModelActor;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.6, c_timeGame);
    libNtve_gf_CreateActorAtPoint("PebbelDropVisualEffect", EventUnitTargetPoint());
    lv_rockModelActor = libNtve_gf_ActorLastCreated();
    Wait(6.0, c_timeGame);
    libNtve_gf_KillModel(lv_rockModelActor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation_Init () {
    gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation = TriggerCreate("gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation_Func");
    TriggerAddEventUnitAbility(gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation, null, AbilityCommand("RavagerCorrosiveBile", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enable stat recording
//--------------------------------------------------------------------------------------------------
bool gt_Enablestatrecording_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_enemyCount;

    // Automatic Variable Declarations
    playergroup autoB51CAAC1_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") || (GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006"))) {
        if ((((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0005") && (PlayerGroupCount(PlayerGroupActive()) == 6)) || ((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0006") && (PlayerGroupCount(PlayerGroupActive()) == 4)))) {
            gv_statRecordingEnabled = true;
        }
        else {
            gv_statRecordingEnabled = false;
            if ((gv_skipStatWarning == false)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/168EF755"));
                SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
                gf_Endrankednostats();
            }

        }
    }
    else {
        autoB51CAAC1_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoB51CAAC1_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_enemyCount += PlayerGroupCount(PlayerGroupAlliance(c_playerGroupEnemy, lv_currentPlayer));
        }
        if ((lv_enemyCount >= 1)) {
            gv_statRecordingEnabled = true;
        }
        else {
            gv_statRecordingEnabled = false;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4310A851"));
            SoundPlayForPlayer(SoundLink("UI_Void_Tech_Click_Down_1", -1), c_maxPlayers, PlayerGroupActive(), 100.0, 0.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Enablestatrecording_Init () {
    gt_Enablestatrecording = TriggerCreate("gt_Enablestatrecording_Func");
    TriggerAddEventTimeElapsed(gt_Enablestatrecording, 15.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Food
//--------------------------------------------------------------------------------------------------
bool gt_RespawnFood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_typeOfUnitToRespawn;
    unit lv_diedUnit;
    point lv_positionofDiedUnit;
    int lv_amountofanimalstosetwaittowaitA;
    int lv_amountofanimalstosetwaittowaitB;
    int lv_waitAlways;
    int lv_waitAtime;
    int lv_waitBtime;
    region lv_curentRespawnRegion;
    unitgroup lv_preexistingFoodInCurentRespawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_diedUnit = EventUnit();
    lv_positionofDiedUnit = UnitGetPosition(lv_diedUnit);
    lv_amountofanimalstosetwaittowaitA = 10;
    lv_amountofanimalstosetwaittowaitB = 20;
    lv_waitAlways = (100 + RandomInt(1, 82));
    lv_waitAtime = 140;
    lv_waitBtime = ((lv_waitAtime / 4) * 7);
    lv_preexistingFoodInCurentRespawnRegion = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((gv_initializationDone == true) && ((UnitGetType(lv_diedUnit) == "MineralField") || (UnitGetType(lv_diedUnit) == "PlantFood"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_diedUnit) == "MineralField")) {
        lv_typeOfUnitToRespawn = "SpaceCowSmall";
    }
    else if ((UnitGetType(lv_diedUnit) == "PlantFood")) {
        lv_typeOfUnitToRespawn = "PlantFood";
    }
    if ((UnitGroupCount(UnitGroup("Plantation", c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 4.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) != 0)) {
        return true;
        MinimapPing(PlayerGroupAll(), gv_absoluteCenterpoint, 5.0, Color(100.00, 0.00, 0.00));
    }

    if ((RegionContainsPoint(gv_nEMapCornerRespawn, UnitGetPosition(EventUnit())) == true)) {
        lv_curentRespawnRegion = gv_nEMapCornerRespawn;
    }
    else if ((RegionContainsPoint(gv_sEMapCornerRespawn, UnitGetPosition(EventUnit())) == true)) {
        lv_curentRespawnRegion = gv_sEMapCornerRespawn;
    }
    else if ((RegionContainsPoint(gv_sWMapCornerRespawn, UnitGetPosition(EventUnit())) == true)) {
        lv_curentRespawnRegion = gv_sWMapCornerRespawn;
    }
    else if ((RegionContainsPoint(gv_nWMapCornerRespawn, UnitGetPosition(EventUnit())) == true)) {
        lv_curentRespawnRegion = gv_nWMapCornerRespawn;
    }
    if ((UnitGetType(EventUnit()) == "MineralField")) {
        lv_preexistingFoodInCurentRespawnRegion = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("SpaceCowSmall", "MineralField", "", 0, -1, lv_curentRespawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else if ((UnitGetType(EventUnit()) == "PlantFood")) {
        lv_preexistingFoodInCurentRespawnRegion = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("PlantFood", "", "", 0, -1, lv_curentRespawnRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    if ((UnitGroupCount(lv_preexistingFoodInCurentRespawnRegion, c_unitCountAlive) > lv_amountofanimalstosetwaittowaitA)) {
        Wait(lv_waitAtime, c_timeGame);
    }

    if ((UnitGroupCount(lv_preexistingFoodInCurentRespawnRegion, c_unitCountAlive) > lv_amountofanimalstosetwaittowaitB)) {
        Wait(lv_waitBtime, c_timeGame);
    }

    Wait(lv_waitAlways, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeOfUnitToRespawn, c_unitCreateIgnorePlacement, 0, lv_positionofDiedUnit);
    if ((UnitGetType(UnitLastCreated()) == "SpaceCowSmall")) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitLastCreated()), libNtve_gf_ModelSwap(gf_FoodModelForMapgen(), 1));
    }

    if ((lv_typeOfUnitToRespawn == "SpaceCowSmall")) {
        UnitBehaviorAdd(UnitLastCreated(), "CritterWanderLeashShort", UnitLastCreated(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnFood_Init () {
    gt_RespawnFood = TriggerCreate("gt_RespawnFood_Func");
    TriggerAddEventUnitRemoved(gt_RespawnFood, null);
    TriggerAddEventUnitDied(gt_RespawnFood, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire ant resource score
//--------------------------------------------------------------------------------------------------
bool gt_Fireantresourcescore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    fixed lv_score;

    // Automatic Variable Declarations
    playergroup auto6D2F141C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.5, c_timeGame);
        auto6D2F141C_g = PlayerGroupActive();
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(auto6D2F141C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            while ((gv_fireAntResourceScore[lv_currentPlayer] >= 100)) {
                gv_fireAntResourceScore[lv_currentPlayer] -= 100;
                PlayerCreateEffectPoint(lv_currentPlayer, "GiveFood100", Point(0.0, 0.0));
            }
            while ((gv_fireAntResourceScore[lv_currentPlayer] >= 30)) {
                gv_fireAntResourceScore[lv_currentPlayer] -= 30;
                PlayerCreateEffectPoint(lv_currentPlayer, "GiveFood30", Point(0.0, 0.0));
            }
            while ((gv_fireAntResourceScore[lv_currentPlayer] >= 10)) {
                gv_fireAntResourceScore[lv_currentPlayer] -= 10;
                PlayerCreateEffectPoint(lv_currentPlayer, "GiveFood10", Point(0.0, 0.0));
            }
            while ((gv_fireAntResourceScore[lv_currentPlayer] >= 4)) {
                gv_fireAntResourceScore[lv_currentPlayer] -= 4;
                PlayerCreateEffectPoint(lv_currentPlayer, "GiveFood4", Point(0.0, 0.0));
            }
            while ((gv_fireAntResourceScore[lv_currentPlayer] >= 2)) {
                gv_fireAntResourceScore[lv_currentPlayer] -= 2;
                PlayerCreateEffectPoint(lv_currentPlayer, "GiveFood2", Point(0.0, 0.0));
            }
            while ((gv_fireAntResourceScore[lv_currentPlayer] >= 1)) {
                gv_fireAntResourceScore[lv_currentPlayer] -= 1;
                PlayerCreateEffectPoint(lv_currentPlayer, "GiveFood1", Point(0.0, 0.0));
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Fireantresourcescore_Init () {
    gt_Fireantresourcescore = TriggerCreate("gt_Fireantresourcescore_Func");
    TriggerAddEventMapInit(gt_Fireantresourcescore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player leaves -  Recalculate Main Winchances&winrates
//--------------------------------------------------------------------------------------------------
bool gt_PlayerleavesRecalculateMainWinchanceswinrates_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RecalculateMainWinchanceswinrates();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerleavesRecalculateMainWinchanceswinrates_Init () {
    gt_PlayerleavesRecalculateMainWinchanceswinrates = TriggerCreate("gt_PlayerleavesRecalculateMainWinchanceswinrates_Func");
    TriggerAddEventPlayerLeft(gt_PlayerleavesRecalculateMainWinchanceswinrates, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player leaves - increase games won
//--------------------------------------------------------------------------------------------------
bool gt_Playerleavesincreasegameswon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_playerHasAIAllies;

    // Automatic Variable Declarations
    playergroup auto35815111_g;
    int auto35815111_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto35815111_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    auto35815111_var = -1;
    while (true) {
        auto35815111_var = PlayerGroupNextPlayer(auto35815111_g, auto35815111_var);
        if (auto35815111_var < 0) { break; }
        if ((PlayerType(auto35815111_var) == c_playerTypeComputer)) {
            lv_playerHasAIAllies = true;
        }

    }
    if ((lv_playerHasAIAllies == false)) {
        if ((gv_isthisgame1v1AIvsHard == true)) {
            gv__1v1AIvsHardGamesWon[EventPlayer()] = (gv__1v1AIvsHardGamesWon[EventPlayer()] + 1);
        }
        else if ((gv_isthisgame2v4AIvsVeryHard == true)) {
            gv__2v4AIvsVeryHardGamesWon[EventPlayer()] = (gv__2v4AIvsVeryHardGamesWon[EventPlayer()] + 1);
        }
    }

    if ((gf_IsThisPlayerInEditor(EventPlayer()) || ((gv_initializationDone == true) && (gv_amountofplayersthegamestartedwith >= 4) && gf_DoesthematchcontrainonlyrealplayersNOAI()))) {
        gv_amountOfGamesWon[EventPlayer()] = (gv_amountOfGamesWon[EventPlayer()] + 1);
        if ((TechTreeUpgradeCount(EventPlayer(), "BlackAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsBlackant[EventPlayer()] = (gv_amountOfGamesWonAsBlackant[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "FireAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsFireAnt[EventPlayer()] = (gv_amountOfGamesWonAsFireAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "WoodAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsWoodAnt[EventPlayer()] = (gv_amountOfGamesWonAsWoodAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "LeafCutterAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsLeafCutterAnt[EventPlayer()] = (gv_amountOfGamesWonAsLeafCutterAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "PharaohAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsPharaohAnt[EventPlayer()] = (gv_amountOfGamesWonAsPharaohAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "GhostAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsGhostAnt[EventPlayer()] = (gv_amountOfGamesWonAsGhostAnt[EventPlayer()] + 1);
        }
        if ((TechTreeUpgradeCount(EventPlayer(), "ChosenRandomQueen", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesWonAsRandomAnt[EventPlayer()] = (gv_amountOfGamesWonAsRandomAnt[EventPlayer()] + 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerleavesincreasegameswon_Init () {
    gt_Playerleavesincreasegameswon = TriggerCreate("gt_Playerleavesincreasegameswon_Func");
    TriggerAddEventPlayerLeft(gt_Playerleavesincreasegameswon, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player leaves - increase games played
//--------------------------------------------------------------------------------------------------
bool gt_Playerleavesincreasegamesplayed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_IsThisPlayerInEditor(EventPlayer()) || ((gv_initializationDone == true) && (gv_amountofplayersthegamestartedwith >= 4) && gf_DoesthematchcontrainonlyrealplayersNOAI()))) {
        gv_amountOfGamesPlayed[EventPlayer()] = (gv_amountOfGamesPlayed[EventPlayer()] + 1);
        if ((TechTreeUpgradeCount(EventPlayer(), "BlackAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsBlackant[EventPlayer()] = (gv_amountOfGamesPlayedAsBlackant[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "FireAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsFireAnt[EventPlayer()] = (gv_amountOfGamesPlayedAsFireAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "WoodAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsWoodAnt[EventPlayer()] = (gv_amountOfGamesPlayedAsWoodAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "LeafCutterAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsLeafCutterAnt[EventPlayer()] = (gv_amountOfGamesPlayedAsLeafCutterAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "PharaohAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsPharaohAnt[EventPlayer()] = (gv_amountOfGamesPlayedAsPharaohAnt[EventPlayer()] + 1);
        }
        else if ((TechTreeUpgradeCount(EventPlayer(), "GhostAnt", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsGhostAnt[EventPlayer()] = (gv_amountOfGamesPlayedAsGhostAnt[EventPlayer()] + 1);
        }
        if ((TechTreeUpgradeCount(EventPlayer(), "ChosenRandomQueen", c_techCountCompleteOnly) == 1)) {
            gv_amountOfGamesPlayedAsRandomAnt[EventPlayer()] = (gv_amountOfGamesPlayedAsRandomAnt[EventPlayer()] + 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Playerleavesincreasegamesplayed_Init () {
    gt_Playerleavesincreasegamesplayed = TriggerCreate("gt_Playerleavesincreasegamesplayed_Func");
    TriggerAddEventPlayerLeft(gt_Playerleavesincreasegamesplayed, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Alliance changes - Change Ally Counter
//--------------------------------------------------------------------------------------------------
bool gt_AlliancechangesChangeAllyCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    text lv_currentPlayerName;
    playergroup lv_allyGroup;
    int lv_allyCount;
    int lv_otherPlayer;
    text lv_otherPlayerName;
    int lv_i;
    text lv_combinedAlerttext;

    // Automatic Variable Declarations
    playergroup autoE582E413_g;

    // Variable Initialization
    lv_allyGroup = PlayerGroupEmpty();
    lv_combinedAlerttext = PlayerName(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("[bnet:local/0.0/273101]1") == "0002"))) {
            return false;
        }

        if (!((gv_announceAlliances == true))) {
            return false;
        }

        if (!((PlayerType(EventPlayer()) == c_playerTypeUser))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(PlayerGroupActive(), EventPlayer()) == true))) {
            return false;
        }

        if (!((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())) != gv_previousAllyCount[EventPlayer()]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPlayer = EventPlayer();
    lv_currentPlayerName = TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false)));
    lv_allyGroup = PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer);
    lv_allyCount = PlayerGroupCount(lv_allyGroup);
    SoundPlayForPlayer(SoundLink("AllianceChangeWarningSound", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())) == 0)) {
        lv_combinedAlerttext = (lv_combinedAlerttext + (StringExternal("Param/Value/495438D0") + StringExternal("Param/Value/051D3D48")));
    }
    else if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())) == 1)) {
        lv_combinedAlerttext = (lv_combinedAlerttext + (StringExternal("Param/Value/C80F486A") + StringExternal("Param/Value/9F2F7535")));
    }
    else if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())) >= 2)) {
        lv_combinedAlerttext = (lv_combinedAlerttext + (StringExternal("Param/Value/9A757660") + StringExternal("Param/Value/47D7C104") + IntToText(PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()))) + StringExternal("Param/Value/35F13748")));
    }
    lv_combinedAlerttext = (lv_combinedAlerttext + (StringExternal("Param/Value/2AA521A1") + gf_ReturnTextColorIdecOfPlayersAlliesForPlayer(EventPlayer()) + StringExternal("Param/Value/501CF71C")));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lv_combinedAlerttext);
    autoE582E413_g = PlayerGroupAll();
    lv_currentPlayer = -1;
    while (true) {
        lv_currentPlayer = PlayerGroupNextPlayer(autoE582E413_g, lv_currentPlayer);
        if (lv_currentPlayer < 0) { break; }
        gv_previousAllyCount[lv_currentPlayer] = PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AlliancechangesChangeAllyCounter_Init () {
    gt_AlliancechangesChangeAllyCounter = TriggerCreate("gt_AlliancechangesChangeAllyCounter_Func");
    TriggerAddEventPlayerAllianceChange(gt_AlliancechangesChangeAllyCounter, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player leaves - Save
//--------------------------------------------------------------------------------------------------
bool gt_PlayerleavesSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;
    int lv_p;
    int lv_currentTeam;
    int lv_otherTeam;

    // Automatic Variable Declarations
    playergroup autoA90D1F18_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(gv_deadPlayerGroup, EventPlayer());
    gv_announceAlliances = false;
    if ((gv_statRecordingEnabled == true)) {
        if ((gf_MatchIsRanked() == true)) {
            gf_Modifyratingofplayer(EventPlayer(), false);
            if ((gv_playerWon[EventPlayer()] == true)) {
                GameOver(EventPlayer(), c_gameOverVictory, false, true);
            }
            else {
                GameOver(EventPlayer(), c_gameOverDefeat, false, true);
            }
        }

    }
    else {
        GameOver(EventPlayer(), c_gameOverTie, false, true);
    }
    gf_Savebankforplayer(EventPlayer());
    Wait(0.0, c_timeGame);
    autoA90D1F18_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoA90D1F18_g, lv_p);
        if (lv_p < 0) { break; }
        libNtve_gf_SetAlliance(EventPlayer(), lv_p, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetAlliance(EventPlayer(), c_allianceIdPassive, lv_p, true);
    }
    Wait(0.0, c_timeGame);
    gv_announceAlliances = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerleavesSave_Init () {
    gt_PlayerleavesSave = TriggerCreate("gt_PlayerleavesSave_Func");
    TriggerAddEventPlayerLeft(gt_PlayerleavesSave, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player leaves - Remove units
//--------------------------------------------------------------------------------------------------
bool gt_PlayerleavesRemoveunits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_currentUnit;

    // Automatic Variable Declarations
    unitgroup autoEB00118E_g;
    int autoEB00118E_u;
    unitgroup auto7D5F04CD_g;
    int auto7D5F04CD_u;
    unitgroup autoEB552DC3_g;
    int autoEB552DC3_u;
    unitgroup auto6A701B4A_g;
    int auto6A701B4A_u;
    unitgroup autoB42E510C_g;
    int autoB42E510C_u;
    unitgroup auto9B090ACB_g;
    int auto9B090ACB_u;
    unitgroup autoC81C358C_g;
    int autoC81C358C_u;
    unitgroup autoBDE19E39_g;
    int autoBDE19E39_u;
    unitgroup auto6E3B0BAC_g;
    int auto6E3B0BAC_u;
    unitgroup auto0EA30AE5_g;
    int auto0EA30AE5_u;
    unitgroup autoBA6F45C6_g;
    int autoBA6F45C6_u;
    unitgroup autoFA6ADF1F_g;
    int autoFA6ADF1F_u;
    unitgroup autoEB540873_g;
    int autoEB540873_u;
    unitgroup auto0213E9D0_g;
    int auto0213E9D0_u;
    unitgroup autoE4D5497D_g;
    int autoE4D5497D_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0, c_timeGame);
    Wait(0.0, c_timeGame);
    autoEB00118E_g = UnitGroup("WorkerEgg", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB00118E_u = UnitGroupCount(autoEB00118E_g, c_unitCountAll);
    for (;; autoEB00118E_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoEB00118E_g, autoEB00118E_u);
        if (lv_currentUnit == null) { break; }
        UnitRemove(lv_currentUnit);
    }
    auto7D5F04CD_g = UnitGroup("SoldierEgg", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7D5F04CD_u = UnitGroupCount(auto7D5F04CD_g, c_unitCountAll);
    for (;; auto7D5F04CD_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto7D5F04CD_g, auto7D5F04CD_u);
        if (lv_currentUnit == null) { break; }
        UnitRemove(lv_currentUnit);
    }
    autoEB552DC3_g = UnitGroup("AcidSprayerEgg", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEB552DC3_u = UnitGroupCount(autoEB552DC3_g, c_unitCountAll);
    for (;; autoEB552DC3_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(autoEB552DC3_g, autoEB552DC3_u);
        if (lv_currentUnit == null) { break; }
        UnitRemove(lv_currentUnit);
    }
    auto6A701B4A_g = UnitGroup("Drone", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6A701B4A_u = UnitGroupCount(auto6A701B4A_g, c_unitCountAll);
    for (;; auto6A701B4A_u -= 1) {
        lv_currentUnit = UnitGroupUnitFromEnd(auto6A701B4A_g, auto6A701B4A_u);
        if (lv_currentUnit == null) { break; }
        if ((UnitHasBehavior2(lv_currentUnit, "SubterraneanTrail2") == true)) {
            UnitRemove(lv_currentUnit);
        }

    }
    if ((gf_MatchIsRanked() == true)) {
        autoC81C358C_g = UnitGroup("Queen", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC81C358C_u = UnitGroupCount(autoC81C358C_g, c_unitCountAll);
        for (;; autoC81C358C_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoC81C358C_g, autoC81C358C_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        autoBDE19E39_g = UnitGroup("QueenBlackAnt", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBDE19E39_u = UnitGroupCount(autoBDE19E39_g, c_unitCountAll);
        for (;; autoBDE19E39_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoBDE19E39_g, autoBDE19E39_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        auto6E3B0BAC_g = UnitGroup("QueenFireAnt", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6E3B0BAC_u = UnitGroupCount(auto6E3B0BAC_g, c_unitCountAll);
        for (;; auto6E3B0BAC_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto6E3B0BAC_g, auto6E3B0BAC_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        auto0EA30AE5_g = UnitGroup("QueenWoodAnt", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0EA30AE5_u = UnitGroupCount(auto0EA30AE5_g, c_unitCountAll);
        for (;; auto0EA30AE5_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto0EA30AE5_g, auto0EA30AE5_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        autoBA6F45C6_g = UnitGroup("QueenPharaohAnt", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoBA6F45C6_u = UnitGroupCount(autoBA6F45C6_g, c_unitCountAll);
        for (;; autoBA6F45C6_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoBA6F45C6_g, autoBA6F45C6_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        autoFA6ADF1F_g = UnitGroup("QueenLeafCutterAnt", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFA6ADF1F_u = UnitGroupCount(autoFA6ADF1F_g, c_unitCountAll);
        for (;; autoFA6ADF1F_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoFA6ADF1F_g, autoFA6ADF1F_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        autoEB540873_g = UnitGroup("QueenGhostAnt", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEB540873_u = UnitGroupCount(autoEB540873_g, c_unitCountAll);
        for (;; autoEB540873_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoEB540873_g, autoEB540873_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        auto0213E9D0_g = UnitGroup("NewQueen", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0213E9D0_u = UnitGroupCount(auto0213E9D0_g, c_unitCountAll);
        for (;; auto0213E9D0_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto0213E9D0_g, auto0213E9D0_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
        autoE4D5497D_g = UnitGroup("RavagerCocoon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE4D5497D_u = UnitGroupCount(autoE4D5497D_g, c_unitCountAll);
        for (;; autoE4D5497D_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoE4D5497D_g, autoE4D5497D_u);
            if (lv_currentUnit == null) { break; }
            UnitKill(lv_currentUnit);
        }
    }
    else {
        autoB42E510C_g = UnitGroup("NewQueen", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB42E510C_u = UnitGroupCount(autoB42E510C_g, c_unitCountAll);
        for (;; autoB42E510C_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(autoB42E510C_g, autoB42E510C_u);
            if (lv_currentUnit == null) { break; }
            UnitRemove(lv_currentUnit);
        }
        auto9B090ACB_g = UnitGroup("RavagerCocoon", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9B090ACB_u = UnitGroupCount(auto9B090ACB_g, c_unitCountAll);
        for (;; auto9B090ACB_u -= 1) {
            lv_currentUnit = UnitGroupUnitFromEnd(auto9B090ACB_g, auto9B090ACB_u);
            if (lv_currentUnit == null) { break; }
            UnitRemove(lv_currentUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerleavesRemoveunits_Init () {
    gt_PlayerleavesRemoveunits = TriggerCreate("gt_PlayerleavesRemoveunits_Func");
    TriggerAddEventPlayerLeft(gt_PlayerleavesRemoveunits, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability dig
//--------------------------------------------------------------------------------------------------
bool gt_Abilitydig_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_Dig[lv_currentPlayer] += 1;
    gv_kills_Dirt[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    gv_currentMatch_DirtDestroyed[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilitydig_Init () {
    gt_Abilitydig = TriggerCreate("gt_Abilitydig_Func");
    TriggerAddEventUnitAbility(gt_Abilitydig, null, AbilityCommand("Dig", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability acidic strikes
//--------------------------------------------------------------------------------------------------
bool gt_Abilityacidicstrikes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_AcidicStrikes[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityacidicstrikes_Init () {
    gt_Abilityacidicstrikes = TriggerCreate("gt_Abilityacidicstrikes_Func");
    TriggerAddEventUnitAbility(gt_Abilityacidicstrikes, null, AbilityCommand("AcidicStrikes", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability venom spray
//--------------------------------------------------------------------------------------------------
bool gt_Abilityvenomspray_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_VenomSpray[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityvenomspray_Init () {
    gt_Abilityvenomspray = TriggerCreate("gt_Abilityvenomspray_Func");
    TriggerAddEventUnitAbility(gt_Abilityvenomspray, null, AbilityCommand("PsiStorm", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability build wall
//--------------------------------------------------------------------------------------------------
bool gt_Abilitybuildwall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_BuildWall[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilitybuildwall_Init () {
    gt_Abilitybuildwall = TriggerCreate("gt_Abilitybuildwall_Func");
    TriggerAddEventUnitAbility(gt_Abilitybuildwall, null, AbilityCommand("BuildWoodWall", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade forager nest (Farm)
//--------------------------------------------------------------------------------------------------
bool gt_AbilityupgradeforagernestFarm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeForagerNest[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += 20;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbilityupgradeforagernestFarm_Init () {
    gt_AbilityupgradeforagernestFarm = TriggerCreate("gt_AbilityupgradeforagernestFarm_Func");
    TriggerAddEventUnitAbility(gt_AbilityupgradeforagernestFarm, null, AbilityCommand("UpgradeToFoodGenerator", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade forager nest (S. Trail)
//--------------------------------------------------------------------------------------------------
bool gt_AbilityupgradeforagernestSTrail_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeSubterraneanTrail[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += 20;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbilityupgradeforagernestSTrail_Init () {
    gt_AbilityupgradeforagernestSTrail = TriggerCreate("gt_AbilityupgradeforagernestSTrail_Func");
    TriggerAddEventUnitAbility(gt_AbilityupgradeforagernestSTrail, null, AbilityCommand("UpgradeToSubterraneanTrail", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade soldier nest
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradesoldiernest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeSoldierNest[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += 80;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradesoldiernest_Init () {
    gt_Abilityupgradesoldiernest = TriggerCreate("gt_Abilityupgradesoldiernest_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradesoldiernest, null, AbilityCommand("UpgradeSoldierCount", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade broodling spawner
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradebroodlingspawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeBroodlingSpawner[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += 20;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradebroodlingspawner_Init () {
    gt_Abilityupgradebroodlingspawner = TriggerCreate("gt_Abilityupgradebroodlingspawner_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradebroodlingspawner, null, AbilityCommand("UpgradeSlowingAura", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade unit damage 1
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradeunitdamage1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeUnitDamage[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(0) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradeunitdamage1_Init () {
    gt_Abilityupgradeunitdamage1 = TriggerCreate("gt_Abilityupgradeunitdamage1_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradeunitdamage1, null, AbilityCommand("evolutionchamberresearch", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade unit damage 2
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradeunitdamage2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeUnitDamage[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(1) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradeunitdamage2_Init () {
    gt_Abilityupgradeunitdamage2 = TriggerCreate("gt_Abilityupgradeunitdamage2_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradeunitdamage2, null, AbilityCommand("evolutionchamberresearch", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade unit damage 3
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradeunitdamage3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeUnitDamage[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(2) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradeunitdamage3_Init () {
    gt_Abilityupgradeunitdamage3 = TriggerCreate("gt_Abilityupgradeunitdamage3_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradeunitdamage3, null, AbilityCommand("evolutionchamberresearch", 2), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade unit armor 1
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradeunitarmor1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeUnitArmor[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(3) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradeunitarmor1_Init () {
    gt_Abilityupgradeunitarmor1 = TriggerCreate("gt_Abilityupgradeunitarmor1_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradeunitarmor1, null, AbilityCommand("evolutionchamberresearch", 3), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade unit armor 2
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradeunitarmor2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeUnitArmor[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(4) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradeunitarmor2_Init () {
    gt_Abilityupgradeunitarmor2 = TriggerCreate("gt_Abilityupgradeunitarmor2_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradeunitarmor2, null, AbilityCommand("evolutionchamberresearch", 4), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade unit armor 3
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradeunitarmor3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeUnitArmor[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += CatalogFieldValueGetAsInt(c_gameCatalogAbil, "evolutionchamberresearch", "InfoArray[" + IntToString(5) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradeunitarmor3_Init () {
    gt_Abilityupgradeunitarmor3 = TriggerCreate("gt_Abilityupgradeunitarmor3_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradeunitarmor3, null, AbilityCommand("evolutionchamberresearch", 5), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability upgrade soldier speed
//--------------------------------------------------------------------------------------------------
bool gt_Abilityupgradesoldierspeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_ability_UpgradeSoldierSpeed[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += 100;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Abilityupgradesoldierspeed_Init () {
    gt_Abilityupgradesoldierspeed = TriggerCreate("gt_Abilityupgradesoldierspeed_Func");
    TriggerAddEventUnitAbility(gt_Abilityupgradesoldierspeed, null, AbilityCommand("SpawningPoolResearch", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce queen black
//--------------------------------------------------------------------------------------------------
bool gt_Producequeenblack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_QueenBlack[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producequeenblack_Init () {
    gt_Producequeenblack = TriggerCreate("gt_Producequeenblack_Func");
    TriggerAddEventUnitAbility(gt_Producequeenblack, null, AbilityCommand("MorphToQueen", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce queen fire
//--------------------------------------------------------------------------------------------------
bool gt_Producequeenfire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_QueenFire[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producequeenfire_Init () {
    gt_Producequeenfire = TriggerCreate("gt_Producequeenfire_Func");
    TriggerAddEventUnitAbility(gt_Producequeenfire, null, AbilityCommand("MorphToQueenFire", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce queen wood
//--------------------------------------------------------------------------------------------------
bool gt_Producequeenwood_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_QueenWood[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producequeenwood_Init () {
    gt_Producequeenwood = TriggerCreate("gt_Producequeenwood_Func");
    TriggerAddEventUnitAbility(gt_Producequeenwood, null, AbilityCommand("MorphToQueenWood", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce wall
//--------------------------------------------------------------------------------------------------
bool gt_Producewall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_Wall[lv_currentPlayer] += 1;
    gv_currentMatch_WallsBuilt[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producewall_Init () {
    gt_Producewall = TriggerCreate("gt_Producewall_Func");
    TriggerAddEventUnitAbility(gt_Producewall, null, AbilityCommand("BuildWoodWall", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce forager
//--------------------------------------------------------------------------------------------------
bool gt_Produceforager_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_Forager[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Produceforager_Init () {
    gt_Produceforager = TriggerCreate("gt_Produceforager_Func");
    TriggerAddEventUnitAbility(gt_Produceforager, null, AbilityCommand("MorphToForager", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce soldier
//--------------------------------------------------------------------------------------------------
bool gt_Producesoldier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_Soldier[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producesoldier_Init () {
    gt_Producesoldier = TriggerCreate("gt_Producesoldier_Func");
    TriggerAddEventUnitAbility(gt_Producesoldier, null, AbilityCommand("MorphToSoldier", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_Producesoldier, null, AbilityCommand("MorphToSoldierFast", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce acid sprayer
//--------------------------------------------------------------------------------------------------
bool gt_Produceacidsprayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Locust"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_AcidSprayer[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Produceacidsprayer_Init () {
    gt_Produceacidsprayer = TriggerCreate("gt_Produceacidsprayer_Func");
    TriggerAddEventUnitCreated(gt_Produceacidsprayer, null, "AcidSprayerNestTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce major
//--------------------------------------------------------------------------------------------------
bool gt_Producemajor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Ultralisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_Major[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_record_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("Ultralisk", c_unitCostMinerals);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producemajor_Init () {
    gt_Producemajor = TriggerCreate("gt_Producemajor_Func");
    TriggerAddEventUnitCreated(gt_Producemajor, null, "MajorNestTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce stinger
//--------------------------------------------------------------------------------------------------
bool gt_Producestinger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "Hydralisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_Stinger[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_record_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("Hydralisk", c_unitCostMinerals);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producestinger_Init () {
    gt_Producestinger = TriggerCreate("gt_Producestinger_Func");
    TriggerAddEventUnitCreated(gt_Producestinger, null, "StingerNestTrain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce forager nest
//--------------------------------------------------------------------------------------------------
bool gt_Produceforagernest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewWorkerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_ForagerNest[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("NewWorkerNest", c_unitCostMinerals);
    gf_Checkformisaligned2x2(UnitGetPosition(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Produceforagernest_Init () {
    gt_Produceforagernest = TriggerCreate("gt_Produceforagernest_Func");
    TriggerAddEventUnitCreated(gt_Produceforagernest, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce soldier nest
//--------------------------------------------------------------------------------------------------
bool gt_Producesoldiernest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "NewSoldierNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_SoldierNest[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("NewSoldierNest", c_unitCostMinerals);
    gf_Checkformisaligned2x2(UnitGetPosition(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producesoldiernest_Init () {
    gt_Producesoldiernest = TriggerCreate("gt_Producesoldiernest_Func");
    TriggerAddEventUnitCreated(gt_Producesoldiernest, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce broodling spawner
//--------------------------------------------------------------------------------------------------
bool gt_Producebroodlingspawner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnitCreatedUnit()) == "MediumSpikeNest") || (UnitGetType(EventUnitCreatedUnit()) == "LargeSpikeNest")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_BroodlingSpawner[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    if ((UnitGetType(EventUnitCreatedUnit()) == "SmallSpikeNest")) {
        gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("SmallSpikeNest", c_unitCostMinerals);
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "MediumSpikeNest")) {
        gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("MediumSpikeNest", c_unitCostMinerals);
    }
    else if ((UnitGetType(EventUnitCreatedUnit()) == "LargeSpikeNest")) {
        gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("LargeSpikeNest", c_unitCostMinerals);
    }
    gf_Checkformisaligned2x2(UnitGetPosition(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producebroodlingspawner_Init () {
    gt_Producebroodlingspawner = TriggerCreate("gt_Producebroodlingspawner_Func");
    TriggerAddEventUnitCreated(gt_Producebroodlingspawner, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce major nest
//--------------------------------------------------------------------------------------------------
bool gt_Producemajornest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "UltraliskCavern"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_MajorNest[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("UltraliskCavern", c_unitCostMinerals);
    gf_Checkformisaligned3x3(UnitGetPosition(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producemajornest_Init () {
    gt_Producemajornest = TriggerCreate("gt_Producemajornest_Func");
    TriggerAddEventUnitCreated(gt_Producemajornest, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce stinger nest
//--------------------------------------------------------------------------------------------------
bool gt_Producestingernest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "StingerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_StingerNest[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("StingerNest", c_unitCostMinerals);
    gf_Checkformisaligned3x3(UnitGetPosition(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Producestingernest_Init () {
    gt_Producestingernest = TriggerCreate("gt_Producestingernest_Func");
    TriggerAddEventUnitCreated(gt_Producestingernest, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Produce acid sprayer nest
//--------------------------------------------------------------------------------------------------
bool gt_Produceacidsprayernest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AcidSprayerNest"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_produced_AcidSprayerNest[lv_currentPlayer] += 1;
    gv_currentMatch_UnitsProduced[lv_currentPlayer] += 1;
    gv_currentMatch_FoodSpent[lv_currentPlayer] += UnitTypeGetCost("AcidSprayerNest", c_unitCostMinerals);
    gf_Checkformisaligned3x3(UnitGetPosition(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Produceacidsprayernest_Init () {
    gt_Produceacidsprayernest = TriggerCreate("gt_Produceacidsprayernest_Func");
    TriggerAddEventUnitCreated(gt_Produceacidsprayernest, null, "QueenBuild2", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit killed
//--------------------------------------------------------------------------------------------------
bool gt_Unitkilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "CleaningBot"))) {
            return false;
        }

        if (!((UnitIsValid(libNtve_gf_KillingUnit()) == true))) {
            return false;
        }

        if (!((UnitGetOwner(libNtve_gf_KillingUnit()) != 14))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPlayer = UnitGetOwner(libNtve_gf_KillingUnit());
    if ((UnitGetType(EventUnit()) == "Queen") && (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "BlackAnt", c_techCountCompleteOnly) >= 1)) {
        gv_kills_QueenBlack[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Queen") && (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FireAnt", c_techCountCompleteOnly) >= 1)) {
        gv_kills_QueenFire[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Queen") && (TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "WoodAnt", c_techCountCompleteOnly) >= 1)) {
        gv_kills_QueenWood[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Drone")) {
        gv_kills_Forager[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Zergling")) {
        gv_kills_Soldier[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Ultralisk")) {
        gv_kills_Major[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Hydralisk")) {
        gv_kills_Stinger[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "NewWorkerNest")) {
        gv_kills_ForagerNest[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "NewSoldierNest")) {
        gv_kills_SoldierNest[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if (((UnitGetType(EventUnit()) == "SmallSpikeNest") || (UnitGetType(EventUnit()) == "MediumSpikeNest") || (UnitGetType(EventUnit()) == "LargeSpikeNest"))) {
        gv_kills_BroodlingSpawner[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "UltraliskCavern")) {
        gv_kills_MajorNest[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "StingerNest")) {
        gv_kills_StingerNest[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Dirt")) {
        gv_kills_Dirt[lv_currentPlayer] += 1;
        gv_currentMatch_DirtDestroyed[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "SpaceCowSmall")) {
        gv_kills_Quillgor[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Wall")) {
        gv_kills_Wall[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "Locust")) {
        gv_kills_AcidSprayer[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    else if ((UnitGetType(EventUnit()) == "AcidSprayerNest")) {
        gv_kills_AcidSprayerNest[lv_currentPlayer] += 1;
        gv_currentMatch_UnitsKilled[lv_currentPlayer] += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Unitkilled_Init () {
    gt_Unitkilled = TriggerCreate("gt_Unitkilled_Func");
    TriggerAddEventUnitDied(gt_Unitkilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize stats dialog
//--------------------------------------------------------------------------------------------------
bool gt_Initializestatsdialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    int lv_offsetY;
    int lv_offsetX;
    int lv_labelIndex;

    // Automatic Variable Declarations
    const int auto92D5FDD3_ae = 1210;
    const int auto92D5FDD3_ai = 290;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(1550, 600, c_anchorCenter, 0, -200, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_statsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1500, 550, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui-editoricon-hybridlabinner_6.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 220, 45, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/80A0DCD1"), "");
    gv_statsCloseButton = DialogControlLastCreated();
    lv_offsetX = 50;
    for ( ; ( (auto92D5FDD3_ai >= 0 && lv_offsetX <= auto92D5FDD3_ae) || (auto92D5FDD3_ai < 0 && lv_offsetX >= auto92D5FDD3_ae) ) ; lv_offsetX += auto92D5FDD3_ai ) {
        lv_labelIndex += 1;
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 280, 80, c_anchorTopLeft, lv_offsetX, 43, StringExternal("Param/Value/24643D75"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "VoteLabel", PlayerGroupAll());
        gv_statsHeaders[lv_labelIndex] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 450, c_anchorTopLeft, (lv_offsetX + 20), 125, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Config", PlayerGroupAll());
        gv_statsLabels[lv_labelIndex] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemText(gv_statsHeaders[1], StringExternal("Param/Value/57663DDD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsHeaders[2], StringExternal("Param/Value/A22AA59D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsHeaders[3], StringExternal("Param/Value/533C2BE5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsHeaders[4], StringExternal("Param/Value/4345DCD7"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsHeaders[5], StringExternal("Param/Value/EAAB11BC"), PlayerGroupAll());
    DialogCreate(77, 150, c_anchorTopRight, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_statsToggleDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 44, c_anchorCenter, 0, 0, StringExternal("Param/Value/7F94A7E7"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_available_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_available_normaloverpressedover.dds", PlayerGroupAll());
    gv_statsToggleButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 28, 28, c_anchorCenter, 0, 0, StringToText(""), "AntHeadIcon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initializestatsdialog_Init () {
    gt_Initializestatsdialog = TriggerCreate("gt_Initializestatsdialog_Func");
    TriggerAddEventMapInit(gt_Initializestatsdialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle stats
//--------------------------------------------------------------------------------------------------
bool gt_Togglestats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_wins;
    int lv_losses;
    int lv_arena1;
    int lv_arena2;
    int lv_arena3;
    int lv_arena4;
    text lv_text;
    int lv_currentPlayer;
    text lv_divider;
    text lv_end;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_divider = StringExternal("Param/Value/0ECFF99E");
    lv_end = StringExternal("Param/Value/1CC44CFA");

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsToggleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPlayer = EventPlayer();
    if ((DialogIsVisible(gv_statsDialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), false);
        lv_text = StringToText("");
        lv_text = (lv_text + StringExternal("Param/Value/7331D90F") + lv_divider + IntToText(gv_produced_QueenBlack[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/730A4270") + lv_divider + IntToText(gv_produced_QueenFire[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/E4E6EF84") + lv_divider + IntToText(gv_produced_QueenWood[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/64B1E3B8") + lv_divider + IntToText(gv_produced_ForagerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/D55E7357") + lv_divider + IntToText(gv_produced_Forager[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/2550E76A") + lv_divider + IntToText(gv_produced_SoldierNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/CA0874F7") + lv_divider + IntToText(gv_produced_Soldier[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/CD3B3686") + lv_divider + IntToText(gv_produced_BroodlingSpawner[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/1F9B769C") + lv_divider + IntToText(gv_produced_MajorNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/521E74C2") + lv_divider + IntToText(gv_produced_Major[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/9BE1E45F") + lv_divider + IntToText(gv_produced_StingerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/E6E26D90") + lv_divider + IntToText(gv_produced_Stinger[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/FCA63447") + lv_divider + IntToText(gv_produced_AcidSprayerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/86A08061") + lv_divider + IntToText(gv_produced_AcidSprayer[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/DA14F69D") + lv_divider + IntToText(gv_produced_Misaligned[lv_currentPlayer]) + lv_end);
        libNtve_gf_SetDialogItemText(gv_statsLabels[1], lv_text, PlayerGroupSingle(lv_currentPlayer));
        lv_text = StringToText("");
        lv_text = (lv_text + StringExternal("Param/Value/CA6F4371") + lv_divider + IntToText(gv_kills_QueenBlack[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/E4FA9086") + lv_divider + IntToText(gv_kills_QueenFire[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/0D26EB20") + lv_divider + IntToText(gv_kills_QueenWood[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/CB4AB109") + lv_divider + IntToText(gv_kills_ForagerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/A5FF4A64") + lv_divider + IntToText(gv_kills_Forager[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/99DF1FE0") + lv_divider + IntToText(gv_kills_SoldierNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/A162EEC0") + lv_divider + IntToText(gv_kills_Soldier[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/06417AAD") + lv_divider + IntToText(gv_kills_BroodlingSpawner[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/EBA68FD3") + lv_divider + IntToText(gv_kills_MajorNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/7F8D8F3B") + lv_divider + IntToText(gv_kills_Major[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/6BD04E17") + lv_divider + IntToText(gv_kills_StingerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/9749882B") + lv_divider + IntToText(gv_kills_Stinger[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/564A83E0") + lv_divider + IntToText(gv_kills_AcidSprayerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/E423249E") + lv_divider + IntToText(gv_kills_AcidSprayer[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/733ACF7E") + lv_divider + IntToText(gv_kills_Wall[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/DEF534ED") + lv_divider + IntToText(gv_kills_Dirt[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/C968B144") + lv_divider + IntToText(gv_kills_Quillgor[lv_currentPlayer]) + lv_end);
        libNtve_gf_SetDialogItemText(gv_statsLabels[2], lv_text, PlayerGroupSingle(lv_currentPlayer));
        lv_text = StringToText("");
        lv_text = (lv_text + StringExternal("Param/Value/CFE9F956") + lv_divider + IntToText(gv_ability_Dig[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/F218EE23") + lv_divider + IntToText(gv_ability_AcidicStrikes[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/54D1431F") + lv_divider + IntToText(gv_ability_VenomSpray[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/03B4CBB2") + lv_divider + IntToText(gv_ability_BuildWall[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/0463DB72") + lv_divider + IntToText(gv_ability_UpgradeForagerNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/B680E396") + lv_divider + IntToText(gv_ability_UpgradeSubterraneanTrail[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/834154D0") + lv_divider + IntToText(gv_ability_UpgradeSoldierNest[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/DDD7AC5D") + lv_divider + IntToText(gv_ability_UpgradeBroodlingSpawner[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/46F2A715") + lv_divider + IntToText(gv_ability_UpgradeUnitDamage[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/E8418F3A") + lv_divider + IntToText(gv_ability_UpgradeUnitArmor[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/27F56299") + lv_divider + IntToText(gv_ability_UpgradeSoldierSpeed[lv_currentPlayer]) + lv_end);
        libNtve_gf_SetDialogItemText(gv_statsLabels[3], lv_text, PlayerGroupSingle(lv_currentPlayer));
        lv_text = StringToText("");
        lv_text = (lv_text + StringExternal("Param/Value/8CD45BF6") + lv_divider + IntToText(gv_openAlliances_Wins[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/5D5E6703") + lv_divider + IntToText(gv_openAlliances_Losses[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/4E1AE1E2") + lv_divider + IntToText(CeilingI((gv_openAlliances_DurationPlayed[lv_currentPlayer] * 0.7246))) + StringExternal("Param/Value/6A90685C") + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/BE7C5486") + lv_divider + IntToText(gv_freeForAll_Wins[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/9981107B") + lv_divider + IntToText(gv_freeForAll_Losses[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/87269F04") + lv_divider + IntToText(CeilingI((gv_freeForAll_DurationPlayed[lv_currentPlayer] * 0.7246))) + StringExternal("Param/Value/280B28DB") + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/442C41F1") + lv_divider + IntToText(gv__2v2v2_Wins[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/FFADFD2B") + lv_divider + IntToText(gv__2v2v2_Losses[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/9794E8AE") + lv_divider + IntToText(CeilingI((gv__2v2v2_DurationPlayed[lv_currentPlayer] * 0.7246))) + StringExternal("Param/Value/13144CD5") + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/D500E04E") + lv_divider + IntToText(gv__3v3_Wins[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/200F5FB4") + lv_divider + IntToText(gv__3v3_Losses[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/9A6E37CD") + lv_divider + IntToText(CeilingI((gv__3v3_DurationPlayed[lv_currentPlayer] * 0.7246))) + StringExternal("Param/Value/3495183F") + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/FB5F0F1F") + lv_divider + IntToText(gv_ranked_Wins[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/B0D53F96") + lv_divider + IntToText(gv_ranked_Losses[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/142E5CDD") + lv_divider + IntToText(CeilingI((gv_ranked_DurationPlayed[lv_currentPlayer] * 0.7246))) + StringExternal("Param/Value/2E5993DB") + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/13529B05") + lv_divider + IntToText(CeilingI(gv_playerRatingOriginal[lv_currentPlayer])) + lv_end);
        libNtve_gf_SetDialogItemText(gv_statsLabels[4], lv_text, PlayerGroupSingle(lv_currentPlayer));
        lv_text = StringToText("");
        lv_text = (lv_text + StringExternal("Param/Value/8F2F95DF") + lv_divider + IntToText(gv_record_UnitsProduced[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/3DC29BDC") + lv_divider + IntToText(gv_record_UnitsKilled[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/930C2594") + lv_divider + IntToText(gv_record_FoodSpent[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/A67C462B") + lv_divider + IntToText(gv_record_DirtDestroyed[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/CF62A23B") + lv_divider + IntToText(gv_record_WallsBuilt[lv_currentPlayer]) + lv_end);
        lv_text = (lv_text + StringExternal("Param/Value/FA84A2A8") + lv_divider + IntToText(CeilingI((IntToFixed(gv_record_LongestMatch[lv_currentPlayer]) * 0.7246))) + StringExternal("Param/Value/577726C9") + lv_end);
        libNtve_gf_SetDialogItemText(gv_statsLabels[5], lv_text, PlayerGroupSingle(lv_currentPlayer));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Togglestats_Init () {
    gt_Togglestats = TriggerCreate("gt_Togglestats_Func");
    TriggerAddEventDialogControl(gt_Togglestats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide stats (Button)
//--------------------------------------------------------------------------------------------------
bool gt_HidestatsButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsCloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HidestatsButton_Init () {
    gt_HidestatsButton = TriggerCreate("gt_HidestatsButton_Func");
    TriggerAddEventDialogControl(gt_HidestatsButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide stats (Key)
//--------------------------------------------------------------------------------------------------
bool gt_HidestatsKey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HidestatsKey_Init () {
    gt_HidestatsKey = TriggerCreate("gt_HidestatsKey_Func");
    TriggerAddEventKeyPressed(gt_HidestatsKey, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize control group dialog
//--------------------------------------------------------------------------------------------------
bool gt_Initializecontrolgroupdialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_offsetX;
    int lv_offsetY;
    int lv_i;

    // Automatic Variable Declarations
    const int auto9416BDF4_ae = 12;
    const int auto9416BDF4_ai = 1;
    const int auto2E1EC645_ae = 6;
    const int auto2E1EC645_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(800, 600, c_anchorCenter, 0, -200, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_ctrlGroup_Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 750, 550, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui-editoricon-hybridlabinner_6.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 220, 45, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/D89E7B56"), "");
    gv_ctrlGroup_CloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 650, 80, c_anchorTop, 0, 43, StringExternal("Param/Value/3CC50CC0"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "VoteLabel", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 650, 80, c_anchorTop, 0, 105, StringExternal("Param/Value/1436713B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Config 2", PlayerGroupAll());
    lv_offsetX = -200;
    lv_offsetY = 180;
    lv_i = 1;
    for ( ; ( (auto9416BDF4_ai >= 0 && lv_i <= auto9416BDF4_ae) || (auto9416BDF4_ai < 0 && lv_i >= auto9416BDF4_ae) ) ; lv_i += auto9416BDF4_ai ) {
        if ((lv_i == 5)) {
            lv_offsetX = 0;
            lv_offsetY = 180;
        }

        if ((lv_i == 9)) {
            lv_offsetX = 200;
            lv_offsetY = 180;
        }

        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 80, c_anchorTop, lv_offsetX, lv_offsetY, StringExternal("Param/Value/03F7BCB8"), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Config 2", PlayerGroupAll());
        gv_ctrlGroup_PulldownLabels[lv_i] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        gv_ctrlGroup_Pulldowns[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, (lv_offsetX + 0), (lv_offsetY + 22));
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 47);
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D38EA0FD"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/9E392924"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/1468E153"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/99CA0ECD"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/6064FB4B"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/F728B9D6"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/BE0F1630"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/86ED9F73"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/DC14B443"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A4FDEA18"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/7192A24E"));
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        lv_offsetY += 72;
    }
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[1], StringExternal("Param/Value/E2A55A9B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[2], StringExternal("Param/Value/65181AC7"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[3], StringExternal("Param/Value/73E56D18"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[4], StringExternal("Param/Value/4526FB0B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[5], StringExternal("Param/Value/818D6A98"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[6], StringExternal("Param/Value/17F0E0F5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[7], StringExternal("Param/Value/D5BBF56C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[8], StringExternal("Param/Value/80A3D86A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[9], StringExternal("Param/Value/857D7953"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[10], StringExternal("Param/Value/4624D0F0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[11], StringExternal("Param/Value/5D6BDB9D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ctrlGroup_PulldownLabels[12], StringExternal("Param/Value/9EB861D6"), PlayerGroupAll());
    DialogCreate(77, 150, c_anchorTopRight, 0, 84, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_ctrlGroup_ToggleDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 44, c_anchorCenter, 0, 0, StringExternal("Param/Value/940B8713"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_available_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_available_normaloverpressedover.dds", PlayerGroupAll());
    gv_ctrlGroup_ToggleButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 28, 28, c_anchorCenter, 0, 0, StringToText(""), "CtrlGroupButton.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    Wait(0.1, c_timeGame);
    lv_i = 1;
    for ( ; ( (auto2E1EC645_ai >= 0 && lv_i <= auto2E1EC645_ae) || (auto2E1EC645_ai < 0 && lv_i >= auto2E1EC645_ae) ) ; lv_i += auto2E1EC645_ai ) {
        gv_ctrlGroup_DisablePulldownEvents[lv_i] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initializecontrolgroupdialog_Init () {
    gt_Initializecontrolgroupdialog = TriggerCreate("gt_Initializecontrolgroupdialog_Func");
    TriggerAddEventMapInit(gt_Initializecontrolgroupdialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle ctrl group config
//--------------------------------------------------------------------------------------------------
bool gt_Togglectrlgroupconfig_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    playergroup lv_currentPlayerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_currentPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_ctrlGroup_ToggleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPlayer = EventPlayer();
    lv_currentPlayerGroup = PlayerGroupSingle(EventPlayer());
    if ((DialogIsVisible(gv_ctrlGroup_Dialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        gv_ctrlGroup_DisablePulldownEvents[lv_currentPlayer] = true;
        DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[1], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_Queen[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[2], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_BroodlingSpawner[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[3], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_Major[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[4], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_MajorNest[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[5], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_Forager[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[6], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_ForagerNest[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[7], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_Stinger[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[8], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_StingerNest[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[9], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_Soldier[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[10], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_SoldierNest[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[11], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_AcidSprayer[lv_currentPlayer]));
        DialogControlSelectItem(gv_ctrlGroup_Pulldowns[12], lv_currentPlayerGroup, gf_CtrlGroupToPulldownIndex(gv_ctrlGroup_AcidSprayerNest[lv_currentPlayer]));
        Wait(0.0, c_timeGame);
        gv_ctrlGroup_DisablePulldownEvents[lv_currentPlayer] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Togglectrlgroupconfig_Init () {
    gt_Togglectrlgroupconfig = TriggerCreate("gt_Togglectrlgroupconfig_Func");
    TriggerAddEventDialogControl(gt_Togglectrlgroupconfig, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide ctrlgroupconfig (Button)
//--------------------------------------------------------------------------------------------------
bool gt_HidectrlgroupconfigButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_ctrlGroup_CloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HidectrlgroupconfigButton_Init () {
    gt_HidectrlgroupconfigButton = TriggerCreate("gt_HidectrlgroupconfigButton_Func");
    TriggerAddEventDialogControl(gt_HidectrlgroupconfigButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide ctrlgroupconfig (Key)
//--------------------------------------------------------------------------------------------------
bool gt_HidectrlgroupconfigKey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HidectrlgroupconfigKey_Init () {
    gt_HidectrlgroupconfigKey = TriggerCreate("gt_HidectrlgroupconfigKey_Func");
    TriggerAddEventKeyPressed(gt_HidectrlgroupconfigKey, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set control groups
//--------------------------------------------------------------------------------------------------
bool gt_Setcontrolgroups_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    int lv_i;
    int lv_pulldownIndex;

    // Automatic Variable Declarations
    const int autoDC1BD861_ae = 12;
    const int autoDC1BD861_ai = 1;

    // Variable Initialization
    lv_pulldownIndex = -1;

    // Conditions
    if (testConds) {
        if (!((gv_ctrlGroup_DisablePulldownEvents[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPlayer = EventPlayer();
    lv_i = 1;
    for ( ; ( (autoDC1BD861_ai >= 0 && lv_i <= autoDC1BD861_ae) || (autoDC1BD861_ai < 0 && lv_i >= autoDC1BD861_ae) ) ; lv_i += autoDC1BD861_ai ) {
        if ((EventDialogControl() == gv_ctrlGroup_Pulldowns[lv_i])) {
            lv_pulldownIndex = lv_i;
            break;
        }

    }
    if ((lv_pulldownIndex == -1)) {
        return true;
    }

    gv_ctrlGroup_Queen[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[1], lv_currentPlayer));
    gv_ctrlGroup_BroodlingSpawner[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[2], lv_currentPlayer));
    gv_ctrlGroup_Major[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[3], lv_currentPlayer));
    gv_ctrlGroup_MajorNest[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[4], lv_currentPlayer));
    gv_ctrlGroup_Forager[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[5], lv_currentPlayer));
    gv_ctrlGroup_ForagerNest[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[6], lv_currentPlayer));
    gv_ctrlGroup_Stinger[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[7], lv_currentPlayer));
    gv_ctrlGroup_StingerNest[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[8], lv_currentPlayer));
    gv_ctrlGroup_Soldier[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[9], lv_currentPlayer));
    gv_ctrlGroup_SoldierNest[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[10], lv_currentPlayer));
    gv_ctrlGroup_AcidSprayer[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[11], lv_currentPlayer));
    gv_ctrlGroup_AcidSprayerNest[lv_currentPlayer] = gf_PulldownIndexToCtrlGroup(DialogControlGetSelectedItem(gv_ctrlGroup_Pulldowns[12], lv_currentPlayer));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Setcontrolgroups_Init () {
    gt_Setcontrolgroups = TriggerCreate("gt_Setcontrolgroups_Func");
    TriggerAddEventDialogControl(gt_Setcontrolgroups, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize patch notes dialog
//--------------------------------------------------------------------------------------------------
bool gt_Initializepatchnotesdialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_t;
    int lv_offsetY;
    int lv_offsetX;
    int lv_labelIndex;

    // Automatic Variable Declarations
    const int autoD8751B38_ae = 6;
    const int autoD8751B38_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DialogCreateAEvo(900, 1100, c_anchorCenter, 0, -70, true);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    gv_patchNotes_Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1005, 845, c_anchorCenter, 0, 0, StringToText(""), "Assets\\Textures\\ui-editoricon-hybridlabinner_6.dds", c_triggerImageTypeBorder, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_SetDialogItemAcceptMouse(DialogControlLastCreated(), true, PlayerGroupAll());
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 25.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 220, 45, c_anchorBottom, 0, 60, StringToText(""), StringExternal("Param/Value/675156B0"), "");
    gv_patchNotes_CloseButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 970, 800, c_anchorTop, 0, 65, StringToText(""), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_patchNotes_Label = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PatchNotes", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 194, c_anchorBottom, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 0.0);
    gv_patchNotes_PageLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "PatchNotesPage", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 220, 65, c_anchorBottom, -180, 130, StringToText(""), StringExternal("Param/Value/EF3F0E27"), "");
    gv_patchNotes_PreviousButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 220, 65, c_anchorBottom, 180, 130, StringToText(""), StringExternal("Param/Value/4AEF0C1E"), "");
    gv_patchNotes_NextButton = DialogControlLastCreated();
    DialogCreate(77, 150, c_anchorTopRight, 0, 42, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    gv_patchNotes_ToggleDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 44, 44, c_anchorCenter, 0, 0, StringExternal("Param/Value/40960C76"), StringToText(""), "");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_available_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\ui_techpurchase_techbutton_available_normaloverpressedover.dds", PlayerGroupAll());
    gv_patchNotes_ToggleButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 30, c_anchorCenter, 0, 0, StringToText(""), "NotesIcon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gf_Addpatchnotepage(StringExternal("Param/Value/20991205"));
    gf_Addpatchnotepage(StringExternal("Param/Value/FB7F97C0"));
    gf_Addpatchnotepage(StringExternal("Param/Value/35F9D99B"));
    gf_Addpatchnotepage(StringExternal("Param/Value/E93D4462"));
    gf_Addpatchnotepage(StringExternal("Param/Value/AA734B93"));
    gf_Addpatchnotepage(StringExternal("Param/Value/16EF9079"));
    gf_Addpatchnotepage(StringExternal("Param/Value/CD063775"));
    gf_Addpatchnotepage(StringExternal("Param/Value/6ACE8230"));
    gf_Addpatchnotepage(StringExternal("Param/Value/57B4D237"));
    gf_Addpatchnotepage(StringExternal("Param/Value/936D5E31"));
    gf_Addpatchnotepage(StringExternal("Param/Value/471A118A"));
    gf_Addpatchnotepage(StringExternal("Param/Value/83B5E09B"));
    gf_Addpatchnotepage(StringExternal("Param/Value/A65C7635"));
    gf_Addpatchnotepage(StringExternal("Param/Value/4C1E94E0"));
    gf_Addpatchnotepage(StringExternal("Param/Value/F8EC8D1B"));
    gf_Addpatchnotepage(StringExternal("Param/Value/C70C3C24"));
    gf_Addpatchnotepage(StringExternal("Param/Value/F1F301C5"));
    gf_Addpatchnotepage(StringExternal("Param/Value/E429BABE"));
    gf_Addpatchnotepage(StringExternal("Param/Value/4290A03A"));
    gf_Addpatchnotepage(StringExternal("Param/Value/78615FDA"));
    gf_Addpatchnotepage(StringExternal("Param/Value/4B33E4DA"));
    gf_Addpatchnotepage(StringExternal("Param/Value/7EC405E6"));
    gf_Addpatchnotepage(StringExternal("Param/Value/01A7F7EF"));
    gf_Addpatchnotepage(StringExternal("Param/Value/EB81D95D"));
    gf_Addpatchnotepage(StringExternal("Param/Value/F3919D06"));
    gf_Addpatchnotepage(StringExternal("Param/Value/2C6FA832"));
    gf_Addpatchnotepage(StringExternal("Param/Value/8A544079"));
    gf_Addpatchnotepage(StringExternal("Param/Value/42603CB4"));
    gf_Addpatchnotepage(StringExternal("Param/Value/FC903F03"));
    gf_Addpatchnotepage(StringExternal("Param/Value/15040FA7"));
    gf_Addpatchnotepage(StringExternal("Param/Value/C1A8BCAD"));
    gf_Addpatchnotepage(StringExternal("Param/Value/92B11F84"));
    gf_Addpatchnotepage(StringExternal("Param/Value/C90DE1AA"));
    gf_Addpatchnotepage(StringExternal("Param/Value/E2B27F1E"));
    gf_Addpatchnotepage(StringExternal("Param/Value/8B23129A"));
    lv_i = 1;
    for ( ; ( (autoD8751B38_ai >= 0 && lv_i <= autoD8751B38_ae) || (autoD8751B38_ai < 0 && lv_i >= autoD8751B38_ae) ) ; lv_i += autoD8751B38_ai ) {
        gv_patchNotes_CurrentPage[lv_i] = gv_patchNotes_PageCount;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initializepatchnotesdialog_Init () {
    gt_Initializepatchnotesdialog = TriggerCreate("gt_Initializepatchnotesdialog_Func");
    TriggerAddEventMapInit(gt_Initializepatchnotesdialog);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle patch notes
//--------------------------------------------------------------------------------------------------
bool gt_Togglepatchnotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_patchNotes_ToggleButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentPlayer = EventPlayer();
    if ((DialogIsVisible(gv_patchNotes_Dialog, EventPlayer()) == true)) {
        DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), true);
        DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ctrlGroup_Dialog, PlayerGroupSingle(EventPlayer()), false);
        gf_Updatepatchnotelabels(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Togglepatchnotes_Init () {
    gt_Togglepatchnotes = TriggerCreate("gt_Togglepatchnotes_Func");
    TriggerAddEventDialogControl(gt_Togglepatchnotes, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide patch notes (Button)
//--------------------------------------------------------------------------------------------------
bool gt_HidepatchnotesButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_patchNotes_CloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HidepatchnotesButton_Init () {
    gt_HidepatchnotesButton = TriggerCreate("gt_HidepatchnotesButton_Func");
    TriggerAddEventDialogControl(gt_HidepatchnotesButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hide patch notes (Key)
//--------------------------------------------------------------------------------------------------
bool gt_HidepatchnotesKey_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_patchNotes_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HidepatchnotesKey_Init () {
    gt_HidepatchnotesKey = TriggerCreate("gt_HidepatchnotesKey_Func");
    TriggerAddEventKeyPressed(gt_HidepatchnotesKey, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patch notes next button
//--------------------------------------------------------------------------------------------------
bool gt_Patchnotesnextbutton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_patchNotes_NextButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_patchNotes_CurrentPage[EventPlayer()] < gv_patchNotes_PageCount)) {
        gv_patchNotes_CurrentPage[EventPlayer()] += 1;
        gf_Updatepatchnotelabels(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Patchnotesnextbutton_Init () {
    gt_Patchnotesnextbutton = TriggerCreate("gt_Patchnotesnextbutton_Func");
    TriggerAddEventDialogControl(gt_Patchnotesnextbutton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Patch notes next previous
//--------------------------------------------------------------------------------------------------
bool gt_Patchnotesnextprevious_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_patchNotes_PreviousButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_patchNotes_CurrentPage[EventPlayer()] > 1)) {
        gv_patchNotes_CurrentPage[EventPlayer()] -= 1;
        gf_Updatepatchnotelabels(EventPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Patchnotesnextprevious_Init () {
    gt_Patchnotesnextprevious = TriggerCreate("gt_Patchnotesnextprevious_Func");
    TriggerAddEventDialogControl(gt_Patchnotesnextprevious, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize leaderboard
//--------------------------------------------------------------------------------------------------
bool gt_Initializeleaderboard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB231BFC0_g;
    int autoB231BFC0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB231BFC0_g = PlayerGroupActive();
    autoB231BFC0_var = -1;
    while (true) {
        autoB231BFC0_var = PlayerGroupNextPlayer(autoB231BFC0_g, autoB231BFC0_var);
        if (autoB231BFC0_var < 0) { break; }
        DialogCreate(900, 500, c_anchorTopLeft, 25, 25, true);
        gv_leaderboardDialog[autoB231BFC0_var] = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(autoB231BFC0_var), true);
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 900, 500, c_anchorTopLeft, 0, 0, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AntLeaderboard", PlayerGroupAll());
        gv_leaderboardLabel[autoB231BFC0_var] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initializeleaderboard_Init () {
    gt_Initializeleaderboard = TriggerCreate("gt_Initializeleaderboard_Func");
    TriggerAddEventMapInit(gt_Initializeleaderboard);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update leaderboard - Unranked
//--------------------------------------------------------------------------------------------------
bool gt_UpdateleaderboardUnranked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_currentPlayer;
    text lv_text;

    // Automatic Variable Declarations
    const int autoBA4FBC1A_ae = 6;
    const int autoBA4FBC1A_ai = 1;
    playergroup autoA8DE14AD_g;
    playergroup autoCC9E0BBA_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_playerIndex = 1;
        for ( ; ( (autoBA4FBC1A_ai >= 0 && lv_playerIndex <= autoBA4FBC1A_ae) || (autoBA4FBC1A_ai < 0 && lv_playerIndex >= autoBA4FBC1A_ae) ) ; lv_playerIndex += autoBA4FBC1A_ai ) {
            lv_text = null;
            Wait(1.0, c_timeGame);
            autoA8DE14AD_g = PlayerGroupActive();
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(autoA8DE14AD_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                if ((PlayerGroupHasPlayer(gv_deadPlayerGroup, lv_currentPlayer) == true)) {
                    continue;
                }

                if ((PlayerType(lv_currentPlayer) == c_playerTypeUser)) {
                    lv_text = (lv_text + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                else {
                    lv_text = (lv_text + TextWithColor(gf_GetCompDifficultyName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer)) == 1)) {
                    lv_text = (lv_text + StringExternal("Param/Value/F13A00F1") + StringExternal("Param/Value/F05C919D") + gf_ReturnTextColorIdecOfPlayersAlliesForPlayer(lv_currentPlayer) + StringExternal("Param/Value/029B5AD6"));
                }
                else if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer)) >= 2)) {
                    lv_text = (lv_text + StringExternal("Param/Value/462FAD85") + IntToText(PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer))) + StringExternal("Param/Value/A7C518B6") + gf_ReturnTextColorIdecOfPlayersAlliesForPlayer(lv_currentPlayer) + StringExternal("Param/Value/6DD98FF5"));
                }
                lv_text = (lv_text + StringExternal("Param/Value/CE39B848"));
            }
            lv_text = (lv_text + StringExternal("Param/Value/FC972C1C"));
            autoCC9E0BBA_g = gv_deadPlayerGroup;
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(autoCC9E0BBA_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                if ((PlayerType(lv_currentPlayer) == c_playerTypeUser)) {
                    lv_text = (lv_text + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                else {
                    lv_text = (lv_text + TextWithColor(gf_GetCompDifficultyName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                lv_text = (lv_text + StringExternal("Param/Value/96CAA291"));
                lv_text = (lv_text + StringExternal("Param/Value/AE329D88"));
            }
            libNtve_gf_SetDialogItemText(gv_leaderboardLabel[lv_playerIndex], lv_text, PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateleaderboardUnranked_Init () {
    gt_UpdateleaderboardUnranked = TriggerCreate("gt_UpdateleaderboardUnranked_Func");
    TriggerEnable(gt_UpdateleaderboardUnranked, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update leaderboard - Unranked Old
//--------------------------------------------------------------------------------------------------
bool gt_UpdateleaderboardUnrankedOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    text lv_text;

    // Automatic Variable Declarations
    playergroup auto2A7294C9_g;
    int auto2A7294C9_var;
    playergroup auto2215F012_g;
    playergroup autoD2561D1A_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2A7294C9_g = PlayerGroupActive();
    auto2A7294C9_var = -1;
    while (true) {
        auto2A7294C9_var = PlayerGroupNextPlayer(auto2A7294C9_g, auto2A7294C9_var);
        if (auto2A7294C9_var < 0) { break; }
        while (true) {
            lv_text = null;
            Wait(5.0, c_timeGame);
            auto2215F012_g = PlayerGroupActive();
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto2215F012_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                if ((PlayerGroupHasPlayer(gv_deadPlayerGroup, lv_currentPlayer) == true)) {
                    continue;
                }

                if ((PlayerType(lv_currentPlayer) == c_playerTypeUser)) {
                    lv_text = (lv_text + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                else {
                    lv_text = (lv_text + TextWithColor(gf_GetCompDifficultyName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer)) == 1)) {
                    lv_text = (lv_text + StringExternal("Param/Value/1EAB806E") + StringExternal("Param/Value/77604859"));
                }
                else if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer)) >= 2)) {
                    lv_text = (lv_text + StringExternal("Param/Value/F2F3ADC5") + IntToText(PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, lv_currentPlayer))) + StringExternal("Param/Value/23A8E7B4"));
                }
                lv_text = (lv_text + StringExternal("Param/Value/2B030462"));
            }
            lv_text = (lv_text + StringExternal("Param/Value/C94E2EEA"));
            autoD2561D1A_g = gv_deadPlayerGroup;
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(autoD2561D1A_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                if ((PlayerType(lv_currentPlayer) == c_playerTypeUser)) {
                    lv_text = (lv_text + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                else {
                    lv_text = (lv_text + TextWithColor(gf_GetCompDifficultyName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                }
                lv_text = (lv_text + StringExternal("Param/Value/B12042CB"));
                lv_text = (lv_text + StringExternal("Param/Value/E7551544"));
            }
            libNtve_gf_SetDialogItemText(gv_leaderboardLabel[auto2A7294C9_var], lv_text, PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateleaderboardUnrankedOld_Init () {
    gt_UpdateleaderboardUnrankedOld = TriggerCreate("gt_UpdateleaderboardUnrankedOld_Func");
    TriggerEnable(gt_UpdateleaderboardUnrankedOld, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update leaderboard - Ranked
//--------------------------------------------------------------------------------------------------
bool gt_UpdateleaderboardRanked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_currentPlayer;
    text lv_text;
    int lv_i;

    // Automatic Variable Declarations
    const int auto244D92EC_ae = 6;
    const int auto244D92EC_ai = 1;
    const int auto64B52995_ae = 2;
    const int auto64B52995_ai = 1;
    playergroup auto807269D0_g;
    playergroup autoFEB1CC80_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_playerIndex = 1;
        for ( ; ( (auto244D92EC_ai >= 0 && lv_playerIndex <= auto244D92EC_ae) || (auto244D92EC_ai < 0 && lv_playerIndex >= auto244D92EC_ae) ) ; lv_playerIndex += auto244D92EC_ai ) {
            Wait(1.0, c_timeGame);
            lv_text = null;
            lv_i = 1;
            for ( ; ( (auto64B52995_ai >= 0 && lv_i <= auto64B52995_ae) || (auto64B52995_ai < 0 && lv_i >= auto64B52995_ae) ) ; lv_i += auto64B52995_ai ) {
                lv_text = (lv_text + StringExternal("Param/Value/74534982") + StringExternal("Param/Value/F38A7029") + StringExternal("Param/Value/0501EA71") + IntToText(RoundI(gv_teamAverageRating[lv_i])) + StringExternal("Param/Value/FE3EBEE3"));
                auto807269D0_g = GameAttributePlayersForTeam(lv_i);
                lv_currentPlayer = -1;
                while (true) {
                    lv_currentPlayer = PlayerGroupNextPlayer(auto807269D0_g, lv_currentPlayer);
                    if (lv_currentPlayer < 0) { break; }
                    if ((PlayerGroupHasPlayer(gv_deadPlayerGroup, lv_currentPlayer) == true)) {
                        continue;
                    }
                    else {
                        if ((gv_playerRatingModified[lv_currentPlayer] == 0.0)) {
                            lv_text = (lv_text + StringExternal("Param/Value/DB04D4A4") + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/4B2F396B") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/734F93AB"));
                        }
                        else {
                            lv_text = (lv_text + StringExternal("Param/Value/7DD706BE") + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/41B3A598") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/917553C5") + FixedToText(gv_playerRatingModified[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/51E2D7D5"));
                        }
                    }
                }
                lv_text = (lv_text + StringExternal("Param/Value/4C752D72"));
            }
            lv_text = (lv_text + StringExternal("Param/Value/E18B75EC"));
            autoFEB1CC80_g = gv_deadPlayerGroup;
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(autoFEB1CC80_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                lv_text = (lv_text + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
                lv_text = (lv_text + StringExternal("Param/Value/91F215F4"));
                if ((gv_playerRatingModified[lv_currentPlayer] == 0.0)) {
                    lv_text = (lv_text + StringExternal("Param/Value/03F0E299") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/A8CF9920"));
                }
                else {
                    lv_text = (lv_text + StringExternal("Param/Value/7CCFCE4D") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/E597FE95") + FixedToText(gv_playerRatingModified[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/276D7D39"));
                }
                lv_text = (lv_text + StringExternal("Param/Value/E4B7AF57"));
            }
            libNtve_gf_SetDialogItemText(gv_leaderboardLabel[lv_playerIndex], lv_text, PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateleaderboardRanked_Init () {
    gt_UpdateleaderboardRanked = TriggerCreate("gt_UpdateleaderboardRanked_Func");
    TriggerEnable(gt_UpdateleaderboardRanked, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update leaderboard - Ranked Old
//--------------------------------------------------------------------------------------------------
bool gt_UpdateleaderboardRankedOld_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentPlayer;
    text lv_text;
    int lv_i;

    // Automatic Variable Declarations
    const int auto403A96ED_ae = 2;
    const int auto403A96ED_ai = 1;
    playergroup auto81101121_g;
    playergroup autoC101601C_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        lv_text = null;
        lv_i = 1;
        for ( ; ( (auto403A96ED_ai >= 0 && lv_i <= auto403A96ED_ae) || (auto403A96ED_ai < 0 && lv_i >= auto403A96ED_ae) ) ; lv_i += auto403A96ED_ai ) {
            lv_text = (lv_text + StringExternal("Param/Value/78420D86") + StringExternal("Param/Value/AF5CBCF8") + StringExternal("Param/Value/ABBA73C7") + IntToText(RoundI(gv_teamAverageRating[lv_i])) + StringExternal("Param/Value/6F40A222"));
            auto81101121_g = GameAttributePlayersForTeam(lv_i);
            lv_currentPlayer = -1;
            while (true) {
                lv_currentPlayer = PlayerGroupNextPlayer(auto81101121_g, lv_currentPlayer);
                if (lv_currentPlayer < 0) { break; }
                if ((PlayerGroupHasPlayer(gv_deadPlayerGroup, lv_currentPlayer) == true)) {
                    continue;
                }
                else {
                    if ((gv_playerRatingModified[lv_currentPlayer] == 0.0)) {
                        lv_text = (lv_text + StringExternal("Param/Value/AAF8E060") + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/9E1A010E") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/10992252"));
                    }
                    else {
                        lv_text = (lv_text + StringExternal("Param/Value/F705D226") + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))) + StringExternal("Param/Value/61DAD756") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/5629D899") + FixedToText(gv_playerRatingModified[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/7EF69732"));
                    }
                }
            }
            lv_text = (lv_text + StringExternal("Param/Value/43F1964E"));
        }
        lv_text = (lv_text + StringExternal("Param/Value/F823E4CE"));
        autoC101601C_g = gv_deadPlayerGroup;
        lv_currentPlayer = -1;
        while (true) {
            lv_currentPlayer = PlayerGroupNextPlayer(autoC101601C_g, lv_currentPlayer);
            if (lv_currentPlayer < 0) { break; }
            lv_text = (lv_text + TextWithColor(PlayerName(lv_currentPlayer), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_currentPlayer, false))));
            lv_text = (lv_text + StringExternal("Param/Value/B607CCC5"));
            if ((gv_playerRatingModified[lv_currentPlayer] == 0.0)) {
                lv_text = (lv_text + StringExternal("Param/Value/5A8D234A") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/D966A3D2"));
            }
            else {
                lv_text = (lv_text + StringExternal("Param/Value/3B402329") + FixedToText(gv_playerRatingOriginal[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/7BFBE362") + FixedToText(gv_playerRatingModified[lv_currentPlayer], c_fixedPrecisionAny) + StringExternal("Param/Value/CE32841F"));
            }
            lv_text = (lv_text + StringExternal("Param/Value/5F39D942"));
        }
        libNtve_gf_SetDialogItemText(gv_leaderboardLabel[0], lv_text, PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateleaderboardRankedOld_Init () {
    gt_UpdateleaderboardRankedOld = TriggerCreate("gt_UpdateleaderboardRankedOld_Func");
    TriggerEnable(gt_UpdateleaderboardRankedOld, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -UpgReset
//--------------------------------------------------------------------------------------------------
bool gt_UpgReset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "S")) {
        if ((TechTreeUpgradeCount(EventPlayer(), "zerglingmovementspeed", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "zerglingmovementspeed", 0);
        }

    }
    else if ((StringWord(EventChatMessage(false), 2) == "D")) {
        if ((TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel5", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel5", 0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1B322C0A"));
        }
        else {
            if ((TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel4", 0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/72BD39A9"));
            }
            else {
                if ((TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel3", 0);
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/41AE0FAE"));
                }
                else {
                    if ((TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel2", 0);
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D9290588"));
                    }
                    else {
                        if ((TechTreeUpgradeCount(EventPlayer(), "ZergMeleeWeaponsLevel1", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel1", 0);
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/05BD44EE"));
                        }

                    }
                }
            }
        }
    }
    else if ((StringWord(EventChatMessage(false), 2) == "A")) {
        if ((TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel5", c_techCountCompleteOnly) == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel5", 0);
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/48C6119E"));
        }
        else {
            if ((TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel4", c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel4", 0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3154EB24"));
            }
            else {
                if ((TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel3", c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel3", 0);
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/52B3FE46"));
                }
                else {
                    if ((TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel2", c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel2", 0);
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/16339B30"));
                    }
                    else {
                        if ((TechTreeUpgradeCount(EventPlayer(), "ZergGroundArmorsLevel1", c_techCountCompleteOnly) == 1)) {
                            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel1", 0);
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/1DE09195"));
                        }

                    }
                }
            }
        }
    }
    else if ((StringWord(EventChatMessage(false), 2) == "T1")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MoveAbility", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SickeningStrike", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "WebEntrapment", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BastionDrumsResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "LifeShareResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "LifeSuctionResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "WaterSpringResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BuildingRegenerationResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "EnergyRegenerationAuraResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DropRock", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BerserkerModeNull", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BerserkerModeResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "AcidVomitResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "LandMineResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Insanity", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "MyWalkingBoots", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HideBuilding", 0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/084C687E"));
    }
    else if ((StringWord(EventChatMessage(false), 2) == "T2")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZombieFungus", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TightSightResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ClenchingClaws", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ToughenedCharacterResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DisguiseResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ShapeShiftResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "EnergyEfficiency", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "WoodAntTower", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GravelPile", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "FearStareResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "GrappleResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "SwarmCallResearch", 0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/0DF3D4A1"));
    }
    else if ((StringWord(EventChatMessage(false), 2) == "T3")) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "RiseTheDead", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Curse", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "FogOfWarResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TheBeastBeneath", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BeastCallResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TheBeastInside", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "BuildPlantation", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HeavyGut", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ShieldofThorns", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Earthquake", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "HealingEmbrace", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "VodooResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Queensreinforcements", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "PiedPiper", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "CheatDeathResearch", 0);
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "TimeOutResearch", 0);
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/3794D77D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpgReset_Init () {
    gt_UpgReset = TriggerCreate("gt_UpgReset_Func");
    TriggerAddEventChatMessage(gt_UpgReset, c_playerAny, "-UpgReset", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Feed Command
//--------------------------------------------------------------------------------------------------
bool gt_FeedCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_amountPlayerGivesAway;

    // Automatic Variable Declarations
    playergroup auto390AABAF_g;
    int auto390AABAF_var;

    // Variable Initialization
    lv_amountPlayerGivesAway = StringToInt(StringWord(EventChatMessage(false), 2));

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/6B24620A"));
    if ((PlayerGetPropertyInt(EventPlayer(), c_playerPropMinerals) >= lv_amountPlayerGivesAway)) {
        if ((StringWord(EventChatMessage(false), 2) != "")) {
            if ((PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())) > 0)) {
                if (true) {
                    if ((lv_amountPlayerGivesAway > 0)) {
                        if ((lv_amountPlayerGivesAway > 20)) {
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor((StringExternal("Param/Value/7FCD0FED") + IntToText(lv_amountPlayerGivesAway) + StringExternal("Param/Value/149D34A9")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false))));
                            auto390AABAF_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
                            auto390AABAF_var = -1;
                            while (true) {
                                auto390AABAF_var = PlayerGroupNextPlayer(auto390AABAF_g, auto390AABAF_var);
                                if (auto390AABAF_var < 0) { break; }
                                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor((PlayerName(auto390AABAF_var) + StringExternal("Param/Value/949B69B2") + IntToText((lv_amountPlayerGivesAway / PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())))) + StringExternal("Param/Value/8507A92E")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto390AABAF_var, false))));
                                UIDisplayMessage(PlayerGroupSingle(auto390AABAF_var), c_messageAreaError, TextWithColor((PlayerName(EventPlayer()) + StringExternal("Param/Value/2110C077") + IntToText((lv_amountPlayerGivesAway / PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer())))) + StringExternal("Param/Value/3DCF35BF")), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto390AABAF_var, false))));
                                PlayerModifyPropertyInt(auto390AABAF_var, c_playerPropMinerals, c_playerPropOperAdd, (lv_amountPlayerGivesAway / PlayerGroupCount(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()))));
                            }
                            PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSubtract, lv_amountPlayerGivesAway);
                        }
                        else {
                            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor((StringToText(StringWord(EventChatMessage(false), 2)) + StringExternal("Param/Value/ABB00A3F")), Color(100.00, 0.00, 0.00)));
                            SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                        }
                    }
                    else {
                        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor((StringToText(StringWord(EventChatMessage(false), 2)) + StringExternal("Param/Value/170D199F")), Color(100.00, 0.00, 0.00)));
                        SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                    }
                }
                else {
                    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor((StringToText(StringWord(EventChatMessage(false), 3)) + StringExternal("Param/Value/A8054ECC")), Color(100.00, 0.00, 0.00)));
                    SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                }
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, TextWithColor(StringExternal("Param/Value/E2EE18D3"), Color(100.00, 0.00, 0.00)));
                SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/0BB08014"));
            SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        }
    }
    else {
        gf_DisplayErrorForPlayer(StringExternal("Param/Value/9564CAD9"), EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FeedCommand_Init () {
    gt_FeedCommand = TriggerCreate("gt_FeedCommand_Func");
    TriggerAddEventChatMessage(gt_FeedCommand, c_playerAny, "-feed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Knok Knok Command
//--------------------------------------------------------------------------------------------------
bool gt_KnokKnokCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("KnokKnok", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, StringExternal("Param/Value/736DD1B0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KnokKnokCommand_Init () {
    gt_KnokKnokCommand = TriggerCreate("gt_KnokKnokCommand_Func");
    TriggerAddEventKeyPressed(gt_KnokKnokCommand, c_playerAny, c_keyK, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tell Players About Feed Command
//--------------------------------------------------------------------------------------------------
bool gt_TellPlayersAboutFeedCommand_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D6BA202E"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TellPlayersAboutFeedCommand_Init () {
    gt_TellPlayersAboutFeedCommand = TriggerCreate("gt_TellPlayersAboutFeedCommand_Func");
    TriggerAddEventResourceTrade(gt_TellPlayersAboutFeedCommand, c_playerAny, c_playerAny);
    TriggerAddEventResourceRequest(gt_TellPlayersAboutFeedCommand, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Tester Checking
//--------------------------------------------------------------------------------------------------
bool gt_DisableTesterChecking_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerADeveloper(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_testerCheckingIs = false;
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/22992561"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableTesterChecking_Init () {
    gt_DisableTesterChecking = TriggerCreate("gt_DisableTesterChecking_Func");
    TriggerAddEventKeyPressed(gt_DisableTesterChecking, c_playerAny, c_keyBackSpace, true, c_keyModifierStateRequire, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: /dance
//--------------------------------------------------------------------------------------------------
bool gt_dance_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAA7A37F7_g;
    int autoAA7A37F7_u;
    unit autoAA7A37F7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAA7A37F7_g = UnitGroupFilter(null, EventPlayer(), UnitGroupSelected(EventPlayer()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAA7A37F7_u = UnitGroupCount(autoAA7A37F7_g, c_unitCountAll);
    for (;; autoAA7A37F7_u -= 1) {
        autoAA7A37F7_var = UnitGroupUnitFromEnd(autoAA7A37F7_g, autoAA7A37F7_u);
        if (autoAA7A37F7_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoAA7A37F7_var, "AnimPlay Dance Dance");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_dance_Init () {
    gt_dance = TriggerCreate("gt_dance_Func");
    TriggerAddEventChatMessage(gt_dance, c_playerAny, "/dance", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn 1 From each unit type
//--------------------------------------------------------------------------------------------------
bool gt_Spawn1Fromeachunittype_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zergling", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Drone", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Ultralisk", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Locust", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TunnelTrembler", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SwarmHostMP", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfestedAbomination", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpaceCowSmall", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UltraliskCavern", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "StingerNest", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AcidSprayerNest", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TunnelTremblerNest", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KhepriNest", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GraveDiggerNest", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Assassin", 0, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AssassinEgg", 0, EventPlayer(), PointWithOffset(gv_absoluteCenterpoint, 14.0, 14.0));
    libNtve_gf_CreateUnitsWithDefaultFacing(50, "NewSoldierNest", c_unitCreateIgnorePlacement, EventPlayer(), gv_absoluteCenterpoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(50, "NewWorkerNest", c_unitCreateIgnorePlacement, EventPlayer(), gv_absoluteCenterpoint);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 2000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Spawn1Fromeachunittype_Init () {
    gt_Spawn1Fromeachunittype = TriggerCreate("gt_Spawn1Fromeachunittype_Func");
    TriggerAddEventKeyPressed(gt_Spawn1Fromeachunittype, c_playerAny, c_keyJ, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unlock Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_UnlockUpgrade_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_allUnitsofTriggeringPlayer;

    // Automatic Variable Declarations
    playergroup autoD100A86D_g;
    int autoD100A86D_var;

    // Variable Initialization
    lv_allUnitsofTriggeringPlayer = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD100A86D_g = PlayerGroupActive();
    autoD100A86D_var = -1;
    while (true) {
        autoD100A86D_var = PlayerGroupNextPlayer(autoD100A86D_g, autoD100A86D_var);
        if (autoD100A86D_var < 0) { break; }
        PlayerModifyPropertyInt(autoD100A86D_var, c_playerPropMinerals, c_playerPropOperAdd, 2000);
    }
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "Playingcapturetheflag", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "RapidEvolution", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergMeleeWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZergGroundArmorsLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnlockUpgrade_Init () {
    gt_UnlockUpgrade = TriggerCreate("gt_UnlockUpgrade_Func");
    TriggerAddEventKeyPressed(gt_UnlockUpgrade, c_playerAny, c_keyBackSpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reveal\Hide all
//--------------------------------------------------------------------------------------------------
bool gt_RevealHideall_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_debuggingRevealed[EventPlayer()] == 0)) {
        gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 100.00, 100.00), "Map Revealed");
        gv_debuggingRevealed[EventPlayer()] = 1;
        VisRevealArea(EventPlayer(), RegionEntireMap(), 1.0, false);
    }
    else if ((gv_debuggingRevealed[EventPlayer()] == 1)) {
        gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 100.00, 100.00), "Map Hidden");
        gv_debuggingRevealed[EventPlayer()] = 2;
        VisFillArea(EventPlayer(), RegionEntireMap(), c_fillTypeUnexplored, false);
        VisFillArea(EventPlayer(), RegionCircle(Point(0.0, 0.0), 30.0), c_fillTypeUnexplored, true);
    }
    else if ((gv_debuggingRevealed[EventPlayer()] == 2)) {
        gv_debuggingRevealed[EventPlayer()] = 3;
        VisRevealArea(EventPlayer(), RegionEntireMap(), 10.0, false);
    }
    else if ((gv_debuggingRevealed[EventPlayer()] == 3)) {
        gf_DebuggingTextMessageFromString(c_messageAreaSubtitle, Color(100.00, 100.00, 100.00), "Map Hidden");
        VisFillArea(EventPlayer(), RegionEntireMap(), c_fillTypeUnexplored, false);
        VisFillArea(EventPlayer(), RegionCircle(Point(0.0, 0.0), 30.0), c_fillTypeUnexplored, true);
        gv_debuggingRevealed[EventPlayer()] = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RevealHideall_Init () {
    gt_RevealHideall = TriggerCreate("gt_RevealHideall_Func");
    TriggerAddEventKeyPressed(gt_RevealHideall, c_playerAny, c_keyT, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventChatMessage(gt_RevealHideall, c_playerAny, "reveal", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kill All Dirt
//--------------------------------------------------------------------------------------------------
bool gt_KillAllDirt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dirtX;
    int lv_dirtY;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    unitgroup auto51C9770F_g;
    int auto51C9770F_u;
    unit auto51C9770F_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto51C9770F_g = UnitGroup("Dirt", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto51C9770F_u = UnitGroupCount(auto51C9770F_g, c_unitCountAll);
    for (;; auto51C9770F_u -= 1) {
        auto51C9770F_var = UnitGroupUnitFromEnd(auto51C9770F_g, auto51C9770F_u);
        if (auto51C9770F_var == null) { break; }
        lv_dirtX = FloorI((PointGetX(UnitGetPosition(auto51C9770F_var)) * 0.5));
        lv_dirtY = FloorI((PointGetY(UnitGetPosition(auto51C9770F_var)) * 0.5));
        gf_Activatedirt(lv_dirtX, lv_dirtY);
        lv_x = PointGetX(UnitGetPosition(auto51C9770F_var));
        lv_y = PointGetY(UnitGetPosition(auto51C9770F_var));
        VisRevealArea(UnitGetOwner(auto51C9770F_var), RegionRect((lv_x - 2.0), (lv_y - 2.0), (lv_x + 2.0), (lv_y + 2.0)), 1.2, false);
        Wait(0.0, c_timeGame);
        UnitKill(auto51C9770F_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KillAllDirt_Init () {
    gt_KillAllDirt = TriggerCreate("gt_KillAllDirt_Func");
    TriggerAddEventChatMessage(gt_KillAllDirt, c_playerAny, "-KillAllDirt", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Map Cords
//--------------------------------------------------------------------------------------------------
bool gt_ShowMapCords_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_startX;
    int lv_startY;
    int lv_x;
    int lv_y;

    // Automatic Variable Declarations
    const int auto4D263EC7_ae = 76;
    const int auto4D263EC7_ai = 1;
    const int auto5BB5B3C1_ae = 76;
    const int auto5BB5B3C1_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(gf_IsThisPlayerInEditor(EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_x = 0;
    for ( ; ( (auto4D263EC7_ai >= 0 && lv_x <= auto4D263EC7_ae) || (auto4D263EC7_ai < 0 && lv_x >= auto4D263EC7_ae) ) ; lv_x += auto4D263EC7_ai ) {
        lv_y = 0;
        for ( ; ( (auto5BB5B3C1_ai >= 0 && lv_y <= auto5BB5B3C1_ae) || (auto5BB5B3C1_ai < 0 && lv_y >= auto5BB5B3C1_ae) ) ; lv_y += auto5BB5B3C1_ai ) {
            TextTagCreate(StringToText(("<s val=\"Header13\">" + "X=" + FixedToString((lv_x * 2.0), c_fixedPrecisionAny) + "<n/>" + "Y=" + FixedToString((lv_y * 2.0), c_fixedPrecisionAny) + "<s/>")), 35, Point((lv_x * 2.0), (lv_y * 2.0)), 0.0, true, false, PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowMapCords_Init () {
    gt_ShowMapCords = TriggerCreate("gt_ShowMapCords_Func");
    TriggerAddEventChatMessage(gt_ShowMapCords, c_playerAny, "ShowMapCords", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skin Unlocker
//--------------------------------------------------------------------------------------------------
bool gt_SkinUnlocker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_upgradeChamberSwapModelIsUnlockedMech[EventPlayer()] = true;
    gv_upgradeChamberSwapModelIsUnlockedSwarm[EventPlayer()] = true;
    gv_spikesNestSwapModelIsUnlockedFATWebMod[EventPlayer()] = true;
    gv_spikesNestSwapModelIsUnlockedFAT[EventPlayer()] = true;
    gv_workerNestSwapModelIsUnlockedWebMod[EventPlayer()] = true;
    gv_workerNestSwapModelIsUnlockedMech[EventPlayer()] = true;
    gv_soldierNestSwapModelIsUnlockedMech[EventPlayer()] = true;
    gv_soldierNestSwapModelIsUnlockedWebMod[EventPlayer()] = true;
    gv_khepriSwapModelIsUnlockedSwarm[EventPlayer()] = true;
    gv_khepriSwapModelIsUnlockedSwarm[EventPlayer()] = true;
    gv_queenSwapModelIsUnlockedGray[EventPlayer()] = true;
    gv_soldierSwapModelIsUnlockedGray[EventPlayer()] = true;
    gv_soldierSwapModelIsUnlockedMech[EventPlayer()] = true;
    gv_soldierSwapModelIsUnlockedSwarm[EventPlayer()] = true;
    gv_queenSwapModelIsUnlockedSwarm[EventPlayer()] = true;
    gv_workerSwapModelIsUnlockedSwarm[EventPlayer()] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkinUnlocker_Init () {
    gt_SkinUnlocker = TriggerCreate("gt_SkinUnlocker_Func");
    TriggerAddEventChatMessage(gt_SkinUnlocker, c_playerAny, "SkinsUnlocker", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_EndGameVisionAQueenDiedSoCheckifplayershouldlose_Init();
    gt_SendAlertifInitializationFailed_Init();
    gt_Whenfoodiscreatedtintit_Init();
    gt_GatesTimerExpires_Init();
    gt_PillersGenTimerExpires_Init();
    gt_GenerateClock_Init();
    gt_ChangeOwnerOfOctaPillarController_Init();
    gt_ChangeOwnerOfOctaPillarControllerBack_Init();
    gt_LowerOrRisePillers_Init();
    gt_MakePongBounce_Init();
    gt_MakeSurePongDoesnotstop_Init();
    gt_MovecamaraSetselectionandspawnunit_Init();
    gt_CTFCreateAFlagoneachqueen_Init();
    gt_CTFPickingUpAFlag_Init();
    gt_CTFPickingUpAFlagPickupanim_Init();
    gt_CTFDroppingFlagOnGroundAnywhere_Init();
    gt_CTFClaimFlagOnOwnfriendlyflag_Init();
    gt_CTFAllowDisaalowAllyToCarryFlag_Init();
    gt_CTFQueenRespawn_Init();
    gt_CTFKIlllastownerofflag_Init();
    gt_CTFToggleGiveAllyFlagDialog_Init();
    gt_CTFToggleGiveAllyFlagDialogRedX_Init();
    gt_CTFToggleGiveAllyFlagDialogEsc_Init();
    gt_CTFToggleGiveAllyFlagButtonClicked_Init();
    gt_UnlockBlockAllyingButton_Init();
    gt_Tellmealliesandenemiesofmyself_Init();
    gt_TellPlayersToSuggestIdeas_Init();
    gt_TellPlayersenvironmentalLayoutInformation_Init();
    gt_AnnouncePlayerqueenchoice_Init();
    gt_YESorNOresponsetorequestofvision_Init();
    gt_PlayerClicksRequestVisionButton_Init();
    gt_PlayerclicksDefeatManuButton_Init();
    gt_UpdateUGUIBarTrigger_Init();
    gt_UGUIBarWhenClickedMoveCamaratoselectedUnitTrigger_Init();
    gt_SettingsMenuToggleButtonCloseSettingsMenu_Init();
    gt_SettingsMenuToggleredXCloseSettingsMenu_Init();
    gt_SettingsMenuToggleEscCloseSettingsMenu_Init();
    gt_SettingsMenuHideRightSideToggleCloseSettingsMenu_Init();
    gt_PlayerClickSettingsMenuGUIOptButtons_Init();
    gt_ToggleWinrateWInChanceDialog_Init();
    gt_Playerleavessoupdatethewinchancedialog_Init();
    gt_DiscordLinkDialogToggle_Init();
    gt_DiscordLinkDialogToggleByword_Init();
    gt_MakePlayersVoteForStartingFoodAmount_Init();
    gt_PLAYERCLICKPlayerVotedForFoodAmount_Init();
    gt_MakePlayersVoteForGameMode_Init();
    gt_PLAYERCLICKPlayerVotedForGameMode_Init();
    gt_PlayerAClickedMapGenVoteButton_Init();
    gt_MakePlayersVoteForMapPool_Init();
    gt_PLAYERCLICKPlayerVotedForMapPool_Init();
    gt_MakePlayersVoteForRandomQueen_Init();
    gt_PLAYERCLICKPlayerVotedForRandomQueen_Init();
    gt_ToggleUIBarManu_Init();
    gt_SetUIBarbasedonplayerChoice_Init();
    gt_ToggleSkinsmanu_Init();
    gt_SkinsManuButtonX_Init();
    gt_UnitSkinsButtonClose_Init();
    gt_UnitSkinsButtonOpen_Init();
    gt_PlayerClicksEscapesocloseSkinsManu_Init();
    gt_BulkBuildersBuiltbyplayer_Init();
    gt_UpgradeChaberSwarmAndMech_Init();
    gt_TimeEnforceWHU_Init();
    gt_WorkerHologramUnlock_Init();
    gt_TimeEnforceSSU_Init();
    gt_SoldierSwarmUnlock_Init();
    gt_TimeEnforceQSHU_Init();
    gt_QueenSpikeyHeadUnlock_Init();
    gt_ToggleWorkerSkinsManu_Init();
    gt_PlayerClicksWorkerButton_Init();
    gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings_Init();
    gt_ToggleSoldierSkinsManu_Init();
    gt_PlayerClicksSoldierButton_Init();
    gt_ToggleQueenSkinsManu_Init();
    gt_PlayerClicksQueenButton_Init();
    gt_ToggleBuildingsManu_Init();
    gt_ModelSwapSubTrail_Init();
    gt_ModelSwapFarmTrail_Init();
    gt_MakesurenewerWorkerNestsusetherightmodel_Init();
    gt_ToggleWorkerNestSkinsManu_Init();
    gt_PlayerClicksWorkerNestButton_Init();
    gt_MakesurenewerSoldierNestsusetherightmodel_Init();
    gt_ToggleSoldierNestSkinsManu_Init();
    gt_PlayerClicksSoldierNestButton_Init();
    gt_MakesurenewerBulkBuilderusetherightmodelCreation_Init();
    gt_MakesurenewerBulkBuilderusetherightmodelPrograssion_Init();
    gt_ToggleBulkBuilderSkinsManu_Init();
    gt_PlayerClicksBulkBuilderButton_Init();
    gt_MakesurenewerUpgradeChamberusetherightmodel_Init();
    gt_ToggleUpgradeChamberSkinsManu_Init();
    gt_PlayerClicksUpgradeChamberButton_Init();
    gt_MakesurenewerSpikenestsusetherightmodel_Init();
    gt_ToggleSpikesNestSkinsManu_Init();
    gt_PlayerClicksSpikesNestButton_Init();
    gt_ToggleSpecialtyUnitManu_Init();
    gt_MajorSpawnssochangeitsmodel_Init();
    gt_ToggleMajorSkinsManu_Init();
    gt_PlayerClicksMajorButton_Init();
    gt_StingerSpawnssochangeitsmodel_Init();
    gt_ToggleStingerSkinsManu_Init();
    gt_PlayerClicksStingerButton_Init();
    gt_AcidSprayerSpawnssochangeitsmodel_Init();
    gt_MakesureplayershavethecorrectskinevenafterupgradeingSpeedlings2_Init();
    gt_ToggleAcidSprayerSkinsManu_Init();
    gt_PlayerClicksAcidSprayerButton_Init();
    gt_TunnelTremblerSpawnssochangeitsmodel_Init();
    gt_ToggleTunnelTremblerSkinsManu_Init();
    gt_PlayerClicksTunnelTremblerButton_Init();
    gt_KhepriSpawnssochangeitsmodel_Init();
    gt_KhepriBettleSpawnssochangeitsmodel_Init();
    gt_ToggleKhepriSkinsManu_Init();
    gt_PlayerClicksKhepriButton_Init();
    gt_TutorialTIp1Digandpickqueen_Init();
    gt_TutorialTip2Build5ForagerNests_Init();
    gt_TutorialTip3BuildmoreSoldierNests_Init();
    gt_TutorialTip4Getspeedupgrade_Init();
    gt_TutorialTip5PickTier1Ability_Init();
    gt_RunSnowdownthescreenofallplayers_Init();
    gt_ReplacePingSoundWithChristmasPingSound_Init();
    gt_ReplaceSoundtrackChristmasSoundtrack_Init();
    gt_GiveCreatedUnitsChristmashats_Init();
    gt_SetCarryFoodBasedOnFoodTypeChristmas_Init();
    gt_ModelSwapFoodtoGift_Init();
    gt_Queendeath_Init();
    gt_Modifyallratings_Init();
    gt_Initializerankedresultsdialog_Init();
    gt_PlayerClickedQueenChoiceButton_Init();
    gt_PlayersQueenMorphFinished_Init();
    gt_CancelmorphRandom_Init();
    gt_MorphEggsFixer_Init();
    gt_InitializeAIprofiles_Init();
    gt_AIdamagepoint_Init();
    gt_Reinforcebasedefense_Init();
    gt_AIdifficultyFoodMultiplier_Init();
    gt_AllowPlantCollection_Init();
    gt_AllowMeatCollection_Init();
    gt_DenyPlantCollection_Init();
    gt_DenyMeatCollection_Init();
    gt_Makeidleforagerswork_Init();
    gt_FoodTypeEnforcer_Init();
    gt_SetCarryFoodBasedOnFoodType_Init();
    gt_Makedeselectedforagerswork_Init();
    gt_Makewaitingforagerswork_Init();
    gt_Makeidlesoldierswork_Init();
    gt_Makedeselectedsoldierswork_Init();
    gt_Makelostsoldierswork_Init();
    gt_BulkBuilderWasCreated_Init();
    gt_ModelAttachUpgradeChamber_Init();
    gt_ModelSpeedUpgradeChamberStarted_Init();
    gt_ModelSpeedUpgradeChamberEnded_Init();
    gt_ModelScaleUpgradeChamberonspawnResize_Init();
    gt_ModelDeleteUpgradeChamberonrevert_Init();
    gt_WhenAnimalDiesMakeittiny_Init();
    gt_Createforagernest_Init();
    gt_Createsoldiernest_Init();
    gt_Createassassinnest_Init();
    gt_Workereggspawn_Init();
    gt_Workeregghatch_Init();
    gt_Soldiereggspawnnormal_Init();
    gt_Soldiereggspawnfast_Init();
    gt_Soldieregghatch_Init();
    gt_Assassineggspawnnormal_Init();
    gt_Assassineggspawnfast_Init();
    gt_Assassinegghatch_Init();
    gt_Broodlingspawn_Init();
    gt_Broodlingspawnerbuilt_Init();
    gt_Addforagernesttocontrolgroup_Init();
    gt_Addsoldiernesttocontrolgroup_Init();
    gt_Addmajornesttocontrolgroup_Init();
    gt_AddTunnelTremblernesttocontrolgroup_Init();
    gt_Addstingernesttocontrolgroup_Init();
    gt_AddKheprinesttocontrolgroup_Init();
    gt_Addacidsprayernesttocontrolgroup_Init();
    gt_AddGraveDiggernesttocontrolgroup_Init();
    gt_Majorspawn_Init();
    gt_TunnelTremblerspawn_Init();
    gt_Stingerspawn_Init();
    gt_Kheprispawn_Init();
    gt_Acidsprayerspawn_Init();
    gt_GraveDiggerspawn_Init();
    gt_UnbreakableDirtCreated_Init();
    gt_DirtCreated_Init();
    gt_SpikeNestDeath_Init();
    gt_antkills2cash_Init();
    gt_Dirtdestroyed_Init();
    gt_Dirtdamaged_Init();
    gt_Createcorpse_Init();
    gt_Foragerkilled_Init();
    gt_Soldierkilled_Init();
    gt_Assassinkilled_Init();
    gt_Majordirtclear_Init();
    gt_Upgradedforagernestdies_Init();
    gt_Broodlingkillcredittransfer_Init();
    gt_PlayerClickedBulkBuildButton1Typenest_Init();
    gt_PlayerClickedBulkBuildButtonNestMix_Init();
    gt_QueenUpgradeDebuffApplier_Init();
    gt_QueenUpgradeDebuffRemover_Init();
    gt_WorkerUpgradeDebuffApplier_Init();
    gt_WorkerUpgradeDebuffRemover_Init();
    gt_SoldierUpgradeDebuffApplier_Init();
    gt_SoldierUpgradeDebuffRemover_Init();
    gt_SpecialtyUnitUpgradeDebuffApplier_Init();
    gt_SpecialtyUnitUpgradeDebuffRemover_Init();
    gt_BuildingUpgradeDebuffApplier_Init();
    gt_BuildingUpgradeDebuffRemover_Init();
    gt_RockDropStart_Init();
    gt_RockDropExc_Init();
    gt_BastionDrumsExc_Init();
    gt_BerserkerDrumsExc_Init();
    gt_AcidVomitExc_Init();
    gt_LandMineExc_Init();
    gt_LifeSuction_Init();
    gt_LifeShare_Init();
    gt_WaterSpringExc_Init();
    gt_EnergyRegenAura_Init();
    gt_BuildingRegenAura_Init();
    gt_HideBuilding_Init();
    gt_MyWalkingBoots_Init();
    gt_Insanity_Init();
    gt_Web_Init();
    gt_SickeningStrikes_Init();
    gt_GravelPileDies_Init();
    gt_ZombieFungus_Init();
    gt_TightSight_Init();
    gt_ClenchingClaws_Init();
    gt_Disguise_Init();
    gt_ShapeShift_Init();
    gt_EnergyEfficiency_Init();
    gt_ToughenedCharacter_Init();
    gt_SwarmCall_Init();
    gt_FearStare_Init();
    gt_BeastCall_Init();
    gt_BeastBeneath_Init();
    gt_BeastBeneathEnabler_Init();
    gt_BeastInside_Init();
    gt_PiedPiper_Init();
    gt_QueensReinforcements_Init();
    gt_Vodoo_Init();
    gt_Earthquake_Init();
    gt_HealingEmbrace_Init();
    gt_ShieldofThorns_Init();
    gt_CheatDeath_Init();
    gt_TimeOut_Init();
    gt_Fogofwar_Init();
    gt_Curse_Init();
    gt_RiseTheDeadStarted_Init();
    gt_UnitDiesInReviveRegion_Init();
    gt_RiseTheDeadEnded_Init();
    gt_BuildAPlant_Init();
    gt_PreventbuildingPlantationtooclosetodirt_Init();
    gt_PreventbuildingPlantationtooclosetoeachother_Init();
    gt_PassivePlantationPlant_Init();
    gt_giveplayerstiersfromthestartAfterAbilitiesRemovaltemp_Init();
    gt_CheckIfPlayerReaserchedTier3Ability_Init();
    gt_CheckIfPlayerReaserchedTier2Ability_Init();
    gt_CheckIfPlayerReaserchedTier1Ability_Init();
    gt_Startorstopsendingoutspikes_Init();
    gt_SpikeSurvival_Init();
    gt_SpikeDisband_Init();
    gt_WhenRapidEvolutionisdonegivebehaviorqueenduelupgradeslot_Init();
    gt_QueenSprint_Init();
    gt_Wallplacement_Init();
    gt_DroneControlPharaohant_Init();
    gt_MoveAbilityPickup_Init();
    gt_MoveAbilityDropoff_Init();
    gt_WhenDirtDiesCreateRandomDirtDeathModelthendestroyit_Init();
    gt_RapidMutationGhostAnt_Init();
    gt_AttachAbilityIcon_Init();
    gt_RepelAntsLeafCutter_Init();
    gt_WallfinishCreep_Init();
    gt_Cancelwall_Init();
    gt_Dig_Init();
    gt_Queenacidicstrikesstart_Init();
    gt_Queenacidicstrikesend_Init();
    gt_UnlockMutagenicBite_Init();
    gt_UnlockPassivePlantaplant_Init();
    gt_UnlockSpiritsofthegraveyard_Init();
    gt_Spiritsofthegraveyard_Init();
    gt_MutagenicBite_Init();
    gt_SpeedCycle_Init();
    gt_Killescapedqueens_Init();
    gt_Upgradeforagernesttofarm_Init();
    gt_Upgradeforagernesttosubterraneantrail_Init();
    gt_DoubleCollectionFoodActivator_Init();
    gt_DoubleCollectionFoodApplier_Init();
    gt_SelectSoldiersWorkersOwnedByThisNest_Init();
    gt_WhenTunnelTremblerusesPebbelDropcreatePebbeldropmodelattargetLocation_Init();
    gt_Enablestatrecording_Init();
    gt_RespawnFood_Init();
    gt_Fireantresourcescore_Init();
    gt_PlayerleavesRecalculateMainWinchanceswinrates_Init();
    gt_Playerleavesincreasegameswon_Init();
    gt_Playerleavesincreasegamesplayed_Init();
    gt_AlliancechangesChangeAllyCounter_Init();
    gt_PlayerleavesSave_Init();
    gt_PlayerleavesRemoveunits_Init();
    gt_Abilitydig_Init();
    gt_Abilityacidicstrikes_Init();
    gt_Abilityvenomspray_Init();
    gt_Abilitybuildwall_Init();
    gt_AbilityupgradeforagernestFarm_Init();
    gt_AbilityupgradeforagernestSTrail_Init();
    gt_Abilityupgradesoldiernest_Init();
    gt_Abilityupgradebroodlingspawner_Init();
    gt_Abilityupgradeunitdamage1_Init();
    gt_Abilityupgradeunitdamage2_Init();
    gt_Abilityupgradeunitdamage3_Init();
    gt_Abilityupgradeunitarmor1_Init();
    gt_Abilityupgradeunitarmor2_Init();
    gt_Abilityupgradeunitarmor3_Init();
    gt_Abilityupgradesoldierspeed_Init();
    gt_Producequeenblack_Init();
    gt_Producequeenfire_Init();
    gt_Producequeenwood_Init();
    gt_Producewall_Init();
    gt_Produceforager_Init();
    gt_Producesoldier_Init();
    gt_Produceacidsprayer_Init();
    gt_Producemajor_Init();
    gt_Producestinger_Init();
    gt_Produceforagernest_Init();
    gt_Producesoldiernest_Init();
    gt_Producebroodlingspawner_Init();
    gt_Producemajornest_Init();
    gt_Producestingernest_Init();
    gt_Produceacidsprayernest_Init();
    gt_Unitkilled_Init();
    gt_Initializestatsdialog_Init();
    gt_Togglestats_Init();
    gt_HidestatsButton_Init();
    gt_HidestatsKey_Init();
    gt_Initializecontrolgroupdialog_Init();
    gt_Togglectrlgroupconfig_Init();
    gt_HidectrlgroupconfigButton_Init();
    gt_HidectrlgroupconfigKey_Init();
    gt_Setcontrolgroups_Init();
    gt_Initializepatchnotesdialog_Init();
    gt_Togglepatchnotes_Init();
    gt_HidepatchnotesButton_Init();
    gt_HidepatchnotesKey_Init();
    gt_Patchnotesnextbutton_Init();
    gt_Patchnotesnextprevious_Init();
    gt_Initializeleaderboard_Init();
    gt_UpdateleaderboardUnranked_Init();
    gt_UpdateleaderboardUnrankedOld_Init();
    gt_UpdateleaderboardRanked_Init();
    gt_UpdateleaderboardRankedOld_Init();
    gt_UpgReset_Init();
    gt_FeedCommand_Init();
    gt_KnokKnokCommand_Init();
    gt_TellPlayersAboutFeedCommand_Init();
    gt_DisableTesterChecking_Init();
    gt_dance_Init();
    gt_Spawn1Fromeachunittype_Init();
    gt_UnlockUpgrade_Init();
    gt_RevealHideall_Init();
    gt_KillAllDirt_Init();
    gt_ShowMapCords_Init();
    gt_SkinUnlocker_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
